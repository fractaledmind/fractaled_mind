[{"title":"Cleaning up Git repos","url":"/articles/cleaning-up-git-repos/","content":"\u003ch3 id=\"deleting-old-remote-branches\"\u003eDeleting old remote branches\u003c/h3\u003e\n\n\u003cp\u003eIf you have a repository that’s been around for long enough, you probably have a fair number of “stray branches”: deadends, false starts, orphans, etc. Let’s clean up all of the remote branches that haven’t been touched in the last 6 months:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003ek \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"k\"\u003e$(\u003c/span\u003egit branch -r | grep -E -v \u003cspan class=\"s1\"\u003e'\u0026gt;|master|prod'\u003c/span\u003e\u003cspan class=\"k\"\u003e)\u003c/span\u003e; \u003cspan class=\"k\"\u003edo\n  if\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e -z \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003egit log -1 --since\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'6 months ago'\u003c/span\u003e -s \u003cspan class=\"nv\"\u003e$k\u003c/span\u003e\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e; \u003cspan class=\"k\"\u003ethen\n    \u003c/span\u003egit push origin --delete \u003cspan class=\"k\"\u003e$(\u003c/span\u003ecut -d\u003cspan class=\"s2\"\u003e\"/\"\u003c/span\u003e -f2- \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$k\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e)\u003c/span\u003e;\n  \u003cspan class=\"k\"\u003efi\ndone\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWalking through the various steps:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode\u003egit branch -r\u003c/code\u003e lists all remote branches\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003egrep -E -v '\u0026gt;|master|prod'\u003c/code\u003e filters that list of branches, removing any that have \u003ccode\u003e\u0026gt;\u003c/code\u003e (e.g. \u003ccode\u003eorigin/HEAD -\u0026gt; origin/master\u003c/code\u003e), \u003ccode\u003emaster\u003c/code\u003e (e.g. \u003ccode\u003eorigin/master\u003c/code\u003e), or \u003ccode\u003eprod\u003c/code\u003e (e.g. \u003ccode\u003eorigin/prod\u003c/code\u003e) in their names.\u003c/li\u003e\n  \u003cli\u003eIterating over each of these branches (as \u003ccode\u003e$k\u003c/code\u003e), \u003ccode\u003egit log -1 --since='6 months ago' -s $k\u003c/code\u003e checks if the branch has been commited to in the last 6 months (you could obviously set the timeframe to whatever suited your needs).\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecut -d\"/\" -f2- \u0026lt;\u0026lt;\u0026lt; \"$k\")\u003c/code\u003e trims a branch string like \u003ccode\u003eorigin/feature/some_branch\u003c/code\u003e to a string like \u003ccode\u003efeature/some_branch\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003eFinally \u003ccode\u003egit push origin --delete $(...)\u003c/code\u003e removes that branch from the remote repository.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"deleting-already-merged-remote-branches\"\u003eDeleting already-merged remote branches\u003c/h3\u003e\n\n\u003cp\u003eYou may also find yourself needing to remove remote branches that have also already been merged to \u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003egit branch -r --merged origin/master\n| grep -E -v \u003cspan class=\"s1\"\u003e'\u0026gt;|master|prod'\u003c/span\u003e\n| cut -d\u003cspan class=\"s2\"\u003e\"/\"\u003c/span\u003e -f2-\n| xargs git push origin --delete\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHere we see many of the same basic sub-commands we used before. There is, however, one note-worthy difference. We specify the specific branch we want to check whether the remote branches have been merged into by specifying \u003ccode\u003eorigin/master\u003c/code\u003e. This ensures that only remote branches that have been merged into remote \u003ccode\u003emaster\u003c/code\u003e are passed to the next sub-command.\u003c/p\u003e\n\n\u003ch3 id=\"deleting-already-merged-local-branches\"\u003eDeleting already-merged local branches\u003c/h3\u003e\n\n\u003cp\u003eFinally, if you need to clean up your local repository, you can prune the local branches that have already been merged into \u003ccode\u003emaster\u003c/code\u003e in a similar way:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003egit branch -d \u003cspan class=\"k\"\u003e$(\u003c/span\u003egit branch --merged master | grep -E -v \u003cspan class=\"s1\"\u003e'\\*|master|prod'\u003c/span\u003e\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eA word of warning though: have local copies of these branches somewhere, just in case you delete a branch you want back at some point ;)\u003c/p\u003e\n","type":"article"},{"title":"You, Made and Unmade","url":"/articles/you-made-and-unmade/","content":"\u003cp\u003eWhat is time? Time is commonly dissected into three parts: past, present, and future. The past is done, it is set; the future is yet to be done, it is possibility. But what of the present? The present is, in simplest form, the future being made the past. Yet if the present is nothing more than the future being made the past, why is it “the present”, this thing on the same level as the past and future? Well, I think the answer is masked by the passive voice, “being made” by whom? By you. The present is the future being made the past by you.\u003c/p\u003e\n\n\u003cp\u003eHow do you convert the future into the past? What is involved? Again, in simple form, there is you and there are outside stimuli, outside signals. There is you and not-you, which is outside of you. But the two spheres are not totally separate, as you receive many of these external signs and signals; you, via your five senses, have some connection to the not-you. And, in response to those outside signs and signals, you either act or don’t act, you think, you respond. You convert the future into the past by reacting to signals from the not-you.\u003c/p\u003e\n\n\u003cp\u003eSo, what is time? Time is the combination of the not-you things you have done, the not-you things you have yet to do, and the not-you things you are doing. Time is not-you, made and unmade, and you, making. But what is not-you without you? Nothing. Time is you, becoming; time is you, made and unmade.\u003c/p\u003e\n","type":"article"},{"title":"Conjunctive Binarism","url":"/articles/conjunctive-binarism/","content":"\u003cp\u003eEpistemology has fascinated me far longer than I have known what that word means. Built upon the Greek words for “knowledge” (ἐπιστήμη) and “study” (λόγος), epistemology means the study of knowledge. This can (and does) encompass a wide variety of specific ideas: the nature of knowledge, the acquisition of knowledge, the difference between knowledge and opinion, etc. It is a field of inquiry that aims to help us answer questions like “How do I know something?”, “What does it mean to know something?”, “Are some things unknowable?”, etc. Now, before we go too far down this (admittedly intriguing) rabbit-hole, I had said that I wanted to consider alethiology, not epistemology. While epistemology is the study of knowledge, alethiology is the study of truth. The two inquiries are cousins; indeed, one can barely call alethiology a field of inquiry \u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e and is often considered a sub-field of epistemology. The standard definition of knowledge holds that knowledge equals justified true belief \u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote\"\u003e2\u003c/a\u003e\u003c/sup\u003e. In debating the finer points of that definition, academics must then define their terms. What does it mean for a belief to be justified? What does it mean for a belief to be true? What is truth? This context is, I believe, important as it helps to situate the kinds of questions I am interested in pursuing within their general philosophical context. I want to probe around the edges of the question “What is truth?”, which, as we see, has strong implications on the nature of knowledge.\u003c/p\u003e\n\n\u003ch2 id=\"a-primer-on-propositional-logic\"\u003eA Primer on Propositional Logic\u003c/h2\u003e\n\n\u003cp\u003eWhen considering the nature of truth, it is common to think about \u003ca href=\"http://www.iep.utm.edu/prop-log/#H1\"\u003epropositions\u003c/a\u003e. Propositions are simply declarative sentences; they are statements. In most high school English courses we learn that sentences that end with a period (\u003ccode\u003e.\u003c/code\u003e) are declarative sentences (\u003ccode\u003e?\u003c/code\u003e = interrogatives, \u003ccode\u003e!\u003c/code\u003e = interjections). So, that previous sentence was a declarative sentence. So was that one! Ah, now we have an interjection. Well, I could play this game all night (really, I’m easily amused), but the point ought to be clear: propositions == statements == declarative sentences. They are forms of communication that say something is the case. A key characteristic of propositions is that they are either true or false. When I state that something is the case, it either is the case or it isn’t. Either most high school English classes \u003cem\u003edo\u003c/em\u003e teach that sentences ending in a period are declarative sentences, or they don’t. Either that previous sentence is a declarative sentence, or it isn’t. Now, one important thing to note immediately is that we need not be able to determine whether a proposition is true or false; this has no bearing on its “propositionness”. The statement “God exists” is a proposition, it is either true or false; however, we have no way of determining whether it is true or false (regardless of what anyone has ever told you). So, propositions are statements that something is the case that are either true or false, but we need not determine whether they are actually true or actually false for them to be propositions.\u003c/p\u003e\n\n\u003cp\u003eIn academic logic, propositions are generally referred to using the symbolic shorthand \u003ccode\u003eP\u003c/code\u003e. This is the generic proposition, the Ur-proposition, in computer programming terms we might say it is the proposition type. Like algebraic variables, we can use any uppercase letter to designate other propositions. So, for example, if I needed to talk about three propositions, I could use \u003ccode\u003eP\u003c/code\u003e, \u003ccode\u003eQ\u003c/code\u003e, and \u003ccode\u003eR\u003c/code\u003e (these are the common letters used in academic circles, for whatever the reasons). Now, when dealing with multiple propositions there are two key operators that we will use\u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote\"\u003e3\u003c/a\u003e\u003c/sup\u003e: \u003ccode\u003e\u0026amp;\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e. Perhaps these symbols seem a bit foreign, but I promise that their concepts are utterly simple. \u003ccode\u003e\u0026amp;\u003c/code\u003e is the “and” operator; it combines two propositions to make one new proposition, called the “conjunction” of the two propositions. \u003ccode\u003ev\u003c/code\u003e is the “or” operator; it also combines two propositions to make one new proposition, called the “disjunction” of the two propositions. In high school English we would say that “and” and “or” are conjunctions, and just like in English class we can take two declarative sentences and combine them with a conjunction to make a new sentence. Ah, that sentence was a perfect example (almost as if I planned it ;)). So, symbolically we could write \u003ccode\u003eP \u0026amp; Q =\u0026gt; R\u003c/code\u003e and \u003ccode\u003eP v Q =\u0026gt; S\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOk, so propositions can be combined to make new propositions in two different ways, but what precisely is the difference? Well, I’m interested in truth, so you might have already guessed the difference. The difference between \u003ccode\u003eR\u003c/code\u003e and \u003ccode\u003eS\u003c/code\u003e from above is what is required for them to be true. When using the \u003ccode\u003e\u0026amp;\u003c/code\u003e operator to combine \u003ccode\u003eP\u003c/code\u003e and \u003ccode\u003eQ\u003c/code\u003e, the conjunction \u003ccode\u003eR\u003c/code\u003e is only true when \u003cstrong\u003eboth\u003c/strong\u003e \u003ccode\u003eP\u003c/code\u003e and \u003ccode\u003eQ\u003c/code\u003e are themselves true. If either \u003ccode\u003eP\u003c/code\u003e or \u003ccode\u003eQ\u003c/code\u003e is false, then \u003ccode\u003eR\u003c/code\u003e is also false. When using the \u003ccode\u003ev\u003c/code\u003e operator, the disjunction \u003ccode\u003eS\u003c/code\u003e is true if either \u003ccode\u003eP\u003c/code\u003e or \u003ccode\u003eQ\u003c/code\u003e is true. These relationships are most often considered using a “truth table”. Consider the following, which lays out all of the possible scenarios for the \u003ccode\u003e\u0026amp;\u003c/code\u003e operator:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eP\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eQ\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e(P \u0026amp; Q)\u003c/code\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eHere we can clearly see that the expression \u003ccode\u003e(P \u0026amp; Q)\u003c/code\u003e is only true whenever both the proposition \u003ccode\u003eP\u003c/code\u003e and the proposition \u003ccode\u003eQ\u003c/code\u003e are true. This is contrasted with the \u003ccode\u003ev\u003c/code\u003e operator:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eP\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eQ\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e(P v Q)\u003c/code\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eHere the relationship is almost the exact opposite. The expression \u003ccode\u003e(P v Q)\u003c/code\u003e is only \u003cem\u003efalse\u003c/em\u003e whenever both the proposition \u003ccode\u003eP\u003c/code\u003e and the proposition \u003ccode\u003eQ\u003c/code\u003e are false. In every other instance the expression \u003ccode\u003e(P v Q)\u003c/code\u003e is true, as one of the two constituent propositions is true.\u003c/p\u003e\n\n\u003cp\u003eThese two operators handle how the truth values relate when combining two or more propositions, but there is one last operator we need to discuss, which is used on single propositions. The “negation” operator \u003ccode\u003e¬\u003c/code\u003e is used, you guessed it, to negate propositions. The truth table for this operator is pretty straight forward:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eP\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e¬P\u003c/code\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eThe negation operator basically just “flips” the truth value of the proposition.\u003c/p\u003e\n\n\u003cp\u003eWith all of that now settled, we can finally turn to the heart of this excursion.\u003c/p\u003e\n\n\u003ch2 id=\"p--p\"\u003e\u003ccode\u003eP \u0026amp; ¬P\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eNow, I will readily admit that “conjunctive binarism” is a phrase that I totally made up \u003csup id=\"fnref:4\"\u003e\u003ca href=\"#fn:4\" class=\"footnote\"\u003e4\u003c/a\u003e\u003c/sup\u003e, but I was trying to find a phrase that accurately captured the idea I had in my head, which I was initially conceiving of in purely symbolic terms: \u003ccode\u003eP \u0026amp; ¬P\u003c/code\u003e \u003csup id=\"fnref:BB\"\u003e\u003ca href=\"#fn:BB\" class=\"footnote\"\u003e5\u003c/a\u003e\u003c/sup\u003e. In many ways I find the symbolic phrase far clearly than the English phrase “conjunctive binarism”, but hopefully my English phrase at least accurately describes precisely what I’m interested in.\u003c/p\u003e\n\n\u003cp\u003eI said at the beginning that I was interested in the question “What is truth?”, yet now that we have a firmer grasp on what precisely “conjunctive binarism” means, I’m sure that you, my reader, are a bit worried. And, I would say, rightfully so. Here is the truth table for the conjunctive binary:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eP\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e¬P\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e(P \u0026amp; ¬P)\u003c/code\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eWell there you have it, the conjunctive binary \u003ccode\u003e(P \u0026amp; ¬P)\u003c/code\u003e \u003cem\u003ecan never be true\u003c/em\u003e \u003csup id=\"fnref:AA\"\u003e\u003ca href=\"#fn:AA\" class=\"footnote\"\u003e6\u003c/a\u003e\u003c/sup\u003e. In many ways the the simplest, most intuitive answer to the question of “What is truth?” is “I don’t know, but it certainly isn’t \u003ccode\u003e(P \u0026amp; ¬P)\u003c/code\u003e”. In fact, Aristotle himself states this directly in his \u003cem\u003eMetaphysics\u003c/em\u003e\u003csup id=\"fnref:5\"\u003e\u003ca href=\"#fn:5\" class=\"footnote\"\u003e7\u003c/a\u003e\u003c/sup\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThe most certain of all basic principles is that contradictory propositions are not true simultaneously. (1011b13-14)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis idea, that a proposition (\u003ccode\u003eP\u003c/code\u003e) and its contradiction (\u003ccode\u003e¬P\u003c/code\u003e) cannot both be true in the same sense at the same time, is so fundamental to human logical thought that it is a \u003cem\u003elaw\u003c/em\u003e, the Law of Non-Contradiction.\u003c/p\u003e\n\n\u003cp\u003eNow, I am not quite so bold as to suggest that the Law of Non-Contradiction is wrong; however, I would like to press it a bit. The caveats in the definition of the LNC are clearly important. I’m sure we can all think of examples where a proposition (\u003ccode\u003eP\u003c/code\u003e) and its contradiction (\u003ccode\u003e¬P\u003c/code\u003e) are both true, just in different senses. As one contrived examples, the proposition “Citi is a bank” and its contradiction “Citi is not a bank” would both be true if “bank” in the first case meant “a financial institution” and “bank” in the second case meant “the side of a river”. Likewise, if time is not an issue, we can certainly conceive of an example where some proposition is true and then later its contradiction is true. Taking the same contrived example, right now the proposition “Citi is a bank” is true, but if in the future they were to go out of business, the contradiction “Citi is not a bank” would then be true.\u003c/p\u003e\n\n\u003cp\u003eWhat I would like to suggest is that while the Law of Non-Contradiction is strictly true, it is not practically all that helpful when confronting the question “What is truth?”. Specifically, I would argue (and hopefully I will at some point soon) that \u003cem\u003ein the everyday world\u003c/em\u003e one of those two caveats is very likely to be true. That is to say, I contend and my definition of Conjunctive Binarism states that a proposition (\u003ccode\u003eP\u003c/code\u003e) and its contradiction (\u003ccode\u003e¬P\u003c/code\u003e) are likely both true either in different senses or at different times. More simply, I argue that \u003cstrong\u003e\u003ccode\u003e(P \u0026amp; ¬P)\u003c/code\u003e will likely be true \u003cem\u003ein some way\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf I could create my own logical symbol, I would create the “fuzzy” symbol \u003ccode\u003e~\u003c/code\u003e, which would denote the existence of one or more of these caveats. In my logical lexicon the “fuzzy” symbol \u003ccode\u003e~\u003c/code\u003e generally maps to the English word “kinda”. So, in strictest form Conjunctive Binarism would be expressed symbolically as \u003ccode\u003e~(P \u0026amp; ¬P)\u003c/code\u003e, or even more strictly as \u003ccode\u003e(~P ~\u0026amp; ~¬P)\u003c/code\u003e. In plain English we might say “the proposition \u003ccode\u003eP\u003c/code\u003e and its contradiction \u003ccode\u003e¬P\u003c/code\u003e are kinda both true”.\u003c/p\u003e\n\n\u003ch2 id=\"fin\"\u003eFin\u003c/h2\u003e\n\n\u003cp\u003eI plan, in later posts, to explore this thesis from various angles, to consider some of its consequences, and to argue for its correctness. For now, however, I leave it at this: my answer to the question “What is truth?” would be, in a more rigorous and philosophic way than this sounds, “Kinda everything”.\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eThe term “alethiology” is fairly rare in academia; for example, the ten-volume \u003ca href=\"https://en.wikipedia.org/wiki/Routledge_Encyclopedia_of_Philosophy\"\u003eRoutledge Encyclopedia of Philosophy\u003c/a\u003e mentions it only once. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:2\"\u003e\n      \u003cp\u003eFor those readers of a more academic bent, \u003ca href=\"http://plato.stanford.edu/entries/knowledge-analysis/#KnoJusTruBel\"\u003ethis article\u003c/a\u003e from the Stanford Encyclopedia of Philosophy provides a robust explanation of this analysis of knowledge, and indeed of knowledge in general. \u003ca href=\"#fnref:2\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:3\"\u003e\n\n      \u003cp\u003eThere are, in fact, many other logical operators beside these two:\u003c/p\u003e\n\n      \u003ctable class=\"tables\"\u003e\n        \u003cthead\u003e\n          \u003ctr\u003e\n            \u003cth style=\"text-align: center\"\u003eSign\u003c/th\u003e\n            \u003cth style=\"text-align: center\"\u003eOperator\u003c/th\u003e\n          \u003c/tr\u003e\n        \u003c/thead\u003e\n        \u003ctbody\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026amp;\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003e“and”\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003ev\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003e“or”\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e→\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003e“if… then…”\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e↔\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003e“if and only if”\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e¬\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003e“not”\u003c/td\u003e\n          \u003c/tr\u003e\n        \u003c/tbody\u003e\n      \u003c/table\u003e\n\n      \u003cp\u003eSee \u003ca href=\"http://www.iep.utm.edu/prop-log/#SH3a\"\u003ehere\u003c/a\u003e for a more in-depth analysis of them all. \u003ca href=\"#fnref:3\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:4\"\u003e\n      \u003cp\u003eA Google search for the exact phrase “conjunctive binarism” returns \u003ca href=\"https://www.google.com/search?q=%22conjunctive+binarism%22\"\u003eno results\u003c/a\u003e. \u003ca href=\"#fnref:4\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:BB\"\u003e\n      \u003cp\u003eThis construction of the constructive binarism marks it as a close kin of \u003ca href=\"http://plato.stanford.edu/entries/dialetheism/\"\u003edialetheism\u003c/a\u003e, a newer philosophical position that holds that dialetheias do in fact exist, and a dialetheia is simply a sentence, \u003ccode\u003eA\u003c/code\u003e, such that both it and its negation, \u003ccode\u003e¬A\u003c/code\u003e, are true; that is, \u003ccode\u003eA \u0026amp; ¬A\u003c/code\u003e. \u003ca href=\"#fnref:BB\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:AA\"\u003e\n\n      \u003cp\u003eThis is in direct contrast with the disjunctive binary, which is always true.\u003c/p\u003e\n\n      \u003ctable class=\"tables\"\u003e\n        \u003cthead\u003e\n          \u003ctr\u003e\n            \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eP\u003c/code\u003e\u003c/th\u003e\n            \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e¬P\u003c/code\u003e\u003c/th\u003e\n            \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e(P v ¬P)\u003c/code\u003e\u003c/th\u003e\n          \u003c/tr\u003e\n        \u003c/thead\u003e\n        \u003ctbody\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n          \u003c/tr\u003e\n        \u003c/tbody\u003e\n      \u003c/table\u003e\n\n      \u003cp\u003eIn fact, the disjunctive binary, by definition, includes \u003cem\u003eall possible states\u003c/em\u003e, as any state would either be \u003ccode\u003eP\u003c/code\u003e or \u003ccode\u003e¬P\u003c/code\u003e. Since \u003ccode\u003e¬P\u003c/code\u003e is simply the negation of \u003ccode\u003eP\u003c/code\u003e, the disjunction offers a logically exhaustive set of states. \u003ca href=\"#fnref:AA\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:5\"\u003e\n      \u003cp\u003e\u003ca href=\"http://plato.stanford.edu/entries/aristotle-noncontradiction/\"\u003eThis article\u003c/a\u003e from the Stanford Encyclopedia of Philosophy provides a rich analysis of Aristotle on the Law of Non-Contradiction. \u003ca href=\"#fnref:5\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"On Lent and Marriage","url":"/articles/on-lent-and-marriage/","content":"\u003cp\u003eLent is a time of fasting. We deny ourselves an earthly good in order to, hopefully, receive a heavenly good. We fast to clear our minds and reset our hearts, to find balance with ourself and with God. Lent isn’t easy; it isn’t meant to be easy. It isn’t easy to say no, to turn your mind and heart toward God every time your flesh desires that earthly good you’ve denied yourself. It isn’t easy to enact your will–to make a commitment and stand by it– especially when you have committed yourself to a fasting.\u003c/p\u003e\n\n\u003cp\u003eThis Lenten season I am giving up my marriage. I am fasting from my spouse. Let me be clear, I am not ending my marriage; in fact, I pray that this season will deepen and strengthen my marriage. However, for these 40 days my wife and I will be separated, in the full sense of that word. Let me attempt to explain why and how I hope to use this time to better my life, my faith, and my marriage.\u003c/p\u003e\n\n\u003cp\u003eMarriage is hard. I’d go so far as to say it is one of the hardest things a human person could endeavor to do. And I don’t just mean “marriage” in its simple everyday sense–two people who live together, are monogamous, and form a family unit. I mean \u003cem\u003emarriage\u003c/em\u003e; I mean the commitment and the act of grafting your soul to another soul; I mean the pursuit of unconditional love; I mean the coming together of two people to form \u003cem\u003eone\u003c/em\u003e. \u003cstrong\u003eThat\u003c/strong\u003e kind of marriage is \u003cem\u003ehard\u003c/em\u003e. But, I believe that kind of marriage is the most rewarding. That’s the kind of marriage worth fighting for.\u003c/p\u003e\n\n\u003cp\u003eMarriage is hard, and for me, that means specifically that being a husband is hard. It’s hard in ways I cannot even fathom. It’s hard in ways I didn’t fathom when I made my vows. It’s hard in ways I could never hope to communicate to you. It is \u003cem\u003ehard\u003c/em\u003e. And, to be honest, I’ve failed at it time and time again. I would hope that in the simply everyday sense, I’ve been a pretty good husband. I would hope that the world would judge me at least a mediocre husband. But I’m not sure it would. That’s of little matter, however, because in the deep and true sense, I \u003cem\u003eknow\u003c/em\u003e that I have failed as a husband. There is no point in listing out my failures here. First, because I do truly believe that all sins are equal, but our minds are built to rank things. I also won’t list out my particular failings because they are \u003cem\u003emine\u003c/em\u003e. I own them. I am responsible for them. Nothing I say and nothing I do will change that. I confess them to God and make amends to man. I take steps to Pharisaism when I confess them to man and make amends to God.\u003c/p\u003e\n\n\u003cp\u003eMarriage is hard and I am a failed husband. In my life, at this moment, those two facts have now generated a third fact: my wife doesn’t love me. Again, I don’t mean “love” in a trite sense; we’re talking about deep, meaningful love. And love like that isn’t easy. This form of deep and meaningful love comes when you meet another person, another soul, and you \u003cem\u003esee\u003c/em\u003e them. They grant you the ability to truly \u003cem\u003esee\u003c/em\u003e them. And when you see them, when you meet them, when you \u003cem\u003eknow\u003c/em\u003e them, your soul changes. Your soul becomes a little bit more like them. You graft them into your soul and it changes you. Some part of them now \u003cem\u003eis\u003c/em\u003e you, is a part of you. This kind of love is hard. It is hard to open yourself up to another person to allow them to love you like this. It is hard to receive another person if they have opened themselves up to you. It is hard to allow yourself to change because of another person. This kind of love is hard. My wife still likes me, my wife is still fond of me, we are still friends; but my wife no longer \u003cem\u003eloves\u003c/em\u003e me.\u003c/p\u003e\n\n\u003cp\u003eNow, let’s briefly set two things straight. First, I don’t say this to gain your sympathy. 7 billion people on this planet do not love me in this way, do not love you in this way. No one has a right to this kind of love. It is rare and it is given freely. It is never earned and never taken. Marriage is hard and I am failed husband; I have no right to this from her. Second, she is under no obligation to give it to me. She is not “wrong” for not loving me. She simply doesn’t. This is not a matter to be judged or adjudicated; this simply is. We are responsible for our thoughts and our actions, not for our state. Now, our state will factor strongly in our thoughts and actions, but that is beside the point. I am not responsible for being a male, but I am responsible for how I think and how I act \u003cem\u003eas\u003c/em\u003e a male. I am not responsible for being a husband, but I am responsible for how I think and how I act \u003cem\u003eas\u003c/em\u003e a husband. The kind of love we are talking about is so deep, so low, that it is a state. I am not responsible for being a male husband who loves his wife. I simply am that. What I am responsible for is how I live my life \u003cem\u003eas\u003c/em\u003e such a person. And as a male husband who loves his wife, I am responsible for my failings as well as for my successes. And as a female wife who does not love her husband, my wife is responsible for her failings and her successes. But in both cases, the state of our love stands outside of the arena of responsibility. And it stands outside this arena quite simply because we are not in control of it. I have no more control over whether or not I love my wife as she does of whether or not she doesn’t. Actions and thoughts affect our state, but they don’t control it. Certainly, my thoughts and my actions over the course of our marriage have some causal relationship to her current state, but I didn’t \u003cem\u003ecause\u003c/em\u003e her to not love me. And certainly her thoughts and actions have some relation to her current state, but again those things did not \u003cem\u003ecause\u003c/em\u003e them. There is no simple \u003cem\u003ecause\u003c/em\u003e to low-lying states of mind and heart.\u003c/p\u003e\n\n\u003cp\u003eSo, marriage is hard. I am a failed husband. My wife doesn’t love me. These are facts; these are states. This is the spilt milk not worth crying over (though I certainly have cried, about all three facts). The real question, the real challenge, the real point of this post is, what next? How do I respond? How do I think and act next? And my answers to this question are why I am giving up my marriage for Lent.\u003c/p\u003e\n\n\u003cp\u003eI am a computer programmer; I often like to break down complex problems by trying to isolate the constants and the variables. Constants are things that simply \u003cem\u003eare\u003c/em\u003e, variables are things that can, have, and/or will change. So, we might say that “marriage is hard” is a constant. That is like a definition of marriage: it is hard. We could also say that “I am a failed husband” is a constant. It is a statement about the past, it cannot change. Likewise “my wife doesn’t love me” is a constant, insofar as it is simply a statement about the present moment. I would say that “my wife’s love” is a variable; that can and has changed. However, the statement “my wife doesn’t love me” is a constant; it simply is true right now. So, are there any other constants worth taking into consideration when thinking about what to do next. I believe so. First, I believe that I \u003cem\u003eought\u003c/em\u003e to continue to love my wife; this is an ethical constant. I believe that full and deep love is unconditional; this is a definitional constant. I believe that all human beings have the authority and autonomy to exercise their own wills; this is an ontological constant. I also believe that God exists and loves \u003cem\u003eme\u003c/em\u003e; this is a faith constant. So, when I start to take all of these constants into consideration, it makes how I should respond to all of the variables a bit clearer. But before we get there, let’s take a moment to think through some of the things that are variables.\u003c/p\u003e\n\n\u003cp\u003eMy wife loving me is a variable; it could change in the future. My wife being my wife could change. Me loving my wife is variable; that could change. Me being a failed husband, that could change (not in a true ontological sense, but in a true practical sense). These are the key variables in this situation. However, in life, \u003cem\u003emost things are variables\u003c/em\u003e. Life is flux; things change. And few things are as dangerous to living life well as treating variables as constants (another danger: treating constants as variables). This is, to my mind, the main reason not to “cry over spilt milk”; milk being spilt is a variable. You can clean up the milk. You can buy new milk. You can take care not to spill the new milk. Cry about constants.\u003c/p\u003e\n\n\u003cp\u003eSo, I feel like I have some sense of what key things are constants and what things are variables. How does that affect my thinking and my action? If true and deep love is unconditional, and if I ought to continue to love my wife, then I ought to love my wife unconditionally. Now, how do I do that? As I hope you sense, this is far easier said than done. I have, in fact, thought this for years. I have believed that I \u003cem\u003eought\u003c/em\u003e to love my wife unconditionally as long as we have been married. I can say without a shadow of a doubt that I have \u003cem\u003enever\u003c/em\u003e loved her unconditionally. My love always has conditions. I frequently don’t see them in the present, but they always come out, creep to the surface. One of the things I have been wrestling with lately is whether or not loving someone unconditionally was even \u003cem\u003epossible\u003c/em\u003e. Am I barking up the wrong tree here? Is this a fool’s errand? My answer today is, no. It \u003cem\u003eis\u003c/em\u003e possible to love someone unconditionally, and I really only have one piece of evidence to support that. I believe that we can love someone unconditionally because we love \u003cem\u003eourselves\u003c/em\u003e unconditionally. The more I think about it, the clearer it becomes. I fully believe that I have failed in my role as a husband, yet I still love myself. In fact, it wasn’t that hard. I wasn’t always happy with myself, I wasn’t always satisfied, but I can’t remember ever not loving myself. And the reason seems pretty simple. If love, true love, is the other side of true empathy, then how could we ever not empathize with ourselves? I am me, therefore I understand what it is like to be me. I am in my own shoes, so to speak. And certainly it is harder to love another person unconditionally, but I do believe it is possible. I can’t imagine that it is possible to do all the time, to do perfectly, but what is? I’m not searching for perfection, I’m searching for deeply meaningful love.\u003c/p\u003e\n\n\u003cp\u003eMy goal in this Lenten season is to come to love my wife unconditionally. That is my true goal. “Giving up my marriage” for Lent is merely the means I am attempting to reach that end. And the reason I chose that means, that path, is simply because I have come to realize one of the deepest conditions of my love: returned love. I feel slighted, I feel wronged when I love and that love is not returned. “That is unfair”, I say to myself (maybe even to others at times); or even, “That’s just plain stupid”. Why give out love for nothing? I’m devaluing my love. I’m selling my stock short. If you want my love, you have to give me something back in return. And when it comes to my wife, what I want back is deep love. I want her to accept me, to see me as I truly am and to accept and love me. I want her to know me, I want her to join with me in living life. I want to become one. I want her to want me. I want it, I need it. And every time I act out of love and I don’t feel that her response is up to snuff, I feel victimized, hell, I feel dehumanized. I have reached out in love, I have tried to see you and to know you as you truly are, and \u003cem\u003ethis\u003c/em\u003e is what I get in response? Like a petulant child, I cry foul. This isn’t right, this isn’t fair! Well, one of the constants I laid out earlier states that all human beings have the authority and autonomy to exercise their own wills. I also stated earlier that I have no right to my wife’s (or anyone’s) love. It is not owed to me, regardless of what I do or don’t do. Thus, I feel I must give up my marriage for Lent. I must spend 40 days in an emotional desert in the hopes of finding the grace to love without requiring love back. As long as I feel wronged by not being loved by someone, I am utterly incapable of loving that person unconditionally.\u003c/p\u003e\n\n\u003cp\u003eThis brings me, finally, back to the season of Lent. We Christians spend 40 days in fasting as we prepare for Easter, the day that signifies Jesus Christ’s rise from death. And while I do believe that the variables and constants outlined above, the behaviors and thoughts that I espouse, are true for anyone, regardless of religion or faith, these things make the most sense, contain the most truth, when viewed within the light of the Christian faith. Within that light, we see that there are in fact two instances of unconditional love. Not only do we, as humans, unconditionally love ourselves (“love your neighbor as yourself”), but God himself, incarnated, loved each and every one of us unconditionally. He did not require love in return, he simply loved. He loved fully and he loved deeply. He loved to the point of death. He loved in ways and to degrees that I cannot and probably will never fathom. And yet that is my desire. I want to love as Christ loved. But how? How can I ever possibly hope to love like that? I know for a fact that I will never love in that manner on my own. I’ve tried, and every time I have failed. It is beyond me. I am too selfish, too self-centered; I am too \u003cem\u003eme\u003c/em\u003e. I am ontologically, at the core of my being, incapable of giving out love without receiving love. I \u003cem\u003emust\u003c/em\u003e be loved. I, my self, my ego, is nothing, is undefined, until I am loved. There is no subject \u003cem\u003eI\u003c/em\u003e until there is the object \u003cem\u003eme\u003c/em\u003e. My identity, first and foremost, exists as an object in a sentence with some other subject. I can do nothing until He loved me; I am nothing until He loved me. You see (but do I?), I am already loved, I already have all that I need. I can give love to others because I have received love from God, from Christ. I \u003cem\u003eknow\u003c/em\u003e this. This Lent, I pray that I will \u003cem\u003efeel\u003c/em\u003e this. I pray that I will feel God’s love so fully, so deeply, so truly that I can love others unconditionally as easily as I love myself. And so, this Lent, I am giving up my marriage in the hope and with the prayer that by giving God the space, finally, to be the source of my “belovedness” (and not my wife, or my family, or my peers, as it has been in the past), I will grow able to love others (my wife, my family, my peers) as Christ loves me.\u003c/p\u003e\n","type":"article"},{"title":"A Depressed Graduate Student","url":"/articles/a-depressed-graduate-student/","content":"\u003cp\u003eIn my \u003ca href=\"fractaledmind.com/a-failed-graduate-student\"\u003eprevious post\u003c/a\u003e on my time in graduate school, I discussed how I learned to handle failures better. Today, I’m going to talk about how I failed to handle the depression that these mounting failures produced.\u003c/p\u003e\n\n\u003cp\u003eLet’s start where some people find it difficult to start: I have struggled with depression, and odds are that I will stuggle with depression again in my future. This isn’t a sign of weakness; this isn’t something shameful. This is just a fact of my life. I’m a self-critical perfectionist who tends toward absolutist perceptions of reality; of course I’m going to struggle with depression. Unfortunately, when I entered graduate school, I was generally unaware of this likelihood. As with Imposter’s Syndrome, I thought I knew what depression was and I thought I could spot it fairly early on. And, as with Imposter’s Syndrome, it snuck up on me slowly but fiercely.\u003c/p\u003e\n\n\u003cp\u003eWhen you feel like you are failing frequently and regularly, when those failures build up on top of one another, it can start to have odd effects. The more I thought I failed, the more I wanted to succeed in my next task. Yet, the more I thought I failed, the less energy I had to put into that next task. “I’ve failed at these things; I’ll probably fail at this. Why even try so hard?” This is the internal thought-process I assume my mind had. I say “assume” because I never consciously thought anything like this. My conscious mind wanted to succeed, to return to my old form. My unconscious mind seems to have grown more and more weary, more and more gun-shy.\u003c/p\u003e\n\n\u003cp\u003eFor me, depression felt like I was loosing control of my intention. What my conscious mind wanted seemed to have very little effect over what I actually ended up doing. This is the vicious cycle that Imposter’s Syndrome and Depression can generate. The more I thought I was failing, the less energy I could muster to tackle the next task. Putting less energy in, I was more likely to see the result (whatever it might actually be) as a failure, a failure to perform with enough vim and vigor. Failure -\u0026gt; Waning energy -\u0026gt; Failure … on and on.\u003c/p\u003e\n\n\u003cp\u003eI got caught in this cycle for probably two years without really noticing what was happening. This is one of the shittiest things about depression–once you’re in it, it is \u003cem\u003eso much harder\u003c/em\u003e to get out on your own. It’s like trying to run in mud: the more you try, the dirtier and more tired you get, without actually getting as far as you think you should.\u003c/p\u003e\n\n\u003cp\u003eDepression is a spiraling-in on oneself. You are the center of gravity, so \u003cem\u003eyou\u003c/em\u003e cannot generate the outside force to propel yourself out. However, others can. I wish I didn’t take so long to actually talk to someone about how I felt. I was so ashamed of my failures, so oblivious to my depression, so insecure in my position, that I kept everything hidden, consciously. There can be a quiet cloud that lingers over graduate school which says that weakness is death, progress is paramount. In many departments, this isn’t probably actually true, but the shadow remains, and a shadow can be enough. I lived in that shadow for far too long.\u003c/p\u003e\n\n\u003cp\u003eBut, after finally getting to a point where I simply was unable to keep moving forward with all of the stress internalized, I went and got help. I started going to a therapist. This was a wise decision. No practical effects came of it–I didn’t get any diagnoses, no prescriptions–but I did get better. Talking with someone, being honest about my feelings, emotions, fears, got those things outside of my head, put them in front of me, and thus allowed me to see them for the puny things they were. Fear and depression grow in the shadow; in the light, they shrink to their actual sizes.\u003c/p\u003e\n\n\u003cp\u003eSo, I’ve been depressed, I’ve been (and continue to go) to therapy. For anyone out there in anything at all similar to my situation, know that understood weakness is the foundation of wisdom, progress without wisdom is folly, and getting help really will help.\u003c/p\u003e\n","type":"article"},{"title":"A Failed Graduate Student","url":"/articles/a-failed-graduate-student/","content":"\u003cp\u003eI’m no longer a graduate student. I’ve graduated; I’m out. It’s a somewhat odd feeling, made even odder because I haven’t felt like a graduate for the last year. I was in graduate school for 3 years and got my Masters, but for the final year I was a “lame-duck” graduate student–I knew I was leaving, my department knew I was leaving, but I was still there. This lame-duck year has been odd, but it has also been the year where I have grown most, matured more, learned truly important things, and started to better understand myself. Hopefully, I can capture some glimmer of those insights in the few words that follow.\u003c/p\u003e\n\n\u003cp\u003eWhen I started graduate school, I was coming off the single most successful years of my life. I had set lofty goals as an undergraduate, and I had met all of them plus some. I literally thought I was the smartest student at a university of some 10,000 students, and I had enough evidence to convince myself and maybe even some others. I had reached summits I didn’t even know existed when I first started. To put it simply, I hadn’t really ever failed. Then, I started graduate school. I came down from the mountain and entered the valley, starting a new climb. It was odd\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e, certainly, to go from being convinced I was the smartest to feeling deep down that I was one of the dumbest. Everyone knew more than me, everyone knew how to talk better than me, everyone looked calmer than me, everyone was ahead of me. I had heard of “Imposter’s Syndrome” before I came to graduate school, and I thought I knew what it was. I was wrong. You think you’ll be able to spot a “syndrome” when you’re inside of it–“I won’t foolishly think I’m dumb if in actuality I’m not”, I thought. The whole crux of Imposter’s Syndrome is that it is a false perception of reality. I’ll know when I’m perceiving reality incorrectly, won’t I? Well, not to fall too deeply into the Matrix metaphor, but how will you know if your perception of reality is true or not if you don’t have any other external guide? In graduate school, I failed to find such a guide. No one ever told me that I was dumb, that I was saying dumb things, that I was mucking things up; but, no one ever told me otherwise either. For me, this was one of the hardest things about graduate school–I got virtually no feedback, and when I did, it was either generic or negative. The negative feedback, however, was apparently institutional. “Don’t worry about your first year translation exams. Everyone fails and everyone gets bad emails.” This is what multiple upper-classmen in the department told me. Well, I took my first year translation exams; I failed; I got a bad email. Apparently, just like everyone else. But how can I know that my email was “just like” everyone else’s. Why would anyone say something that wasn’t at least based in truth? Why would someone say that it didn’t appear that I \u003cem\u003etruly\u003c/em\u003e knew Latin if that was false? Maybe everyone got somewhat negative emails, but I got the truth, and the truth was horrific. I failed, and I failed hard; a first, but not the last.\u003c/p\u003e\n\n\u003cp\u003eFailure is hard. It’s harder still when you don’t really know how to deal with it. I spent most of graduate school feeling like I had failed in small ways time and time again. Turn in a paper, no response = failure. Turn in a paper late, good response = failure. Bumble a sight-reading in class = failure. Not get through all the assigned reading = failure. Not talk enough in class = failure. Talk too much in class = failure. I’ll let you in on a nasty secret–most of those things I saw as failures, my professors didn’t even notice. One of the most liberating things that came out of me talking to my professors about my desire to leave was learning how surprised they were. They thought I was a good student, added value to the department, did good work, was bright. I never would have thought that. Never. And this is the pernicious trouble with unhandled failure–it blinds you. I couldn’t handle my failures, real or perceived, and so they built up on top of one another. Each increasing the odds that I would see more failures in the future. The more you fail, you more you think of yourself as a failures. What do failures do, they fail, so you expect to fail more, so you see more failures, and the process spirals out of control. To anyone who may read this, \u003cstrong\u003edon’t be stupid, learn to handle failure\u003c/strong\u003e. Well, you would ask, how the hell do I do that? To be honest, I’m not entirely sure still, but I think I’ve gotten better, so I’ll talk about those small advancements.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eNot all failures are created equal.\u003c/em\u003e This may seem obvious, but it took me an unfortunately long time to realize this simple truth. True failures live on a spectrum, some more grievous than others. A typo in this essay is a failure. Missing a bill payment is a failure. Clearly, they are different failures with different weights. Don’t waste your energy lamenting the small ones. If the problem is fixable, fix it and move on. If not, add a mental note to not make that same mistake in the future and move on. Save your energy to lament the big ones.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eLament big failures.\u003c/em\u003e Don’t try to bottle away emotion caused by failure.Don’t try to act like a robot who can rationally handle the failure and move on easily. If you failed, it will make you feel bad. Actually feel that. Allow yourself to sit in that emotion for a bit. Acknowledge its existence. I let way too many failures build up because I thought I had dealt with them simply by rationalizing them. “Failed in this way, by doing these things. Don’t do those things in these situations again. Dealt with.” I was dumb.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eDon’t wallow.\u003c/em\u003e Sit in emotion, but don’t swim in it. You do need to move on. While only rationalizing away a failure will probably cause you more grief further down the road, not actually rationally considering how you failed, what you did to directly cause the failure, and how best to avoid that failure in the future, you will probably just spiral into depression. Failing sucks, but it is a much better learning experience than success.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eTalk with someone.\u003c/em\u003e This can work on a number of fronts. You should actually talk with people to ensure that your sense of the failure (its existence, weight, repercussions) are close to reality. If only I had sat down and had frank conversations with my professors early and often, I would have learned that I was grossly over-estimating the weight of my perceived failures. But, even if you did actually fail, talking to someone ensures that you don’t try to deal with it all on your own. We’re social animals; don’t fight that.\u003c/p\u003e\n\n\u003cp\u003eOK. This little sermonette is over, but I wanted to go down that path because it’s intensely important to me. Learning to deal with failure was the primary benefit of graduate school for me. From what I gather talking to others, it’s an absolutely essential part of any successful individual, whether graduate student or not. More importantly, however, not handling failure well is what sent me into depression. This is a deeper topic for discussion and consideration in another post, but suffice it say that I would wish for no one to become depressed due to perceived failures. I would confidently assert, without knowing anything about you individually, that you almost certainly haven’t failed as badly as you think, the repercussions aren’t as dire as you think, and your worth is still much higher than you think. If you don’t take my word for it, talk to someone else and check; you might be surprised by what they think.\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eThere’s that word again. I will almost certainly return to it, as its monosyllabic gruffness is the closest I can come to capturing reality. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"A Complete PDF Annotation Workflow","url":"/articles/a-complete-pdf-annotation-workflow/","content":"\u003cp\u003eWhen I was in graduate school, I was inundated with PDFs. PDFs of all kinds, from all kinds of sources, with all kinds of needs. Suffice to say, over a few years my tinkering spirit and the sheer number of PDFs I needed to handle led to a collection of tools organized into a workflow that I believe works well, and is thus well worth sharing. In this post I want to outline how I (1) \u003ca href=\"#pdf-preparation\"\u003eprepare PDFs\u003c/a\u003e, (2) \u003ca href=\"#pdf-annotation\"\u003eannotate PDFs\u003c/a\u003e, and (3) \u003ca href=\"#pdf-storage\"\u003estore PDFs\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e{{read more}}\u003c/p\u003e\n\n\u003ch2 id=\"pdf-preparation\"\u003ePDF Preparation\u003c/h2\u003e\n\n\u003cp\u003eWhen you recieve a high volume of PDFs, you come to realize the many various states in which PDFs can be created–books scanned on a flatbed, books scanned by an iPhone, articles downloaded from the internet, PDFs generated from other sources. PDFs truly do come in all shapes and sizes. I, however, want all of my PDFs in one consistent format. I want every page of content to correspond to one PDF page (in constrast to book scans, where two content pages are often scanned into one landscape PDF). I also want to OCR every PDF to ensure that the text content is machine readable (and thus selectable in any PDF reader). I finally want to keep a consistent naming scheme for all of my PDFs. So, how does one get from point A to point B?\u003c/p\u003e\n\n\u003cp\u003eLet’s begin with normalizing PDF page layout. For anyone who has ever had to manually split scanned PDFs, you know how mind-numbly boring and tedious such work is. Yet, we do it because we must. If there is anything worse than maunally splitting PDF pages, it dealing with double page PDF scans. Well, I abhor tedium, so I set out to remove this particular tedium from my life. My solution, which I will get to below, however, relies on an application that will come up frequently in this post, so it’s worth discussing here now. I use, almost exclusively, the Mac application \u003ca href=\"http://skim-app.sourceforge.net/\"\u003eSkim\u003c/a\u003e for my PDF-related tasks. This is primarily because Skim is \u003ca href=\"http://sourceforge.net/p/skim-app/wiki/Features/\"\u003eincredibly powerful\u003c/a\u003e, but also because it grants access to much of this functionality via \u003ca href=\"http://sourceforge.net/p/skim-app/wiki/AppleScript/\"\u003erobust AppleScript support\u003c/a\u003e. This allows tinkerers like myself to further extend it functionality. Many of the tools described in this post are uniquely built on top of Skim, so if you want to use the tool, you have to use the app. Luckily, the app is free to download, an open source project, and thoroughly stable. However, I understand if you already have your own preferred PDF application, so I will mark all Skim-dependent tools accordingly.\u003c/p\u003e\n\n\u003cp\u003eBack to automagically splitting PDF pages. Using a handful of Skim’s awesome features, I have written an AppleScript which will split two-page scanned PDFs for you. The script itself is a part of my \u003ca href=\"http://fractaledmind.com/projects/skimmer/\"\u003eSkimmer project\u003c/a\u003e, which is one of my many Alfred Workflows. For those who want the simplest access to this functionality, I would recommend getting \u003ca href=\"http://www.alfredapp.com/\"\u003eAlfred\u003c/a\u003e and downloading the workflow. If, however, you simply want the AppleScript itself, you can find it \u003ca href=\"https://github.com/smargh/alfred_skimmer/blob/master/source/action_pdf-splitter.applescript\"\u003ein the GitHub repo\u003c/a\u003e. In short, it asks you to determine the PDF orientation and then in the background splits the entire PDF. If you deal with many scanned PDFs, this will be a major time-saver.\u003c/p\u003e\n\n\u003cp\u003eWhen it comes to \u003ca href=\"http://en.wikipedia.org/wiki/Optical_Character_Recognition\"\u003eOptical Character Recognition\u003c/a\u003e, I use the open source \u003ca href=\"http://en.wikipedia.org/wiki/Tesseract_(software)\"\u003e\u003ccode\u003etesseract\u003c/code\u003e\u003c/a\u003e utility. It can be a bit tricky to install, as it requires compilation and has a number of compiled dependencies. Building off of the work of \u003ca href=\"https://twitter.com/ryanfb\"\u003eRyan Baumann\u003c/a\u003e, I have created \u003ca href=\"https://gist.github.com/smargh/cd2fc4125bef57bcb3e2\"\u003ea Gist\u003c/a\u003e to simplify installing \u003ccode\u003etesseract\u003c/code\u003e on a Mac\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e#!/usr/bin/env bash\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Check for Homebrew,\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# Install if we don't have it\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e ! \u003cspan class=\"k\"\u003e$(\u003c/span\u003ewhich brew\u003cspan class=\"k\"\u003e)\u003c/span\u003e; \u003cspan class=\"k\"\u003ethen\n  \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Installing homebrew...\"\u003c/span\u003e\n  ruby -e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ecurl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n\u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# Ensure `homebrew` is up-to-date and ready\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Updating homebrew...\"\u003c/span\u003e\nbrew doctor\n\n\u003cspan class=\"c\"\u003e# Ensure the Homebrew cache directory exists\u003c/span\u003e\nmkdir ~/Library/Caches/Homebrew\n\n\u003cspan class=\"c\"\u003e# Install leptonica with TIFF support (and every other format, just in case)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Installing leptonica...\"\u003c/span\u003e\nbrew install --with-libtiff --with-openjpeg --with-giflib leptonica\n\n\u003cspan class=\"c\"\u003e# Install Ghostscript\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Installing ghostscript...\"\u003c/span\u003e\nbrew install gs\n\n\u003cspan class=\"c\"\u003e# Install ImageMagick with TIFF and Ghostscript support\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Installing imagemagick...\"\u003c/span\u003e\nbrew install --with-libtiff --with-ghostscript imagemagick\n\n\u003cspan class=\"c\"\u003e# Install Tesseract devel with all languages\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Installing tesseract...\"\u003c/span\u003e\nbrew install --devel --all-languages tesseract\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eOnce you have \u003ccode\u003etesseract\u003c/code\u003e installed, it can also be a bit complicated to run it from the Terminal. Again, I have \u003ca href=\"https://gist.github.com/smargh/0581e6199049ea7c51df\"\u003ea Gist\u003c/a\u003e to simplify this process. It is a simple function that accepts a path to a PDF. It will convert the PDF to the appropriate format for \u003ccode\u003etesseract\u003c/code\u003e\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote\"\u003e2\u003c/a\u003e\u003c/sup\u003e, split the PDF into one file per page, OCR that collection of files, and recombine everything into one OCR’d PDF:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e#!/usr/bin/env bash\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# courtesy of : \u0026lt;https://ryanfb.github.io/etc/2014/11/13/command_line_ocr_on_mac_os_x.html\u0026gt;\u003c/span\u003e\n\nocr\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# get name of input pdf\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebasename \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e .pdf\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Prefix is: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$PREFIX\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n\n  \u003cspan class=\"c\"\u003e# check for any `tesseract` flags\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e ! -z \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$TESSERACT_FLAGS\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e; \u003cspan class=\"k\"\u003ethen\n    \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Picked up TESSERACT_FLAGS: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$TESSERACT_FLAGS\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\n  \u003cspan class=\"c\"\u003e# use `imagemagick` to convert pdf to individual `.tif` files\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Converting to TIFF...\"\u003c/span\u003e\n  convert -density 300 \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e -type Grayscale -compress lzw -background white +matte -depth 32 \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e_page_%05d.tif\"\u003c/span\u003e\n\n  \u003cspan class=\"c\"\u003e# use `tesseract` to OCR those individual `.tif` files\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Performing OCR...\"\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e -v parallel \u0026gt;/dev/null 2\u0026gt;\u0026amp;1; \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e# if you can, parallelize this process using GNU Parallel\u003c/span\u003e\n    parallel --bar \u003cspan class=\"s2\"\u003e\"tesseract \u003c/span\u003e\u003cspan class=\"nv\"\u003e$TESSERACT_FLAGS\u003c/span\u003e\u003cspan class=\"s2\"\u003e {} {.} pdf 2\u0026gt;/dev/null\"\u003c/span\u003e ::: \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e_page_\u003cspan class=\"k\"\u003e*\u003c/span\u003e.tif\n  \u003cspan class=\"k\"\u003eelse\n    for \u003c/span\u003ei \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e_page_\u003cspan class=\"k\"\u003e*\u003c/span\u003e.tif; \u003cspan class=\"k\"\u003edo\n      \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"OCRing \u003c/span\u003e\u003cspan class=\"nv\"\u003e$i\u003c/span\u003e\u003cspan class=\"s2\"\u003e...\"\u003c/span\u003e\n      tesseract \u003cspan class=\"nv\"\u003e$TESSERACT_FLAGS\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$i\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebasename \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$i\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e .tif\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e pdf 2\u0026gt;/dev/null\n    \u003cspan class=\"k\"\u003edone\n  fi\u003c/span\u003e\n\n  \u003cspan class=\"c\"\u003e# combine individual OCR'd pdf pages back into a single OCR'd pdf using `ghostscript`\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Combining output to \u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e-OCR.pdf...\"\u003c/span\u003e\n  gs -q -dNOPAUSE -dBATCH -sDEVICE\u003cspan class=\"o\"\u003e=\u003c/span\u003epdfwrite -sOutputFile\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e__OCR.pdf\"\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e_page_\u003cspan class=\"k\"\u003e*\u003c/span\u003e.pdf \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\n\n  \u003cspan class=\"c\"\u003e# delete all of the individual files (both `.tif` and `.pdf`)\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Cleaning up...\"\u003c/span\u003e\n  rm \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e_page_\u003cspan class=\"k\"\u003e*\u003c/span\u003e.tif \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e_page_\u003cspan class=\"k\"\u003e*\u003c/span\u003e.pdf\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis script makes OCRing a PDF as simple as \u003ccode\u003e$ ocr ~/path/to/my.pdf\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFinally, when it comes to naming conventions, I try to be authoritarian and consistent. The real goal is consistency, and however you decide to name your files, be sure to stick with it. I want make any explicit recommendations, as it truly does depend on your particular situation, but I will recommend a few apps and utilities that will make it easier for your to enforce consistency once you have determined your naming schema. The first is \u003ca href=\"http://www.noodlesoft.com/hazel.php\"\u003eHazel\u003c/a\u003e, which is a Mac app that will watch certain folders for you, waiting for some criteria to be met and then perform certain actions. For example, you have it watch the folder where you stick all your PDFs, and then rename any PDFs which don’t follow your naming convention. \u003ca href=\"http://www.documentsnap.com/use-hazel-to-magically-process-downloaded-pdfs/\"\u003eDocumentSnap\u003c/a\u003e has a good tutorial on one way you can achieve this functionality. Another app/utility is \u003ca href=\"http://manytricks.com/namemangler/\"\u003eName Mangler\u003c/a\u003e, which provides a number of features to make batch renaming a breeze. Whatever your choice, having a consistently, universally applied naming schema will greatly help you in the long run.\u003c/p\u003e\n\n\u003ch2 id=\"pdf-annotation\"\u003ePDF Annotation\u003c/h2\u003e\n\n\u003cp\u003ePDF annotation has led me down a long and winding path, but in the end I believe I’ve reached something like my own personal PDF nirvana. Grant me your patience for a bit as I (speedily) recall some major points on this personal journey.\u003c/p\u003e\n\n\u003cp\u003eFor me, my fascination with PDF annotation started with two versions of an Applescript to extract PDF annotations from \u003ca href=\"http://skim-app.sourceforge.net/\"\u003eSkim\u003c/a\u003e. The original was by John Sidiropolus over at \u003ca href=\"http://www.organognosi.com/export-skim-notes-according-to-their-highlight-colors/\"\u003eOrganoGnosi.com\u003c/a\u003e, and then \u003ca href=\"http://drosophiliac.com/2012/09/creating-a-custom-url-scheme-via-applescript-and-python.html\"\u003eWalton Jones at drosophiliac.com\u003c/a\u003e worked up his own version of the script. Building on their great work, I wrote a script that would export all of your Skim annotations (not just highlights) and could handle a 300+ page book in seconds (the original scripts really lagged on any PDFs with triple-digit page numbers). In \u003ca href=\"https://gist.github.com/smargh/63d8c8ff251068a275b8\"\u003emy latest version of the script\u003c/a\u003e, I had an Applescript application that would extract all of my Skim annotations, format them into beautiful HTML, and create a new Evernote note where I had hyperlinks that would open the PDF in Skim to the exact page referenced. This script has served me well for months.\u003c/p\u003e\n\n\u003cp\u003eThis mini-history skips, however, the \u003cem\u003ecoolest\u003c/em\u003e feature of this script. In \u003ca href=\"http://drosophiliac.com/2012/09/creating-a-custom-url-scheme-via-applescript-and-python.html\"\u003ea companion piece\u003c/a\u003e to his post on his own export script, Walton Jones describes how he created a custom URL scheme to allow him to generate hyperlinks for his notes. His method relied on a combination of Applescript and Python, as well as his own rigid PDF naming conventions. This is truly amazing in my book. This allows me to engage in information extraction while retaining the ability to return information to its context. When I annotate an OCR’d PDF, I can extract what I believe to be the essential information\u003csup id=\"fnref:xx\"\u003e\u003ca href=\"#fn:xx\" class=\"footnote\"\u003e3\u003c/a\u003e\u003c/sup\u003e, then view only that information (in an Evernote note in this instance) or view that information in its original context (the PDF) by clicking a link that opens the PDF to the exact page with that content.\u003c/p\u003e\n\n\u003cp\u003eWhen I got my iPad, however, I immediately came across an annoyance. One of the best features of \u003ca href=\"https://evernote.com/\"\u003eEvernote\u003c/a\u003e is its cross-platform capabilities. So I could read my annotation summaries on my iPad, but the hyperlinks were totally useless. Since they were custom URLs that required a custom handler on the Mac, iOS doesn’t recognize them. I spent some time thinking about how I could have my hyperlinks work on iOS when I came to discover the Wild West of iOS–url schemes. While there are a crazy number of interesting things one can accomplish with URL schemes on iOS,\u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote\"\u003e4\u003c/a\u003e\u003c/sup\u003e in their simplest form they function just like internet urls; they let you jump directly to a specific location.\u003c/p\u003e\n\n\u003cp\u003eEach iOS app has to register their own URL scheme (if they do at all), which is one of the main reasons I describe this realm as the Wild West of iOS. There is often very little documentation of an app’s URL scheme (since its really primarily a “power user feature”) and there isn’t really any standardization.\u003csup id=\"fnref:4\"\u003e\u003ca href=\"#fn:4\" class=\"footnote\"\u003e5\u003c/a\u003e\u003c/sup\u003e Well, I jumped into this jungle searching for a PDF app that had a URL scheme that would allow me to jump to a specific PDF and a specific page. This was 4 months ago. Unfortunately, no such PDF application had a robust enough URL scheme. The top tier applications would allow you to open a specific PDF, but none of them would let you specify a page.\u003csup id=\"fnref:5\"\u003e\u003ca href=\"#fn:5\" class=\"footnote\"\u003e6\u003c/a\u003e\u003c/sup\u003e So, I put in a number of feature requests and waited.\u003c/p\u003e\n\n\u003cp\u003eFinally, the folks at \u003ca href=\"http://smilesoftware.com/\"\u003eSmile Software\u003c/a\u003e upgraded \u003ca href=\"https://itunes.apple.com/us/app/pdfpen-for-ipad/id490774625?mt=8\"\u003ePDFPen for iPad\u003c/a\u003e as well as \u003ca href=\"https://itunes.apple.com/us/app/pdfpen-for-iphone/id557705455?mt=8\"\u003ePDFPen for iPhone\u003c/a\u003e to include a page specific URL scheme. This has finally opened the door to a cross-platform, wiki-style PDF workflow. In order for this workflow to, well, flow, we need two components: (1) a custom URL handler for the Mac and (2) a script to export PDF annotations with this custom URL embedded in the links. Luckily for you :) I have two such things.\u003c/p\u003e\n\n\u003ch3 id=\"the-url-handler\"\u003eThe URL Handler\u003c/h3\u003e\n\n\u003cp\u003eThe PDFPen for iPad app handles a URL scheme like this: \u003ccode\u003epdfpen:///filename.pdf?pg=2\u003c/code\u003e. There are a few things to note here. First, PDFPen does not currently have any folder system, so you will never have to deal with any other elements besides filename and page number. Second, the identifier (\u003ccode\u003epdfpen\u003c/code\u003e) is followed by a colon and then \u003cstrong\u003ethree\u003c/strong\u003e backslashes (\u003ccode\u003e///\u003c/code\u003e), not two. In order to have these urls function on the Mac, I needed to write an Applescript URL handler. Luckily, Applescript has built into it the \u003ccode\u003eon open location\u003c/code\u003e function. This allows you to script responses to clicks of URL types, essentially letting you register your own custom URL schemes with OS X.\u003c/p\u003e\n\n\u003cp\u003eMy URL handler for the PDFPen URL scheme faced one major hurdle. Since the PDFPen URL scheme only has the file name, the URL handler on the Mac needs to determine the file path of a PDF from only its filename. My solution relies on\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003esaving my PDFs to a cloud folder, like Dropbox\u003c/li\u003e\n  \u003cli\u003eusing a shell script to get the file path of every file in that folder\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn short, the URL handler searches my synced folder, where I know the PDF resides and generates a list of all of the files in that folder (including all sub-folders). It then searches that list for the item with the filename, and thus grabs the file path of the PDF on your Mac. This works well for me, but if anyone has another suggestion, drop me a line in the comments.\u003c/p\u003e\n\n\u003cp\u003eIf you want to view my URL handler script, visit my GitHub page \u003ca href=\"https://gist.github.com/smargh/7064788\"\u003ehere\u003c/a\u003e. If you simply want to download the application, so that the .plist file is correct, and everything \u003cem\u003ejust works\u003c/em\u003e, then you can \u003ca href=\"https://dl.dropboxusercontent.com/u/98731674/PDFPen%20URL%20Handler%20copy.zip\"\u003edownload it\u003c/a\u003e. Please note, however, that for the application to work “out of the box”, you need to save all of your cross-platform PDFs to your Dropbox folder on the Mac. Otherwise, the handler won’t be able to find the file path of your PDF.\u003c/p\u003e\n\n\u003ch3 id=\"exporting-skim-annotations-with-the-pdfpen-url-scheme\"\u003eExporting Skim Annotations with the PDFPen URL scheme\u003c/h3\u003e\n\n\u003cp\u003eThis is the central script for the workflow. This script extracts and exports all of your Skim annotations directly to Evernote with the proper PDFPen urls embedded in the annotations. This script is all-in-one. It begins by displaying three prompts:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eWhere you want to save the PDF, you need to ensure that it is saved in the Folder that your url handler scours.\u003c/li\u003e\n  \u003cli\u003eInput a number that relates the printed page number of the PDF to the indexed page number.\u003csup id=\"fnref:6\"\u003e\u003ca href=\"#fn:6\" class=\"footnote\"\u003e7\u003c/a\u003e\u003c/sup\u003e As the prompt directs, all you need to do is subtract the printed page number from the indexed page number. If this means that you have a negative number, simply use a \u003ccode\u003e-\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003eWhether the current PDF is a primary text or a secondary text. Depending on your answer, the script translates your highlight colors differently.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOnce you respond to these prompts, the script generally runs in about 3-5 seconds. Whenever the new Evernote note is created, the script displays a \u003ca href=\"http://growl.info/\"\u003eGrowl notification\u003c/a\u003e (if you have Growl installed).\u003c/p\u003e\n\n\u003cp\u003eThe script will export all of your Skim annotations to an Evernote notebook entitled “PDF Notes”. If such a notebook doesn’t exist, the script will create it. It will also assign two tags to the note: a “notes” tag and a “pdfpen”, both of which, if they don’t exist, will be created. As always, the script generates beautifully formatted html notes in Evernote, with clear section divisions and key information at the top. I use Skim’s text notes only for section headers, so the script will take all text notes and generate a Table of Contents at the top of the note. It also treats all yellow highlights as Summary text, and puts the Text Summary right after the ToC. All of the other annotations are grouped by type in the rest of the note. Here’s an example of an annotation summary note in Evernote:\u003c/p\u003e\n\n\u003cp\u003eFinally, of course, the script automatically embeds the PDFPen urls into the individual annotations. Since we input the relation of the printed page number to the indexed page number, the actual Evernote note displays the printed page number, while the url will take you to the proper indexed page number.\u003c/p\u003e\n\n\u003cp\u003eIf you want to grab this script, head over to my \u003ca href=\"https://gist.github.com/smargh/7065110\"\u003eGist\u003c/a\u003e and save the script as an application, so you can launch it from \u003ca href=\"http://www.alfredapp.com/\"\u003eAlfred\u003c/a\u003e, \u003ca href=\"http://obdev.at/products/launchbar/index.html\"\u003eLaunchBar\u003c/a\u003e, or \u003ca href=\"http://www.apptivateapp.com/\"\u003eApptivate\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor those of you who don’t have an iPad or simply prefer to have your PDFs spread about your file system, I have another version of the script that uses my own custom URL scheme which will encode the full path to the PDF\u003csup id=\"fnref:zz\"\u003e\u003ca href=\"#fn:zz\" class=\"footnote\"\u003e8\u003c/a\u003e\u003c/sup\u003e. This is actually the script that I use in my Alfred Workflow \u003ca href=\"http://fractaledmind.com/projects/skimmer\"\u003eSkimmer\u003c/a\u003e, which is by far the simplest way to use this functionality.\u003c/p\u003e\n\n\u003ch2 id=\"pdf-storage\"\u003ePDF Storage\u003c/h2\u003e\n\n\u003cp\u003eAs some of my previous comments will no doubt suggest, I highly recommend that your have a clear plan for where you will store your (consistently named) PDFs. Chaos in any part of your PDF workflow will breed chaos in other places as well. Moreover, both of the versions of the annotation exporting scripts require the PDFs to be sedentary. Again, I won’t recommend where or how to store your PDFs, but I can make some suggestions on tools.\u003c/p\u003e\n\n\u003cp\u003eOnce again, \u003ca href=\"http://www.noodlesoft.com/hazel.php\"\u003eHazel\u003c/a\u003e will prove adept at this sort of task. You can tell it to watch certain folders (like your \u003ccode\u003e/Downloads\u003c/code\u003e, \u003ccode\u003e/Documents\u003c/code\u003e, and/or \u003ccode\u003e/Desktop\u003c/code\u003e) for PDF files, and then have it move any PDFs put there to another location (maybe even changing the file name as it does so). Alternatively, you could opt for the big guns and use \u003ca href=\"http://www.devontechnologies.com/products/devonthink/overview.html\"\u003eDEVONthink\u003c/a\u003e, which offers an entire app dedicated to file management, with AI, sorting, searcing, indexing, and all sorts of whiz-bang features. It’s not a cheap app, but many people\u003csup id=\"fnref:yy\"\u003e\u003ca href=\"#fn:yy\" class=\"footnote\"\u003e9\u003c/a\u003e\u003c/sup\u003e swear by its power and capabilities.\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003ePDFs can be a pain in the butt, but they are also vitally important in today’s world. So much information is still transferred via PDF. I hope that some of these tools, some of these ideas at least, can help you handle your PDFs better and with less stress.\u003c/p\u003e\n\n\u003cp\u003eAs always, if you have thoughts, questions, or suggestions, drop me a line.\u003c/p\u003e\n\n\u003cp\u003estephen\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eThe installation script has been tested on 10.9 and 10.10. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:2\"\u003e\n      \u003cp\u003e\u003ccode\u003etesseract\u003c/code\u003e prefers files in \u003ccode\u003e.tif\u003c/code\u003e format. \u003ca href=\"#fnref:2\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:xx\"\u003e\n      \u003cp\u003eThis uses highlight colors as a signal for various types of information. \u003ca href=\"#fnref:xx\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:3\"\u003e\n      \u003cp\u003eIf you’re interested, check out \u003ca href=\"http://www.macstories.net/tag/url-scheme/\"\u003eFrederico Viticci’s work\u003c/a\u003e or \u003ca href=\"http://www.geekswithjuniors.com/ios-url-schemes/\"\u003eEric Pramona\u003c/a\u003e \u003ca href=\"#fnref:3\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:4\"\u003e\n      \u003cp\u003eThere is beginning to be some standardization thanks to the work of Greg Pierce and Marco Arment’s \u003ca href=\"http://x-callback-url.com/\"\u003ex-callback-url specificiation\u003c/a\u003e. \u003ca href=\"#fnref:4\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:5\"\u003e\n      \u003cp\u003e\u003ca href=\"http://www.branchfire.com/iannotate/\"\u003eiAnnotate\u003c/a\u003e uses the \u003ccode\u003eiannotate://open//\u003c/code\u003e scheme. \u003ca href=\"https://itunes.apple.com/us/app/goodreader-for-ipad/id363448914?mt=8\"\u003eGoodReader\u003c/a\u003e uses the \u003ccode\u003egropen://\u003c/code\u003e scheme. \u003ca href=\"https://itunes.apple.com/us/app/pdf-expert-fill-forms-annotate/id393316844?mt=8\"\u003ePDF Expert\u003c/a\u003e uses the \u003ccode\u003epdfefile:///folder1/filename.pdf?cc=1\u003c/code\u003e scheme. \u003ca href=\"#fnref:5\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:6\"\u003e\n      \u003cp\u003eJohn Sidiropolus has a great explanation of the various ways in which printed page numbers can relate to indexed page numbers in \u003ca href=\"http://www.organognosi.com/latin-page-numbers-arabic-page-numbers-and-the-fifth-skim-note/\"\u003ethis post\u003c/a\u003e. \u003ca href=\"#fnref:6\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:zz\"\u003e\n      \u003cp\u003eNaturally, this still requires you to not move the PDF once you export the annotations. Again, having a consistent naming schema and a consistent storage plan will only help you in the long run. \u003ca href=\"#fnref:zz\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:yy\"\u003e\n      \u003cp\u003eCheck out \u003ca href=\"http://nerdquery.com/search.php?query=devonthink\u0026amp;search=1\u0026amp;category=24\u0026amp;catid=24\u0026amp;type=and\u0026amp;results=50\u0026amp;db=0\u0026amp;prefix=0\u0026amp;media_only=0\"\u003eGabe Weatherhead’s posts\u003c/a\u003e on macdrifter.com as well as his appearance on \u003ca href=\"http://www.relay.fm/mpu/251\"\u003eMac Power Users\u003c/a\u003e for a clear guide and why and how DEVONthink could work within a larger workflow. \u003ca href=\"#fnref:yy\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"Example Article","url":"/articles/example-article/","content":"\u003cp\u003eThis is an example article. It contains a wide range of various content to demonstrate how this blog styles such content. For example, this is some text with a footnote.\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003cp\u003e{{read more}}\u003c/p\u003e\n\n\u003cp\u003eThis is a way to determine the number of characters per line in the various layouts:\u003c/p\u003e\n\n\u003cp\u003e0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\u003c/p\u003e\n\n\u003cp\u003eThis text is \u003cem\u003eitalic\u003c/em\u003e, while this is \u003cstrong\u003ebold\u003c/strong\u003e, and this is a \u003ca href=\"smargh.github.io\"\u003elink\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor code, you have two types:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003einline code\u003c/code\u003e\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003ekwargs\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"n\"\u003elist_comp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)]\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThis is an example block quote. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"h1\"\u003eH1\u003c/h1\u003e\n\n\u003ch2 id=\"h2\"\u003eH2\u003c/h2\u003e\n\n\u003ch3 id=\"h3\"\u003eH3\u003c/h3\u003e\n\n\u003ch4 id=\"h4\"\u003eH4\u003c/h4\u003e\n\n\u003ch5 id=\"h5\"\u003eH5\u003c/h5\u003e\n\n\u003cp\u003e\u003cimg alt=\"fractal\" src=\"images/dragon_curve.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFor example, a list:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eItem number one\u003c/li\u003e\n  \u003cli\u003eItem number two\n    \u003cul\u003e\n      \u003cli\u003eA nested item\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eA final item\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eor with numbers!\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eRemember to buy some milk\u003c/li\u003e\n  \u003cli\u003eDrink the milk\u003c/li\u003e\n  \u003cli\u003eTweet that I remembered to buy the milk, and drank it\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThis is a sample table:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003eOperator\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e==\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eequal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e!=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003enot equal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eless than (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003egreater than (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eless than or equal (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003egreater than or equal (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003ein_range(attribute, min_value, max_value)\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003enumeric values within the range of min_value through max_value in the specified attribute\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003efin.\u003c/p\u003e\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eThis is a footnote for my \u003ccode\u003eExample Article\u003c/code\u003e. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"BibQuery","url":"projects/bibquery","content":"\u003ch4 id=\"version-101\"\u003eVersion: 1.0.1\u003c/h4\u003e\n\n\u003ch4 id=\"download-from-packalhttpwwwpackalorgworkflowbibquery\"\u003eDownload from \u003ca href=\"http://www.packal.org/workflow/bibquery\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eBibQuery is essentially a visual clone of \u003ca href=\"http://fractaledmind.com/projects/zotquery/\"\u003eZotQuery\u003c/a\u003e for the Mac app \u003ca href=\"http://bibdesk.sourceforge.net/\"\u003eBibDesk\u003c/a\u003e, which is a citation manager for \u003ca href=\"http://www.bibtex.org/\"\u003eBibTeX\u003c/a\u003e. Users of BibDesk can now enjoy the clean search interface found in ZotQuery, with clear icons for publication type and clean presentation of publication data.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"bibquery.png\" src=\"https://www.evernote.com/shard/s41/sh/e354f593-a127-47e9-8ec3-212124341231/39f92d48e93282af26881d5cc0e95e97/deep/0/bibquery.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eUsers can also search their \u003ccode\u003e.bib\u003c/code\u003e databases with the same variety of queries:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003egeneral (keywords: \u003ccode\u003ebib\u003c/code\u003e or \u003ccode\u003eb\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003etitles (keywords: \u003ccode\u003ebib:t\u003c/code\u003e or \u003ccode\u003ebt\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003ecreators (keywords: \u003ccode\u003ebib:a\u003c/code\u003e or \u003ccode\u003eba\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003ein-keyword (keywords: \u003ccode\u003ebib:nk\u003c/code\u003e or \u003ccode\u003ebnk\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003ein-group (keywords: \u003ccode\u003ebib:ng\u003c/code\u003e or \u003ccode\u003ebng\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003efor keyword (keywords: \u003ccode\u003ebib:k\u003c/code\u003e or \u003ccode\u003ebk\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003efor group (keywords: \u003ccode\u003ebib:g\u003c/code\u003e or \u003ccode\u003ebg\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAlso of note, BibQuery works \u003cem\u003ewithout\u003c/em\u003e BibDesk being open and even functions if you have multiple \u003ccode\u003e.bib\u003c/code\u003e databases that BibDesk manages. In short, BibQuery brings all of your citations to you.\u003c/p\u003e\n\n\u003cp\u003eOnce you find the item you're looking for, BibQuery currently has 3 possible actions:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eyou can open up BibDesk to that item (simply press \u003ccode\u003ereturn\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eyou can copy a LaTeX cite command for that item (simply press \u003ccode\u003econtrol+return\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eyou can open that item's PDF attachment, if it has one (simply press \u003ccode\u003eshift+return\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n","type":"project"},{"title":"Classical Studies Resources","url":"projects/classical-studies-resources","content":"\u003cp\u003eThis is a work-in-progress collection of structured data and scripts for Classical Studies/Classics.\u003c/p\u003e\n\n\u003cp\u003eThe data has been compiled and organized from various online resources including:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ethe \u003ca href=\"http://www.perseus.tufts.edu/\"\u003ePerseus Project\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://dcc.dickinson.edu/\"\u003eDickenson College Commentaries\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://dge.cchs.csic.es/index.en\"\u003eThe Diccionario Griego-Español Project\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://www.annee-philologique.com/\"\u003eL'Année philologique\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is a work-in-progress collection of structured data and scripts for Classical Studies/Classics. The data has been compiled and organized from various online resources including the Perseus Project, Dickenson College Commentaries, The Diccionario Griego-Español Project, and L'Année philologique.\u003c/p\u003e\n\n\u003cp\u003eCurrently, these are the JSON structured files:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eDCC Greek Core Vocabulary\u003c/li\u003e\n  \u003cli\u003eDCC Latin Core Vocabulary\u003c/li\u003e\n  \u003cli\u003eGreek Authors\u003c/li\u003e\n  \u003cli\u003eGreek Texts\u003c/li\u003e\n  \u003cli\u003eLatin Texts\u003c/li\u003e\n  \u003cli\u003eL'Année philologique Journal Abbreviations (in two forms)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThere are also plain text files:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eDGE Authors and Works\u003c/li\u003e\n  \u003cli\u003eDGE Dictionary Abbreviations\u003c/li\u003e\n  \u003cli\u003eIndex to Smyth's Greek Grammar\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFinally, there is a random collection of scripts (mostly compiled Applescripts) that I have made at various points for various uses. This section requires much cleaning up, refactoring, and organization at this stage. But I am putting them here for now nonetheless.\u003c/p\u003e\n\n\u003cp\u003eHopefully, these will find some use for others.\u003c/p\u003e\n","type":"project"},{"title":"git-do","url":"projects/git-do","content":"\u003ch4 id=\"version-01\"\u003eVersion 0.1\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-githubhttpsgithubcomsmarghgit-do\"\u003eDownload on \u003ca href=\"https://github.com/smargh/git-do\"\u003eGitHub\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e is a \u003ca href=\"https://git-scm.com/\"\u003eGit\u003c/a\u003e extension that adds a new perspective to the standard Git workflow. I conceive of it as a promises-based workflow.\u003c/p\u003e\n\n\u003cp\u003eTo better explain, let me begin by laying out the default Git workflow:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eYou start working on a new feature/fix/item\u003c/li\u003e\n  \u003cli\u003eMaybe you create a new branch for this feature to live in\u003c/li\u003e\n  \u003cli\u003eYou get in the flow and knockout the feature in 1 hour\u003c/li\u003e\n  \u003cli\u003eYou realize you should commit some of this great workflow\u003c/li\u003e\n  \u003cli\u003eYou want your commit history to be clean and readable, so you want to chunk your work into logical commits\u003c/li\u003e\n  \u003cli\u003eSo, you use \u003ccode\u003egit status\u003c/code\u003e and \u003ccode\u003egit diff\u003c/code\u003e to figure out which changes/additions/deletions should live together in a single commit\u003c/li\u003e\n  \u003cli\u003eThis whole time, your mind is running forward, thinking of the next thing you \u003cem\u003eactually want to code\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis general flow happens to me almost every time I code. I'm future oriented, always thinking about what's next. So, few things bog me down quite like having to stop after writing code only to retroactively document what I've done. This is Git's default point-of-view: backwards-facing, past-oriented. You can only commit \u003cem\u003eafter\u003c/em\u003e you've done some work.\u003c/p\u003e\n\n\u003cp\u003eNow, of course, this makes good sense. How could you commit nothing? You need to have done something in order to commit it. Yes, but committing is more than simply adding your work to the Git history; committing is also directly tied to documenting, describing, and summarizing your work. As many developers have argued, commit messages explain \u003cem\u003ewhy\u003c/em\u003e the changes are there (diffs explain \u003cem\u003ewhat\u003c/em\u003e changed).\u003c/p\u003e\n\n\u003cp\u003eIn an intriguing and well-written \u003ca href=\"https://arialdomartini.wordpress.com/2012/09/03/pre-emptive-commit-comments/\"\u003eblog post\u003c/a\u003e, Arialdo Martini suggests that pre-emptive commit messages confer a number of benefits:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eMore focus while developing\u003c/li\u003e\n  \u003cli\u003eCommit review is easier\u003c/li\u003e\n  \u003cli\u003eLess cognitive load\u003c/li\u003e\n  \u003cli\u003eMore precise comments\u003c/li\u003e\n  \u003cli\u003eDeclaration of intent\u003c/li\u003e\n  \u003cli\u003eTriggers micro design session\u003c/li\u003e\n  \u003cli\u003eSets a micro goal\u003c/li\u003e\n  \u003cli\u003eCreates a little timebox\u003c/li\u003e\n  \u003cli\u003eCommit history gains balanced granularity\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eI heartily recommend that you read the entire post and wrestle with Arialdo's points yourselves; I, for one, think he's on to something. Pre-emptive commit messages have become, for me, something akin to micro \u003ca href=\"\"\u003efeature branches\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen using feature branches, you necessarily are pre-planning what all the feature entails, how best to describe/name it, and what it looks like to complete said feature. Pre-emptive commit messages are conceptually the same thing, just on a smaller scale. In addition to considering what an entire feature entails, you consider what your next commit will entail \u003cem\u003ebefore you start writing any code\u003c/em\u003e for that commit. This method of working forces you to \u003ca href=\"http://programmer.97things.oreilly.com/wiki/index.php/Know_Your_Next_Commit\"\u003eknow your next commit\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eAs a co-developer pointed out, this is really just taking the philosophy of Test-Driven Development (TDD) and enforcing it's mental model even at the commit level (conceptually, the commit is the atomic unit of Git). Everything you do, you do with purpose. You declare your intention before you begin. You know exactly what the code needs to do for this commit to be ready. You make a promise with yourself.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe actual api for \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e is utterly simple. Before you start your next task (by \"task\" here I mean whatever you conceive of as your smallest unit of work), you run \u003ccode\u003egit do \"\u0026lt;message\u0026gt;\"\u003c/code\u003e. As soon as you have completed your task, you run \u003ccode\u003egit done\u003c/code\u003e. That's it!\u003c/p\u003e\n\n\u003cp\u003eUnder the hood \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e is doing a few things. First, it will save your commit message to a temporary file (in a created \u003ccode\u003e.git/.git-do/\u003c/code\u003e directory) as well as the name of whatever branch you are on when you run the \u003ccode\u003egit do\u003c/code\u003e command. It will then create and checkout a new branch (using the naming schema \u003ccode\u003edo/\u0026lt;slugify(message)\u0026gt;\u003c/code\u003e). \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e checkouts out a new branch so that you have a safe \"sand-box\" to do your work, allowing you to leave if something urgent comes up (e.g. you need to create a hotfix branch from master and solve a critical problem). This branch, however, will be deleted as soon as you run \u003ccode\u003egit done\u003c/code\u003e, so you should always think of it and treat it as a temporary branch.\u003c/p\u003e\n\n\u003cp\u003eAs you do your work in the \u003ccode\u003edo/\u003c/code\u003e branch, you need not commit anything. Remember, \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e exists at the level of the individual commit. If you think you want to use \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e, but think you will probably have multiple commits, create a feature branch instead. Once you have finished whatever constitutes your commit, you run \u003ccode\u003egit done\u003c/code\u003e. This will stage and commit all of the changes made in the \u003ccode\u003edo/\u003c/code\u003e branch. It will use the message your wrote for \u003ccode\u003egit do\u003c/code\u003e as the actual commit message. It will then checkout the \u003ccode\u003edo/\u003c/code\u003e branch's parent branch and merge that one commit. This merge must be a \u003ca href=\"\"\u003efast forward merge\u003c/a\u003e, which means you can't have changed or done anything in the parent branch after running \u003ccode\u003egit do\u003c/code\u003e but before running \u003ccode\u003egit done\u003c/code\u003e (Again, anything you do using \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e should fit in one commit and should be your branch's next commit. Don't let the fact that \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e creates a temporary branch lull you into thinking you should treat your work there as anything but a single, simple commit).\u003c/p\u003e\n\n\u003cp\u003eAfter merging your commit into the original parent branch, \u003ccode\u003egit done\u003c/code\u003e will delete the \u003ccode\u003edo/\u003c/code\u003e branch. So, if you have a terminal prompt that doesn't specify the current branch, you would never know the \u003ccode\u003edo/\u003c/code\u003e branch ever existed. Your commit history would look exactly as it would had you done the work and written the commit message at the end.\u003c/p\u003e\n\n\u003cp\u003eBelow is a (contrived) example to demonstrate how simple and short I believe the workflow ought to be:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$ \u003c/span\u003egit \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Demonstrate how git-do works for my project page\"\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e$ \u003c/span\u003etouch demonstration.txt\n\u003cspan class=\"gp\"\u003e$ \u003c/span\u003evi demonstration.txt\n\u003cspan class=\"gp\"\u003e$ \u003c/span\u003egit \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n","type":"project"},{"title":"LibGen","url":"projects/libgen","content":"\u003cp\u003eSeach the \u003ca href=\"http://libgen.in/\"\u003eLibrary Genesis\u003c/a\u003e project's catalogue of books and download right from your keyboard, without ever launching a browser.\u003c/p\u003e\n\n\u003ch4 id=\"version-11\"\u003eVersion 1.1\u003c/h4\u003e\n\n\u003ch4 id=\"download-from-packalhttpwwwpackalorgworkflowlibgen\"\u003eDownload from \u003ca href=\"http://www.packal.org/workflow/libgen\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis is a relatively simple workflow that allows users to search the \u003ca href=\"http://gen.lib.rus.ec/\"\u003eLibrary Genesis PDF repository\u003c/a\u003e. For those who do not know, the Library Genesis project is:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003ebased in Russia, this is the largest currently openly available collection. They have several initiatives: i. +1 million files of mainly non-fiction ebooks, ii. +900k of mainly fiction ebooks, iii. +20 million papers from journals of science, history, art etc., iv. comics, magazines and paintings; totally amounting to at least 30 TB – easily the Library of Congress of the digital world. The Libgen movement mainly focusses on downloading whole collections that have already been posted in fora or as torrents, although a significant portion is also due to individual efforts. (per \u003ca href=\"https://sites.google.com/site/themetalibrary/library-genesis\"\u003eGoogle Sites\u003c/a\u003e)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis workflow has only one keyword and one action. Use the keyword \u003ccode\u003elibgen\u003c/code\u003e to begin a search. Select an item and press \u003ccode\u003eReturn\u003c/code\u003e to begin a download of the file in your browser of choice. The only real oddity of this workflow is that it requires the user to type a period (\u003ccode\u003e.\u003c/code\u003e) after the query in order to initiate the search. This helps with performance.\u003c/p\u003e\n","type":"project"},{"title":"Metadata","url":"projects/metadata","content":"\n\u003cp\u003ePython wrapper for OS X \u003ccode\u003emdfind\u003c/code\u003e and \u003ccode\u003emdls\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3 id=\"installation\"\u003eInstallation\u003c/h3\u003e\n\n\u003cp\u003eDownload the \u003ccode\u003e.zip\u003c/code\u003e file from GitHub.\u003c/p\u003e\n\n\u003cp\u003eI'm working on getting the library on \u003ca href=\"https://pypi.python.org/pypi\"\u003ePyPi\u003c/a\u003e soon.\u003c/p\u003e\n\n\u003ch3 id=\"file-metadata-query-expression-syntax\"\u003eFile Metadata Query Expression Syntax\u003c/h3\u003e\n\n\u003cp\u003eI have modeled the Python syntax on \u003ca href=\"https://developer.apple.com/library/mac/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html\"\u003eApple's original Spotlight query syntax\u003c/a\u003e. File metadata queries are constructed using a simple query language that takes advantage of Python's flexible class construction. The syntax is relatively straightforward, including comparisons, language agnostic options, and time and date variables.\u003c/p\u003e\n\n\u003ch4 id=\"comparison-syntax\"\u003eComparison Syntax\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003emetadata\u003c/code\u003e library implements 3 custom classes (\u003ccode\u003eMDAttribute\u003c/code\u003e, \u003ccode\u003eMDComparison\u003c/code\u003e, and \u003ccode\u003eMDExpression\u003c/code\u003e) to represent the various units of \u003ccode\u003emdfind\u003c/code\u003e's \u003ca href=\"https://developer.apple.com/library/mac/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html\"\u003eQuery Expression Syntax\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eQuery comparisons have the following basic format:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e[attribute] [operator] [value]\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe following sub-sections will describe these 3 elements more fully, but any such comparison will generate a \u003ccode\u003eMDComparison\u003c/code\u003e object. If you ever want to see what a particular \u003ccode\u003eMDComparison\u003c/code\u003e object will look like as an query string, you can coerce it into a unicode string using the \u003ccode\u003eunicode()\u003c/code\u003e operation (or into a string using the \u003ccode\u003estr()\u003c/code\u003e operation).\u003c/p\u003e\n\n\u003ch4 id=\"attribute\"\u003eAttribute\u003c/h4\u003e\n\n\u003cp\u003eThe first element of a query comparison is the \u003cem\u003eattribute\u003c/em\u003e, which is a \u003ccode\u003eMDAttribute\u003c/code\u003e object in \u003ccode\u003emetadata\u003c/code\u003e. \u003ccode\u003emetadata\u003c/code\u003e automatically generates \u003ccode\u003eMDAttribute\u003c/code\u003e objects for every Spotlight attribute on your system. You can view the names of all of these objects via \u003ccode\u003emetadata.attributes\u003c/code\u003e variable. Attributes have a Pythonic naming scheme, so \u003ccode\u003ekMDItemFSName\u003c/code\u003e becomes \u003ccode\u003emetadata.name\u003c/code\u003e and \u003ccode\u003ekMDItemContentType\u003c/code\u003e becomes \u003ccode\u003emetadata.content_type\u003c/code\u003e. The \u003ccode\u003eMDAttribute\u003c/code\u003e class is built on top of the metadata information retrieved from \u003ccode\u003emdimport -A\u003c/code\u003e. If you wish to see all of the information for a metadata attributes, you can use the \u003ccode\u003emetadata.[attribute].info()\u003c/code\u003e function.\u003c/p\u003e\n\n\u003cp\u003eAs with all of the custom classes, you can coerce a \u003ccode\u003eMDAttribute\u003c/code\u003e object into a unicode string using the \u003ccode\u003eunicode()\u003c/code\u003e operation (i.e. \u003ccode\u003eunicode(metadata.name)\u003c/code\u003e returns \u003ccode\u003eu'kMDItemFSName'\u003c/code\u003e).\u003c/p\u003e\n\n\u003ch4 id=\"operator\"\u003eOperator\u003c/h4\u003e\n\n\u003cp\u003eThe \u003cem\u003eoperator\u003c/em\u003e can be any one of the following:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003eOperator\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e==\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eequal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e!=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003enot equal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eless than (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003egreater than (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eless than or equal (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003egreater than or equal (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003ein_range(attribute, min_value, max_value)\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003enumeric values within the range of min_value through max_value in the specified attribute\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eThe \u003ccode\u003e==\u003c/code\u003e and \u003ccode\u003e!=\u003c/code\u003e operators allow for modification. These modifiers specify how the comparison is made.\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eModifier\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode\u003emetadata.[object].ignore_case\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eThe comparison is case insensitive.\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode\u003emetadata.[object].ignore_diacritics\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eThe comparison is insensitive to diacritical marks.\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eBoth modifiers are on by default. In order to turn one off, you need to set the property to \u003ccode\u003eFalse\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003emetadata\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eignore_case\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eFalse\u003c/span\u003e\n\u003cspan class=\"n\"\u003ecomparison\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e'com.adobe.pdf'\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch4 id=\"value\"\u003eValue\u003c/h4\u003e\n\n\u003cp\u003eThe \u003cem\u003evalue\u003c/em\u003e element of a query comparison can be a string or integer. Strings can use wildcard characters (\u003ccode\u003e*\u003c/code\u003e and \u003ccode\u003e?\u003c/code\u003e) to make the search fuzzy. The \u003ccode\u003e*\u003c/code\u003e character matches multiple characters whereas the \u003ccode\u003e?\u003c/code\u003e wildcard character matches a single character (\u003cem\u003eNote\u003c/em\u003e: Even in the Terminal, I cannot get wildcard searches with \u003ccode\u003e?\u003c/code\u003e to function properly. I would recommend using \u003ccode\u003e*\u003c/code\u003e as your ony wildcard character). Here are some examples demonstrating how the wildcards function:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# Matches attribute values that begin with “paris”. For example, matches “paris”, but not “comparison”.\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_content\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"paris*\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Matches attribute values that end with “paris”.\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_content\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"*paris\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Matches attributes that contain \"paris\" anywhere within the value. For example, matches “paris” and “comparison”.\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_content\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"*paris*\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Matches attribute values that are exactly equal to “paris”.\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_content\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"paris\"\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIn order to use any of the greater-than or less-than operators, your value needs either to be an integer (or float) or a date object. In order to make the API as intuitive as possible, \u003ccode\u003emetadata\u003c/code\u003e allows for human-readable date statements. That is, you do not need to pass \u003ccode\u003edatetime\u003c/code\u003e objects as the \u003cem\u003evalue\u003c/em\u003e of a comparison with a date attribute (like \u003ccode\u003emetadata.creation_date\u003c/code\u003e). \u003ccode\u003emetadata\u003c/code\u003e uses the \u003ccode\u003eparsedatetime\u003c/code\u003e library to convert human-readable dates into \u003ccode\u003edatetime\u003c/code\u003e objects. The following are all acceptable date comparisons:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# Created before today\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreation_date\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e'today'\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Created after last month\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreation_date\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e'one month ago'\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cp\u003eIf \u003ccode\u003emetadata\u003c/code\u003e cannot parse your datetime string, it will raise an \u003ccode\u003eException\u003c/code\u003e. The parsing engine is good, but not perfect and can seem capricious. For example, \u003ccode\u003eone month ago\u003c/code\u003e is parsable, but \u003ccode\u003ea month ago\u003c/code\u003e is not. Datetime strings that are parsed are converted into an ISO-8601-STR compliant string.\u003c/p\u003e\n\n\u003ch3 id=\"expression-syntax\"\u003eExpression syntax\u003c/h3\u003e\n\n\u003cp\u003eYou can combine \u003ccode\u003eMDComparison\u003c/code\u003e objects to create a more complex expression, represented by the \u003ccode\u003eMDExpression\u003c/code\u003e class. Comparison objects can be combined in one of two ways: using a conjuction (\u003ccode\u003e\u0026amp;\u003c/code\u003e) or using a disjuction (\u003ccode\u003e|\u003c/code\u003e). Not only can \u003ccode\u003eMDComparison\u003c/code\u003e objects be combined, but you can nest and combine any combination of \u003ccode\u003eMDComparison\u003c/code\u003e objects and \u003ccode\u003eMDExpression\u003c/code\u003e objects. For example:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# query for audio files authored by “stephen” (ignoring case)\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# query for audio files authored by “stephen” or “daniel”\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# query for audio or video files authored by “stephen” or “daniel”\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.video\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# you could also break the last expression into chunks\u003c/span\u003e\n\u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.video\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003efinal_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHere's a complex expression to find only audio or video files that have been changed in the last week authored by someone named either \"Stephen\" or \"Daniel\" (ignoring case and diacritics, so it would match a file authored by \"danièl\"):\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.video\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etime_comp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_change_date\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e'one week ago'\u003c/span\u003e\n\u003cspan class=\"n\"\u003equery_expression\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etime_comp\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eNote\u003c/em\u003e: parentheses are needed for the first two expressions. Without them, you would get a \u003ccode\u003eTypeError\u003c/code\u003e as Python thinks you are trying to combine the string \u003ccode\u003e\"daniel\"\u003c/code\u003e with the \u003ccode\u003eMDAttribute\u003c/code\u003e object \u003ccode\u003eauthors\u003c/code\u003e, which is an obviously unsupported expression.\u003c/p\u003e\n\n\u003cp\u003eOnce you have created your query expression (or even a simple comarison), you will pass this to \u003ccode\u003emetadata.find()\u003c/code\u003e in order to execute the file searching.\u003c/p\u003e\n\n\u003ch2 id=\"functions\"\u003eFunctions\u003c/h2\u003e\n\n\u003ch3 id=\"find\"\u003e\u003ccode\u003efind\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe main function is \u003ccode\u003emetadata.find()\u003c/code\u003e. It takes one required argument, \u003ccode\u003equery_expression\u003c/code\u003e, which can be either an \u003ccode\u003eMDExpression\u003c/code\u003e object or an \u003ccode\u003eMDComparison\u003c/code\u003e object. In addition to this one required argument, \u003ccode\u003emetadata.find()\u003c/code\u003e also has the optional argument \u003ccode\u003eonly_in\u003c/code\u003e for you to focus the scope of your search to a particular directory tree. This simply needs to be a full (non-relative) path passed as a Unicode string. Other than that, there's nothing else to it. Build you query expression, pass it to \u003ccode\u003efind()\u003c/code\u003e and get your results as a Python list. Here's an example of building the sample expression above and passing it to \u003ccode\u003emetadata.find()\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003emetadata\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.video\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etime_comp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_change_date\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e'one week ago'\u003c/span\u003e\n\u003cspan class=\"n\"\u003equery_expression\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etime_comp\u003c/span\u003e\n\u003cspan class=\"n\"\u003eresults\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003equery_expression\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"list\"\u003e\u003ccode\u003elist\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eIn addition to \u003ccode\u003efind()\u003c/code\u003e, the \u003ccode\u003emetadata\u003c/code\u003e module has the \u003ccode\u003elist\u003c/code\u003e function, which is a wrapper around the \u003ccode\u003emdls\u003c/code\u003e command. You simply pass it a file path and it returns a dictionary of metadata attributes and values. Once again, the attribute names (the dictionary keys) are simplified using the algorithm used to convert Spotlight attributes to Pythonic names.\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003emetadata\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003efile_metadata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile_path\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile_metadata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e'name'\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"write\"\u003e\u003ccode\u003ewrite\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eFinally, there is an alpha version of a \u003ccode\u003ewrite()\u003c/code\u003e function, which allows you to write metadata to a file. Right now, I have it defaulted to writing to the \u003ccode\u003ekMDItemUserTags\u003c/code\u003e attribute, but a few others have worked. I need to test it more to make it more general.\u003c/p\u003e\n","type":"project"},{"title":"Pandoc Templates","url":"projects/pandoc-templates","content":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eA collection of support files for use with \u003ca href=\"http://johnmacfarlane.net/pandoc/\"\u003ePandoc\u003c/a\u003e, and specifically for helping to turn pandoc markdown files\ninto nice HTML, LaTeX, PDF, and Microsoft Word Document output. These files go in your \u003ccode\u003e~/.pandoc/\u003c/code\u003e folder.\u003c/p\u003e\n\n\u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e\n\n\u003cp\u003eTo install, simply run this command from your Terminal:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003epython\ngit clone https://github.com/smargh/pandoc-templates.git ~/.pandoc\n\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will clone this repositorty into the appropriate Pandoc templates directory.\u003c/p\u003e\n\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\n\u003cp\u003eWhat's included?\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eUnder \u003ccode\u003etemplates\u003c/code\u003e, some \u003ca href=\"http://johnmacfarlane.net/pandoc/\"\u003ePandoc\u003c/a\u003e templates for an article in PDF (via LaTeX) or HTML. These can be be pointed to directly with the \u003ccode\u003e--template=\u003c/code\u003e switch as appropriate. The \u003ccode\u003ehtml.template\u003c/code\u003e, \u003ccode\u003elatex.template\u003c/code\u003e, and \u003ccode\u003exelatex.template\u003c/code\u003e files are all forked from KJ Healy's \u003ca href=\"https://github.com/kjhealy/pandoc-templates\"\u003e\u003ccode\u003epandoc-templates repo\u003c/code\u003e\u003c/a\u003e. The \u003ccode\u003ereference.docx\u003c/code\u003e file, however, is of my own creation. It can be used via the \u003ccode\u003e--reference-docx\u003c/code\u003e pandoc option. The \u003ccode\u003e.docx\u003c/code\u003e template uses \u003ca href=\"http://www.typography.com/fonts/hoefler-text/overview/\"\u003eHoefler Text\u003c/a\u003e as its font. It is double spaced, with small caps headers and 1\" indented, single-line block quotes. It works well for academic papers. The \u003ccode\u003elatex.template\u003c/code\u003e and \u003ccode\u003exelatex.template\u003c/code\u003e depend on the style files in \u003ca href=\"http://kjhealy.github.com/latex-custom-kjh/\"\u003elatex-custom-kjh\u003c/a\u003e.\u003c/li\u003e\n  \u003cli\u003eUnder \u003ccode\u003emarked\u003c/code\u003e, a single CSS file for generating HTML previews of Markdown documents using \u003ca href=\"http://marked2app.com/\"\u003eMarked\u003c/a\u003e, a very handy HTML live previewer for markdown files. The \u003ccode\u003ecss\u003c/code\u003e file in the \u003ccode\u003emarked/\u003c/code\u003e folder is meant to be used together with pandoc and \u003ca href=\"http://markedapp.com/\"\u003eMarked\u003c/a\u003e. To have \u003ca href=\"http://marked2app.com/\"\u003eMarked\u003c/a\u003e work with \u003ca href=\"http://johnmacfarlane.net/pandoc/\"\u003ePandoc\u003c/a\u003e, simply go to Marked \u0026gt; Preferences \u0026gt; Advanced. Then specify the filepath to Pandoc like this (e.g.): \u003ccode\u003e/usr/bin/pandoc\u003c/code\u003e and the various switches and arguments to pandoc in the 'Args' field below it, like this:\n  \u003ccode\u003eshell\n  -r markdown -w html -s -S --bibliography=biblio.bib\n \u003c/code\u003e\nThen check the box telling Marked to use this by default. The \u003ccode\u003epandoc\u003c/code\u003e CSS file can be added in Marked \u0026gt; Style \u0026gt; Custom CSS. Marked can then use it to format the HTML output such that it looks like the final \u003ccode\u003e.docx\u003c/code\u003e file will.\u003c/li\u003e\n  \u003cli\u003eThe CSL files in the \u003ccode\u003ecsl/\u003c/code\u003e folder format the bibliography generated by pandoc and citeproc. (For simplicity we avoid dealing with biblatex directly at all.) The \u003ccode\u003echicago-syllabus.csl\u003c/code\u003e file makes a tiny change to a standard Chicago Notes CSL file so you can use it to output citation information in the body text of a document. This makes it useful for lists of references in CVs and course syllabuses. The other files are the APA, MLA, and Chicago standard files from the main \u003ca href=\"https://github.com/citation-style-language/styles\"\u003eCSL styles repository\u003c/a\u003e.\u003c/li\u003e\n  \u003cli\u003eUnder \u003ccode\u003edefaults\u003c/code\u003e, you will find all of Pandoc's standard templates for the many of its output formats. These can be helpful in creating your own templates.\u003c/li\u003e\n  \u003cli\u003eFinally, under \u003ccode\u003eexamples\u003c/code\u003e, you will find one plain text Markdown file, one BibTeX \u003ccode\u003e.bib\u003c/code\u003e file and a \u003ccode\u003e.docx\u003c/code\u003e file. These demonstrate how these templates can be used to generate a beautiful Microsoft Word file from Pandoc. To generate the files for youself, use this pandoc command:\n  \u003ccode\u003eshell\n  -r markdown -w docx -s -S --bibliography=Thesis.bib --csl=/Users/smargheim/Documents/GitHub/pandoc-templates/csl/chicago-author-date.csl --reference-docx=/Users/smargheim/Documents/GitHub/pandoc-templates/templates/reference.docx academic_test.txt --output=academic_test.docx\n \u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","type":"project"},{"title":"Pandoctor","url":"projects/pandoctor","content":"\n\u003ch4 id=\"version-105\"\u003eVersion: 1.0.5\u003c/h4\u003e\n\n\u003ch4 id=\"download-from-packalhttpwwwpackalorgworkflowpandoctor\"\u003eDownload from \u003ca href=\"http://www.packal.org/workflow/pandoctor\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003ch2 id=\"changelog\"\u003eChangelog\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003eversion 1.0.5: fixes a small bug in the template variables\u003c/li\u003e\n  \u003cli\u003eversion 1.0.2: fixes bug with user template commands\u003c/li\u003e\n  \u003cli\u003eversion 1.0.1: adds pdf as output in \u003ccode\u003edr:out\u003c/code\u003e filter\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003ca href=\"https://github.com/jgm/pandoc/releases/tag/1.13.0.1\"\u003ePandoc 1.13.0.1\u003c/a\u003e is now out. This is a major upgrade, which includes the \u003ccode\u003e.docx\u003c/code\u003e files as input files. This means you can convert Word files to Markdown files! Anyways, once you update pandoc, you will need to run \u003ccode\u003edr:config\u003c/code\u003e again for \u003ccode\u003ePandoctor\u003c/code\u003e to update its internals for the new version of pandoc. This will then show \u003ccode\u003e.docx\u003c/code\u003e in the inputs window, and will properly interface with Pandoc 1.13.\u003c/p\u003e\n\n\u003cp\u003eSo, enjoy the newest versions of Pandoc and Pandoctor!\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e is a relatively simple, easy-to-use way to bring the high-powered functionality of \u003ca href=\"http://johnmacfarlane.net/pandoc/\"\u003e\u003ccode\u003epandoc\u003c/code\u003e\u003c/a\u003e to you. For those new to \u003ccode\u003epandoc\u003c/code\u003e, \u003ccode\u003epandoc\u003c/code\u003e is \"the universal document converter\". It is an amazingly powerful utility that allows you to convert structured text from a ton of possible input formats to an even larger number of output formats.\u003c/p\u003e\n\n\u003cp\u003eA potential downside to \u003ccode\u003epandoc\u003c/code\u003e, however, for many users is that it is entirely a command line utility. This means, on the Mac, you \u003cem\u003ehave to\u003c/em\u003e open Terminal to use it. For many Mac/Alfred users, this is at least slightly daunting. Yet I believe that this should not be a deterrent to more people coming to use the power of \u003ccode\u003epandoc\u003c/code\u003e. This is the reason for \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e. Now, Alfred users can enjoy the comfortability and familiarity of the Alfred interface to manage \u003ccode\u003epandoc\u003c/code\u003e. Here's how:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e is accessed via \u003ca href=\"http://support.alfredapp.com/workflows:config:triggers-file-action\"\u003eFile Actions\u003c/a\u003e. The basic file action is \"New Pandoc Conversion\", which will kick off a series of interactive Alfred menus to create your \u003ccode\u003epandoc\u003c/code\u003e conversion. Once you have chosen the file you want to convert and selected the file action, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e works in 4 stages:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003especify the text format of the chosen file\u003c/li\u003e\n  \u003cli\u003echose the output format you want for the converted file\u003c/li\u003e\n  \u003cli\u003echose any options you want for the conversion process\u003c/li\u003e\n  \u003cli\u003erun \u003ccode\u003epandoc\u003c/code\u003e to convert the input file using your chosen options\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eLuckily, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e is built to move you through these four steps seamlessly and without any interaction on your part aside from selecting and setting the formats and options you want. Let's walk through the steps.\u003c/p\u003e\n\n\u003ch2 id=\"configuration\"\u003eConfiguration\u003c/h2\u003e\n\n\u003cp\u003eWhen you first download \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e, you will need to configure a few settings. Luckily, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e takes care of this for you. All you need to do is use the \u003ccode\u003edr:config\u003c/code\u003e keyword to get everything set up. Once you see the completion notification, you can start using \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e for real.\u003c/p\u003e\n\n\u003ch2 id=\"running-a-new-pandoc-conversion\"\u003eRunning a new \u003ccode\u003epandoc\u003c/code\u003e Conversion\u003c/h2\u003e\n\n\u003ch3 id=\"using-the-file-action\"\u003eUsing the File Action\u003c/h3\u003e\n\n\u003cp\u003eIf you've configured, you begin \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e by using \u003ca href=\"http://support.alfredapp.com/features:file-search\"\u003eAlfred's file navigation abilities\u003c/a\u003e to find the file you want \u003ccode\u003epandoc\u003c/code\u003e to convert for you. Once you've found the file, enter Alfred's File Actions pane for that file (by default this is \u003ccode\u003e→\u003c/code\u003e). Then find \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e's \"New Pandoc Conversion\" file action:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Conversion File Action\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/file_action_new.png\" /\u003e\u003c/p\u003e\n\n\u003ch3 id=\"selecting-the-input-format\"\u003eSelecting the Input Format\u003c/h3\u003e\n\n\u003cp\u003eThis tells \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e to begin a new conversion on that file. Once you select \"New Pandoc Conversion\", \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will automatically ask you to choose the format of this input file:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:in` Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_in.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e tries to be smart about formatting, so it will pre-fill the search bar with what it believes to be the file's formatting. However, if you need to, you can simply delete this and start searching yourself. You will see that \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e displays the full name of the input format as well as a short description to help you discern between similar formats (such as the 4 types of \u003ca href=\"http://daringfireball.net/projects/markdown/\"\u003eMarkdown\u003c/a\u003e \u003ccode\u003epandoc\u003c/code\u003e accepts).\u003c/p\u003e\n\n\u003ch3 id=\"selecting-the-output-format\"\u003eSelecting the Output Format\u003c/h3\u003e\n\n\u003cp\u003eWhen you choose the input format, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will then automatically ask you to select what format you want the outputted, converted file to be:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:out` Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_out.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eYou have access to the full range of possible output formats from this selection. You can use the arrow keys to navigate down, or start searching for your desired output format by name:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:out` Searching\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_out_search.png\" /\u003e\u003c/p\u003e\n\n\u003ch3 id=\"selecting-any-options\"\u003eSelecting any Options\u003c/h3\u003e\n\n\u003cp\u003eAs soon as you select the output format, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will ask you what Options you want to add to this \u003ccode\u003epandoc\u003c/code\u003e conversion:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:opt` Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt.png\" /\u003e\u003c/p\u003e\n\n\u003ch4 id=\"pandoctor-ui\"\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e UI\u003c/h4\u003e\n\n\u003cp\u003eThere are a few elements to the UI that require more explanation. First, you see that some items have the inner rectangle filled, and others do not. This is your visual cue to determine which options are active for this conversion (filled) and which are not (empty).\u003c/p\u003e\n\n\u003ch4 id=\"pandoctor-default-options\"\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e Default Options\u003c/h4\u003e\n\n\u003cp\u003eWhen you first come to this \"screen\" or \"window\" (not sure what to call individual Alfred windows/pop-ups), you will see that some options are already filled, even though you didn't select them. These are \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e's \u003ccode\u003eDefault Options\u003c/code\u003e. The file (\u003ccode\u003epandoc_defaults.json\u003c/code\u003e) specifying which options are by default always on (filled) can be found inside the workflow's folder (if you need to open this folder, you can do so easily using the \u003ccode\u003edr:help\u003c/code\u003e keyword and selecting \u003ccode\u003eRoot\u003c/code\u003e). This file also has comments for most options, which gives some information about them (Obviously, for detailed information about \u003ccode\u003epandoc\u003c/code\u003e's options, visit the \u003ca href=\"http://johnmacfarlane.net/pandoc/README.html\"\u003eUser Guide\u003c/a\u003e). When installed, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e has 4 default options on:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eparse-raw\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003eDescription: \"Parse untranslatable HTML codes and LaTeX environments as raw HTML or LaTeX, instead of ignoring them.\"\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003esmart\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003eDescription: \"Produce typographically correct output, converting straight quotes to curly quotes, — to em-dashes, – to en-dashes, and … to ellipses.\"\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003enormalize\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003eDescription: \"Normalize the document after reading: merge adjacent Str or Emph elements, for example, and remove repeated Spaces.\"\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003estandalone\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003eDescription: \"Produce output with an appropriate header and footer (e.g. a standalone HTML, LaTeX, or RTF file, not a fragment).\"\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"user-default-options\"\u003eUser Default Options\u003c/h4\u003e\n\n\u003cp\u003eIf you want to set your own default options (overriding these), you can use the \u003ccode\u003edr:defs\u003c/code\u003e keyword. This will provide a \"window\" similar to the standard Options window, but without anything selected. Here select whatever items you want to be on by default for any new conversion.\u003c/p\u003e\n\n\u003ch3 id=\"selecting-any-options-pt-2\"\u003eSelecting any Options, pt. 2\u003c/h3\u003e\n\n\u003cp\u003eBack to the \u003ccode\u003eOptions Selection\u003c/code\u003e, though. You will also see that that there are 2 basic types of options:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eBoolean\u003c/li\u003e\n  \u003cli\u003eArgument\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"selecting-boolean-options\"\u003eSelecting Boolean Options\u003c/h4\u003e\n\n\u003cp\u003eIf you select a Boolean option, it will simply \"turn on\" (the rectangle will be filled) and this screen will refresh. For example, here's this screen right before I choose to \"turn on\" the \u003ccode\u003estrict\u003c/code\u003e option:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`parse` Option off\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_parse_off.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eand here's what the screen looks like as soon as it refreshes after I selected that option:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`parse` Option on\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_parse_on.png\" /\u003e\u003c/p\u003e\n\n\u003ch4 id=\"selecting-argument-options\"\u003eSelecting Argument Options\u003c/h4\u003e\n\n\u003cp\u003eSo, \"turning on\" Boolean options is simple. Argument options, however, require a bit more work. As the name suggests, this type of option requires more information (an \"argument\"). (Again, if any of this is confusing, I would highly recommend reading through \u003ccode\u003epandoc\u003c/code\u003e's \u003ca href=\"http://johnmacfarlane.net/pandoc/README.html\"\u003eUser Guide\u003c/a\u003e). This means that you will need to tell \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e what you want the \"argument\", the information, to be. So, whenever you select an \u003ccode\u003eArgument\u003c/code\u003e option, you are taken to an intermediary \"screen\" where you can supply the needed information. For example, if I were to select the \u003ccode\u003etoc-depth\u003c/code\u003e argument option, I would then see this screen:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Set Option Empty\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_set_pre.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eI would then fill in the information (I want the Table of Contents in the converted  file to only go 4 levels deep):\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Set Option Filled\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_set_filled.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you fill in the information, press \u003ccode\u003ereturn\u003c/code\u003e (i.e. \"Set argument value of chosen option\") and return to the base Options \"screen\".\u003c/p\u003e\n\n\u003ch4 id=\"finalizing-options\"\u003eFinalizing Options\u003c/h4\u003e\n\n\u003cp\u003eNow, as soon as you have set all of the options you need, you only need to select the top item on this \"screen\": \u003ccode\u003eDone setting Options?\u003c/code\u003e. This will close this screen. As I've noted before, if you instead select an option, this screen will merely refresh.\u003c/p\u003e\n\n\u003ch4 id=\"pandoctor-ui-pt-2\"\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e UI, pt. 2\u003c/h4\u003e\n\n\u003cp\u003e\u003cem\u003eA small UI note\u003c/em\u003e: there is always a \"header\" for every list that \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e displays. However, there are 2 different kinds of headers:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003einformational and non-selectable\u003c/li\u003e\n  \u003cli\u003einterrogative and selectable\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe purely informational headers have the little \u003ccode\u003ei\u003c/code\u003e in the center. These headers are found when selecting input and output formats. They cannot be selected; they simply tell you what that \"screen\" is. The interrogative headers, however, can be selected. These have the \u003ccode\u003e?\u003c/code\u003e in the center. You will use these to \"close\" the screen you are viewing.\u003c/p\u003e\n\n\u003ch4 id=\"running-your-pandoc-conversion\"\u003eRunning your \u003ccode\u003epandoc\u003c/code\u003e Conversion\u003c/h4\u003e\n\n\u003cp\u003eReturning to the flow of the conversion, you have just finished selecting all of the options for your \u003ccode\u003epandoc\u003c/code\u003e conversion. As soon as you hit \u003ccode\u003eDone setting Options?\u003c/code\u003e, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will begin processing the conversion. This process can take a bit of time (particularly when generating PDFs), but when it is complete, you will see a notification in the top right of your screen:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"notify\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_notification.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThat's all there is to it really. In 4 simple steps, you can convert just about anything. However, for those more inclined toward \"power-use\", there are a few other abilities under \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e's hood.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"ignoring-options\"\u003eIgnoring Options\u003c/h2\u003e\n\n\u003cp\u003eFirst off, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e offers the ability to \"hide\" or \"ignore\" certain options in the Select Options screen. \u003ccode\u003epandoc\u003c/code\u003e itself offers \u003cem\u003ea lot\u003c/em\u003e of options, and always seeing them all is often unnecessary. If there are any options that you \u003cstrong\u003enever\u003c/strong\u003e use, you can simply remove them. To do this, you need to use the \u003ccode\u003edr:ignore\u003c/code\u003e keyword:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:ignore` Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will bring up a \"screen\" almost identical to the Select Options screen, but here you are choosing what options are hidden from that other screen. Once again, the two icons are informative. If an item is filled in, this means that it is going to be ignored:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`data-dir` Ignored\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore_data_on.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOtherwise (not filled in), it will appear in the standard Select Options window:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`data-dir` Not Ignored\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore_data_off.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs with the basic window, you can search here or just use the arrow keys. Select all of the options you want to ignore, and when you are done, select \u003ccode\u003eDone setting Ignore?\u003c/code\u003e to exit.\u003c/p\u003e\n\n\u003ch2 id=\"template-commands\"\u003eTemplate Commands\u003c/h2\u003e\n\n\u003cp\u003eFor those who use \u003ccode\u003epandoc\u003c/code\u003e frequently, you will likely use the same basic command over and over again. If that's the case, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e has a \"power-user\" feature just for you. In addition to the \"on-the-fly\" conversion available via the \"New Pandoc Conversion\" file action, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e also hase a \"Templated Pandoc Conversion\" file action:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"template\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/file_action_template.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis action grants you access to any and all \u003ccode\u003epandoc\u003c/code\u003e template commands you have set up. Before I detail how to create a new template, let's briefly discuss the elements of a template. \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e ships with a file in the workflow directory that has some sample templates. This file is titled \u003ccode\u003epandoc_templates.json\u003c/code\u003e. If you open this file in your text editor of choice, it will look just like this:\u003c/p\u003e\n\n\u003ch3 id=\"sample-templates\"\u003eSample Templates\u003c/h3\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e/*\n    PANDOC TEMPLATED COMMANDS\n\n    The ``defaults``, at initiation the `parse-raw`, `smart`, `normalize`, and `standalone`\n    options, are found at ``pandoc_defaults.json``.\n\n    HOW TO CREATE TEMPLATE:\n        + take your CLI pandoc command\n            (e.g. \"pandoc -s -S --toc -c pandoc.css -A footer.html README -o example3.html\")\n        + convert all \"short option + space + argument\" to \"long option + '=' + argument\"\n            (e.g. \"pandoc -s -S --toc --css=pandoc.css --include-after-body=footer.html README --output=example3.html\")\n        + split all options into list of individual options\n            (e.g. [pandoc, -s, -S, --toc, --css=pandoc.css, --include-after-body=footer.html, README, --output=example3.html])\n        + remove initial call to `pandoc` and replace input text path with ``{input}`` variable\n            (e.g. [-s, -S, --toc, --css=pandoc.css, --include-after-body=footer.html, {input}, --output={input}.html])\n        + make sure every option is a JSON string\n            (e.g. [\"-s\", \"-S\", \"--toc\", \"--css=pandoc.css\", \"--include-after-body=footer.html\", \"{input}\", \"--output={input}.html\"])\n        + give it a memorable name\n        + determine if you want to automatically add your default options to the command or not.\n\n    In order to make your templates more extensible, you can use any of 3 built-in\n    variables that relate to the file chosen to convert:\n        * {input_file} = The full path to the file, including file extension\n        * {input_name} = The full path to the file, without file extension\n        * {input_dir} = The full path to the parent directory of the file\n\n    For example, this template would only work if you kept a project directory\n    that contained both `biblio.bib` and `chicago-author-date.csl` alongside\n    your input file.\n        {\n            \"name\": \"Biblio Test\",\n            \"use_defaults\": false,\n            \"options\": [\n                \"-s\",\n                \"-S\",\n                \"--biblio={input_dir}/biblio.bib\",\n                \"--csl={input_dir}/chicago-author-date.csl\",\n                \"{input_file}\",\n                \"--output={input_name}.html\"\n            ]\n        }\n*/\n[\n    {\n        \"name\": \"XeLaTeX PDF\",\n        \"use_defaults\": true,\n        \"options\": [\n            \"-N\",\n            \"--variable=mainfont:Georgia\",\n            \"--variable=sansfont:Arial\",\n            \"--variable=monofont:\\\"Andale Mono\\\"\",\n            \"--variable=fontsize:12pt\",\n            \"{input_file}\",\n            \"--latex-engine=xelatex\",\n            \"--toc\",\n            \"--output={input_name}.pdf\"\n        ]\n    },\n    {\n        \"name\": \"Pandoc MD -\u0026gt; HTML\",\n        \"use_defaults\": true,\n        \"options\": [\n            \"--toc\",\n            \"--css=pandoc.css\",\n            \"{input_file}\",\n            \"--output={input_name}.html\"\n        ]\n    }\n]\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"template-elements\"\u003eTemplate Elements\u003c/h3\u003e\n\n\u003cp\u003eAs you can see, it comes with two \"default\" templates, as well as one commented-out template. These are there to help you see the format of the JSON as well as \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e's unique features. As the default templates show, each template must have 3 keys:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003euse_defaults\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eoptions\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe type of value for each of these is fixed. For \u003ccode\u003ename\u003c/code\u003e, you must use a string; for \u003ccode\u003euse_defaults\u003c/code\u003e, you use a Boolean (either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e); and for \u003ccode\u003eoptions\u003c/code\u003e, you use a list/array of strings. The \u003ccode\u003ename\u003c/code\u003e parameter is simple; this is the name of your template (what will be displayed when you are asked to choose which template you want to use). The \u003ccode\u003euse_defaults\u003c/code\u003e parameter is fairly self-explanatory as well; do you want to automatically add the default options to this command or not? It is the \u003ccode\u003eoptions\u003c/code\u003e parameter where the magic happens, and this is the one that requires the most precision.\u003c/p\u003e\n\n\u003cp\u003eAs the comments in the file will tell you, you need to properly format your \u003ccode\u003epandoc\u003c/code\u003e command for use as a \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e template. This means, each option is its own item in the list and each option is without spaces (unless properly quoted). This will require you to use the \"long\" version of any option along with the an equals [\u003ccode\u003e=\u003c/code\u003e]. The 3 given examples give thorough demonstration of what acceptable templates can look like.\u003c/p\u003e\n\n\u003ch3 id=\"template-variables\"\u003eTemplate Variables\u003c/h3\u003e\n\n\u003cp\u003eIn addition to these formatting requirements, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e also gives you the ability to abstract your template properly. For any template, you have access to 3 variables:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e{input_file}\u003c/code\u003e = The full path to the file, including file extension\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e{input_name}\u003c/code\u003e = The full path to the file, without file extension\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e{input_dir}\u003c/code\u003e = The full path to the parent directory of the file\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese variables will allow you to properly use your template with any conversion. You will see that every template should use \u003ccode\u003e{input_file}\u003c/code\u003e and \u003ccode\u003e{input_name}\u003c/code\u003e for the input and output options respectively. In addition, if you specify any outside resource files, you can then use \u003ccode\u003e{input_dir}\u003c/code\u003e to ensure that the full path is properly constructed (see the \"Biblio Test\" example in the comments).\u003c/p\u003e\n\n\u003ch3 id=\"running-a-template-command\"\u003eRunning a Template Command\u003c/h3\u003e\n\n\u003cp\u003eOnce you set up a template, it will make using \u003ccode\u003epandoc\u003c/code\u003e \u003cem\u003eso much easier\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eAll you have to do is select the file in Alfred's file navigator, choose the \"Templated Pandoc Conversion\" file action, and then choose which template you want to use. That's it.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"**`Pandoctor`** Templates Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_temps.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs with the New Conversion, the process takes a variable amount of time. Whenever the conversion does finish, however, you will see a notification in the top right of your screen:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Notification\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_notify.png\" /\u003e\u003c/p\u003e\n\n\u003ch3 id=\"creating-a-template\"\u003eCreating a Template\u003c/h3\u003e\n\n\u003cp\u003eSo, how do you set up template commands? As the Template Elements section describes, each template requires 3 things. So, in order to create a new template, you will need to create each of these 3 elements. Hopefully, however, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e makes this dead-simple to do.\u003c/p\u003e\n\n\u003cp\u003eTo begin creating a new template, use the \u003ccode\u003edr:temp:set\u003c/code\u003e keyword:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Keyword to Create New Template\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_kw.png\" /\u003e\u003c/p\u003e\n\n\u003ch4 id=\"setting-template-name\"\u003eSetting Template Name\u003c/h4\u003e\n\n\u003cp\u003eType the keyword and then press \u003ccode\u003ereturn\u003c/code\u003e. This will immediately jump you to assigning a name for your new template. This will be the \"screen\" that you see:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Add Name\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_name_pre.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eTo assign a name, simply type the name of the template. As seen in the screenshot above, this name will be all that you will see in the Script Filter to choose which template you want to run. As an example, I created a new template called \"Template Test\":\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Set Name\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_name.png\" /\u003e\u003c/p\u003e\n\n\u003ch4 id=\"setting-template-defaults\"\u003eSetting Template Defaults\u003c/h4\u003e\n\n\u003cp\u003eOnce you finish typing your template name, hit \u003ccode\u003ereturn\u003c/code\u003e and \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will then automatically ask you if you want your Default Options to always be added to the template command:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Add Defaults\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_defs.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you select \u003ccode\u003eTrue\u003c/code\u003e, this means that whatever options your template command has, your assigned Default Options will be added to the final \u003ccode\u003epandoc\u003c/code\u003e command. For example, if you have set \u003ccode\u003estandalone\u003c/code\u003e to be a Default Option, regardless of whether or not you have that option in your template command, \u003ccode\u003epandoc\u003c/code\u003e will still create a standalong document. If, however, you select \u003ccode\u003eFalse\u003c/code\u003e, only the options you have in the template will be run through \u003ccode\u003epandoc\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4 id=\"setting-template-command\"\u003eSetting Template Command\u003c/h4\u003e\n\n\u003cp\u003eThe final element you need to add to create your new template is, of course, the actual \u003ccode\u003epandoc\u003c/code\u003e command:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Add Command\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_cmd_pre.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs the section above described, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e requires your template command options to be in a very specific format. However, must \u003ccode\u003epandoc\u003c/code\u003e users don't actually type commands into Terminal in this format. In order to make \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e as simple as possible, I have written a script that will convert the standard, short-form \u003ccode\u003epandoc\u003c/code\u003e command into the long-form \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e compliant format. This means that all you have to do is copy your command from Terminal and paste it into this field:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Set Command\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_cmd.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs it is currently implemented, there is the possibility of some bugs in the conversion process. This means it is in your best interest to double check the \u003ccode\u003euser_templates.json\u003c/code\u003e file in your workflow storage folder (you can open this folder easily using the \u003ccode\u003edr:help\u003c/code\u003e keyword and selecting \u003ccode\u003eStorage\u003c/code\u003e). Ensure that the variables are properly used. Also ensure that the all of the short-form options where correctly translated into their long-form version. Remember, you can use the \u003ccode\u003epandoc_templates.json\u003c/code\u003e file as a guide for the template JSON format.\u003c/p\u003e\n","type":"project"},{"title":"Parsers","url":"projects/parsers","content":"\u003ch4 id=\"version-20\"\u003eVersion: 2.0\u003c/h4\u003e\n\n\u003ch4 id=\"download-at-packalhttpwwwpackalorgworkflowparsers\"\u003eDownload at \u003ca href=\"http://www.packal.org/workflow/parsers\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e is a relatively simple workflow for \u003ca href=\"http://www.alfredapp.com/\"\u003eAlfred\u003c/a\u003e. It allows you to quickly and easily look up parsing information for Greek \u003cem\u003eor\u003c/em\u003e Latin words. It gets its parsing information from the powerful \u003ca href=\"http://www.perseus.tufts.edu/\"\u003ePerseus project\u003c/a\u003e, but presents the results in the clean user-interface of Alfred. To use \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e, simply open Alfred and type the keyword \u003ccode\u003eparse\u003c/code\u003e. Follow the keyword with the Latin or Greek word you want to look up:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"alfred_parser\" src=\"https://www.evernote.com/shard/s41/sh/2c444d67-b4ca-40b3-b914-c20dc5ebbfb6/9d54f19c489deda365c65f1e6b5232e6/deep/0/alfred_parser.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e will display the results for you as quickly as possible.\u003c/p\u003e\n\n\u003cp\u003eAs you can see, \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e displays the parsing information in the main title field for each item. Below that, in the sub-title field, it displays the lemma and a short definition separated by \u003ccode\u003e::\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet's say you are reading some Greek or Latin, however, and don't want to have to open Alfred, type \u003ccode\u003eparse\u003c/code\u003e, then type the word you're interested in. Well, \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e has thought of that. From within Alfred's Preferences, you can set up a keyboard shortcut to pass the currently selected text on your Mac to \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e. I have mine set up as \u003ccode\u003ecmd+fn+-\u0026gt;\u003c/code\u003e. This makes using \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e even easier.\u003c/p\u003e\n\n\u003cp\u003eOnce you have found the parsing information that you believe is correct in your reading context, \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e can do 2 things for you:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ecopy the parsing information to the clipboard in a nicely formatted way (\u003ccode\u003ecmd+return\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003ecopy the dictionary entry for that lemma to the clipboard (\u003ccode\u003eshift+return\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf, for instance, you were to choose the Nominative Singular Feminine form of \u003ccode\u003eaura\u003c/code\u003e (with \u003ccode\u003ecmd+return\u003c/code\u003e), \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e would copy this to the clipboard:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eType: noun\nNumber: sg\nGender: fem\nCase: voc\n\nDefinition: the air (in motion), a breeze, breath of air, wind, blast:\nLemma:  aura\n\nLexicon Links:\n  + [Lewis \u0026amp; Short](http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3Atext%3A1999.04.0059%3Aentry%3Daura)\n  + [Elem. Lewis](http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3Atext%3A1999.04.0060%3Aentry%3Daura)\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAlternatively, you can use \u003ccode\u003eshift+return\u003c/code\u003e to view a HUD of the lexicon entry for that parsing term, and this lexicon data will also be copied to the clipboard (\u003cem\u003eNOTE\u003c/em\u003e: Parsers will attempt to display the lexicon entry from the most concise lexicon available for the chosen term or allow you to choose out of the available dictionaries).\u003c/p\u003e\n\n\u003cp\u003eAll you should need to read your Greek and/or Latin with ease.\u003c/p\u003e\n","type":"project"},{"title":"Reboot","url":"projects/reboot","content":"\u003cp\u003eThis is my personal fork of \u003ca href=\"https://github.com/MatthewMueller/dots\"\u003eMatthew Mueller's \u003ccode\u003edots\u003c/code\u003e repo\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e\n\n\u003cp\u003eOne-liner:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003emkdir -p /tmp/dots \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /tmp/dots \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e curl -L https://github.com/smargh/reboot/archive/master.tar.gz | tar zx --strip 1 \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sh ./install.sh\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"design\"\u003eDesign\u003c/h3\u003e\n\n\u003cp\u003eThe goal of reboot is to automate the process of getting your operating system from a stock build to a fully functional machine.\u003c/p\u003e\n\n\u003cp\u003eReboot should be the first thing you download and run to get your computer set up.\u003c/p\u003e\n\n\u003cp\u003eThis library tries to be organized like a \u003ccode\u003enode\u003c/code\u003e application, while working within the constraints of \u003ccode\u003ebash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4 id=\"mac-os-x\"\u003eMac OS X\u003c/h4\u003e\n\n\u003cp\u003eThe OS X build does the following:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003einstall \u003ccode\u003ehomebrew\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003einstalls binaries (\u003ccode\u003egraphicsmagick\u003c/code\u003e, \u003ccode\u003epython\u003c/code\u003e, \u003ccode\u003esshfs\u003c/code\u003e, \u003ccode\u003eack\u003c/code\u003e, \u003ccode\u003egit\u003c/code\u003e, etc.)\u003c/li\u003e\n  \u003cli\u003esets OS X defaults\u003c/li\u003e\n  \u003cli\u003einstalls applications via \u003ccode\u003ehomebrew-cask\u003c/code\u003e (one-password, sublime-text, virtualbox, nv-alt, iterm2, etc.)\u003c/li\u003e\n  \u003cli\u003esets up the \u003ccode\u003e~/.bash_profile\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003ehandle custom icons for applications\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"credits\"\u003eCredits\u003c/h4\u003e\n\n\u003cul\u003e\n  \u003cli\u003eOriginal project by \u003ca href=\"https://github.com/MatthewMueller/\"\u003eMatthew Mueller\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","type":"project"},{"title":"Skimmer","url":"projects/skimmer","content":"\u003ch3 id=\"version-221\"\u003eVersion: 2.2.1\u003c/h3\u003e\n\n\u003ch3 id=\"download-at-packalhttpwwwpackalorgworkflowskimmer\"\u003eDownload at \u003ca href=\"http://www.packal.org/workflow/skimmer\"\u003ePackal\u003c/a\u003e\u003c/h3\u003e\n\n\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eThis workflow \u003cstrong\u003eonly\u003c/strong\u003e works with the free Mac PDF app \u003ca href=\"http://skim-app.sourceforge.net/\"\u003eSkim\u003c/a\u003e. Skim is a fantastic app with great Applescript support (and its \u003cem\u003efree!\u003c/em\u003e). This workflow provides quick, easy access to a few custom Applescripts that I've written to deal with certain pesky problems I've come across when dealing with PDFs. There are currently four actions:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCrop and Split PDF\u003c/li\u003e\n  \u003cli\u003eExtract Data and Search Google Scholar\u003c/li\u003e\n  \u003cli\u003eExport Annotations\u003c/li\u003e\n  \u003cli\u003eSearch your PDFs\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this description I will explain how each of these works, and why you might want to use it.\u003c/p\u003e\n\n\u003ch3 id=\"crop-and-split-pdf\"\u003eCrop and Split PDF\u003c/h3\u003e\n\n\u003cp\u003eFirst, \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e allows you to properly format those darned scanned PDFs. You know the ones I'm talking about, 2 books pages scanned into one, landscape-oriented PDF page. I want all of my PDFs in pretty, proper format with one PDF page corresponding to one portrait-oriented book/article page. In the past, it was quite the ordeal to crop the PDF so that the right- and left-hand margins were equal, and then to split each individual page and finally reconstruct the entire PDF. \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e makes this whole process as simple as π. You can use either a Hotkey or the Keyword \u003ccode\u003esplit\u003c/code\u003e to activate this feature.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"split\" src=\"https://www.evernote.com/shard/s41/sh/83197405-2d1a-469e-a3ca-64cc4a481807/36b73f97006ac7fd5b650e22fb122769/deep/0/skimmer_split.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e then does 3 things:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCrop the PDF using a user-inserted Line Annotation (if necessary) (see image below)\u003c/li\u003e\n  \u003cli\u003eSplit the two-page PDF into individual pages\u003c/li\u003e\n  \u003cli\u003eRe-assemble everything and clean up\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet me walk you thru the process. To begin, you will need to \u003cem\u003eensure that the two scanned book pages have equal margins\u003c/em\u003e. \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will split the PDF page right down the middle, so we want the middle of the PDF to be the middle of the two pages. If the margins are unequal, you only need to use Skim's Line Annotation to create a border for \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e. Here's an example:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"cropping\" src=\"https://www.evernote.com/shard/s41/sh/d34511a1-b571-4df0-a6df-5c7b370704a6/0759f2d2f21a614c9a39d72f8eab0d42/deep/0/skimmer_original.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNote the small, vertical line at the bottom of the page. \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will crop off everything to the left of this line. You could put the line anywhere on the page. If you the right-hand margin were too big, you could put it to the right, and \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e would automatically crop the excess stuff to the right of that line. If both margins are too big, you can put two lines on each side and \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will take care of the rest.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will crop \u003cem\u003eevery page\u003c/em\u003e at this point, so find the farthest extremity on any page and use that as your guide. \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e can tell what page you are looking at, so it'll make things work (note that in the image above, this is one of the middle pages being used as the cropping template). \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e does not crop Top or Bottom Margins, so you will need to manually crop PDFs with wacky top and/or bottom margins.\u003c/p\u003e\n\n\u003cp\u003eOnce \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e has cropped the PDF, it will go thru and split each page into two separate pages. Depending on the length of the PDF, this can take a bit (approximately 0.67 seconds per original PDF page). This is all done invisibly tho, so that's a bonus.\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e In order to ensure that \u003ccode\u003eSkimer\u003c/code\u003e splits the PDF properly, regardless of orientation, the script will split the first page and ask you what portion of the page you are seeing (left-hand, right-hand, top-half, or bottom-half). Your choice will ensure that \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e does the splitting properly.\u003c/p\u003e\n\n\u003cp\u003eAfter it splits all the pages, \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will save a copy of your original PDF and then close it as it opens the new, split PDF. This new PDF will be properly formatted and saved in the same folder as the original PDF. Here's an example of the PDF above after it was automatically cropped and split:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"completed\" src=\"https://www.evernote.com/shard/s41/sh/ac701fb0-3e1b-4ac6-ab6d-04dfdddae2f7/0cfdc3db448db7e430613b018a30f31e/deep/0/skimmer_final.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFor anyone who deals with lots of scanned PDFs, I can promise you, this is a godsend.\u003c/p\u003e\n\n\u003ch3 id=\"extract-data-and-search-google-scholar\"\u003eExtract Data and Search Google Scholar\u003c/h3\u003e\n\n\u003cp\u003eThe second feature will take \u003ca href=\"http://en.wikipedia.org/wiki/Optical_character_recognition\"\u003eOCR'd\u003c/a\u003e PDFs and try to extract relevant search information and then search \u003ca href=\"http://scholar.google.com/\"\u003eGoogle Scholar\u003c/a\u003e (which will make it easy to then add citation information to your citation manager of choice. Users of \u003ca href=\"http://fractaledmind/projects/zotquery\"\u003eZotQuery\u003c/a\u003e will immediately see where I'm going with this…). This feature can be activated by a user-assigned Hotkey or by the Keyword \u003ccode\u003eextract\u003c/code\u003e when the desired PDF is open in Skim.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"extract\" src=\"https://www.evernote.com/shard/s41/sh/5bf09958-9d77-4a54-aaa2-b5fff51ef70a/7edaae34fc339aa9230a700703de218e/deep/0/skimmer_extract.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis feature will look for three possible things \u003cem\u003ein the currently viewed page\u003c/em\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ea \u003ca href=\"http://www.doi.org/\"\u003eDOI\u003c/a\u003e (Digital Object Identifier)\u003c/li\u003e\n  \u003cli\u003ean ISBN (for books)\u003c/li\u003e\n  \u003cli\u003eJSTOR title page\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf it cannot find any of these things, it will present the user with a list of Capitalized Words from the currently viewed page. You then select whichever words you want to be the Google Scholar query. Once the query is chosen (whether automatically as one of the 3 types above, or user-chosen keywords), \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will automatically launch your default browser to Google Scholar using the query. What you do from there is up to you.\u003c/p\u003e\n\n\u003ch3 id=\"export-annotations\"\u003eExport Annotations\u003c/h3\u003e\n\n\u003cp\u003eIn short, this feature allows you to export all of your PDF annotations from your Skim PDF to \u003ca href=\"https://www.evernote.com/\"\u003eEvernote\u003c/a\u003e (or the clipboard) while giving you \u003cstrong\u003elive hyperlinks\u003c/strong\u003e back to the exact PDF page for the annotation!! You heard me, your Evernote note will have all of your PDF annotations, and each annotation will have a hyperlink that will open up that PDF to the exact page where that annotation is. Trust me, it's super cool, amazingly helpful, and downright near magical.\u003c/p\u003e\n\n\u003cp\u003eCompatible annotations include Text notes, Anchor notes, Underlined text, Strike-Thru text, and Highlighted text. \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will take all of your annotations, format them into some pretty HTML and send that to Evernote. I have been working on this code for quite some time, so it is FAST! It can handle and 100+ page book in a jiffy. But, since we all work slightly differently, I've also worked hard to make it FLEXIBLE. In order to use this function, simply use the \u003ccode\u003eexport\u003c/code\u003e keyword. Alternatively, you can assign a keyboard shortcut to the command as well (I use \u003cem\u003ecmd + shift + -\u003c/em\u003e myself).\u003c/p\u003e\n\n\u003cp\u003eLet me outline how you can make Annotation Export work exactly as you'd like.\u003c/p\u003e\n\n\u003cp\u003eFirst and foremost, I've added the ability for you to assign your own custom palette of Highlight Colors. One of the nicer touches to this feature is the ability to translate certain highlight colors into text headers. This can come in quite handy for really breaking down your text and your thoughts about the text into certain groupings. Now, I have a default set of 6 colors and their 6 corresponding text values, but you can change both the colors and the text to fit exactly your needs. But how, you might ask? Well, version 2.0 comes with a new Help PDF. Simply use the \u003ccode\u003esk:help\u003c/code\u003e keyword and select \u003ccode\u003eOpen PDF\u003c/code\u003e to view this document. On the second page, you will see these annotations:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"helper pdf\" src=\"https://www.evernote.com/shard/s41/sh/0e33ffc1-d931-4932-9949-a668c1554a0f/cb6e0abe1897462a15e5708cfffc4043/deep/0/skimmer_config1.pdf-(page-2-of-4).png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe text of the PDF will lay this all out for you, but basically, you simply change the highlight colors and change the corresponding text to what ever you like. There are an (nearly) infinite number of possibilities. The only things to remember are \u003cstrong\u003edon't mess with the actual highlights, merely change their colors\u003c/strong\u003e and \u003cstrong\u003edon't delete prefixed numbers in the text notes, only the text\u003c/strong\u003e. Otherwise, you can fiddle to your hearts content. Just so you can get a feel for how the process will work, here's what the Evernote note would look like if you ran the Annotation Export script on the Help PDF (well, this is only the highlights section; run the script to see how text notes are handled):\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"exported note\" src=\"https://www.evernote.com/shard/s41/sh/4fadbe0b-e763-4d0c-b100-d82048ad378a/6b115224808df230224e325e710abeb0/deep/0/skimmer_config.pdf---Evernote-Premium.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e If you change the highlight colors and/or the text meanings, you will have to run \u003ccode\u003esk:help\u003c/code\u003e -\u0026gt; \u003ccode\u003eSet Highlights\u003c/code\u003e before \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will apply your changes. So, to change the Highlights:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eOpen the Help PDF (\u003ccode\u003esk:help\u003c/code\u003e -\u0026gt; \u003ccode\u003eOpen PDF\u003c/code\u003e) and alter the highlights and text on the second page.\u003c/li\u003e\n  \u003cli\u003eRun \u003ccode\u003esk:help\u003c/code\u003e -\u0026gt; \u003ccode\u003eSet Highlights\u003c/code\u003e to save your changes.\u003c/li\u003e\n  \u003cli\u003eThen, you can use \u003ccode\u003eexport\u003c/code\u003e to actually send your Skim annotations to Evernote.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNow, the ability to alter your highlights palette goes a long way in making this script personalizable (is that even a word?), but I went a step further. You can also tweak the HTML formatting used to create the Evernote note. Unfortunately, however, this will require opening up some Applescript and doing some code tweaking.\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote\"\u003e2\u003c/a\u003e\u003c/sup\u003e But I've tried to make it not so scary. Essentially, each annotation type has a general formatting template used to create the HTML. I've abstracted this format and placed each variable element under your control. You can find all of the templates and some basic examples in the Help PDF (page 3), but here is one example, for the Highlight Notes:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e--The alterable variables are wrapped in {curlies}, while the fixed elements are in \u0026lt;carets\u0026gt;.\n{pre}{wrap}\u0026lt;title\u0026gt;{/wrap} {wrap}\u0026lt;note text\u0026gt;{/wrap} {wrap}\u0026lt;link\u0026gt;{p.} \u0026lt;#\u0026gt;{/wrap}\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSo, you can prefix anything you'd like to the front of a note type: a dash, a tab, a few tabs, a word, etc. You can then wrap the title of the highlight (this is the text given for whatever color that highlighted annotation was) in anything at all: make it bold, italics, wrap it in [brackets], whatever. You can also wrap the actual text highlighted: in \"quotes\", make it italics, etc. Finally, you have what you wrap the hyperlink in: it could be (parentheses) or {braces}, etc. And you can specify what page abbreviation you want: p., page, #. Now, the script defaults to settings that I think work pretty well, and you can use those to get a feel for what's possible. Just remember, \u003cem\u003eit needs to be valid HTML\u003c/em\u003e. All of these properties are near the top of the \u003ccode\u003eaction_export-notes.scpt\u003c/code\u003e found in the workflow directory (you can use \u003ccode\u003esk:bug\u003c/code\u003e -\u0026gt; \u003ccode\u003eRoot\u003c/code\u003e to open this folder easily). Feel free to ask me if you have something you'd like to format but can't quite figure it out.\u003c/p\u003e\n\n\u003cp\u003eSince I've added the PDF hyperlinking functionality, I've also added the ability to copy a PDF pages custom URL to the clipboard, if you want to hyperlink to that PDF page in any other context. Simply use the \u003ccode\u003esk:copy\u003c/code\u003e keyword. This whole URL hyperlinking works because I have written a custom URL handler which is bundled with the workflow that interprets the custom URLs that I've written to open PDFs in Skim to the appropriate page. It's pretty cool, but \u003cem\u003ethe URL uses the path to the PDF, so if you move the PDF the URL will \u003cstrong\u003ebreak\u003c/strong\u003e until you alter all the old URLs to use your new path\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"search-your-pdfs\"\u003eSearch your PDFs\u003c/h3\u003e\n\n\u003cp\u003eFinally, you can also search through all of your PDFs and open any one of them right in Skim. Use either the keyword \u003ccode\u003eskimmer\u003c/code\u003e or the shorter \u003ccode\u003esk\u003c/code\u003e to begin the query. Then enter your query term. The results will update as you type. You can hit \u003ccode\u003ereturn\u003c/code\u003e to open any item directly in Skim, or you can \u003ccode\u003eright-arrow\u003c/code\u003e to enter Alfred's file browser for that item.\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAs I hope you can see, if you're someone who deals with PDFs frequently, this workflow could be of help. Whether it's splitting PDFs, searching through your PDF library, or exporting annotations, \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e can help you out.\u003c/p\u003e\n\n\u003cp\u003ePlus, it's fairly simple to add functionality by simply adding more Applescripts, so if you have a great script for working with Skim, let me know in the comments.\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eMy original script would have to pop up each individual page for a split second. It was almost stroke inducing. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:2\"\u003e\n      \u003cp\u003eReader DrLulz has given a great example of this by tweaking the workflow to work best for PDFs of outline-based powerpoints. His comment and link can be found \u003ca href=\"http://www.alfredforum.com/topic/4052-skimmer-pdf-actions-for-skim/?p=27270\"\u003ehere\u003c/a\u003e. \u003ca href=\"#fnref:2\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"project"},{"title":"Snippets","url":"projects/snippets","content":"\u003ch4 id=\"version-12\"\u003eVersion: 1.2\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-packalhttpwwwpackalorgworkflowsnippets\"\u003eDownload on \u003ca href=\"http://www.packal.org/workflow/snippets\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eHave you ever been taking notes and realized that certain terms or phrases were going to be used repeatedly? You don't have the time or really the desire to create all new TextExpander snippets for these terms or phrases, but you'd also really like to shorten your typing. That's where \u003cstrong\u003e\u003ccode\u003eSnippets\u003c/code\u003e\u003c/strong\u003e comes in. \u003cstrong\u003e\u003ccode\u003eSnippets\u003c/code\u003e\u003c/strong\u003e is a dead simple Alfred workflow that allows you to use simple snippet syntax while writing, and then seamlessly convert your text to its full glory.\u003c/p\u003e\n\n\u003cp\u003eThe set-up is simple. As you're typing, and you realize you want to make a snippet, simply prepend your snippet with \u003ccode\u003e,,\u003c/code\u003e (comma comma). Then, when you get a free moment, create a \"snippet dictionary\" to tell Snippets what that snippet means. To create the dictionary, simply wrap it in \u003ccode\u003e^^^\u003c/code\u003e (triple carets). Here's an example:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eThis is an example of ,,sn. ,,sn is a fantastic workflow for ,,a!\n\n^^^\nsn: **`Snippets`**\na: Alfred\n^^^\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThat's all there is to it. Once your dictionary is complete and you have finished typing, either copy the text to the clipboard and use the keyword \u003ccode\u003esnip\u003c/code\u003e, or assign a keyboard shortcut for even quicker results. When you activate \u003cstrong\u003e\u003ccode\u003eSnippets\u003c/code\u003e\u003c/strong\u003e, the text above will instantly become:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eThis is an example of **`Snippets`**. **`Snippets`** is a fantastic workflow for Alfred!\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIt's so simple. Double-comma before the snippet; dictionary wrapped in triple-carets with snippet: expanded. Nothing more, nothing less.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"demo\" src=\"https://raw.githubusercontent.com/smargh/alfred_snippets/master/snippets.gif\" /\u003e\u003c/p\u003e\n","type":"project"},{"title":"Spritzr","url":"projects/spritzr","content":"\u003ch4 id=\"version-11\"\u003eVersion 1.1\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-packalhttpwwwpackalorgworkflowspritzr\"\u003eDownload on \u003ca href=\"http://www.packal.org/workflow/spritzr\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eSpritzr is a relatively simple workflow that allows you to speed-read text on your Mac using \u003ca href=\"http://www.spritzinc.com/the-science/\"\u003eSpritz-style\u003c/a\u003e techniques. The simple idea is that one word of your input text is displayed at a time in quick enough succession that you are no longer \u003ca href=\"http://en.wikipedia.org/wiki/Subvocalization\"\u003eSub-Vocalizing\u003c/a\u003e, which is the largest impediment to reading at a comfortable, yet swift pace. The added layer of nuance, however, is that each word is positioned around the so-called \u003ca href=\"http://www.spritzinc.com/blog/\"\u003eOptimal Reading Position\u003c/a\u003e. To borrow an image from the Spritz website, the difference between most electronic speedreaders and Spritz-style speedreaders is the alignment of the words:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"word_positioning_blog3.png\" src=\"http://www.spritzinc.com/wp-content/uploads/2014/02/word_positioning_blog3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis workflow achieves a similar affect, thus making reading simpler and faster.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTICE\u003c/strong\u003e: I wrote all of this software from scratch and have no affiliation with the Spritz company. I was inspired by other open-source projects that attempt to mirror the Spritz functionality: \u003ca href=\"https://github.com/Miserlou/OpenSpritz\"\u003eOpenSpritz\u003c/a\u003e and \u003ca href=\"https://github.com/littleq0903/spritz-cmd\"\u003espritz-cmd\u003c/a\u003e, but this software has no relation to Spritz aside from appearances.\u003c/p\u003e\n\n\u003cp\u003eSpritzr currently only has one command: \u003ccode\u003espritz\u003c/code\u003e. This takes text input which will be parsed and displayed in the Spritzr window.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"spritzr.png\" src=\"https://www.evernote.com/shard/s41/sh/288af1c4-bed2-4dfc-ab5f-391ee6c39b32/606b76b31d8c6fbbb4558f38d505cfe5/deep/0/spritzr.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAlternatively, you can pass text files (\u003ccode\u003e.txt\u003c/code\u003e, \u003ccode\u003e.md\u003c/code\u003e, \u003ccode\u003e.mmd\u003c/code\u003e) into Spritzr using the File Action \u003ccode\u003eFile Spritzr\u003c/code\u003e. This will parse and display the text content of that file in the Spritzr window.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"spritzr_file.png\" src=\"https://www.evernote.com/shard/s41/sh/0da5e015-ca7c-461a-bdb4-675b69ae26ea/15682e931bf8c6daf2fcad14f9b200eb/deep/0/spritzr_file.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are two settings, which can be changed using the \u003ccode\u003espritzr:set\u003c/code\u003e keyword:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eWords per Minute\u003c/li\u003e\n  \u003cli\u003eReading Mode\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf you which to change your wpm, simply invoke \u003ccode\u003espritzr:set\u003c/code\u003e and input an integer (the default is 250). If you which to change the reading mode, invoke \u003ccode\u003espritzr:set\u003c/code\u003e and input either \u003ccode\u003edark\u003c/code\u003e or \u003ccode\u003elight\u003c/code\u003e (the default is \u003ccode\u003elight\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eDark Mode: \u003cimg alt=\"spritzr_dark.png\" src=\"https://www.evernote.com/shard/s41/sh/a620b423-7a24-49b8-86e1-6a6088304b0b/5605e456e9e00a944a2d52609b360222/deep/0/spritzr_dark.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eLight Mode: \u003cimg alt=\"spritzr_light.png\" src=\"https://www.evernote.com/shard/s41/sh/95a765b1-b622-4a27-911e-5b7d2e6b5a40/f3b77ee67f52cd3afa44dec5656ee4dc/deep/0/spritzr_light.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOther than that, you can just start spritzing!\u003c/p\u003e\n","type":"project"},{"title":"Wikify","url":"projects/wikify","content":"\u003ch4 id=\"version-26\"\u003eVersion 2.6\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-packalhttpwwwpackalorgworkflowwikify\"\u003eDownload on \u003ca href=\"http://www.packal.org/workflow/wikify\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e is a workflow to add some great \u003ca href=\"http://daringfireball.net/projects/markdown/\"\u003eMarkdown\u003c/a\u003e and wiki goodness to \u003ca href=\"https://www.evernote.com/\"\u003eEvernote\u003c/a\u003e. In this post, I want to lay out all of the functionality and how to take advantage of it.\u003c/p\u003e\n\n\u003ch3 id=\"markdown-functionality\"\u003eMarkdown Functionality\u003c/h3\u003e\n\n\u003cp\u003eOne half of \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e's functionality concerns integrating Markdown and Evernote. Essentially, this means being able to send Markdown text to Evernote as HTML \u003cem\u003eand\u003c/em\u003e being able to export an Evernote note to a Markdown text file.\u003c/p\u003e\n\n\u003cp\u003eIn order to export an Evernote note to a Markdown text file, you can use the \u003ccode\u003eenmd\u003c/code\u003e keyword from Alfred. \u003ccode\u003eenmd\u003c/code\u003e stands for \"Evernote to Markdown\", and this command will take your currently selected Evernote note and create a Markdown formatted text file which will immediately be opened in your default text editor. In addition, \u003ccode\u003eenmd\u003c/code\u003e will fill in the note's title, notebook, and tags as metadata at the top of the file (this will make it a snap to edit the note and send it back to Evernote using the \u003ccode\u003emden\u003c/code\u003e command, which I will talk about next). The workflow also comes with the ability to bind a keyboard shortcut to this function (I use \u003ccode\u003ecmd + shift + 9\u003c/code\u003e). No fuss, no hassle, no wait. Export your Evernote note into Markdown in a flash.\u003c/p\u003e\n\n\u003cp\u003eBut what about getting data \u003cem\u003einto\u003c/em\u003e Evernote? \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e will also allow you to write notes in Markdown in your text editor of choice and then send that text to Evernote, where it will be formatted and displayed in proper HTML. Now, this function has a bit of quirks to it, so let me elaborate. You can launch this function in one of two ways:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ethe \u003ccode\u003emden\u003c/code\u003e keyword in Alfred\u003c/li\u003e\n  \u003cli\u003esetup a keyboard shortcut\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe keyboard shortcut will actually allow you simply to select your text (\u003ccode\u003ecmd + a\u003c/code\u003e for \"Select All\") and then press the shortcut to run the script. Alternatively, you can select the text, \u003cem\u003ecopy it to the clipboard\u003c/em\u003e, and then pop up Alfred and use the \u003ccode\u003emden\u003c/code\u003e command (this is, obviously, short for \"Markdown to Evernote\"). It is important to note that if you use the \u003ccode\u003emden\u003c/code\u003e command from Alfred, your Markdown text \u003cem\u003emust\u003c/em\u003e be in the clipboard.\u003c/p\u003e\n\n\u003cp\u003eNow, how do you tell \u003ccode\u003emden\u003c/code\u003e \u003cem\u003ewhere\u003c/em\u003e to send your note, or what tags it should have, or what it's title is? In order to assign Note Title, Notebook, and Tags, you can use simple \u003ca href=\"http://fletcherpenney.net/multimarkdown/\"\u003eMultiMarkdown Headers\u003c/a\u003e, or simple symbols which are placed at the top of the document:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eTitle:\u003c/code\u003e or \u003ccode\u003e#\u003c/code\u003e for the note's title\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eNotebook:\u003c/code\u003e or \u003ccode\u003e=\u003c/code\u003e for the note's notebook destination\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eTags:\u003c/code\u003e or \u003ccode\u003e@\u003c/code\u003e for the note's tags\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo, the top of your Markdown text note might look something like this:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e# Text Note Title\n= My Default Notebook\n@ tag1, tag2, tag3\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eBut, that's not all that \u003ccode\u003emden\u003c/code\u003e can do. I've added a few extras to its capabilities. In addition to converting Markdown to text to HTML and sending that to Evernote, \u003ccode\u003emden\u003c/code\u003e has three other pretty cool features:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003edocument-specific text snippets (use \u003ccode\u003e^^^snippet^^^\u003c/code\u003e syntax)\u003c/li\u003e\n  \u003cli\u003eauto-linking to pre-existing Evernote notes (no special syntax)\u003c/li\u003e\n  \u003cli\u003eauto-linking to new Evernote notes (use \u003ccode\u003e[[double bracket]]\u003c/code\u003e syntax)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFirst, let me explain document-specific text snippets. This feature was inspired recently as I was taking notes in class. In-class note-taking is a bit unique, since you won't exactly know what words will be used repeatedly before the class begins. I'm all about \u003ca href=\"http://smilesoftware.com/TextExpander/\"\u003eTextExpander\u003c/a\u003e, but I can't set up snippets if I don't know what will be the key words for that class. Plus, I don't want to clutter my TextExpander library with these one-off snippets. So, document-specific text snippets was born. The idea is to use snippets in your notes as you type, and then define the \u003ccode\u003esnippet:expanded text\u003c/code\u003e relationship before you use \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e to send the notes to Evernote. The syntax is dead-simple. Simply wrap your \"snippet dictionary\" in triple carets (\u003ccode\u003e^^^snippet:expanded text^^^\u003c/code\u003e). You can have one-off \"dictionaries\" or you can make one long dictionary at the end of your document. The only things you need to remember are:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eALWAYS use ,, as your in-text prefix (you \u003cem\u003ecan\u003c/em\u003e change this in the code)\u003c/li\u003e\n  \u003cli\u003eif its a one-off (only one snippet), the \"dictionary\" needs to exist on its own line\u003c/li\u003e\n  \u003cli\u003eif its a multi-snippet \"dictionary\", use the triple carets like fenced code blocks\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTo ensure these few easy syntax rules makes sense, here's an example:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e,,p are separated by a blank line.\n^^^p:Paragraphs^^^\nNew text.\n2nd paragraph. *,,i*, **,,b**, `,,m`.\n^^^\ni:Italics\nb:BOLD\nm:monospace\n^^^\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThats all there is to it. Note how each snippet is prefixed by \u003ccode\u003e,,\u003c/code\u003e. This ensures that both you and the processor know what text needs to be expanded, and you don't need to have the commas in the snippet dictionary. You can mix and match single-line snippet dictionaries with multi-snippet dictionaries in the same document. You can even use non-ASCII characters in your snippets or in your expanded text. For me, this is a killer feature. I hope someone else finds it useful.\u003c/p\u003e\n\n\u003cp\u003eNext, auto-linking to pre-existing Evernote notes. This is really the feature at the heart of \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e, because this is what allows you to \"wikify\" your Evernote library. The idea is really quite simple: write your note as you normally would (in this case in Markdown, but I'll discuss later how this can work within Evernote itself), and \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e will ensure that anytime you reference \u003cem\u003eany other Evernote note\u003c/em\u003e by title, your note will have a hyperlink to that other note. Let me offer a simple example. Say I began a new note like so:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e# Note Title\n= Notebook\n@ tag1, tag2\n\nThis is the first line of my new note on Alfred App!\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow, if I had a note in my Evernote account entitled \"Alfred App\", when I process this note to send it to Evernote, \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e will now catch that and hyperlink to that pre-existing note, so this new note would have the phrase \"Alfred App\" linked directly to that other Evernote note. No fuss, no hassle, no funky syntax. And (this is what was holding me back on this feature for while), this is SUPER-FAST!\u003c/p\u003e\n\n\u003cp\u003eThe final feature that \"wikifies\" Evernote when you are sending Markdown text to Evernote is smoothly creating new spaces to fill with data later, while simultaneously creating the inter-linking between notes. \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e has you covered here as well. Let's say as you're typing up a new Evernote note, you realize that you are discussing an idea, topic, or person that you want to research further, but at some later date. What to do? Well, you can use the standard wiki-syntax of the \u003ccode\u003e[[double brackets]]\u003c/code\u003e to mark that idea, topic, or person as something you want to create a new note for, while also linking to that new note from within your current note. To return to our sample note above, let's say you added this:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e# Note Title\n= Notebook\n@ tag1, tag2\nThis is the first line of my new note on Alfred App!\nI want to talk more about [[AppleScript]].\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhenever you have \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e process this Markdown text and send it to Evernote, it will first create a new note (in the same notebook as the one specified in the meta-data) entitled \"AppleScript\", then embed the Evernote hyperlink to that new note within this current note. This means that your new Evernote note will have 2 links: one to the pre-existing note \"Alfred App\" and one to the newly created, blank note \"AppleScript\". All of this without you having to do anything but type!\u003c/p\u003e\n\n\u003cp\u003eFor anyone who prefers to write in Markdown, but loves the always-there accessibility of Evernote, this can be a powerful addition to your workflow. But obviously, not everyone writes their Evernote notes in Markdown first. Most people just write their notes directly in Evernote. But what if you wanted to still \"wikify\" your Evernote library, to easily create these interlinked notes? Well, I've tried to solve that problem too.\u003c/p\u003e\n\n\u003ch3 id=\"wiki-functionality\"\u003eWiki Functionality\u003c/h3\u003e\n\n\u003cp\u003eWhile I've already discussed some of the wiki functionality that's inherent in the \u003ccode\u003emden\u003c/code\u003e function, that isn't the only way to ensure that all of your Evernote data is intelligently interlinked. I have versions of both the link to pre-existing note and link to new note capabilities detailed above that work purely within Evernote. Here's how they work.\u003c/p\u003e\n\n\u003cp\u003eIn order to interlink any of your current Evernote notes with \u003cem\u003epre-existing\u003c/em\u003e notes, you can use the \u003ccode\u003ewfy\u003c/code\u003e command from Alfred. Simply open up Evernote and select the notes you want to \"wikify\" (the workflow does accept multiple selections, but you shouldn't over tax it). Once your notes are selected, pull up Alfred and use the \u003ccode\u003ewfy\u003c/code\u003e (short for \"wikify\") keyword. The workflow will then process each of your notes individually, auto-linking to any pre-existing other notes which it references by name. \u003cstrong\u003eNOTE:\u003c/strong\u003e In order to use this feature, you will need the \u003ca href=\"http://www.satimage.fr/software/en/downloads_osaxen.html\"\u003eSatimage OSAX Scripting Addition\u003c/a\u003e. I've set it up such that this is remarkably easy to install. Simply use the keyword in Alfred \u003ccode\u003ewfy:install\u003c/code\u003e and the Satimage installer will boot up and walk you through the process. It really is as simple as that. The script will search your note's content for any references to other notes' titles. If any are found, that text will be replaced with a hyperlink to that note. Here’s a gif that shows the process in action:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"wfy command\" src=\"images/projects/wikify/wfy.gif\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNext, let's say that you are in Evernote and see a phrase or term in one of your notes that you want to research more, while creating the wiki-environment that \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e is all about. I've added a companion feature which will:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003etake the currently selected text in the open Evernote note\u003c/li\u003e\n  \u003cli\u003ecreate a new note in that notebook whose title is the selected text\u003c/li\u003e\n  \u003cli\u003eembed a hyperlink back to the original note as the first line of this new note\u003c/li\u003e\n  \u003cli\u003eand replace the selected text with a hyperlink to that newly created note\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis means that you have two-way hyperlinking (which is impossible in the \u003ccode\u003emden\u003c/code\u003e version of this functionality) between your current note and your new note. Creating spaces for new thought, while retaining context and wiki-style hyperlinking has never been easier. To use this feature, you can either use a user-specified keyboard shortcut, or copy the selected text to the clipboard and run \u003ccode\u003eensel\u003c/code\u003e. Here’s another gif to illustrate:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"ensel command\" src=\"images/projects/wikify/ensel.gif\" /\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eTo sum up, \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e has 4 main commands:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003emden\u003c/code\u003e to send Markdown text to Evernote\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eenmd\u003c/code\u003e to export an Evernote note to Markdown\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ewfy\u003c/code\u003e to “wikify” the selected Evernote note\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eensel\u003c/code\u003e to create and wikify a new Evernote note from selection\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith these features, and all of the “sub-features” elaborated above, I truly believe that \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e could be a great help to those others out there who love Evernote, Markdown, and Wiki goodness.\u003c/p\u003e\n","type":"project"},{"title":"ZotQuery","url":"projects/zotquery","content":"\u003ch4 id=\"version-85\"\u003eVersion 8.5\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-packalhttppackalorgworkflowzotquery\"\u003eDownload on \u003ca href=\"http://packal.org/workflow/zotquery\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e is an Alfred workflow that grants the user access to the data stored in their \u003ca href=\"https://www.zotero.org\"\u003eZotero\u003c/a\u003e application.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"requirements\"\u003eREQUIREMENTS\u003c/h3\u003e\n\n\u003cp\u003eTo date, it has only been tested on a Mac with both Zotero Firefox and Standalone installed. \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e should work with only Zotero Firefox or Standalone installed, but that is currently untested. If you are using the workflow successfully with either one only installed, please let me know. It has also only been tested on Alfred 2.1+. Finally, it was tested on the standard Python distribution for Mac OS X Mavericks (10.9), which is 2.7.6, and not on Python 3. Once again, if anyone is using the workflow successfully on another distribution of Python, please let me know.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"configuration\"\u003eCONFIGURATION\u003c/h3\u003e\n\n\u003cp\u003eWhen you first download the workflow, you will need to run \u003ccode\u003ez:config\u003c/code\u003e first to configure the necessary settings before you attempt any queries. In fact, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e will kick you to the \u003ccode\u003ez:config\u003c/code\u003e command if you try any of the queries without having first configured your settings.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"configuration\" src=\"images/projects/zotquery/zq_config_init.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOn first run, the configurator will begin by searching for, and creating if necessary, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e’s workflow data folder, which can always be found at \u003ccode\u003e/Users/$USER/Library/Application Support/Alfred 2/Workflow Data/com.hackademic.zotquery/\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow, in version 5.5 and on, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e \u003cstrong\u003eno longer needs to install any Python dependencies.\u003c/strong\u003e The workflow ships with all necessary components baked in. This has already removed a vast majority of the support issues.\u003c/p\u003e\n\n\u003cp\u003eThe configurator next moves on to find all the necessary Zotero paths. \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e requires the full path to 3 things:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eyour Zotero sqlite database\u003c/li\u003e\n  \u003cli\u003eyour Zotero storage folder\u003c/li\u003e\n  \u003cli\u003ethe folder that holds your linked attachments\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe configurator attempts to find all necessary paths automatically, but if it fails, it will ask you to select one manually. The title of the dialog box will alert you to what path the configurator requires:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"choosing the Zotero folder where linked attachments reside\" src=\"images/projects/zotquery/zq_config_choose-folder.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce all paths are stored, the configurator moves on to set up your \u003ca href=\"http://www.zotero.org/support/dev/server_api/v2/start\"\u003eZotero API\u003c/a\u003e information. This workflow utilizes the Zotero API to export citations of chosen items. In order for the user to utilize these functions, they must have and set up a Zotero private key. Step one requires your Zotero User ID:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"entering Zotero user ID\" src=\"images/projects/zotquery/zq_config_userid.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you do not have or do not know your Zotero User ID, click the \u003ccode\u003eWhere do I find my User ID?\u003c/code\u003e button. This will open Zotero’s \"Feeds/API” tab, where you may need to login. Once logged in, you will see a page similar to this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"creatingnew Zotero private key\" src=\"images/projects/zotquery/Zotero___Settings___Feeds_API-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis shows a user who has two API keys set up, one for personal use and one for the iOS app \u003ca title=\"PaperShip - Manage, Annotate, and Share your Papers On The Go ...\" href=\"http://www.papershipapp.com/\"\u003ePaperShip\u003c/a\u003e. If you do not have a Personal API key, you can easily set one up by clicking the \"Create new private key\" link. Your User ID will be a number, probably less than 8 digits. Insert it into the text field and click \u003ccode\u003eSet User ID\u003c/code\u003e (\u003cstrong\u003eNote\u003c/strong\u003e: Applescript text input dialog boxes do not respond, typically, to the keyboard shortcut for paste, so you will likely need to right-click and manually paste in the ID).\u003c/p\u003e\n\n\u003cp\u003eSecond, you will need to input your API Key:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"entering Zotero API key\" src=\"images/projects/zotquery/zq_config_apikey-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eSince \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e reads this \u003ccode\u003esettings.json\u003c/code\u003e file whenever it attempts to connect to the Zotero API, if you don’t insert the proper data here, the \"Export Citation\" and \"Export Reference” (see below) functions \u003cstrong\u003ewill not work\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eFinally, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e (now in version 4.0) will also allow you to set your export style and format. Once you have entered your API information, the configurator will move to setting your export preferences:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"choosing export style and format\" src=\"images/projects/zotquery/zq_prefs1.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFirst, you will select the \u003ca href=\"http://citationstyles.org/\"\u003eCSL Style\u003c/a\u003e that you wish to use. Currently \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e can export data in 5 different styles: Chicago (author-date), APA, MLA, Zotero’s own RTF-Scan format, and BibTeX. Now, in \u003cstrong\u003eversion 6.2\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e will also allow users to export in the \u003ca href=\"http://zotero-odf-scan.github.io/zotero-odf-scan/\"\u003eODT-RTF Scannable Cites format\u003c/a\u003e (option not shown in image below). This will determine the format of exported citations and references.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"choosing CSL style\" src=\"images/projects/zotquery/zq_prefs2-4.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNext, you will select the text formatting for exported data. \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e (in version 4.0) can export in either \u003ca href=\"http://daringfireball.net/projects/markdown/basics\"\u003eMarkdown\u003c/a\u003e or \u003ca href=\"http://en.wikipedia.org/wiki/Rich_Text_Format\"\u003eRich Text\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"choosing export text format\" src=\"images/projects/zotquery/zq_prefs3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAll exported text is put in your clipboard, so you can use it anywhere in any text editor. You can also alter your export preferences at any point, using the \u003ccode\u003ez:settings\u003c/code\u003e command.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:settings command\" src=\"images/projects/zotquery/zq_export_settings.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFinally, you will need to select which Zotero client you use, either \u003ca href=\"https://www.zotero.org/download/\"\u003eZotero Standalone\u003c/a\u003e or \u003ca href=\"https://www.zotero.org/download/\"\u003eZotero for Firefox\u003c/a\u003e. This will determine which app will open any items that you select.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"choosing Zotero client\" src=\"images/projects/zotquery/zq_client.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce all settings and preferences are set, the configurator will finally build the JSON cache of your Zotero data. \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e will clone your Zotero database and also generate a JSON file with all pertinent information. Once cached, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e is configured.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"functions\"\u003eFUNCTIONS\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e has 5 main functions:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eSearch\u003c/li\u003e\n  \u003cli\u003eCite\u003c/li\u003e\n  \u003cli\u003eOpen\u003c/li\u003e\n  \u003cli\u003eCache\u003c/li\u003e\n  \u003cli\u003eand Add\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn general, the order of operations would be: cache, search, open/cite. This means, in order to search, you need to have an up-to-date cache, and in order to cite or open an item, you will first need to search and select it.\u003c/p\u003e\n\n\u003cp\u003eUnder \u003ccode\u003eSearch\u003c/code\u003e there are 8 options:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eGeneral search\u003c/li\u003e\n  \u003cli\u003eTitle-specific search\u003c/li\u003e\n  \u003cli\u003eAuthor-specific search\u003c/li\u003e\n  \u003cli\u003eTag-specific search\u003c/li\u003e\n  \u003cli\u003eCollection-specific search\u003c/li\u003e\n  \u003cli\u003eAttachment-specific search\u003c/li\u003e\n  \u003cli\u003eNotes-specific search\u003c/li\u003e\n  \u003cli\u003eNew items only\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNote that all searches coerce both the query and the data into lowercase, so you can search using lowercase queries and still get matches.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eGeneral\u003c/strong\u003e search is launched by the keyword \u003ccode\u003ezot\u003c/code\u003e or the short version \u003ccode\u003ez\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot general search command\" src=\"images/projects/zotquery/zq_gen_init-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will search your entire Zotero database for any use of the query provided. The search script is “loose,” that is, it searches for matches of the query “in” the data not matches that “equal” the data. This means you can search half words, words in the middle of titles, etc.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e will not begin searching until you have entered at least 3 characters. This ensures faster, smarter results. Until you have typed at least 3 characters, you will see this result:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot general search with too short query\" src=\"images/projects/zotquery/Screen_Shot_2014-01-18_at_6_10_23_PM-4.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you complete your query, and the script catches up with you, you will see a list of all of your Zotero items that match the query. If your query doesn’t have any matches, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e returns an error:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot general search no results\" src=\"images/projects/zotquery/zq_error_res-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIf, however, you have results, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e presents them in a ranked order:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot general search ranked results\" src=\"images/projects/zotquery/zq_gen_search-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFor ease of use, the workflow provides unique icons for the various item types:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003earticle   \u003cimg alt=\"article icon\" src=\"images/projects/zotquery/n_article.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003ebook      \u003cimg alt=\"book icon\" src=\"images/projects/zotquery/n_book.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003echapter   \u003cimg alt=\"chapter icon\" src=\"images/projects/zotquery/n_book.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003econference paper \u003cimg alt=\"conference icon\" src=\"images/projects/zotquery/n_conference.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003eother \u003cimg alt=\"other icon\" src=\"images/projects/zotquery/n_written.png\" /\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf your item has an attachment, the icon changes to signal the addition as will the subtitle field. The subtitle field will include \u003ccode\u003eAttachments: n\u003c/code\u003e, where n is the number of attachments:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"item with attachments\" src=\"images/projects/zotquery/zq_attachments-4.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe altered icons each have a small plus sign in the top-right corner:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003earticle + attachment  \u003cimg alt=\"article icon with attachment\" src=\"images/projects/zotquery/att_article.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003ebook + attachment     \u003cimg alt=\"book icon with attachment\" src=\"images/projects/zotquery/att_book.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003echapter + attachment  \u003cimg alt=\"chapter icon with attachment\" src=\"images/projects/zotquery/att_chapter.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003econference paper + attachment   \u003cimg alt=\"conference icon with attachment\" src=\"images/projects/zotquery/att_conference.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003eother + attachment    \u003cimg alt=\"other icon with attachment\" src=\"images/projects/zotquery/att_written.png\" /\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eAuthor\u003c/strong\u003e search is launched by \u003ccode\u003ezot:a\u003c/code\u003e or the short version \u003ccode\u003eza\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot:a author search command\" src=\"images/projects/zotquery/zq_a_init-4.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis search only queries the last names of the authors of your Zotero data. For example: \u003ccode\u003ezot:a thomas\u003c/code\u003e will return all the items that have an author (or editor, translator, etc.) with the last name “Thomas”.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot:a author search results\" src=\"images/projects/zotquery/zq_a_search-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eTitle\u003c/strong\u003e search is launched by \u003ccode\u003ezot:t\u003c/code\u003e or the short version \u003ccode\u003ezt\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot:t title search command\" src=\"images/projects/zotquery/zq_t_init-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis search only queries the title fields of your Zotero data. For example: \u003ccode\u003ezot:t virgil\u003c/code\u003e will return all of the items whose title contains the word “Virgil”.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot:t title search results\" src=\"images/projects/zotquery/zq_t_search.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe final two searches (Tag and Collection) are two-step searches. In step-one, you search \u003cem\u003efor\u003c/em\u003e a particular Tag or Collection; in step-two you search \u003cem\u003ewithin\u003c/em\u003e that particular Tag or Collection for your query.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eTag\u003c/strong\u003e search is launched by \u003ccode\u003ez:tag\u003c/code\u003e or the short version \u003ccode\u003eztg\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:tag tags search command\" src=\"images/projects/zotquery/zq_tag_init.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis allows you to search through all of your Zotero tags.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:tag tags search results\" src=\"images/projects/zotquery/zq_tag_search.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you select a tag, Alfred will automatically initiate the \u003ccode\u003ezot:tag\u003c/code\u003e search, which will search within that tag for your query. The \u003ccode\u003ezot:tag\u003c/code\u003e (or \u003ccode\u003eznt\u003c/code\u003e) query functions just like the general \u003ccode\u003ezot\u003c/code\u003e query, except that it is limited to those items with the previously chosen tag.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot:tag in-tag search results\" src=\"images/projects/zotquery/zq_intag_seach.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eCollection\u003c/strong\u003e search is similar. It is launched by \u003ccode\u003ez:col\u003c/code\u003e, or by \u003ccode\u003ezc\u003c/code\u003e, which begins a search for all of your Zotero collections.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:col collections search command\" src=\"images/projects/zotquery/zq_col_init.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs you type, it will filter any collections that contain the query.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:col collections search results\" src=\"images/projects/zotquery/zq_col_search-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you choose a particular collection, Alfred will initiate the \u003ccode\u003ezot:c\u003c/code\u003e search (also \u003ccode\u003eznc\u003c/code\u003e), which will search within that particular collection.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot:c in-collection search results\" src=\"images/projects/zotquery/zq_incol_search.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs above, the \u003ccode\u003ezot:c\u003c/code\u003e search functions just like the simple \u003ccode\u003ezot\u003c/code\u003e search.\u003c/p\u003e\n\n\u003cp\u003eFinally, you can now (after version 4.1) search only items with attachments using the \u003ccode\u003ez:att\u003c/code\u003e query (short version = \u003ccode\u003ezat\u003c/code\u003e). This query allows you to quickly find pdfs or epubs in your Zotero library and open them in your default application. As of now, \u003ccode\u003ez:att\u003c/code\u003e only allows for you to open the attached files.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:att attachments search results\" src=\"images/projects/zotquery/zq_attachment_search.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eSimilarly, you can use \u003ccode\u003ezot:n\u003c/code\u003e (or \u003ccode\u003ezn\u003c/code\u003e) to search through the notes for any items. This can prove very helpful for people who use Zotero as their notes repository for all of their secondary sources.\u003c/p\u003e\n\n\u003cp\u003eFinally, the \u003ccode\u003ez:new\u003c/code\u003e search will bring all of the items added to Zotero since the last cache update. This feature is there to make it easier to find items if you do one long research run, adding lots of items to Zotero before re-using \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e. Using \u003ccode\u003ez:new\u003c/code\u003e you can double check exactly what’s been added.\u003c/p\u003e\n\n\u003cp\u003eTogether these 8 search options provide you with various ways to find the exact item you need. Once you find that item, you have a few options with what you can do next.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eOnce you select an item (in all the searches except \u003ccode\u003ez:att\u003c/code\u003e), there are 5 options:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eOpen Zotero to that item.\u003c/li\u003e\n  \u003cli\u003eExport a short reference to that item.\u003c/li\u003e\n  \u003cli\u003eExport a citation of that item.\u003c/li\u003e\n  \u003cli\u003eOpen the item’s attachment (if it has any).\u003c/li\u003e\n  \u003cli\u003eAppend a citation of the item to a temporary bibliography\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIf you merely hit \u003ccode\u003ereturn\u003c/code\u003e on your chosen item, option 1 will occur and Zotero will open to that item.\u003c/p\u003e\n\n\u003cp\u003eIf you hit \u003ccode\u003eoption+return\u003c/code\u003e when you choose your item, you will export a short reference to that item.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"export reference\" src=\"images/projects/zotquery/zq_gen_ref.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eDepending on your style and format settings, your reference will be of various types.\u003c/p\u003e\n\n\u003cp\u003eIf you hit \u003ccode\u003econtrol+return\u003c/code\u003e, you will export a full citation of the item in your chosen format.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"export markdown citation\" src=\"images/projects/zotquery/zq_gen_cite.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNext, if you hit \u003ccode\u003eshift+return\u003c/code\u003e, you will open the attachment of that item.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"open attachment\" src=\"images/projects/zotquery/zq_gen_open.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFinally, if you hit \u003ccode\u003efn+return\u003c/code\u003e, you will append a citation of the item to a temporary bibliography file.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"append markdown citation to bibliography\" src=\"images/zq_gen_append.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis bibliography file is stored in the workflow’s cache folder. You can add as many citations to it as you wish. This function allows you to dynamically build a Bibliography/Works Cited page. When you have put all the needed citations in the temporary file, you need only run the \u003ccode\u003ez:bib\u003c/code\u003e command to export them.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:bib export command\" src=\"images/projects/zotquery/zq_bib_init-5.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will take all of the citations in the temporary bibliography file, organize them in alphabetical order, and copy the result to the clipboard. A result in Markdown format will resemble this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"exported markdown citations example\" src=\"images/projects/zotquery/WORKS_CITED-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe temporary bibliography file is not the only way, however, to automatically generate a full Bibliography/Works Cited page. Since many Zotero users, myself included, use either Tags or Collections to organize their library into writing projects, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e also allows the user to export a full formatted bibliography (in alphabetical order) for any Tag or Collection.\u003c/p\u003e\n\n\u003cp\u003eWhen you are searching for a Tag or a Collection with \u003ccode\u003ez:tag\u003c/code\u003e or \u003ccode\u003ez:col\u003c/code\u003e, you can use \u003ccode\u003econtrol+return\u003c/code\u003e to export a bibliography of that Tag or Collection, instead of simply searching within that Tag or Collection by hitting \u003ccode\u003ereturn\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"export bibliography of collection\" src=\"images/projects/zotquery/zq_col_bib.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThus, if you organize the citations for particular project within a certain Collection or under a certain Tag, you can create full, formatted Works Cited pages on the fly from \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e!\u003c/p\u003e\n\n\u003cp\u003eTaken together, these export options make \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e an academic’s best friend in the writing process. You can insert in-text references, full citations, or generate entire Works Cited all from \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e. These citations, references, and bibliographies can also now be Rich Text in addition to Markdown. This allows users who write in \u003ca href=\"http://office.microsoft.com/en-us/word/\"\u003eMicrosoft Word\u003c/a\u003e, \u003ca href=\"http://www.apple.com/mac/pages/\"\u003ePages\u003c/a\u003e, or \u003ca href=\"http://literatureandlatte.com/scrivener.php\"\u003eScrivener\u003c/a\u003e to utilize \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e. You can also open Zotero directly to an item (for quick meta-data editing) or even open an item’s attachment to double check a quote.\u003c/p\u003e\n\n\u003cp\u003eThere are, however, a few caveats and possible configurations. First, these final options (export reference, export citations, append citation, and generate works cited) all use Zotero’s web API, and so they require an internet connection. If you are not connected to the internet, all will fail (gracefully). Second, the workflow defaults to Chicago (author-date) style both for short references and full citations (examples above). If you wish to use another of Zotero’s CSL styles, you will need to change the style via the \u003ccode\u003ez:settings\u003c/code\u003e command. Since \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e now exports BibTeX and RTF-Scan cite keys, even users who prefer to write in [MultiMarkdown](http://fletcherpenney.net/multimarkdown/ \"MultiMarkdown - fletcherpenney.net”) and convert to [LaTeX](http://www.latex-project.org/ \"LaTeX – A document preparation system”) can utilize \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: These features will also require that you have the proper Zotero API data in the \u003ccode\u003esettings.json\u003c/code\u003e file. For instructions on setting this up, see above.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThere is also the Caching function. All of the query scripts are querying a JSON cache of your Zotero database. This file is created and then updated with the keyword \u003ccode\u003ez:cache\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:cache caching command\" src=\"images/projects/zotquery/zq_cache_init-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis function will find your Zotero sqlite database, read its contents, and create a JSON cache of the pertinent information.\u003c/p\u003e\n\n\u003cp\u003eWhen you first download the workflow, the configurator will run this command in order to create the cache that all of the query scripts will read. You will always be able to update the cache with this command as well, although the workflow is configured to auto-update the cache after every query execution; that is, after you do any action on an item (open, reference, citation, append). This means that after you perform an action on an item, the workflow will check if the cache needs updating and if so, the workflow will update it in the background.\u003c/p\u003e\n\n\u003cp\u003eNote, however, that if you have altered your Zotero data and are about to use \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e, you will need to force an update using \u003ccode\u003ez:cache\u003c/code\u003e before any of the queries have access to the new information. As a general rule of thumb, I will force update the cache each time I sit down to a lot of work with \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e, but will let it auto-update most of the time.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"additional-features\"\u003eADDITIONAL FEATURES\u003c/h3\u003e\n\n\u003cp\u003eAside from the core features, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e comes with some additional features. First, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e comes with the ability to set up a keyboard shortcut to launch the title-specific search. I use \u003ccode\u003ecommand+shift+Z\u003c/code\u003e as my hotkey. If you setup the hotkey, you can launch immediately into the title search (with a snazzy interface):\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"auto title search\" src=\"images/projects/zotquery/zq_hotkey_search-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eYou can also change this hotkey to launch whichever query you like.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e also has the ability to be an option in your Alfred fallback searches. In order to setup \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e as a fallback search option, open Alfred’s preferences and go to the \u003ccode\u003eFeatures\u003c/code\u003e tab. Near the bottom of the page you will see a button to \u003ccode\u003eSetup fallback results\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"add fallback search in preferences pt. 1\" src=\"images/projects/zotquery/zq_fallback_setup-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eWhen you click that button a panel will slide out of top:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"add fallback search in preferences pt. 2\" src=\"images/projects/zotquery/zq_fallback-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eClick the \u003ccode\u003e+\u003c/code\u003e button and select \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e from the \u003ccode\u003eWorkflow Trigger\u003c/code\u003e list. You can even re-order the fallback searches, and put \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e near the top. When setup, this will allow you to search in Alfred like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"add fallback search in preferences pt. 3\" src=\"images/projects/zotquery/zq_fallback_search-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAnd have it immediately become a \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e search.\u003c/p\u003e\n\n\u003cp\u003eIt’s also possible to manually determine what \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e will use to search for the various query types. \u003cstrong\u003eNOTE:\u003c/strong\u003e This is probably a \u003cem\u003epower-user\u003c/em\u003e feature and not for those who don’t know their way around JSON.\u003c/p\u003e\n\n\u003cp\u003eIn order to alter the search scope for any query type, you will need to find and open the \u003ccode\u003ezot_filters.json\u003c/code\u003e file in \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e’s storage folder (\u003ccode\u003ez:bug\u003c/code\u003e -\u0026gt; \u003ccode\u003eStorage\u003c/code\u003e to open that folder). If you edit this file, it changes what \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e looks at for the various filters. The file is (obviously) in JSON format. The keys are the various types of filters (\u003ccode\u003egeneral\u003c/code\u003e, \u003ccode\u003etitles\u003c/code\u003e, \u003ccode\u003ein-collection\u003c/code\u003e, etc). For each key, there is a list of items that it will search. This items are themselves lists with two items (except for \u003ccode\u003enotes\u003c/code\u003e, which is only one item). To remove an item, be sure to remove its entirety:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e[\n\"data\",\n\"title\"\n],\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou could also use a scripting language to read the JSON, manipulate the dictionary, then overwrite the file with new JSON.\u003c/p\u003e\n\n\u003cp\u003eAnother “power-user” feature allows users to limit the overall scope of \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e to only their personal library. Since \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e now indexes and caches any Group Libraries that you may be a part of, these items are searchable from \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e. However, it is occasionally the case that user’s don’t want to search these items, but only their own personal items. In order to restrict \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e’s scope to \u003cem\u003eonly\u003c/em\u003e your personal library, you only need to change a few things.\u003c/p\u003e\n\n\u003cp\u003eIf you open Alfred and \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e, and you open the Run Script action connected to \u003ccode\u003ez:cache\u003c/code\u003e you will find this:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003epython zotquery.py --cache True False\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThese three arguments tell zotquery to use the caching object (\u003ccode\u003e--cache\u003c/code\u003e), to force a cache update (\u003ccode\u003eTrue\u003c/code\u003e) and to not limit the scope to only the user's personal library (\u003ccode\u003eFalse\u003c/code\u003e). As detailed in the description at the top of \u003ccode\u003ezotquery.py\u003c/code\u003e, the last argument is a Boolean value for whether or not to limit the scope of the cache to the user's personal library. By default, it is set to \u003ccode\u003eFalse\u003c/code\u003e, which means that group libraries are included in \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e's cache. If you change this to \u003ccode\u003eTrue\u003c/code\u003e, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e will only cache your personal library, and thus will only search your personal library.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e also has a cache updater that runs each time you perform an action. This is the Run Script action beneath the \"Citation Copied!\" notification for each filter type. If you open this Run Script action you will see:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003epython zotquery.py --cache False False\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis will check to see if the cache needs updating (thus the \u003ccode\u003eFalse\u003c/code\u003e force argument), and will include all libraries. To exclude group libraries, change each of these Run Script actions to:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003epython zotquery.py --cache False True\u003c/code\u003e.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eSo that’s how you use \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e. It’s a powerful tool. I hope you like it.\u003c/p\u003e\n","type":"project"}]