[{"title":"This is Fractaled Mind","url":"/articles/this-is-fractaled-mind/","content":"\u003cp\u003eI’ve been programming in Python for \u003ca href=\"\"\u003ea little over a year now\u003c/a\u003e. I really love Python, and I’m finally starting to feel comfortable reading other people’s code. For me, this was an important plateau. That’s some text with a footnote.\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e Being able to read and understand someone else’s code, regardless of their style, preferences, structure, or paradigm, means that I now understand enough Python to follow basically any particular code’s logic. Once I reached this state, however, I started to think about what the next plateau should be. What’s my next goal? I decided to set my sights on clean API design.\u003c/p\u003e\n\n\u003cp\u003eLike most programmers, of any level I would assume, I prefer clean, simple APIs. In Python, these APIs typically are our access points to libraries (whether in the \u003ca href=\"\"\u003eStandard Library\u003c/a\u003e or a 3rd party library). API design centers around how you make the functionality of your code available to other users or programmers. A good API is simple, intuitive, and clean. Simple means it only grants access to the functionality a user needs; intuitive means you can understand and perhaps even predict its semantics; and clean means the underlying code is well-structured, properly decoupled, and tested. I’ve written a decent amount of Python over the last year, but I wouldn’t call any of it simple, intuitive, or clean.\u003c/p\u003e\n\n\u003cp\u003eSo, how do I start to learn API design? My first thought was to start a new project from scratch, with a focus on its API. However, I quickly moved away from this approach. Starting totally from scratch means that my API can look like anything, can do anything, can be structured in any way. Clean API design requires structure, which often requires limits. Plus, starting a project from scratch requires so much more work beyond the actual API design itself. I wanted an approach that allowed to focus heavily on the API side of the program. My solution, for better or worse, was to write a Python wrapper for a UNIX program. For my money, this is actually a great way to learn Python API design. In what follows, I will describe how my own project evolved, what I learned, and why I consider it an all-around success.\u003c/p\u003e\n\n\u003cp\u003eAs with all programming aimed at learning, I believe its important to find a project/problem that interests you. I had been working with OS X’s \u003ccode\u003emdfind\u003c/code\u003e utility for another project and realized that it was powerful, but a pain to use. All of the \u003ca href=\"\"\u003eSpotlight attribute names\u003c/a\u003e are convoluted, the \u003ca href=\"\"\u003equery syntax\u003c/a\u003e is convoluted, and it’s far too easy to make a small mistake. All these issues aside, however, it’s a program with a predefined API that does something helpful. This is a perfect place for me to write my own Python API to open up \u003ccode\u003emdfind\u003c/code\u003e’s functionality to Python programmers without the hassle of the Terminal and Spotlight’s odd syntax.\u003c/p\u003e\n\n\u003cp\u003eIn designing the Python wrapper, I wanted to focus on flexibility and simplicity. This meant deconstructing the Spotlight query syntax. As you can read in the \u003ca href=\"\"\u003eREADME\u003c/a\u003e, the basic unit of any \u003ccode\u003emdfind\u003c/code\u003e query is a “comparison”, which is itself always composed of three parts:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eattribute\u003c/li\u003e\n  \u003cli\u003eoperator\u003c/li\u003e\n  \u003cli\u003epredicate\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo, my first question was, “How do I construct comparisons in Python?”\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eAnd that’s the footnote. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"my interesting new article","url":"/articles/my-interesting-new-article/","content":"\u003ch1 id=\"welcome-to-ghost\"\u003eWelcome to Ghost\u003c/h1\u003e\n\n\u003cp\u003eYou’re live! Nice. We’ve put together a little post to introduce you to\nthe Ghost editor and get you started. You can manage your content by\nsigning in to the admin area at \u003ccode\u003e\u0026lt;your blog URL\u0026gt;/ghost/\u003c/code\u003e. When you\narrive, you can select this post from a list on the left and see a\npreview of it on the right. Click the little pencil icon at the top of\nthe preview to edit this post and read the next section!\u003c/p\u003e\n\n\u003ch2 id=\"getting-started\"\u003eGetting Started\u003c/h2\u003e\n\n\u003cp\u003eGhost uses something called Markdown for writing. Essentially, it’s a\nshorthand way to manage your post formatting as you write!\u003c/p\u003e\n\n\u003cp\u003eWriting in Markdown is really easy. In the left hand panel of Ghost, you\nsimply write as you normally would. Where appropriate, you can use\n\u003cem\u003eshortcuts\u003c/em\u003e to \u003cstrong\u003estyle\u003c/strong\u003e your content. For example, a list:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eItem number one\u003c/li\u003e\n  \u003cli\u003eItem number two\n    \u003cul\u003e\n      \u003cli\u003eA nested item\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eA final item\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eor with numbers!\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eRemember to buy some milk\u003c/li\u003e\n  \u003cli\u003eDrink the milk\u003c/li\u003e\n  \u003cli\u003eTweet that I remembered to buy the milk, and drank it\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"links\"\u003eLinks\u003c/h3\u003e\n\n\u003cp\u003eWant to link to a source? No problem. If you paste in a URL, like\n\u003ca href=\"http://ghost.org\"\u003ehttp://ghost.org\u003c/a\u003e - it’ll automatically be linked up. But if you want\nto customise your anchor text, you can do that too! Here’s a link to\n\u003ca href=\"http://ghost.org\"\u003ethe Ghost website\u003c/a\u003e. Neat.\u003c/p\u003e\n\n\u003ch3 id=\"what-about-images\"\u003eWhat about Images?\u003c/h3\u003e\n\n\u003cp\u003eImages work too! Already know the URL of the image you want to include\nin your article? Simply paste it in like this to make it show up:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"The Ghost Logo\" src=\"https://ghost.org/images/ghost.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNot sure which image you want to use yet? That’s ok too. Leave yourself\na descriptive placeholder and keep writing. Come back later and drag and\ndrop the image in to upload:\u003c/p\u003e\n\n\u003ch3 id=\"quoting\"\u003eQuoting\u003c/h3\u003e\n\n\u003cp\u003eSometimes a link isn’t enough, you want to quote someone on what they’ve\nsaid. It was probably very wisdomous. Is wisdomous a word? Find out in a\nfuture release when we introduce spellcheck! For now - it’s definitely a\nword.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eWisdomous - it’s definitely a word.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch3 id=\"working-with-code\"\u003eWorking with Code\u003c/h3\u003e\n\n\u003cp\u003eGot a streak of geek? We’ve got you covered there, too. You can write\ninline \u003ccode\u003e\u0026lt;code\u0026gt;\u003c/code\u003e blocks really easily with back ticks. Want to show off\nsomething more comprehensive? 4 spaces of indentation gets you there.\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e.awesome-thing {\n    display: block;\n    width: 100%;\n}\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"ready-for-a-break\"\u003eReady for a Break?\u003c/h3\u003e\n\n\u003cp\u003eThrow 3 or more dashes down on any new line and you’ve got yourself a\nfancy new divider. Aw yeah.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"advanced-usage\"\u003eAdvanced Usage\u003c/h3\u003e\n\n\u003cp\u003eThere’s one fantastic secret about Markdown. If you want, you can write\nplain old HTML and it’ll still work! Very flexible.\u003c/p\u003e\n\n\u003cp\u003e\u003cinput type=\"text\" placeholder=\"I'm an input field!\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThat should be enough to get you started. Have fun - and let us know\nwhat you think :)\u003c/p\u003e\n\n","type":"article"},{"title":"Example Article","url":"/articles/example-article/","content":"\u003cp\u003eThis is an example article. You probably want to delete it and write your own articles!\u003c/p\u003e\n\n\u003cp\u003eThis is the content of my blog post. That’s some text with a footnote.\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003cp\u003e{{read more}}\u003c/p\u003e\n\n\u003cp\u003e0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eHello World, I know that I’m here\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eHere I come\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"smargh.github.io\"\u003elink\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003ekwargs\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"n\"\u003elist_comp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)]\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThis is an example block quote. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003e\u003cimg alt=\"fractal\" src=\"../../images/dragon_curve.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003cem\u003eoperator\u003c/em\u003e can be any one of the following:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003eOperator\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e==\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eequal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e!=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003enot equal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eless than (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003egreater than (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eless than or equal (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003egreater than or equal (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003ein_range(attribute, min_value, max_value)\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003enumeric values within the range of min_value through max_value in the specified attribute\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eThe \u003ccode\u003e==\u003c/code\u003e and \u003ccode\u003e!=\u003c/code\u003e operators allow for modification. These modifiers specify how the comparison is made.\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eModifier\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode\u003emetadata.[object].ignore_case\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eThe comparison is case insensitive.\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode\u003emetadata.[object].ignore_diacritics\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eThe comparison is insensitive to diacritical marks.\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eBoth modifiers are on by default. In order to turn one off, you need to set the property to \u003ccode\u003eFalse\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003efin.\u003c/p\u003e\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eThis is a footnote for my \u003ccode\u003eExample Article\u003c/code\u003e. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"BibQuery","url":"projects/bibquery","content":"\u003ch4 id=\"version-101\"\u003eVersion: 1.0.1\u003c/h4\u003e\n\n\u003ch4 id=\"download-from-packalhttpwwwpackalorgworkflowbibquery\"\u003eDownload from \u003ca href=\"http://www.packal.org/workflow/bibquery\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eBibQuery is essentially a visual clone of \u003ca href=\"http://fractaledmind.com/projects/zotquery/\"\u003eZotQuery\u003c/a\u003e for the Mac app \u003ca href=\"http://bibdesk.sourceforge.net/\"\u003eBibDesk\u003c/a\u003e, which is a citation manager for \u003ca href=\"http://www.bibtex.org/\"\u003eBibTeX\u003c/a\u003e. Users of BibDesk can now enjoy the clean search interface found in ZotQuery, with clear icons for publication type and clean presentation of publication data.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"bibquery.png\" src=\"https://www.evernote.com/shard/s41/sh/e354f593-a127-47e9-8ec3-212124341231/39f92d48e93282af26881d5cc0e95e97/deep/0/bibquery.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eUsers can also search their \u003ccode\u003e.bib\u003c/code\u003e databases with the same variety of queries:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003egeneral (keywords: \u003ccode\u003ebib\u003c/code\u003e or \u003ccode\u003eb\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003etitles (keywords: \u003ccode\u003ebib:t\u003c/code\u003e or \u003ccode\u003ebt\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003ecreators (keywords: \u003ccode\u003ebib:a\u003c/code\u003e or \u003ccode\u003eba\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003ein-keyword (keywords: \u003ccode\u003ebib:nk\u003c/code\u003e or \u003ccode\u003ebnk\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003ein-group (keywords: \u003ccode\u003ebib:ng\u003c/code\u003e or \u003ccode\u003ebng\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003efor keyword (keywords: \u003ccode\u003ebib:k\u003c/code\u003e or \u003ccode\u003ebk\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003efor group (keywords: \u003ccode\u003ebib:g\u003c/code\u003e or \u003ccode\u003ebg\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAlso of note, BibQuery works \u003cem\u003ewithout\u003c/em\u003e BibDesk being open and even functions if you have multiple \u003ccode\u003e.bib\u003c/code\u003e databases that BibDesk manages. In short, BibQuery brings all of your citations to you.\u003c/p\u003e\n\n\u003cp\u003eOnce you find the item you're looking for, BibQuery currently has 3 possible actions:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eyou can open up BibDesk to that item (simply press \u003ccode\u003ereturn\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eyou can copy a LaTeX cite command for that item (simply press \u003ccode\u003econtrol+return\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eyou can open that item's PDF attachment, if it has one (simply press \u003ccode\u003eshift+return\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n","type":"project"},{"title":"Classical Studies Resources","url":"projects/classical-studies-resources","content":"\u003cp\u003eThis is a work-in-progress collection of structured data and scripts for Classical Studies/Classics.\u003c/p\u003e\n\n\u003cp\u003eThe data has been compiled and organized from various online resources including:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ethe \u003ca href=\"http://www.perseus.tufts.edu/\"\u003ePerseus Project\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://dcc.dickinson.edu/\"\u003eDickenson College Commentaries\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://dge.cchs.csic.es/index.en\"\u003eThe Diccionario Griego-Español Project\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://www.annee-philologique.com/\"\u003eL'Année philologique\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is a work-in-progress collection of structured data and scripts for Classical Studies/Classics. The data has been compiled and organized from various online resources including the Perseus Project, Dickenson College Commentaries, The Diccionario Griego-Español Project, and L'Année philologique.\u003c/p\u003e\n\n\u003cp\u003eCurrently, these are the JSON structured files:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eDCC Greek Core Vocabulary\u003c/li\u003e\n  \u003cli\u003eDCC Latin Core Vocabulary\u003c/li\u003e\n  \u003cli\u003eGreek Authors\u003c/li\u003e\n  \u003cli\u003eGreek Texts\u003c/li\u003e\n  \u003cli\u003eLatin Texts\u003c/li\u003e\n  \u003cli\u003eL'Année philologique Journal Abbreviations (in two forms)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThere are also plain text files:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eDGE Authors and Works\u003c/li\u003e\n  \u003cli\u003eDGE Dictionary Abbreviations\u003c/li\u003e\n  \u003cli\u003eIndex to Smyth's Greek Grammar\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFinally, there is a random collection of scripts (mostly compiled Applescripts) that I have made at various points for various uses. This section requires much cleaning up, refactoring, and organization at this stage. But I am putting them here for now nonetheless.\u003c/p\u003e\n\n\u003cp\u003eHopefully, these will find some use for others.\u003c/p\u003e\n","type":"project"},{"title":"LibGen","url":"projects/libgen","content":"\u003cp\u003eSeach the \u003ca href=\"http://libgen.in/\"\u003eLibrary Genesis\u003c/a\u003e project's catalogue of books and download right from your keyboard, without ever launching a browser.\u003c/p\u003e\n\n\u003ch4 id=\"version-11\"\u003eVersion 1.1\u003c/h4\u003e\n\n\u003ch4 id=\"download-from-packalhttpwwwpackalorgworkflowlibgen\"\u003eDownload from \u003ca href=\"http://www.packal.org/workflow/libgen\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis is a relatively simple workflow that allows users to search the \u003ca href=\"http://gen.lib.rus.ec/\"\u003eLibrary Genesis PDF repository\u003c/a\u003e. For those who do not know, the Library Genesis project is:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003ebased in Russia, this is the largest currently openly available collection. They have several initiatives: i. +1 million files of mainly non-fiction ebooks, ii. +900k of mainly fiction ebooks, iii. +20 million papers from journals of science, history, art etc., iv. comics, magazines and paintings; totally amounting to at least 30 TB – easily the Library of Congress of the digital world. The Libgen movement mainly focusses on downloading whole collections that have already been posted in fora or as torrents, although a significant portion is also due to individual efforts. (per \u003ca href=\"https://sites.google.com/site/themetalibrary/library-genesis\"\u003eGoogle Sites\u003c/a\u003e)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis workflow has only one keyword and one action. Use the keyword \u003ccode\u003elibgen\u003c/code\u003e to begin a search. Select an item and press \u003ccode\u003eReturn\u003c/code\u003e to begin a download of the file in your browser of choice. The only real oddity of this workflow is that it requires the user to type a period (\u003ccode\u003e.\u003c/code\u003e) after the query in order to initiate the search. This helps with performance.\u003c/p\u003e\n","type":"project"},{"title":"Metadata","url":"projects/metadata","content":"\n\u003cp\u003ePython wrapper for OS X \u003ccode\u003emdfind\u003c/code\u003e and \u003ccode\u003emdls\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3 id=\"installation\"\u003eInstallation\u003c/h3\u003e\n\n\u003cp\u003eDownload the \u003ccode\u003e.zip\u003c/code\u003e file from GitHub.\u003c/p\u003e\n\n\u003cp\u003eI'm working on getting the library on \u003ca href=\"https://pypi.python.org/pypi\"\u003ePyPi\u003c/a\u003e soon.\u003c/p\u003e\n\n\u003ch3 id=\"file-metadata-query-expression-syntax\"\u003eFile Metadata Query Expression Syntax\u003c/h3\u003e\n\n\u003cp\u003eI have modeled the Python syntax on \u003ca href=\"https://developer.apple.com/library/mac/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html\"\u003eApple's original Spotlight query syntax\u003c/a\u003e. File metadata queries are constructed using a simple query language that takes advantage of Python's flexible class construction. The syntax is relatively straightforward, including comparisons, language agnostic options, and time and date variables.\u003c/p\u003e\n\n\u003ch4 id=\"comparison-syntax\"\u003eComparison Syntax\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003emetadata\u003c/code\u003e library implements 3 custom classes (\u003ccode\u003eMDAttribute\u003c/code\u003e, \u003ccode\u003eMDComparison\u003c/code\u003e, and \u003ccode\u003eMDExpression\u003c/code\u003e) to represent the various units of \u003ccode\u003emdfind\u003c/code\u003e's \u003ca href=\"https://developer.apple.com/library/mac/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html\"\u003eQuery Expression Syntax\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eQuery comparisons have the following basic format:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e[attribute] [operator] [value]\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe following sub-sections will describe these 3 elements more fully, but any such comparison will generate a \u003ccode\u003eMDComparison\u003c/code\u003e object. If you ever want to see what a particular \u003ccode\u003eMDComparison\u003c/code\u003e object will look like as an query string, you can coerce it into a unicode string using the \u003ccode\u003eunicode()\u003c/code\u003e operation (or into a string using the \u003ccode\u003estr()\u003c/code\u003e operation).\u003c/p\u003e\n\n\u003ch4 id=\"attribute\"\u003eAttribute\u003c/h4\u003e\n\n\u003cp\u003eThe first element of a query comparison is the \u003cem\u003eattribute\u003c/em\u003e, which is a \u003ccode\u003eMDAttribute\u003c/code\u003e object in \u003ccode\u003emetadata\u003c/code\u003e. \u003ccode\u003emetadata\u003c/code\u003e automatically generates \u003ccode\u003eMDAttribute\u003c/code\u003e objects for every Spotlight attribute on your system. You can view the names of all of these objects via \u003ccode\u003emetadata.attributes\u003c/code\u003e variable. Attributes have a Pythonic naming scheme, so \u003ccode\u003ekMDItemFSName\u003c/code\u003e becomes \u003ccode\u003emetadata.name\u003c/code\u003e and \u003ccode\u003ekMDItemContentType\u003c/code\u003e becomes \u003ccode\u003emetadata.content_type\u003c/code\u003e. The \u003ccode\u003eMDAttribute\u003c/code\u003e class is built on top of the metadata information retrieved from \u003ccode\u003emdimport -A\u003c/code\u003e. If you wish to see all of the information for a metadata attributes, you can use the \u003ccode\u003emetadata.[attribute].info()\u003c/code\u003e function.\u003c/p\u003e\n\n\u003cp\u003eAs with all of the custom classes, you can coerce a \u003ccode\u003eMDAttribute\u003c/code\u003e object into a unicode string using the \u003ccode\u003eunicode()\u003c/code\u003e operation (i.e. \u003ccode\u003eunicode(metadata.name)\u003c/code\u003e returns \u003ccode\u003eu'kMDItemFSName'\u003c/code\u003e).\u003c/p\u003e\n\n\u003ch4 id=\"operator\"\u003eOperator\u003c/h4\u003e\n\n\u003cp\u003eThe \u003cem\u003eoperator\u003c/em\u003e can be any one of the following:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003eOperator\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e==\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eequal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e!=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003enot equal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eless than (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003egreater than (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eless than or equal (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003egreater than or equal (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003ein_range(attribute, min_value, max_value)\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003enumeric values within the range of min_value through max_value in the specified attribute\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eThe \u003ccode\u003e==\u003c/code\u003e and \u003ccode\u003e!=\u003c/code\u003e operators allow for modification. These modifiers specify how the comparison is made.\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eModifier\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode\u003emetadata.[object].ignore_case\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eThe comparison is case insensitive.\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode\u003emetadata.[object].ignore_diacritics\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eThe comparison is insensitive to diacritical marks.\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eBoth modifiers are on by default. In order to turn one off, you need to set the property to \u003ccode\u003eFalse\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003emetadata\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eignore_case\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eFalse\u003c/span\u003e\n\u003cspan class=\"n\"\u003ecomparison\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e'com.adobe.pdf'\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch4 id=\"value\"\u003eValue\u003c/h4\u003e\n\n\u003cp\u003eThe \u003cem\u003evalue\u003c/em\u003e element of a query comparison can be a string or integer. Strings can use wildcard characters (\u003ccode\u003e*\u003c/code\u003e and \u003ccode\u003e?\u003c/code\u003e) to make the search fuzzy. The \u003ccode\u003e*\u003c/code\u003e character matches multiple characters whereas the \u003ccode\u003e?\u003c/code\u003e wildcard character matches a single character (\u003cem\u003eNote\u003c/em\u003e: Even in the Terminal, I cannot get wildcard searches with \u003ccode\u003e?\u003c/code\u003e to function properly. I would recommend using \u003ccode\u003e*\u003c/code\u003e as your ony wildcard character). Here are some examples demonstrating how the wildcards function:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# Matches attribute values that begin with “paris”. For example, matches “paris”, but not “comparison”.\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_content\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"paris*\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Matches attribute values that end with “paris”.\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_content\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"*paris\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Matches attributes that contain \"paris\" anywhere within the value. For example, matches “paris” and “comparison”.\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_content\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"*paris*\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Matches attribute values that are exactly equal to “paris”.\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_content\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"paris\"\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIn order to use any of the greater-than or less-than operators, your value needs either to be an integer (or float) or a date object. In order to make the API as intuitive as possible, \u003ccode\u003emetadata\u003c/code\u003e allows for human-readable date statements. That is, you do not need to pass \u003ccode\u003edatetime\u003c/code\u003e objects as the \u003cem\u003evalue\u003c/em\u003e of a comparison with a date attribute (like \u003ccode\u003emetadata.creation_date\u003c/code\u003e). \u003ccode\u003emetadata\u003c/code\u003e uses the \u003ccode\u003eparsedatetime\u003c/code\u003e library to convert human-readable dates into \u003ccode\u003edatetime\u003c/code\u003e objects. The following are all acceptable date comparisons:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# Created before today\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreation_date\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e'today'\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Created after last month\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreation_date\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e'one month ago'\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cp\u003eIf \u003ccode\u003emetadata\u003c/code\u003e cannot parse your datetime string, it will raise an \u003ccode\u003eException\u003c/code\u003e. The parsing engine is good, but not perfect and can seem capricious. For example, \u003ccode\u003eone month ago\u003c/code\u003e is parsable, but \u003ccode\u003ea month ago\u003c/code\u003e is not. Datetime strings that are parsed are converted into an ISO-8601-STR compliant string.\u003c/p\u003e\n\n\u003ch3 id=\"expression-syntax\"\u003eExpression syntax\u003c/h3\u003e\n\n\u003cp\u003eYou can combine \u003ccode\u003eMDComparison\u003c/code\u003e objects to create a more complex expression, represented by the \u003ccode\u003eMDExpression\u003c/code\u003e class. Comparison objects can be combined in one of two ways: using a conjuction (\u003ccode\u003e\u0026amp;\u003c/code\u003e) or using a disjuction (\u003ccode\u003e|\u003c/code\u003e). Not only can \u003ccode\u003eMDComparison\u003c/code\u003e objects be combined, but you can nest and combine any combination of \u003ccode\u003eMDComparison\u003c/code\u003e objects and \u003ccode\u003eMDExpression\u003c/code\u003e objects. For example:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# query for audio files authored by “stephen” (ignoring case)\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# query for audio files authored by “stephen” or “daniel”\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# query for audio or video files authored by “stephen” or “daniel”\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.video\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# you could also break the last expression into chunks\u003c/span\u003e\n\u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.video\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003efinal_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHere's a complex expression to find only audio or video files that have been changed in the last week authored by someone named either \"Stephen\" or \"Daniel\" (ignoring case and diacritics, so it would match a file authored by \"danièl\"):\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.video\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etime_comp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_change_date\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e'one week ago'\u003c/span\u003e\n\u003cspan class=\"n\"\u003equery_expression\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etime_comp\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eNote\u003c/em\u003e: parentheses are needed for the first two expressions. Without them, you would get a \u003ccode\u003eTypeError\u003c/code\u003e as Python thinks you are trying to combine the string \u003ccode\u003e\"daniel\"\u003c/code\u003e with the \u003ccode\u003eMDAttribute\u003c/code\u003e object \u003ccode\u003eauthors\u003c/code\u003e, which is an obviously unsupported expression.\u003c/p\u003e\n\n\u003cp\u003eOnce you have created your query expression (or even a simple comarison), you will pass this to \u003ccode\u003emetadata.find()\u003c/code\u003e in order to execute the file searching.\u003c/p\u003e\n\n\u003ch2 id=\"functions\"\u003eFunctions\u003c/h2\u003e\n\n\u003ch3 id=\"find\"\u003e\u003ccode\u003efind\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe main function is \u003ccode\u003emetadata.find()\u003c/code\u003e. It takes one required argument, \u003ccode\u003equery_expression\u003c/code\u003e, which can be either an \u003ccode\u003eMDExpression\u003c/code\u003e object or an \u003ccode\u003eMDComparison\u003c/code\u003e object. In addition to this one required argument, \u003ccode\u003emetadata.find()\u003c/code\u003e also has the optional argument \u003ccode\u003eonly_in\u003c/code\u003e for you to focus the scope of your search to a particular directory tree. This simply needs to be a full (non-relative) path passed as a Unicode string. Other than that, there's nothing else to it. Build you query expression, pass it to \u003ccode\u003efind()\u003c/code\u003e and get your results as a Python list. Here's an example of building the sample expression above and passing it to \u003ccode\u003emetadata.find()\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003emetadata\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.video\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etime_comp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_change_date\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e'one week ago'\u003c/span\u003e\n\u003cspan class=\"n\"\u003equery_expression\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etime_comp\u003c/span\u003e\n\u003cspan class=\"n\"\u003eresults\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003equery_expression\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"list\"\u003e\u003ccode\u003elist\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eIn addition to \u003ccode\u003efind()\u003c/code\u003e, the \u003ccode\u003emetadata\u003c/code\u003e module has the \u003ccode\u003elist\u003c/code\u003e function, which is a wrapper around the \u003ccode\u003emdls\u003c/code\u003e command. You simply pass it a file path and it returns a dictionary of metadata attributes and values. Once again, the attribute names (the dictionary keys) are simplified using the algorithm used to convert Spotlight attributes to Pythonic names.\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003emetadata\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003efile_metadata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile_path\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile_metadata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e'name'\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"write\"\u003e\u003ccode\u003ewrite\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eFinally, there is an alpha version of a \u003ccode\u003ewrite()\u003c/code\u003e function, which allows you to write metadata to a file. Right now, I have it defaulted to writing to the \u003ccode\u003ekMDItemUserTags\u003c/code\u003e attribute, but a few others have worked. I need to test it more to make it more general.\u003c/p\u003e\n","type":"project"},{"title":"Pandoc Templates","url":"projects/pandoc-templates","content":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eA collection of support files for use with \u003ca href=\"http://johnmacfarlane.net/pandoc/\"\u003ePandoc\u003c/a\u003e, and specifically for helping to turn pandoc markdown files\ninto nice HTML, LaTeX, PDF, and Microsoft Word Document output. These files go in your \u003ccode\u003e~/.pandoc/\u003c/code\u003e folder.\u003c/p\u003e\n\n\u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e\n\n\u003cp\u003eTo install, simply run this command from your Terminal:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003epython\ngit clone https://github.com/smargh/pandoc-templates.git ~/.pandoc\n\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will clone this repositorty into the appropriate Pandoc templates directory.\u003c/p\u003e\n\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\n\u003cp\u003eWhat's included?\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eUnder \u003ccode\u003etemplates\u003c/code\u003e, some \u003ca href=\"http://johnmacfarlane.net/pandoc/\"\u003ePandoc\u003c/a\u003e templates for an article in PDF (via LaTeX) or HTML. These can be be pointed to directly with the \u003ccode\u003e--template=\u003c/code\u003e switch as appropriate. The \u003ccode\u003ehtml.template\u003c/code\u003e, \u003ccode\u003elatex.template\u003c/code\u003e, and \u003ccode\u003exelatex.template\u003c/code\u003e files are all forked from KJ Healy's \u003ca href=\"https://github.com/kjhealy/pandoc-templates\"\u003e\u003ccode\u003epandoc-templates repo\u003c/code\u003e\u003c/a\u003e. The \u003ccode\u003ereference.docx\u003c/code\u003e file, however, is of my own creation. It can be used via the \u003ccode\u003e--reference-docx\u003c/code\u003e pandoc option. The \u003ccode\u003e.docx\u003c/code\u003e template uses \u003ca href=\"http://www.typography.com/fonts/hoefler-text/overview/\"\u003eHoefler Text\u003c/a\u003e as its font. It is double spaced, with small caps headers and 1\" indented, single-line block quotes. It works well for academic papers. The \u003ccode\u003elatex.template\u003c/code\u003e and \u003ccode\u003exelatex.template\u003c/code\u003e depend on the style files in \u003ca href=\"http://kjhealy.github.com/latex-custom-kjh/\"\u003elatex-custom-kjh\u003c/a\u003e.\u003c/li\u003e\n  \u003cli\u003eUnder \u003ccode\u003emarked\u003c/code\u003e, a single CSS file for generating HTML previews of Markdown documents using \u003ca href=\"http://marked2app.com/\"\u003eMarked\u003c/a\u003e, a very handy HTML live previewer for markdown files. The \u003ccode\u003ecss\u003c/code\u003e file in the \u003ccode\u003emarked/\u003c/code\u003e folder is meant to be used together with pandoc and \u003ca href=\"http://markedapp.com/\"\u003eMarked\u003c/a\u003e. To have \u003ca href=\"http://marked2app.com/\"\u003eMarked\u003c/a\u003e work with \u003ca href=\"http://johnmacfarlane.net/pandoc/\"\u003ePandoc\u003c/a\u003e, simply go to Marked \u0026gt; Preferences \u0026gt; Advanced. Then specify the filepath to Pandoc like this (e.g.): \u003ccode\u003e/usr/bin/pandoc\u003c/code\u003e and the various switches and arguments to pandoc in the 'Args' field below it, like this:\n  \u003ccode\u003eshell\n  -r markdown -w html -s -S --bibliography=biblio.bib\n \u003c/code\u003e\nThen check the box telling Marked to use this by default. The \u003ccode\u003epandoc\u003c/code\u003e CSS file can be added in Marked \u0026gt; Style \u0026gt; Custom CSS. Marked can then use it to format the HTML output such that it looks like the final \u003ccode\u003e.docx\u003c/code\u003e file will.\u003c/li\u003e\n  \u003cli\u003eThe CSL files in the \u003ccode\u003ecsl/\u003c/code\u003e folder format the bibliography generated by pandoc and citeproc. (For simplicity we avoid dealing with biblatex directly at all.) The \u003ccode\u003echicago-syllabus.csl\u003c/code\u003e file makes a tiny change to a standard Chicago Notes CSL file so you can use it to output citation information in the body text of a document. This makes it useful for lists of references in CVs and course syllabuses. The other files are the APA, MLA, and Chicago standard files from the main \u003ca href=\"https://github.com/citation-style-language/styles\"\u003eCSL styles repository\u003c/a\u003e.\u003c/li\u003e\n  \u003cli\u003eUnder \u003ccode\u003edefaults\u003c/code\u003e, you will find all of Pandoc's standard templates for the many of its output formats. These can be helpful in creating your own templates.\u003c/li\u003e\n  \u003cli\u003eFinally, under \u003ccode\u003eexamples\u003c/code\u003e, you will find one plain text Markdown file, one BibTeX \u003ccode\u003e.bib\u003c/code\u003e file and a \u003ccode\u003e.docx\u003c/code\u003e file. These demonstrate how these templates can be used to generate a beautiful Microsoft Word file from Pandoc. To generate the files for youself, use this pandoc command:\n  \u003ccode\u003eshell\n  -r markdown -w docx -s -S --bibliography=Thesis.bib --csl=/Users/smargheim/Documents/GitHub/pandoc-templates/csl/chicago-author-date.csl --reference-docx=/Users/smargheim/Documents/GitHub/pandoc-templates/templates/reference.docx academic_test.txt --output=academic_test.docx\n \u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","type":"project"},{"title":"Pandoctor","url":"projects/pandoctor","content":"\n\u003ch4 id=\"version-105\"\u003eVersion: 1.0.5\u003c/h4\u003e\n\n\u003ch4 id=\"download-from-packalhttpwwwpackalorgworkflowpandoctor\"\u003eDownload from \u003ca href=\"http://www.packal.org/workflow/pandoctor\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e is a relatively simple, easy-to-use way to bring the high-powered functionality of \u003ca href=\"http://johnmacfarlane.net/pandoc/\"\u003e\u003ccode\u003epandoc\u003c/code\u003e\u003c/a\u003e to you. For those new to \u003ccode\u003epandoc\u003c/code\u003e, \u003ccode\u003epandoc\u003c/code\u003e is \"the universal document converter\". It is an amazingly powerful utility that allows you to convert structured text from a ton of possible input formats to an even larger number of output formats.\u003c/p\u003e\n\n\u003cp\u003eA potential downside to \u003ccode\u003epandoc\u003c/code\u003e, however, for many users is that it is entirely a command line utility. This means, on the Mac, you \u003cem\u003ehave to\u003c/em\u003e open Terminal to use it. For many Mac/Alfred users, this is at least slightly daunting. Yet I believe that this should not be a deterrent to more people coming to use the power of \u003ccode\u003epandoc\u003c/code\u003e. This is the reason for \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e. Now, Alfred users can enjoy the comfortability and familiarity of the Alfred interface to manage \u003ccode\u003epandoc\u003c/code\u003e. Here's how:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e is accessed via \u003ca href=\"http://support.alfredapp.com/workflows:config:triggers-file-action\"\u003eFile Actions\u003c/a\u003e. The basic file action is \"New Pandoc Conversion\", which will kick off a series of interactive Alfred menus to create your \u003ccode\u003epandoc\u003c/code\u003e conversion. Once you have chosen the file you want to convert and selected the file action, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e works in 4 stages:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003especify the text format of the chosen file\u003c/li\u003e\n  \u003cli\u003echose the output format you want for the converted file\u003c/li\u003e\n  \u003cli\u003echose any options you want for the conversion process\u003c/li\u003e\n  \u003cli\u003erun \u003ccode\u003epandoc\u003c/code\u003e to convert the input file using your chosen options\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eLuckily, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e is built to move you through these four steps seamlessly and without any interaction on your part aside from selecting and setting the formats and options you want. Let's walk through the steps.\u003c/p\u003e\n\n\u003ch2 id=\"configuration\"\u003eConfiguration\u003c/h2\u003e\n\n\u003cp\u003eWhen you first download \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e, you will need to configure a few settings. Luckily, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e takes care of this for you. All you need to do is use the \u003ccode\u003edr:config\u003c/code\u003e keyword to get everything set up. Once you see the completion notification, you can start using \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e for real.\u003c/p\u003e\n\n\u003ch2 id=\"running-a-new-pandoc-conversion\"\u003eRunning a new \u003ccode\u003epandoc\u003c/code\u003e Conversion\u003c/h2\u003e\n\n\u003ch3 id=\"using-the-file-action\"\u003eUsing the File Action\u003c/h3\u003e\n\n\u003cp\u003eIf you've configured, you begin \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e by using \u003ca href=\"http://support.alfredapp.com/features:file-search\"\u003eAlfred's file navigation abilities\u003c/a\u003e to find the file you want \u003ccode\u003epandoc\u003c/code\u003e to convert for you. Once you've found the file, enter Alfred's File Actions pane for that file (by default this is \u003ccode\u003e→\u003c/code\u003e). Then find \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e's \"New Pandoc Conversion\" file action:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Conversion File Action\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/file_action_new.png\" /\u003e\u003c/p\u003e\n\n\u003ch3 id=\"selecting-the-input-format\"\u003eSelecting the Input Format\u003c/h3\u003e\n\n\u003cp\u003eThis tells \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e to begin a new conversion on that file. Once you select \"New Pandoc Conversion\", \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will automatically ask you to choose the format of this input file:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:in` Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_in.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e tries to be smart about formatting, so it will pre-fill the search bar with what it believes to be the file's formatting. However, if you need to, you can simply delete this and start searching yourself. You will see that \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e displays the full name of the input format as well as a short description to help you discern between similar formats (such as the 4 types of \u003ca href=\"http://daringfireball.net/projects/markdown/\"\u003eMarkdown\u003c/a\u003e \u003ccode\u003epandoc\u003c/code\u003e accepts).\u003c/p\u003e\n\n\u003ch3 id=\"selecting-the-output-format\"\u003eSelecting the Output Format\u003c/h3\u003e\n\n\u003cp\u003eWhen you choose the input format, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will then automatically ask you to select what format you want the outputted, converted file to be:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:out` Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_out.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eYou have access to the full range of possible output formats from this selection. You can use the arrow keys to navigate down, or start searching for your desired output format by name:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:out` Searching\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_out_search.png\" /\u003e\u003c/p\u003e\n\n\u003ch3 id=\"selecting-any-options\"\u003eSelecting any Options\u003c/h3\u003e\n\n\u003cp\u003eAs soon as you select the output format, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will ask you what Options you want to add to this \u003ccode\u003epandoc\u003c/code\u003e conversion:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:opt` Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt.png\" /\u003e\u003c/p\u003e\n\n\u003ch4 id=\"pandoctor-ui\"\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e UI\u003c/h4\u003e\n\n\u003cp\u003eThere are a few elements to the UI that require more explanation. First, you see that some items have the inner rectangle filled, and others do not. This is your visual cue to determine which options are active for this conversion (filled) and which are not (empty).\u003c/p\u003e\n\n\u003ch4 id=\"pandoctor-default-options\"\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e Default Options\u003c/h4\u003e\n\n\u003cp\u003eWhen you first come to this \"screen\" or \"window\" (not sure what to call individual Alfred windows/pop-ups), you will see that some options are already filled, even though you didn't select them. These are \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e's \u003ccode\u003eDefault Options\u003c/code\u003e. The file (\u003ccode\u003epandoc_defaults.json\u003c/code\u003e) specifying which options are by default always on (filled) can be found inside the workflow's folder (if you need to open this folder, you can do so easily using the \u003ccode\u003edr:help\u003c/code\u003e keyword and selecting \u003ccode\u003eRoot\u003c/code\u003e). This file also has comments for most options, which gives some information about them (Obviously, for detailed information about \u003ccode\u003epandoc\u003c/code\u003e's options, visit the \u003ca href=\"http://johnmacfarlane.net/pandoc/README.html\"\u003eUser Guide\u003c/a\u003e). When installed, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e has 4 default options on:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eparse-raw\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003eDescription: \"Parse untranslatable HTML codes and LaTeX environments as raw HTML or LaTeX, instead of ignoring them.\"\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003esmart\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003eDescription: \"Produce typographically correct output, converting straight quotes to curly quotes, — to em-dashes, – to en-dashes, and … to ellipses.\"\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003enormalize\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003eDescription: \"Normalize the document after reading: merge adjacent Str or Emph elements, for example, and remove repeated Spaces.\"\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003estandalone\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003eDescription: \"Produce output with an appropriate header and footer (e.g. a standalone HTML, LaTeX, or RTF file, not a fragment).\"\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"user-default-options\"\u003eUser Default Options\u003c/h4\u003e\n\n\u003cp\u003eIf you want to set your own default options (overriding these), you can use the \u003ccode\u003edr:defs\u003c/code\u003e keyword. This will provide a \"window\" similar to the standard Options window, but without anything selected. Here select whatever items you want to be on by default for any new conversion.\u003c/p\u003e\n\n\u003ch3 id=\"selecting-any-options-pt-2\"\u003eSelecting any Options, pt. 2\u003c/h3\u003e\n\n\u003cp\u003eBack to the \u003ccode\u003eOptions Selection\u003c/code\u003e, though. You will also see that that there are 2 basic types of options:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eBoolean\u003c/li\u003e\n  \u003cli\u003eArgument\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"selecting-boolean-options\"\u003eSelecting Boolean Options\u003c/h4\u003e\n\n\u003cp\u003eIf you select a Boolean option, it will simply \"turn on\" (the rectangle will be filled) and this screen will refresh. For example, here's this screen right before I choose to \"turn on\" the \u003ccode\u003estrict\u003c/code\u003e option:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`parse` Option off\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_parse_off.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eand here's what the screen looks like as soon as it refreshes after I selected that option:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`parse` Option on\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_parse_on.png\" /\u003e\u003c/p\u003e\n\n\u003ch4 id=\"selecting-argument-options\"\u003eSelecting Argument Options\u003c/h4\u003e\n\n\u003cp\u003eSo, \"turning on\" Boolean options is simple. Argument options, however, require a bit more work. As the name suggests, this type of option requires more information (an \"argument\"). (Again, if any of this is confusing, I would highly recommend reading through \u003ccode\u003epandoc\u003c/code\u003e's \u003ca href=\"http://johnmacfarlane.net/pandoc/README.html\"\u003eUser Guide\u003c/a\u003e). This means that you will need to tell \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e what you want the \"argument\", the information, to be. So, whenever you select an \u003ccode\u003eArgument\u003c/code\u003e option, you are taken to an intermediary \"screen\" where you can supply the needed information. For example, if I were to select the \u003ccode\u003etoc-depth\u003c/code\u003e argument option, I would then see this screen:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Set Option Empty\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_set_pre.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eI would then fill in the information (I want the Table of Contents in the converted  file to only go 4 levels deep):\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Set Option Filled\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_set_filled.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you fill in the information, press \u003ccode\u003ereturn\u003c/code\u003e (i.e. \"Set argument value of chosen option\") and return to the base Options \"screen\".\u003c/p\u003e\n\n\u003ch4 id=\"finalizing-options\"\u003eFinalizing Options\u003c/h4\u003e\n\n\u003cp\u003eNow, as soon as you have set all of the options you need, you only need to select the top item on this \"screen\": \u003ccode\u003eDone setting Options?\u003c/code\u003e. This will close this screen. As I've noted before, if you instead select an option, this screen will merely refresh.\u003c/p\u003e\n\n\u003ch4 id=\"pandoctor-ui-pt-2\"\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e UI, pt. 2\u003c/h4\u003e\n\n\u003cp\u003e\u003cem\u003eA small UI note\u003c/em\u003e: there is always a \"header\" for every list that \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e displays. However, there are 2 different kinds of headers:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003einformational and non-selectable\u003c/li\u003e\n  \u003cli\u003einterrogative and selectable\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe purely informational headers have the little \u003ccode\u003ei\u003c/code\u003e in the center. These headers are found when selecting input and output formats. They cannot be selected; they simply tell you what that \"screen\" is. The interrogative headers, however, can be selected. These have the \u003ccode\u003e?\u003c/code\u003e in the center. You will use these to \"close\" the screen you are viewing.\u003c/p\u003e\n\n\u003ch4 id=\"running-your-pandoc-conversion\"\u003eRunning your \u003ccode\u003epandoc\u003c/code\u003e Conversion\u003c/h4\u003e\n\n\u003cp\u003eReturning to the flow of the conversion, you have just finished selecting all of the options for your \u003ccode\u003epandoc\u003c/code\u003e conversion. As soon as you hit \u003ccode\u003eDone setting Options?\u003c/code\u003e, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will begin processing the conversion. This process can take a bit of time (particularly when generating PDFs), but when it is complete, you will see a notification in the top right of your screen:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"notify\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_notification.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThat's all there is to it really. In 4 simple steps, you can convert just about anything. However, for those more inclined toward \"power-use\", there are a few other abilities under \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e's hood.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"ignoring-options\"\u003eIgnoring Options\u003c/h2\u003e\n\n\u003cp\u003eFirst off, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e offers the ability to \"hide\" or \"ignore\" certain options in the Select Options screen. \u003ccode\u003epandoc\u003c/code\u003e itself offers \u003cem\u003ea lot\u003c/em\u003e of options, and always seeing them all is often unnecessary. If there are any options that you \u003cstrong\u003enever\u003c/strong\u003e use, you can simply remove them. To do this, you need to use the \u003ccode\u003edr:ignore\u003c/code\u003e keyword:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:ignore` Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will bring up a \"screen\" almost identical to the Select Options screen, but here you are choosing what options are hidden from that other screen. Once again, the two icons are informative. If an item is filled in, this means that it is going to be ignored:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`data-dir` Ignored\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore_data_on.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOtherwise (not filled in), it will appear in the standard Select Options window:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`data-dir` Not Ignored\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore_data_off.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs with the basic window, you can search here or just use the arrow keys. Select all of the options you want to ignore, and when you are done, select \u003ccode\u003eDone setting Ignore?\u003c/code\u003e to exit.\u003c/p\u003e\n\n\u003ch2 id=\"template-commands\"\u003eTemplate Commands\u003c/h2\u003e\n\n\u003cp\u003eFor those who use \u003ccode\u003epandoc\u003c/code\u003e frequently, you will likely use the same basic command over and over again. If that's the case, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e has a \"power-user\" feature just for you. In addition to the \"on-the-fly\" conversion available via the \"New Pandoc Conversion\" file action, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e also hase a \"Templated Pandoc Conversion\" file action:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"template\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/file_action_template.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis action grants you access to any and all \u003ccode\u003epandoc\u003c/code\u003e template commands you have set up. Before I detail how to create a new template, let's briefly discuss the elements of a template. \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e ships with a file in the workflow directory that has some sample templates. This file is titled \u003ccode\u003epandoc_templates.json\u003c/code\u003e. If you open this file in your text editor of choice, it will look just like this:\u003c/p\u003e\n\n\u003ch3 id=\"sample-templates\"\u003eSample Templates\u003c/h3\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e/*\n    PANDOC TEMPLATED COMMANDS\n\n    The ``defaults``, at initiation the `parse-raw`, `smart`, `normalize`, and `standalone`\n    options, are found at ``pandoc_defaults.json``.\n\n    HOW TO CREATE TEMPLATE:\n        + take your CLI pandoc command\n            (e.g. \"pandoc -s -S --toc -c pandoc.css -A footer.html README -o example3.html\")\n        + convert all \"short option + space + argument\" to \"long option + '=' + argument\"\n            (e.g. \"pandoc -s -S --toc --css=pandoc.css --include-after-body=footer.html README --output=example3.html\")\n        + split all options into list of individual options\n            (e.g. [pandoc, -s, -S, --toc, --css=pandoc.css, --include-after-body=footer.html, README, --output=example3.html])\n        + remove initial call to `pandoc` and replace input text path with ``{input}`` variable\n            (e.g. [-s, -S, --toc, --css=pandoc.css, --include-after-body=footer.html, {input}, --output={input}.html])\n        + make sure every option is a JSON string\n            (e.g. [\"-s\", \"-S\", \"--toc\", \"--css=pandoc.css\", \"--include-after-body=footer.html\", \"{input}\", \"--output={input}.html\"])\n        + give it a memorable name\n        + determine if you want to automatically add your default options to the command or not.\n\n    In order to make your templates more extensible, you can use any of 3 built-in\n    variables that relate to the file chosen to convert:\n        * {input_file} = The full path to the file, including file extension\n        * {input_name} = The full path to the file, without file extension\n        * {input_dir} = The full path to the parent directory of the file\n\n    For example, this template would only work if you kept a project directory\n    that contained both `biblio.bib` and `chicago-author-date.csl` alongside\n    your input file.\n        {\n            \"name\": \"Biblio Test\",\n            \"use_defaults\": false,\n            \"options\": [\n                \"-s\",\n                \"-S\",\n                \"--biblio={input_dir}/biblio.bib\",\n                \"--csl={input_dir}/chicago-author-date.csl\",\n                \"{input_file}\",\n                \"--output={input_name}.html\"\n            ]\n        }\n*/\n[\n    {\n        \"name\": \"XeLaTeX PDF\",\n        \"use_defaults\": true,\n        \"options\": [\n            \"-N\",\n            \"--variable=mainfont:Georgia\",\n            \"--variable=sansfont:Arial\",\n            \"--variable=monofont:\\\"Andale Mono\\\"\",\n            \"--variable=fontsize:12pt\",\n            \"{input_file}\",\n            \"--latex-engine=xelatex\",\n            \"--toc\",\n            \"--output={input_name}.pdf\"\n        ]\n    },\n    {\n        \"name\": \"Pandoc MD -\u0026gt; HTML\",\n        \"use_defaults\": true,\n        \"options\": [\n            \"--toc\",\n            \"--css=pandoc.css\",\n            \"{input_file}\",\n            \"--output={input_name}.html\"\n        ]\n    }\n]\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"template-elements\"\u003eTemplate Elements\u003c/h3\u003e\n\n\u003cp\u003eAs you can see, it comes with two \"default\" templates, as well as one commented-out template. These are there to help you see the format of the JSON as well as \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e's unique features. As the default templates show, each template must have 3 keys:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003euse_defaults\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eoptions\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe type of value for each of these is fixed. For \u003ccode\u003ename\u003c/code\u003e, you must use a string; for \u003ccode\u003euse_defaults\u003c/code\u003e, you use a Boolean (either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e); and for \u003ccode\u003eoptions\u003c/code\u003e, you use a list/array of strings. The \u003ccode\u003ename\u003c/code\u003e parameter is simple; this is the name of your template (what will be displayed when you are asked to choose which template you want to use). The \u003ccode\u003euse_defaults\u003c/code\u003e parameter is fairly self-explanatory as well; do you want to automatically add the default options to this command or not? It is the \u003ccode\u003eoptions\u003c/code\u003e parameter where the magic happens, and this is the one that requires the most precision.\u003c/p\u003e\n\n\u003cp\u003eAs the comments in the file will tell you, you need to properly format your \u003ccode\u003epandoc\u003c/code\u003e command for use as a \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e template. This means, each option is its own item in the list and each option is without spaces (unless properly quoted). This will require you to use the \"long\" version of any option along with the an equals [\u003ccode\u003e=\u003c/code\u003e]. The 3 given examples give thorough demonstration of what acceptable templates can look like.\u003c/p\u003e\n\n\u003ch3 id=\"template-variables\"\u003eTemplate Variables\u003c/h3\u003e\n\n\u003cp\u003eIn addition to these formatting requirements, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e also gives you the ability to abstract your template properly. For any template, you have access to 3 variables:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e{input_file}\u003c/code\u003e = The full path to the file, including file extension\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e{input_name}\u003c/code\u003e = The full path to the file, without file extension\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e{input_dir}\u003c/code\u003e = The full path to the parent directory of the file\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese variables will allow you to properly use your template with any conversion. You will see that every template should use \u003ccode\u003e{input_file}\u003c/code\u003e and \u003ccode\u003e{input_name}\u003c/code\u003e for the input and output options respectively. In addition, if you specify any outside resource files, you can then use \u003ccode\u003e{input_dir}\u003c/code\u003e to ensure that the full path is properly constructed (see the \"Biblio Test\" example in the comments).\u003c/p\u003e\n\n\u003ch3 id=\"running-a-template-command\"\u003eRunning a Template Command\u003c/h3\u003e\n\n\u003cp\u003eOnce you set up a template, it will make using \u003ccode\u003epandoc\u003c/code\u003e \u003cem\u003eso much easier\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eAll you have to do is select the file in Alfred's file navigator, choose the \"Templated Pandoc Conversion\" file action, and then choose which template you want to use. That's it.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"**`Pandoctor`** Templates Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_temps.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs with the New Conversion, the process takes a variable amount of time. Whenever the conversion does finish, however, you will see a notification in the top right of your screen:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Notification\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_notify.png\" /\u003e\u003c/p\u003e\n\n\u003ch3 id=\"creating-a-template\"\u003eCreating a Template\u003c/h3\u003e\n\n\u003cp\u003eSo, how do you set up template commands? As the Template Elements section describes, each template requires 3 things. So, in order to create a new template, you will need to create each of these 3 elements. Hopefully, however, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e makes this dead-simple to do.\u003c/p\u003e\n\n\u003cp\u003eTo begin creating a new template, use the \u003ccode\u003edr:temp:set\u003c/code\u003e keyword:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Keyword to Create New Template\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_kw.png\" /\u003e\u003c/p\u003e\n\n\u003ch4 id=\"setting-template-name\"\u003eSetting Template Name\u003c/h4\u003e\n\n\u003cp\u003eType the keyword and then press \u003ccode\u003ereturn\u003c/code\u003e. This will immediately jump you to assigning a name for your new template. This will be the \"screen\" that you see:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Add Name\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_name_pre.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eTo assign a name, simply type the name of the template. As seen in the screenshot above, this name will be all that you will see in the Script Filter to choose which template you want to run. As an example, I created a new template called \"Template Test\":\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Set Name\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_name.png\" /\u003e\u003c/p\u003e\n\n\u003ch4 id=\"setting-template-defaults\"\u003eSetting Template Defaults\u003c/h4\u003e\n\n\u003cp\u003eOnce you finish typing your template name, hit \u003ccode\u003ereturn\u003c/code\u003e and \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will then automatically ask you if you want your Default Options to always be added to the template command:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Add Defaults\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_defs.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you select \u003ccode\u003eTrue\u003c/code\u003e, this means that whatever options your template command has, your assigned Default Options will be added to the final \u003ccode\u003epandoc\u003c/code\u003e command. For example, if you have set \u003ccode\u003estandalone\u003c/code\u003e to be a Default Option, regardless of whether or not you have that option in your template command, \u003ccode\u003epandoc\u003c/code\u003e will still create a standalong document. If, however, you select \u003ccode\u003eFalse\u003c/code\u003e, only the options you have in the template will be run through \u003ccode\u003epandoc\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4 id=\"setting-template-command\"\u003eSetting Template Command\u003c/h4\u003e\n\n\u003cp\u003eThe final element you need to add to create your new template is, of course, the actual \u003ccode\u003epandoc\u003c/code\u003e command:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Add Command\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_cmd_pre.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs the section above described, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e requires your template command options to be in a very specific format. However, must \u003ccode\u003epandoc\u003c/code\u003e users don't actually type commands into Terminal in this format. In order to make \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e as simple as possible, I have written a script that will convert the standard, short-form \u003ccode\u003epandoc\u003c/code\u003e command into the long-form \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e compliant format. This means that all you have to do is copy your command from Terminal and paste it into this field:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Set Command\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_cmd.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs it is currently implemented, there is the possibility of some bugs in the conversion process. This means it is in your best interest to double check the \u003ccode\u003euser_templates.json\u003c/code\u003e file in your workflow storage folder (you can open this folder easily using the \u003ccode\u003edr:help\u003c/code\u003e keyword and selecting \u003ccode\u003eStorage\u003c/code\u003e). Ensure that the variables are properly used. Also ensure that the all of the short-form options where correctly translated into their long-form version. Remember, you can use the \u003ccode\u003epandoc_templates.json\u003c/code\u003e file as a guide for the template JSON format.\u003c/p\u003e\n","type":"project"},{"title":"Parsers","url":"projects/parsers","content":"\u003ch4 id=\"version-20\"\u003eVersion: 2.0\u003c/h4\u003e\n\n\u003ch4 id=\"download-at-packalhttpwwwpackalorgworkflowparsers\"\u003eDownload at \u003ca href=\"http://www.packal.org/workflow/parsers\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis is a somewhat specialized workflow, but for those who read Greek and Latin, it will likely prove beneficial. This workflow uses the \u003ca href=\"http://www.alfredforum.com/topic/4336-parsers-greek-and-latin-parser-for-alfred/perseus.tufts.edu/hopper/morph\"\u003ePerseus\u003c/a\u003e parsing backend to allow full parsing of both Greek and Latin terms. Simply use the keyword \u003ccode\u003eparse\u003c/code\u003e followed by the unknown Greek or Latin word. Parsers will automatically fetch all of the parsing data from Perseus, munch it up, and offer you all of the possible parsings via Alfred's elegant UI.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"alfred_parser\" src=\"https://www.evernote.com/shard/s41/sh/2c444d67-b4ca-40b3-b914-c20dc5ebbfb6/9d54f19c489deda365c65f1e6b5232e6/deep/0/alfred_parser.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you would like a bit more information, Parsers adds two actions for any selected parsing. Using \u003ccode\u003ecmd+return\u003c/code\u003e, you can view a HUD of the parsing data chosen, pretty printed, and have that data copied to the clipboard.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong style=\"display:block;margin:0 auto;text-align:center;\"\u003eGreek\u003c/strong\u003e\n\u003cimg alt=\"greek_parse.png\" src=\"https://www.evernote.com/shard/s41/sh/043fd393-5c5b-49e8-b658-246a44f2cba5/ecbdef8fbd41bc51d455dbfaaaa63c2a/deep/0/greek_parse.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong style=\"display:block;margin:0 auto;text-align:center;\"\u003eLatin\u003c/strong\u003e\n\u003cimg alt=\"latin_parse.png\" src=\"https://www.evernote.com/shard/s41/sh/1d21824c-5f6e-4f75-9652-af3455089d2a/302529257ecafa448e1ad4fd7e5e402b/deep/0/latin_parse.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAlternatively, you can use \u003ccode\u003eshift+return\u003c/code\u003e to view a HUD of the lexicon entry for that parsing term, and this lexicon data will also be copied to the clipboard (\u003cem\u003eNOTE\u003c/em\u003e: Parsers will attempt to display the lexicon entry from the most concise lexicon available for the chosen term).\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong style=\"display:block;margin:0 auto;text-align:center;\"\u003eGreek\u003c/strong\u003e\n\u003cimg alt=\"greek_lexicon.png\" src=\"https://www.evernote.com/shard/s41/sh/9af6a591-228f-4558-b15d-3d782f06733c/49485fa38cf717590298d690a2fcbcab/deep/0/greek_lexicon.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong style=\"display:block;margin:0 auto;text-align:center;\"\u003eLatin\u003c/strong\u003e\n\u003cimg alt=\"latin_lexicon.png\" src=\"https://www.evernote.com/shard/s41/sh/e0161d67-6346-46ce-a717-b6e52a2e2f5a/c1690a24c88f127a553d0ae4973fd419/deep/0/latin_lexicon.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAll you should need to read your Greek and/or Latin with ease.\u003c/p\u003e\n","type":"project"},{"title":"Reboot","url":"projects/reboot","content":"\u003cp\u003eThis is my personal fork of \u003ca href=\"https://github.com/MatthewMueller/dots\"\u003eMatthew Mueller's \u003ccode\u003edots\u003c/code\u003e repo\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e\n\n\u003cp\u003eOne-liner:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003emkdir -p /tmp/dots \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /tmp/dots \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e curl -L https://github.com/smargh/reboot/archive/master.tar.gz | tar zx --strip 1 \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sh ./install.sh\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"design\"\u003eDesign\u003c/h3\u003e\n\n\u003cp\u003eThe goal of reboot is to automate the process of getting your operating system from a stock build to a fully functional machine.\u003c/p\u003e\n\n\u003cp\u003eReboot should be the first thing you download and run to get your computer set up.\u003c/p\u003e\n\n\u003cp\u003eThis library tries to be organized like a \u003ccode\u003enode\u003c/code\u003e application, while working within the constraints of \u003ccode\u003ebash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4 id=\"mac-os-x\"\u003eMac OS X\u003c/h4\u003e\n\n\u003cp\u003eThe OS X build does the following:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003einstall \u003ccode\u003ehomebrew\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003einstalls binaries (\u003ccode\u003egraphicsmagick\u003c/code\u003e, \u003ccode\u003epython\u003c/code\u003e, \u003ccode\u003esshfs\u003c/code\u003e, \u003ccode\u003eack\u003c/code\u003e, \u003ccode\u003egit\u003c/code\u003e, etc.)\u003c/li\u003e\n  \u003cli\u003esets OS X defaults\u003c/li\u003e\n  \u003cli\u003einstalls applications via \u003ccode\u003ehomebrew-cask\u003c/code\u003e (one-password, sublime-text, virtualbox, nv-alt, iterm2, etc.)\u003c/li\u003e\n  \u003cli\u003esets up the \u003ccode\u003e~/.bash_profile\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003ehandle custom icons for applications\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"credits\"\u003eCredits\u003c/h4\u003e\n\n\u003cul\u003e\n  \u003cli\u003eOriginal project by \u003ca href=\"https://github.com/MatthewMueller/\"\u003eMatthew Mueller\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","type":"project"},{"title":"Skimmer","url":"projects/skimmer","content":"\u003ch4 id=\"version-221\"\u003eVersion: 2.2.1\u003c/h4\u003e\n\n\u003ch4 id=\"download-at-packalhttpwwwpackalorgworkflowskimmer\"\u003eDownload at \u003ca href=\"http://www.packal.org/workflow/skimmer\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\n\u003cp\u003eThis is a fairly simple workflow that works with the free Mac PDF app \u003ca href=\"http://skim-app.sourceforge.net/\"\u003eSkim\u003c/a\u003e. Skim is a fantastic app with great Applescript support. This workflow provides quick, easy access to a few custom Applescripts that I've written to deal with certain pesky problems I come across when dealing with PDFs. There are currently only 3 actions:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCrop and Split PDF\u003c/li\u003e\n  \u003cli\u003eExtract Data and Search Google Scholar\u003c/li\u003e\n  \u003cli\u003eSearch your PDFs\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch3 id=\"cropping-and-splitting\"\u003eCropping and Splitting\u003c/h3\u003e\n\n\u003cp\u003eFirst, Skimmer allows you to properly format those darned scanned PDFs. You know the ones I'm talking about, 2 books pages scanned into one, landscape-oriented PDF page. I want all of my PDFs in pretty, proper format with one PDF page corresponding to one portrait-oriented book/article page. In the past, it was quite the ordeal to crop the PDF so that the right- and left-hand margins were equal, and then to split each individual page and finally reconstruct the entire PDF. Skimmer makes this whole process as simple as π. You can use either a Hotkey (set in the workflow) or the Keyword \u003ccode\u003esplit\u003c/code\u003e to activate this feature.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"skimmer_split.png\" src=\"https://www.evernote.com/shard/s41/sh/83197405-2d1a-469e-a3ca-64cc4a481807/36b73f97006ac7fd5b650e22fb122769/deep/0/skimmer_split.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eSkimmer then does 3 things:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCrop the PDF using a user-inserted Line Annotation (if necessary) (see image below)\u003c/li\u003e\n  \u003cli\u003eSplit the two-page PDF into individual pages\u003c/li\u003e\n  \u003cli\u003eRe-assemble everything and clean up\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet me walk you thru the process. To begin, you will need to ensure that the two scanned book pages have equal margins. Skimmer will split the PDF page right down the middle, so we want the middle of the PDF to be the middle of the two pages. If the margins are unequal, you only need to use Skim's Line Annotation to create a border for Skimmer. Here's an example:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"skimmer_original.png\" src=\"https://www.evernote.com/shard/s41/sh/d34511a1-b571-4df0-a6df-5c7b370704a6/0759f2d2f21a614c9a39d72f8eab0d42/deep/0/skimmer_original.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNote the small, vertical line at the bottom of the page. Skimmer will crop off everything to the left of this line. You could put the line anywhere on the page. If you the right-hand margin were too big, you could put it to the right, and Skimmer would automatically crop the excess stuff to the right of that line. If both margins are too big, you can put two lines on each side and Skimmer will take care of the rest. \u003cstrong\u003eNote\u003c/strong\u003e, Skimmer will crop \u003cem\u003eevery page\u003c/em\u003e at this point, so find the farthest extremity on any page and use that as your guide. Skimmer can tell what page you are looking at, so it'll make things work (note that in the image above, this is one of the middle pages being used as the cropping template). Skimmer does not crop Top or Bottom Margins, so you will need to manually crop PDFs with wacky top and/or bottom margins.\u003c/p\u003e\n\n\u003cp\u003eOnce Skimmer has cropped the PDF, it will go thru and split each page into two separate pages. Depending on the length of the PDF, this can take a bit (appr. 0.67 seconds per original PDF page). This is all done invisibly though, so that's a bonus. In order to ensure that Skimer splits the PDF properly, regardless of orientation, the script will split the first page and ask you what portion of the page you are seeing (left-hand, right-hand, top-half, or bottom-half). Your choice will ensure that Skimmer does the splitting just so.\u003c/p\u003e\n\n\u003cp\u003eAfter it splits all the pages, Skimmer will save a copy of your original PDF and then close it as it opens the new, split PDF. This new PDF will be properly formatted and saved in the same folder as the original PDF. Here's an example of the PDF above after it was automatically cropped and split:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"skimmer_final.png\" src=\"https://www.evernote.com/shard/s41/sh/ac701fb0-3e1b-4ac6-ab6d-04dfdddae2f7/0cfdc3db448db7e430613b018a30f31e/deep/0/skimmer_final.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFor anyone who deals with lots of scanned PDFs, I can promise you, this is a godsend.\u003c/p\u003e\n\n\u003ch3 id=\"extracting-data\"\u003eExtracting Data\u003c/h3\u003e\n\n\u003cp\u003eThe second feature will take OCR'd PDFs and try to extract relevant search information and then search Google Scholar (which will make it easy to then add citation information to your citation manager of choice. Users of \u003ca href=\"http://fractaledmind.com/projects/zotquery/\"\u003eZotQuery\u003c/a\u003e will immediately see where I'm going with this…). This feature can be activated by a user-assigned Hotkey or by the Keyword \u003ccode\u003eextract\u003c/code\u003e when the desired PDF is open in Skim.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"skimmer_extract.png\" src=\"https://www.evernote.com/shard/s41/sh/5bf09958-9d77-4a54-aaa2-b5fff51ef70a/7edaae34fc339aa9230a700703de218e/deep/0/skimmer_extract.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis feature will look for three possible things in the currently viewed page:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ea DOI (\u003ca href=\"http://www.doi.org/\"\u003eDigital Object Identifier\u003c/a\u003e)\u003c/li\u003e\n  \u003cli\u003ean ISBN (for books)\u003c/li\u003e\n  \u003cli\u003eJSTOR title page\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf it cannot find any of these things, it will present the user with a list of Capitalized Words from the currently viewed page. You then select whichever words you want to be the Google Scholar query. Once the query is chosen (whether automatically as one of the 3 types above, or user-chosen keywords), Skimmer will automatically launch your default browser to Google Scholar using the query. What you do from there is up to you.\u003c/p\u003e\n\n\u003ch3 id=\"searching-pdfs\"\u003eSearching PDFs\u003c/h3\u003e\n\n\u003cp\u003eFinally, you can also search through all of your PDFs and open any one of them right in Skim. Use either the keyword \u003ccode\u003eskimmer\u003c/code\u003e or the shorter \u003ccode\u003esk\u003c/code\u003e to begin the query. Then enter your query term. The results will update as you type. You can hit \u003ccode\u003ereturn\u003c/code\u003e to open any item directly in Skim, or you can \u003ccode\u003eright-arrow\u003c/code\u003e to enter Alfred's file browser for that item.\u003c/p\u003e\n\n\u003cp\u003eThis search functionality will search through all PDFs on your machine, regardless of where they are saved (provided they have been indexed by \u003ccode\u003emdfind\u003c/code\u003e).\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eI, for one, use at least one of these tools once a week.\u003c/p\u003e\n","type":"project"},{"title":"Snippets","url":"projects/snippets","content":"\u003ch4 id=\"version-12\"\u003eVersion: 1.2\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-packalhttpwwwpackalorgworkflowsnippets\"\u003eDownload on \u003ca href=\"http://www.packal.org/workflow/snippets\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eHave you ever been taking notes and realized that certain terms or phrases were going to be used repeatedly? You don't have the time or really the desire to create all new TextExpander snippets for these terms or phrases, but you'd also really like to shorten your typing. That's where \u003ccode\u003eSnippets\u003c/code\u003e comes in. \u003ccode\u003eSnippets\u003c/code\u003e is a dead simple Alfred workflow that allows you to use simple snippet syntax while writing, and then seamlessly convert your text to its full glory.\u003c/p\u003e\n\n\u003cp\u003eThe set-up is simple. As you're typing, and you realize you want to make a snippet, simply prepend your snippet with \u003ccode\u003e,,\u003c/code\u003e (comma comma). Then, when you get a free moment, create a \"snippet dictionary\" to tell Snippets what that snippet means. To create the dictionary, simply wrap it in \u003ccode\u003e^^^\u003c/code\u003e (triple carets). Here's an example:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eThis is an example of ,,sn. ,,sn is a fantastic workflow for ,,a!\n\n^^^\nsn: `Snippets`\na: Alfred\n^^^\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThat's all there is to it. Once your dictionary is complete and you have finished typing, either copy the text to the clipboard and use the keyword \u003ccode\u003esnip\u003c/code\u003e, or assign a keyboard shortcut for even quicker results. When you activate \u003ccode\u003eSnippets\u003c/code\u003e, the text above will instantly become:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eThis is an example of `Snippets`. `Snippets` is a fantastic workflow for Alfred!\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIt's so simple. Double-comma before the snippet; dictionary wrapped in triple-carets with snippet: expanded. Nothing more, nothing less.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"demo\" src=\"https://raw.githubusercontent.com/smargh/alfred_snippets/master/snippets.gif\" /\u003e\u003c/p\u003e\n","type":"project"},{"title":"Spritzr","url":"projects/spritzr","content":"\u003ch4 id=\"version-11\"\u003eVersion 1.1\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-packalhttpwwwpackalorgworkflowspritzr\"\u003eDownload on \u003ca href=\"http://www.packal.org/workflow/spritzr\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eSpritzr is a relatively simple workflow that allows you to speed-read text on your Mac using \u003ca href=\"http://www.spritzinc.com/the-science/\"\u003eSpritz-style\u003c/a\u003e techniques. The simple idea is that one word of your input text is displayed at a time in quick enough succession that you are no longer \u003ca href=\"http://en.wikipedia.org/wiki/Subvocalization\"\u003eSub-Vocalizing\u003c/a\u003e, which is the largest impediment to reading at a comfortable, yet swift pace. The added layer of nuance, however, is that each word is positioned around the so-called \u003ca href=\"http://www.spritzinc.com/blog/\"\u003eOptimal Reading Position\u003c/a\u003e. To borrow an image from the Spritz website, the difference between most electronic speedreaders and Spritz-style speedreaders is the alignment of the words:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"word_positioning_blog3.png\" src=\"http://www.spritzinc.com/wp-content/uploads/2014/02/word_positioning_blog3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis workflow achieves a similar affect, thus making reading simpler and faster.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTICE\u003c/strong\u003e: I wrote all of this software from scratch and have no affiliation with the Spritz company. I was inspired by other open-source projects that attempt to mirror the Spritz functionality: \u003ca href=\"https://github.com/Miserlou/OpenSpritz\"\u003eOpenSpritz\u003c/a\u003e and \u003ca href=\"https://github.com/littleq0903/spritz-cmd\"\u003espritz-cmd\u003c/a\u003e, but this software has no relation to Spritz aside from appearances.\u003c/p\u003e\n\n\u003cp\u003eSpritzr currently only has one command: \u003ccode\u003espritz\u003c/code\u003e. This takes text input which will be parsed and displayed in the Spritzr window.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"spritzr.png\" src=\"https://www.evernote.com/shard/s41/sh/288af1c4-bed2-4dfc-ab5f-391ee6c39b32/606b76b31d8c6fbbb4558f38d505cfe5/deep/0/spritzr.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAlternatively, you can pass text files (\u003ccode\u003e.txt\u003c/code\u003e, \u003ccode\u003e.md\u003c/code\u003e, \u003ccode\u003e.mmd\u003c/code\u003e) into Spritzr using the File Action \u003ccode\u003eFile Spritzr\u003c/code\u003e. This will parse and display the text content of that file in the Spritzr window.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"spritzr_file.png\" src=\"https://www.evernote.com/shard/s41/sh/0da5e015-ca7c-461a-bdb4-675b69ae26ea/15682e931bf8c6daf2fcad14f9b200eb/deep/0/spritzr_file.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are two settings, which can be changed using the \u003ccode\u003espritzr:set\u003c/code\u003e keyword:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eWords per Minute\u003c/li\u003e\n  \u003cli\u003eReading Mode\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf you which to change your wpm, simply invoke \u003ccode\u003espritzr:set\u003c/code\u003e and input an integer (the default is 250). If you which to change the reading mode, invoke \u003ccode\u003espritzr:set\u003c/code\u003e and input either \u003ccode\u003edark\u003c/code\u003e or \u003ccode\u003elight\u003c/code\u003e (the default is \u003ccode\u003elight\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eDark Mode: \u003cimg alt=\"spritzr_dark.png\" src=\"https://www.evernote.com/shard/s41/sh/a620b423-7a24-49b8-86e1-6a6088304b0b/5605e456e9e00a944a2d52609b360222/deep/0/spritzr_dark.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eLight Mode: \u003cimg alt=\"spritzr_light.png\" src=\"https://www.evernote.com/shard/s41/sh/95a765b1-b622-4a27-911e-5b7d2e6b5a40/f3b77ee67f52cd3afa44dec5656ee4dc/deep/0/spritzr_light.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOther than that, you can just start spritzing!\u003c/p\u003e\n","type":"project"},{"title":"Wikify","url":"projects/wikify","content":"\u003ch4 id=\"version-26\"\u003eVersion 2.6\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-packalhttpwwwpackalorgworkflowwikify\"\u003eDownload on \u003ca href=\"http://www.packal.org/workflow/wikify\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis is a workflow in progess, but Version 2.0 adds a tone of super helpful functions for dealing with Evernote for Markdown lovers. This is aimed at making it easier to create a \u003ca href=\"http://en.wikipedia.org/wiki/Personal_wiki\"\u003epersonal wiki\u003c/a\u003e on your computer, using Evernote as the backbone.\u003c/p\u003e\n\n\u003ch3 id=\"current-features\"\u003eCurrent Features:\u003c/h3\u003e\n\n\u003cp\u003eVersion 2.0 adds four features to 1.2's functionality. Meaning these are the new functions:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eMarkdown to Evernote (\u003ccode\u003emden\u003c/code\u003e)\n    \u003cul\u003e\n      \u003cli\u003edocument-specific text snippets (use \u003ccode\u003e^^^snippet^^^\u003c/code\u003e syntax)\u003c/li\u003e\n      \u003cli\u003eauto-linking to pre-existing Evernote notes (no special syntax)\u003c/li\u003e\n      \u003cli\u003eauto-linking to new Evernote notes (use \u003ccode\u003e[[double bracket]]\u003c/code\u003e syntax)\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eEvernote to Markdown (\u003ccode\u003eenmd\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eAuto-Link to pre-existing notes for Selected Evernote note(s) (\u003ccode\u003ewfy\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eAuto-Link to new notes for Selected Evernote note(s) (\u003ccode\u003eensel\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSee the posts below for more detailed accounts of these features.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE\u003c/strong\u003e: In order to use a number of these features, you will need the \u003ca href=\"http://www.satimage.fr/software/en/downloads_osaxen.html\"\u003eSatimage OSAX Scripting Addition\u003c/a\u003e. I've set it up such that this is remarkably easy to install. Simply use the keyword in Alfred \u003ccode\u003ewfy:install\u003c/code\u003e and the Satimage installer will boot up and walk you through the process.\u003c/p\u003e\n\n\u003ch4 id=\"markdown-to-evernote\"\u003eMarkdown to Evernote\u003c/h4\u003e\n\n\u003cp\u003eThe first feature allows you to write in any editor on your Mac in Markdown, and simply and easily send that data to Evernote as formatted HTML. In order to assign Note Title, Notebook, and Tags, you can use simple \u003ca href=\"http://fletcherpenney.net/multimarkdown/\"\u003eMultiMarkdown Headers\u003c/a\u003e, or simple symbols:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eTitle:\u003c/code\u003e or \u003ccode\u003e#\u003c/code\u003e for the note's title\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eNotebook:\u003c/code\u003e or \u003ccode\u003e=\u003c/code\u003e for the note's notebook destination\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eTags:\u003c/code\u003e or \u003ccode\u003e@\u003c/code\u003e for the note's tags\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAt import, Wikify comes with a Hotkey or a Keyword to launch this functionality. Simply select your text (\u003ccode\u003ectr + A\u003c/code\u003e) and then hit your user-defined hotkey, or pop-up Alfred and type \u003ccode\u003emden\u003c/code\u003e, and Wikify will instantly send you Markdown text to Evernote as fully-formatted HTML.\u003c/p\u003e\n\n\u003ch4 id=\"evernote-to-markdown\"\u003eEvernote to Markdown\u003c/h4\u003e\n\n\u003cp\u003eHave you ever wanted to edit your Evernote notes in the plain-text glory of Markdown? If so, this is the feature for you. Using Aaron Swartz's glorious \u003ca href=\"http://www.aaronsw.com/weblog/000387\"\u003ehtml2text Python script\u003c/a\u003e, Wikify will convert the currently selected Evernote note to a Markdown plain-text file. Wikify will save the \u003ccode\u003e.md\u003c/code\u003e file in its storage folder (\u003ccode\u003e~/Library/Application Support/Workflow Data/com.hackademic.wikify/\u003c/code\u003e). You can create a Markdown file of an Evernote note, edit it, and then send it back using the twin function.\u003c/p\u003e\n","type":"project"},{"title":"ZotQuery","url":"projects/zotquery","content":"\u003ch4 id=\"version-85\"\u003eVersion 8.5\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-packalhttppackalorgworkflowzotquery\"\u003eDownload on \u003ca href=\"http://packal.org/workflow/zotquery\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e is an Alfred workflow that grants the user access to the data stored in their \u003ca href=\"https://www.zotero.org\"\u003eZotero\u003c/a\u003e application. The Python scripts in this repo form all of the necessary components for this workflow.\u003c/p\u003e\n\n\u003cp\u003eIn addition, version 6.0 adds new, shorter script filter keywords. I've kept all of the old, longer keywords as well, so everything is backwards compatible, but now, users can simply use:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ez\u003c/code\u003e = \u003ccode\u003ezot\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ezt\u003c/code\u003e = \u003ccode\u003ezot:t\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eza\u003c/code\u003e = \u003ccode\u003ezot:a\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eznc\u003c/code\u003e = \u003ccode\u003ezot:c\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eznt\u003c/code\u003e = \u003ccode\u003ezot:tag\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ezn\u003c/code\u003e = \u003ccode\u003ezot:n\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ezat\u003c/code\u003e = \u003ccode\u003ez:att\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eztg\u003c/code\u003e = \u003ccode\u003ez:tag\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ezc\u003c/code\u003e = \u003ccode\u003ez:col\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"exporting\"\u003eExporting\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e now can export in both Markdown and Rich Text. This means all academics on the Mac who use Zotero can take advantage of \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e's quick access to their citation data. Export individual references or citations in rich text, or export full bibliographies from Collections or Tags in rich text.\u003c/p\u003e\n\n\u003cp\u003eYou can select out of 5 possible CSL styles for export. Instead of the default Chicago (author-date), you can also choose APA, MLA, BibTeX, or Zotero's own RTF-Scan cite key format. In addition, you will also then choose which format to export in: Markdown or Rich Text. At any point, you can also change these settings using the z:settings command.\u003c/p\u003e\n\n\u003cp\u003eAbility to search only items with attachments. This works effectively like an attachments search, since you only need to press return (not shift+return as with the other queries) in order to open the attachment.\u003c/p\u003e\n\n\u003cp\u003eThe ability now to export in BibTeX or Zotero's RTF-Scan format makes \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e is utility for LaTeX writers as well as scholars who write in standard word processors. You could also easily move from BibTeX or RTF-Scan and take advantage of \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e's full text exporting in Markdown or Rich Text. Either way, the workflow should be a helpful companion regardless of your writing workflow.\u003c/p\u003e\n\n\u003cp\u003eThese features are in addition to the standard features of \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eSearch your Zotero library with keyword\u003c/li\u003e\n  \u003cli\u003eSearch by author last name, title, in collection, or in tag\u003c/li\u003e\n  \u003cli\u003eOpen, export short reference, export full citation, or append citation to temporary bibliography\u003c/li\u003e\n  \u003cli\u003eExport full bibliography from collection or tag in alphabetical order\u003c/li\u003e\n  \u003cli\u003eCreate and keep up-to-date a JSON cache of your Zotero data (helpful for other scripting possibilities)\u003c/li\u003e\n\u003c/ul\u003e\n","type":"project"}]