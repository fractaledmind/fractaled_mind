[{"title":"Building an Interpreter for Propositional Logic","url":"/articles/ruby-logic-interpreter-2/","content":"\u003cp\u003eIn the \u003ca href=\"\"\u003efirst post\u003c/a\u003e in this series, we built an interpreter to work with a basic subset of propositional logic. In this post, we are going to extend that interpreter to handle the full range of valid expressions in classical propositional logic. Specifically, this means we are going to allow for\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ehandling stacked negation operators (e.g. \u003ccode\u003e~~T\u003c/code\u003e),\u003c/li\u003e\n  \u003cli\u003eparentheses to group sub-expressions (e.g. \u003ccode\u003e~(T v F) \u0026amp; T\u003c/code\u003e),\u003c/li\u003e\n  \u003cli\u003emultiple binary operators to be used in one expression (e.g. \u003ccode\u003eT \u0026amp; F v T\u003c/code\u003e), and\u003c/li\u003e\n  \u003cli\u003ehandling the proper operator precedence of the logical operators\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese additions will give our interpreter the capability to evaluate any properly formed expression of classical propositional logic.\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"stacked-negations\"\u003eStacked Negations\u003c/h3\u003e\n\n\u003cp\u003eThe simplest addition to make will be the stacked negation operators. When we left our grammar, the \u003ccode\u003eformula\u003c/code\u003e rule was like so:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eformula :: (NOT)? term\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe \u003ccode\u003e?\u003c/code\u003e meant that a \u003ccode\u003e:NOT\u003c/code\u003e token could be present before a \u003ccode\u003eterm\u003c/code\u003e zero or one times. We want to allow the \u003ccode\u003e:NOT\u003c/code\u003e token to present zero or many times. How might we accomplish this? Well, what precisely can be negated? Is it simply a term (e.g. \u003ccode\u003eT\u003c/code\u003e or \u003ccode\u003eF\u003c/code\u003e)? No. We are saying that an expression of the form \u003ccode\u003e~~T\u003c/code\u003e is valid. What is the abstract syntax tree of this expression? It is a negation operator whose operand is … another negation operator, but this operator has a term operand.\u003c/p\u003e\n\n\u003cdiv class=\"tree\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003e~\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\n          \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003e~\u003c/a\u003e\n          \u003cul\u003e\n            \u003cli\u003e\n              \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003eT\u003c/a\u003e\n            \u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhen we start thinking about what this expression is actually encoding, we should see that a negation operator is not necessarily followed by a term; it is followed by a \u003cem\u003eformula\u003c/em\u003e. But a logical formula (that is, a subexpression) can also have no negation operator and simply be either a \u003ccode\u003e:TRUE\u003c/code\u003e token or a \u003ccode\u003e:FALSE\u003c/code\u003e token (aka a \u003ccode\u003eterm\u003c/code\u003e):\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eformula :: (NOT)* formula | term\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIn order to encode this new \u003ccode\u003eformula\u003c/code\u003e rule in our parser, we need simply to change what we pass into the creation of the \u003ccode\u003eAST::Negation\u003c/code\u003e object:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eParser\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# formula :: (NOT)* formula | term\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eformula\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etoken\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@current_token\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:NOT\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:NOT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eNegation\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eformula\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eterm\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe can add some tests to the \u003ccode\u003erun_tests\u003c/code\u003e method we defined in the last post to ensure that this new method is working properly:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003erun_tests\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_interpret_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'~~T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_interpret_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'~~~F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_interpret_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'~~F \u0026amp; F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_interpret_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'F v ~~T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eYou can find the script we have built to this point in \u003ca href=\"https://gist.github.com/fractaledmind/a072674b18086fdebf3b3a535c0f7dfb/d31ab892cc29ee6814d61270f3ecd32c3ddb51e1\"\u003ethis revision of this Gist\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"parenthetical-grouping\"\u003eParenthetical Grouping\u003c/h3\u003e\n\n\u003cp\u003eJust like in arithmetic, expressions in propositional logic can use parentheses to explicitly create sub-expressions. When parentheses are used in this way, it is explicitly encoding that the grouped sub-expression has higher precedence than the rest of the expression.\u003c/p\u003e\n\n\u003cp\u003eThe first step in allowing for this feature is to update our \u003ccode\u003eLexer\u003c/code\u003e to create the appropriate tokens for these characters:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eLexer\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etokens\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@input\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e''\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"c1\"\u003e# for each `char`, there are only 6 possible things to do\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003echar\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e' '\u003c/span\u003e\n        \u003cspan class=\"k\"\u003enext\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e'~'\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:NOT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'~'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u0026amp;'\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:AND\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u0026amp;'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e'v'\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:OR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'v'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u0026gt;'\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:IFSO\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u0026gt;'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e'('\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:LPAREN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'('\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e')'\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:RPAREN\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e')'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e'T'\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:TRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'T'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e'F'\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:FALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'F'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecompact\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNext, we need to update our grammar to allow for such grouped sub-expressions.\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eexpression :: formula ((AND | OR | IFSO) formula)*\nformula :: (NOT)* formula | LPAREN expression RPAREN | term\nterm :: TRUE | FALSE \n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe say that an \u003ccode\u003eexpression\u003c/code\u003e comes between parenthese, and not a \u003ccode\u003eformula\u003c/code\u003e, because expressions of the form \u003ccode\u003e~(T v F)\u003c/code\u003e are valid.\u003c/p\u003e\n\n\u003cp\u003eSo, we need to update the \u003ccode\u003eParser#formula\u003c/code\u003e method to handle this case:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eParser\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# formula :: (NOT)* formula | LPAREN expression RPAREN | term\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eformula\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etoken\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@current_token\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:NOT\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:NOT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eNegation\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eformula\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:LPAREN\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:LPAREN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eexpression\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:RPAREN\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eterm\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eLet’s add some more tests to the \u003ccode\u003erun_tests\u003c/code\u003e method to ensure that this new feature is working properly as well:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003erun_tests\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_interpret_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'T \u0026amp; (F v T)'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_interpret_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'~(T \u0026amp; (F v T))'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_interpret_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'~(T \u0026amp; (F v T)) \u0026gt; T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eYou can find the script we have built to this point in \u003ca href=\"https://gist.github.com/fractaledmind/a072674b18086fdebf3b3a535c0f7dfb/0b65125d6727f09373a125fa2f18ffd65ce759a8\"\u003ethis revision of this Gist\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"multiple-binary-operators\"\u003eMultiple Binary Operators\u003c/h3\u003e\n\n\u003cp\u003eOur current \u003ccode\u003eParser\u003c/code\u003e does not properly handle expressions with multiple binary operators. As it is, if we were to parse the expression \u003ccode\u003eT \u0026amp; F v T\u003c/code\u003e, we would get an abstract syntax tree of this shape:\u003c/p\u003e\n\n\u003cdiv class=\"tree\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003e\u0026amp;\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\n          \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003eT\u003c/a\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003eF\u003c/a\u003e\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe disjunction is completely ignored! Before we can fix this, we must first determine why and where this is happening. Well, we know that we handle parsing binary operators in the \u003ccode\u003eParser#expression\u003c/code\u003e method, so let’s start looking there:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eParser\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# expression : formula ((AND | OR | IFSO) formula)?\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eexpression\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eformula\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etoken\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@current_token\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:AND\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:AND\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eConjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eformula\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:OR\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:OR\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eDisjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eformula\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:IFSO\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:IFSO\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eImplication\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eformula\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhat we find is that we don’t allow for recursive expressions; that is, if a formula is followed by an operator, we presume that the right hand operand is also a formula. In order to allow for complex expressions, we need to update a grammar to:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eexpression : formula ((AND | OR | IFSO) expression)*\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis allows for recursive expressions. And, to encode that in our method, we simply replace the \u003ccode\u003eformula\u003c/code\u003e param passed to the AST operator intializers with a recursive call to \u003ccode\u003eexpression\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eParser\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# expression : formula ((AND | OR | IFSO) expression)*\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eexpression\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eformula\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etoken\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@current_token\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:AND\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:AND\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eConjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpression\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:OR\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:OR\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eDisjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpression\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:IFSO\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:IFSO\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eImplication\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eexpression\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe can add a couple more tests to ensure that our change is doing what we expect:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003erun_tests\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_interpret_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'T \u0026amp; F v T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_interpret_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'F \u0026amp; T v T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_interpret_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'~T \u0026amp; F v T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_interpret_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'~F \u0026amp; T v T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eYou can find the script we have built to this point in \u003ca href=\"https://gist.github.com/fractaledmind/a072674b18086fdebf3b3a535c0f7dfb/e61a5a1b8339119e3e8b75d141282e0b15ac37f1\"\u003ethis revision of this Gist\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"operator-precedence\"\u003eOperator Precedence\u003c/h3\u003e\n\n\u003cp\u003eThe final issue we have with our interpreter is that is doesn’t properly handle the precedence of the logical operators. Operator precedence describes the order of operations in an expression. In arithmetic, I remember learning this mnemonic to remember the order of operations: “Please excuse my dear aunt Sally”. This is an acronym mnemonic for “Parentheses exponentiation multiplication division addition substraction”, or, to put it in tabular form:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003eOperator\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003ePrecedence\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e^\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e*\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003e2\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e/\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003e2\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e+\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003e3\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e-\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003e3\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eThis order of operations says that the arithmetic expression \u003ccode\u003e1^2 * 3 / 4 + 5 - 6\u003c/code\u003e should be evaluated as \u003ccode\u003e((((1^2) * 3) / 4) + 5) - 6\u003c/code\u003e. So, operator precedence tells our interpreter what order to evaluate the operations in. Should it evaluate the multiplication before the addition, or vice versa?\u003c/p\u003e\n\n\u003cp\u003eIn propositional logic, the operator precedence is “negation conjunction disjunction implication”:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003eOperator\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003ePrecedence\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e~\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003e1\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026amp;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003e2\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003ev\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003e3\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003e4\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eSo, let’s look back at one of the tests we added for handling multiple binary operators:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eassert_interpret_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'F \u0026amp; T v T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eGiven the operator precedence, how should \u003ccode\u003eF \u0026amp; T v T\u003c/code\u003e be understood? Since conjunction (\u003ccode\u003e\u0026amp;\u003c/code\u003e) has a higher precedence than disjunction (\u003ccode\u003ev\u003c/code\u003e), it should be read as \u003ccode\u003e(F \u0026amp; T) v T\u003c/code\u003e, which would evaluate as \u003ccode\u003etrue\u003c/code\u003e; however, we can see that our test expects it to be \u003ccode\u003efalse\u003c/code\u003e. If you have been running the code as we have gone along, step by step, you would have seen your tests pass. This is because our interpreter has no sense of operator precedence and so evaluates the expression from left to right (e.g., in this case, it reads that expression as \u003ccode\u003eF \u0026amp; (T v T)\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eWe need to encode the precedence of our operators, but how do we do so?\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eI say “classical propositional logic” because modern propositional logic has many more valid operators. But this is an addition we will get to in the next post. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"Building an Interpreter for Propositional Logic","url":"/articles/ruby-logic-interpreter-1/","content":"\u003cp\u003eI recently got the itch to dig into how compilers/interpreters worked and were built. So, I’ve decided to start a new series here on the site to follow my exploration of building an interpreter (in Ruby).\u003c/p\u003e\n\n\u003cp\u003eI didn’t want to start by defining my own language to interpret, and I have always loved and been fascinated by logic, so I thought I would build an interpreter for working with logical expressions.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"the-language-of-logic\"\u003eThe Language of Logic\u003c/h3\u003e\n\n\u003cp\u003eLet’s start small and simple, so for this first post we are only going to build an interpreter for handling the most common operations in \u003ca href=\"http://www.iep.utm.edu/prop-log/\"\u003epropositional logic\u003c/a\u003e:\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: left\"\u003eName\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003eSymbol\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eConjunction\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026amp;\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eDisjunction\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003ev\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eImplication\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: left\"\u003eNegation\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e~\u003c/code\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eIn addition to these operators, a logical expression must also have some sort of \u003cem\u003eoperand\u003c/em\u003e. Propositional logic is the simplest form of logic and only has two kinds of operands: \u003ccode\u003eTrue\u003c/code\u003e and \u003ccode\u003eFalse\u003c/code\u003e, which we will represent in our language as \u003ccode\u003eT\u003c/code\u003e and \u003ccode\u003eF\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eSo, in total, our language is composed of only 6 tokens:\u003c/p\u003e\n\n\u003cdiv style=\"display:flex;justify-content:space-around;margin-bottom:1rem;\"\u003e\n  \u003ccode\u003eT\u003c/code\u003e\n  \u003ccode\u003eF\u003c/code\u003e\n  \u003ccode\u003e~\u003c/code\u003e\n  \u003ccode\u003e\u0026amp;\u003c/code\u003e\n  \u003ccode\u003ev\u003c/code\u003e\n  \u003ccode\u003e\u0026gt;\u003c/code\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSimple.\u003c/p\u003e\n\n\u003cp\u003eThe next thing we need to consider is how these tokens are used to form a valid expression. First and foremost, the simplest possible valid expression is simply an operand; so, \u003ccode\u003eT\u003c/code\u003e and \u003ccode\u003eF\u003c/code\u003e are both valid expressions in our language. Of our 4 operators, only the negation operator is a so-called \u003cem\u003eunary\u003c/em\u003e operator, which simply means that it is an operator that works on only \u003cem\u003e1\u003c/em\u003e operand. In our language, unary operators must come before their operand, so \u003ccode\u003e~T\u003c/code\u003e and \u003ccode\u003e~F\u003c/code\u003e are both valid expressions, but \u003ccode\u003eT~\u003c/code\u003e or \u003ccode\u003eF~\u003c/code\u003e or \u003ccode\u003e~\u0026amp;\u003c/code\u003e are not valid expressions. Finally, our other tokens are all \u003cem\u003ebinary\u003c/em\u003e operators, which means they work on only \u003cem\u003e2\u003c/em\u003e operands. Our language will use the so-called \u003cem\u003einfix notation\u003c/em\u003e for binary operators, which means that the operator \u003cem\u003ecomes between\u003c/em\u003e the two operands; so, \u003ccode\u003eT \u0026amp; T\u003c/code\u003e, \u003ccode\u003eT v F\u003c/code\u003e, and \u003ccode\u003eT \u0026gt; T\u003c/code\u003e are all valid expressions.\u003c/p\u003e\n\n\u003cp\u003eNow that we have a clear sense of what our language for this subset of propositional logic will look like, the final thing we need to clarify before turning to building the actual interpreter is how our valid expressions are supposed to be evaluated. We have thought through the shape and nature of the input of our interpreter, but we also have to think through the output. When we interpret an expression like \u003ccode\u003eT \u0026amp; F\u003c/code\u003e, what should the output be? Propositional logic, as noted above, only works with two types of values, \u003ccode\u003eTrue\u003c/code\u003e and \u003ccode\u003eFalse\u003c/code\u003e (i.e. the \u003ca href=\"https://en.wikipedia.org/wiki/Boolean_data_type\"\u003eBoolean values\u003c/a\u003e). So, when considering how our operators should be evaluated, we simply need to know how each operator responds to the various permutations of the possible values. The unary negation operator is the simplest, so let’s start there.\u003c/p\u003e\n\n\u003cdiv style=\"display:flex;justify-content:space-around;margin-bottom:1rem;\"\u003e\n  \u003ctable class=\"truth-table\"\u003e\n    \u003cthead\u003e\n      \u003ctr\u003e\n        \u003cth\u003e\u003ccode\u003e~\u003c/code\u003e\u003c/th\u003e\n        \u003cth\u003e\u003c/th\u003e\n      \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n      \u003ctr\u003e\n        \u003cth\u003eT\u003c/th\u003e\n        \u003ctd\u003eF\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n        \u003cth\u003eF\u003c/th\u003e\n        \u003ctd\u003eT\u003c/td\u003e\n      \u003c/tr\u003e\n    \u003c/tbody\u003e\n  \u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis is a \u003ca href=\"https://en.wikipedia.org/wiki/Truth_table\"\u003e\u003cem\u003etruth table\u003c/em\u003e\u003c/a\u003e and it represents how the negation operator (\u003ccode\u003e~\u003c/code\u003e) is evaluated for the two possible values it can operate on.\u003c/p\u003e\n\n\u003cp\u003eFor the binary operators, there are four possible states:\u003c/p\u003e\n\n\u003cdiv style=\"display:flex;justify-content:space-around;margin-bottom:1rem;\"\u003e\n  \u003ctable class=\"truth-table\"\u003e\n    \u003cthead\u003e\n      \u003ctr\u003e\n        \u003cth\u003e\u003ccode\u003e\u0026amp;\u003c/code\u003e\u003c/th\u003e\n        \u003cth\u003eT\u003c/th\u003e\n        \u003cth\u003eF\u003c/th\u003e\n      \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n      \u003ctr\u003e\n        \u003cth\u003eT\u003c/th\u003e\n        \u003ctd\u003eT\u003c/td\u003e\n        \u003ctd\u003eF\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n        \u003cth\u003eF\u003c/th\u003e\n        \u003ctd\u003eF\u003c/td\u003e\n        \u003ctd\u003eF\u003c/td\u003e\n      \u003c/tr\u003e\n    \u003c/tbody\u003e\n  \u003c/table\u003e\n\n  \u003ctable class=\"truth-table\"\u003e\n    \u003cthead\u003e\n      \u003ctr\u003e\n        \u003cth\u003e\u003ccode\u003ev\u003c/code\u003e\u003c/th\u003e\n        \u003cth\u003eT\u003c/th\u003e\n        \u003cth\u003eF\u003c/th\u003e\n      \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n      \u003ctr\u003e\n        \u003cth\u003eT\u003c/th\u003e\n        \u003ctd\u003eT\u003c/td\u003e\n        \u003ctd\u003eT\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n        \u003cth\u003eF\u003c/th\u003e\n        \u003ctd\u003eT\u003c/td\u003e\n        \u003ctd\u003eF\u003c/td\u003e\n      \u003c/tr\u003e\n    \u003c/tbody\u003e\n  \u003c/table\u003e\n\n  \u003ctable class=\"truth-table\"\u003e\n    \u003cthead\u003e\n      \u003ctr\u003e\n        \u003cth\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/th\u003e\n        \u003cth\u003eT\u003c/th\u003e\n        \u003cth\u003eF\u003c/th\u003e\n      \u003c/tr\u003e\n    \u003c/thead\u003e\n    \u003ctbody\u003e\n      \u003ctr\u003e\n        \u003cth\u003eT\u003c/th\u003e\n        \u003ctd\u003eT\u003c/td\u003e\n        \u003ctd\u003eF\u003c/td\u003e\n      \u003c/tr\u003e\n      \u003ctr\u003e\n        \u003cth\u003eF\u003c/th\u003e\n        \u003ctd\u003eT\u003c/td\u003e\n        \u003ctd\u003eT\u003c/td\u003e\n      \u003c/tr\u003e\n    \u003c/tbody\u003e\n  \u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThese are the rules that our interpreter is going to have to encode when it comes time to actually evaluate the expressions. For our initial pass we aren’t going to worry yet about the \u003ca href=\"https://en.wikipedia.org/wiki/Order_of_operations\"\u003eorder of precedence\u003c/a\u003e of the operators as we will only be working with simple expressions (e.g. expressions with only one binary operator). So, having laid out the shape of the input our interpreter is going to be working with as well as the output it needs to generate, let’s go ahead and write some simple tests that can help guide as we start working on the actual Ruby code:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e# the classes and methods reference are what we will eventually build\u003c/span\u003e\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpression\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eerror_msg\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Expected '\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003eexpression\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e' to evaluate to \u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003etokens\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eLexer\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpression\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003etokens\u003c/span\u003e\n  \u003cspan class=\"n\"\u003east\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eParser\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etokens\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003eparse\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eInterpreter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003east\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003einterpret\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"n\"\u003eerror_msg\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"n\"\u003einterpret\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eexpression\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003erun_tests\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'~T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'~F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'T \u0026amp; T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'T \u0026amp; F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'F \u0026amp; T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'F \u0026amp; F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'T v T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'T v F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'F v T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'F v F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'T \u0026gt; T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'T \u0026gt; F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'F \u0026gt; T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'F \u0026gt; F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'~F \u0026amp; F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eassert_expression_equals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'F v ~T'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"s1\"\u003e'SUCCESS!'\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"the-basics-of-interpreters\"\u003eThe Basics of Interpreters\u003c/h3\u003e\n\n\u003cp\u003eWhen starting on this quest, I began by doing what I typically do at the outset of some new task: I Googled and I read. The resource I found most helpful was a \u003ca href=\"https://ruslanspivak.com/lsbasi-part1/\"\u003eseries of posts\u003c/a\u003e by \u003ca href=\"https://ruslanspivak.com/pages/about/\"\u003eRuslan Spivak\u003c/a\u003e. There he ends up building an interpreter for the Pascal language, but starts with a simpler calculator. Our goal is much more similar to a calculator than a full programming language, so we can use his early posts as our baseline.\u003c/p\u003e\n\n\u003cp\u003eOver the course of his posts on building the calculator, Ruslan lays out that interpreting is typically decomposed into 3 separate stages:\u003c/p\u003e\n\n\u003cdiv style=\"display:flex;justify-content:space-around;align-items:center;margin-bottom:1rem;\"\u003e\n  \u003cspan style=\"border:thin solid;padding:0.25em 0.5em;padding-top:0.33em;border-radius:4px\"\u003e\n    lexical analysis\n  \u003c/span\u003e\n  \u003cspan\u003e\u0026rarr;\u003c/span\u003e\n  \u003cspan style=\"border:thin solid;padding:0.25em 0.5em;padding-top:0.33em;border-radius:4px\"\u003e\n    parsing\n  \u003c/span\u003e\n  \u003cspan\u003e\u0026rarr;\u003c/span\u003e\n  \u003cspan style=\"border:thin solid;padding:0.25em 0.5em;padding-top:0.33em;border-radius:4px\"\u003e\n    interpreting\n  \u003c/span\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cem\u003eLexical analysis\u003c/em\u003e is the process of breaking the input string into tokens (we’ll get to what tokens are in just a bit). The tool that does the lexical analysis is called a \u003cem\u003elexer\u003c/em\u003e, and it is the tool that is going to need to know about the set of tokens for our language that we laid out above. \u003cem\u003eParsing\u003c/em\u003e, then, is the process of finding structure in the stream of tokens, and the tool that does the parsing is – you guessed it – called a \u003cem\u003eparser\u003c/em\u003e. The parser is what will need to know about what constitutes a valid expression, as outlined above. Finally, \u003cem\u003einterpreting\u003c/em\u003e takes the structured output of the parser and evaluates it to get a result (in our case, some Boolean value). So, we are going to need 3 basic classes:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eLexer\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eParser\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eInterpreter\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"the-lexer\"\u003eThe Lexer\u003c/h3\u003e\n\n\u003cp\u003eOur lexer is going to take a string representation of a logical expression and convert it into a collection of tokens. Okay, well, what are tokens? Tokens are the basic, abstract units of the language that the interpreter will, well, interpret. To understand what a token is, it may be easiest to jump over to Ruslan’s example of a calculator. \u003ccode\u003e2 + 2\u003c/code\u003e and \u003ccode\u003e5 - 3\u003c/code\u003e are both valid arithmetic expressions. Disregarding whitespace, each expression is composed of 3 characters: \u003ccode\u003e['2', '+', '2']\u003c/code\u003e and \u003ccode\u003e['5', '-', '3']\u003c/code\u003e. We, as people who understand basic arithmetic, know that there are two different categories of characters in these lists—integers and operators. \u003ccode\u003e['2', '5', '3']\u003c/code\u003e are all examples of integers, and \u003ccode\u003e['+', '-']\u003c/code\u003e are both operators. To put this in the language of interpreters and lexers, we would say that, for example, \u003ccode\u003e2\u003c/code\u003e is a token of the integer type with a value of “2”, while \u003ccode\u003e+\u003c/code\u003e is a token of the addition type with a value of “+”. Now, I just said that \u003ccode\u003e+\u003c/code\u003e is a token of the addition type, not the operator type; why? If our interpreter needs to do different things depending on the exact operator, each operator needs a distinct type. While \u003ccode\u003e+\u003c/code\u003e and \u003ccode\u003e-\u003c/code\u003e are both operators, they are different operators that do different things.\u003c/p\u003e\n\n\u003cp\u003eThis brings us to the final bit of jargon for this section: \u003cem\u003elexemes\u003c/em\u003e. If tokens are the abstract units of the language (e.g. integers, addition operators, subtraction operators), lexemes are the concrete values of some particular token. So, \u003ccode\u003e2\u003c/code\u003e and \u003ccode\u003e5\u003c/code\u003e are both integer tokens, but each has a different lexeme; or, to put it otherwise, the integer token type can have a variety of lexemes (e.g. \u003ccode\u003e2, 5, 3, 11, 100,\u003c/code\u003e etc.). The addition token, however, in the basic implementation of a calculator, will only ever have one lexeme—\u003ccode\u003e+\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWell, what does all of this mean for the code we need to write? It means that we will need a \u003ccode\u003eToken\u003c/code\u003e class that has \u003ccode\u003e#type\u003c/code\u003e and \u003ccode\u003e#value\u003c/code\u003e attributes:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eToken\u003c/span\u003e\n  \u003cspan class=\"kp\"\u003eattr_reader\u003c/span\u003e \u003cspan class=\"ss\"\u003e:type\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:value\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@type\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe next thing we need to do is define the set of possible token types for our language. I’m going to base the names of the types on the constants used for \u003ca href=\"https://en.wikipedia.org/wiki/Logic_gate#Symbols\"\u003elogical gates\u003c/a\u003e; so, the set of possible operator types will be: \u003ccode\u003e[:AND, :OR, :IFSO, :NOT]\u003c/code\u003e.\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote\"\u003e2\u003c/a\u003e\u003c/sup\u003e Given the simplicity of our language here at the outset:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eevery \u003ccode\u003eToken\u003c/code\u003e of type \u003ccode\u003e:AND\u003c/code\u003e will have a value of \u003ccode\u003e\u0026amp;\u003c/code\u003e;\u003c/li\u003e\n  \u003cli\u003eevery \u003ccode\u003eToken\u003c/code\u003e of type \u003ccode\u003e:OR\u003c/code\u003e will have a value of \u003ccode\u003ev\u003c/code\u003e;\u003c/li\u003e\n  \u003cli\u003eevery \u003ccode\u003eToken\u003c/code\u003e of type \u003ccode\u003e:IFSO\u003c/code\u003e will have a value of \u003ccode\u003e\u0026gt;\u003c/code\u003e;\u003c/li\u003e\n  \u003cli\u003eevery \u003ccode\u003eToken\u003c/code\u003e of type \u003ccode\u003e:NOT\u003c/code\u003e will have a value of \u003ccode\u003e~\u003c/code\u003e;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe only other types of \u003ccode\u003eToken\u003c/code\u003e we need for this basic implementation of our logic interpreter are Boolean type. We will define a \u003ccode\u003e:TRUE\u003c/code\u003e type and \u003ccode\u003e:FALSE\u003c/code\u003e type. Again, we are keeping things simple here at the outset, so these types will likewise only have one possible value:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eevery \u003ccode\u003eToken\u003c/code\u003e of type \u003ccode\u003e:TRUE\u003c/code\u003e will have a value of \u003ccode\u003eT\u003c/code\u003e;\u003c/li\u003e\n  \u003cli\u003eevery \u003ccode\u003eToken\u003c/code\u003e of type \u003ccode\u003e:FALSE\u003c/code\u003e will have a value of \u003ccode\u003eF\u003c/code\u003e;\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eOur lexer thus needs to convert the string representation of the logical expression into a collection of tokens of these types:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eLexer\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@input\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003einput\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etokens\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# returns an array of Token instances\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe are essentially converting one kind of stream (a string) into another (a stream of \u003ccode\u003eToken\u003c/code\u003es), so let’s use \u003ccode\u003eEnumerable#map\u003c/code\u003e as the heart of our \u003ccode\u003etokens\u003c/code\u003e method:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eLexer\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etokens\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@input\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e''\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"c1\"\u003e# for each `char`, there are only 6 possible things to do\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003echar\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e' '\u003c/span\u003e\n        \u003cspan class=\"k\"\u003enext\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e'~'\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:NOT\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u0026amp;'\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:AND\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e'v'\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:OR\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e'\u0026gt;'\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:IFSO\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e'T'\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:TRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"s1\"\u003e'F'\u003c/span\u003e\n        \u003cspan class=\"no\"\u003eToken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:FALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecompact\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis method converts our input string into an enumerable array (\u003ccode\u003e@input.split('')\u003c/code\u003e) and then \u003ccode\u003e#map\u003c/code\u003es over that array to create a new array of \u003ccode\u003eToken\u003c/code\u003e instances. However, since our text input string can contain whitespace, and those are not significant tokens, we skip whitespace (thus inserting \u003ccode\u003enil\u003c/code\u003es into our output array) and then remove the \u003ccode\u003enil\u003c/code\u003es with the call to \u003ccode\u003e#compact\u003c/code\u003e at the end.\u003c/p\u003e\n\n\u003cp\u003eThis method will hande a wide variety of expressions:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e$\u0026gt;Lexer.new('~T').tokens\n=\u0026gt; [#\u0026lt;NOT value=\"~\"\u0026gt;, #\u0026lt;TRUE value=\"T\"\u0026gt;]\n\n$\u0026gt;Lexer.new('F \u0026amp; T').tokens\n=\u0026gt; [#\u0026lt;FALSE value=\"F\"\u0026gt;, #\u0026lt;AND value=\"\u0026amp;\"\u0026gt;, #\u0026lt;TRUE value=\"T\"\u0026gt;]\n\n$\u0026gt;Lexer.new('T v F').tokens\n=\u0026gt; [#\u0026lt;TRUE value=\"T\"\u0026gt;, #\u0026lt;OR value=\"v\"\u0026gt;, #\u0026lt;FALSE value=\"F\"\u0026gt;]\n\n$\u0026gt;Lexer.new('T \u0026gt; F').tokens\n=\u0026gt; [#\u0026lt;TRUE value=\"T\"\u0026gt;, #\u0026lt;IFSO value=\"\u0026gt;\"\u0026gt;, #\u0026lt;FALSE value=\"F\"\u0026gt;]\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"the-parser\"\u003eThe Parser\u003c/h3\u003e\n\n\u003cp\u003eWith a \u003ccode\u003eLexer\u003c/code\u003e built that will output an enumerable of \u003ccode\u003eToken\u003c/code\u003es, we can now build a simple \u003ccode\u003eParser\u003c/code\u003e that will encode the syntax of our basic propositional logic. But first, what is our parser going to output? Here is where we hit our next big patch of jargon and theory, so let’s go ahead and jump in!\u003c/p\u003e\n\n\u003cp\u003eIn short, our parser is going to encode a \u003cem\u003egrammar\u003c/em\u003e and output an \u003cem\u003eabstract syntax tree\u003c/em\u003e; these are the two main bits of jargon we need to make sense of before turning to actually writing our parser. Ruslan has a \u003ca href=\"https://ruslanspivak.com/lsbasi-part4/\"\u003every good introduction to grammars\u003c/a\u003e in his series on building an interpreter, but let’s try to get there on our own. A grammar, in this context, is simply a structured representation of what constitutes a valid expression in the language, which is precisely the task we set ourselves to earlier. Any grammar is made up of a series of \u003cem\u003erules\u003c/em\u003e; each \u003cem\u003erule\u003c/em\u003e has a name (called a “start symbol” or the “head” of the rule) and a definition (called the “body” of the rule). The definition of the \u003cem\u003erule\u003c/em\u003e (the \u003cem\u003ebody\u003c/em\u003e) can refer to other rules or to tokens. But that’s basically it. Let’s go back to Ruslan’s example of a simple calculator to look at a simple grammar for handling addition and subtraction:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eexpression :: term ((PLUS | MINUS) term)*\nterm :: INTEGER\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis is a grammar defining the structure of a language composed of only 3 types of tokens (\u003ccode\u003ePLUS\u003c/code\u003e, \u003ccode\u003eMINUS\u003c/code\u003e, and \u003ccode\u003eINTEGER\u003c/code\u003e). The simplest rule is the rule for a “term”; a term, in this language, is only ever some particular integer. Somewhat more complicated is the rule for an “expression”; an expression, in this language, is \u003cem\u003ealways\u003c/em\u003e made up of at least one “term”, but it can optionally (that’s what the \u003ccode\u003e(...)*\u003c/code\u003e represents) be made up of a term followed by either the plus or minus operator (\u003ccode\u003e(PLUS | MINUS)\u003c/code\u003e) and then another term. So, this grammar dictates that \u003ccode\u003e2\u003c/code\u003e is a valid expression, \u003ccode\u003e2 + 2\u003c/code\u003e is a valid expression, and \u003ccode\u003e2 + 2 - 3\u003c/code\u003e is also a valid expression.\u003c/p\u003e\n\n\u003cp\u003eNow, this is basically as simple as a grammar can be, but that’s ok. We are starting off simple, and this grammar still captures the primary elements and characteristics of the concept.\u003c/p\u003e\n\n\u003cp\u003eFor our minimal propositional logic language, we are going to need to define the grammar and then encode that logic in our parser. But, before we get quite there, let’s talk a bit about what our parser is going to output—an Abstract Syntax Tree (AST).\u003c/p\u003e\n\n\u003cp\u003eAn \u003ca href=\"https://en.wikipedia.org/wiki/Abstract_syntax_tree\"\u003eabstract syntax tree\u003c/a\u003e is a very important concept in the world of software development. Whether you know it or not, code you have written has very likely used an abstract syntax tree at some point in its execution (even if only at the low level of compiling your code into machine code). First and foremost, an abstract syntax tree is a \u003cem\u003etree\u003c/em\u003e. This is a particular and oft-used data structure in programming. The \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction\"\u003eDOM\u003c/a\u003e is a tree; \u003ca href=\"http://ruby-doc.org/core-2.4.0/Hash.html\"\u003ehashes\u003c/a\u003e are trees; but what, exactly, is a tree? Simply, a tree is a data structure that consists of one or more nodes organized into a hierarchy. An abstract syntax tree is simply a tree where the nodes represent either the operations or the operands that comprise the language for your interpreter. Ruslan puts it this way:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eSo, what is an abstract syntax tree? An abstract syntax tree (AST) is a tree that represents the abstract syntactic structure of a language construct where each interior node and the root node represents an operator, and the children of the node represent the operands of that operator.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eJargony? Yes. But also detailed and specific. But, maybe a concrete example will help firm things up. Returning to our simple calculator, what would the abstract syntax tree for the expression \u003ccode\u003e2 + 2 - 3\u003c/code\u003e look like?\u003c/p\u003e\n\n\u003cdiv class=\"tree\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003e-\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\n          \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003e+\u003c/a\u003e\n          \u003cul\u003e\n            \u003cli\u003e\n              \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003e2\u003c/a\u003e\n            \u003c/li\u003e\n            \u003cli\u003e\n              \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003e2\u003c/a\u003e\n            \u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003e3\u003c/a\u003e\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIn the case of our propositional logic language, the abstract syntax tree for the expression \u003ccode\u003e~T \u0026amp; F\u003c/code\u003e would look like:\u003c/p\u003e\n\n\u003cdiv class=\"tree\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003e\u0026amp;\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\n          \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003e~\u003c/a\u003e\n          \u003cul\u003e\n            \u003cli\u003e\n              \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003eT\u003c/a\u003e\n            \u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003eF\u003c/a\u003e\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe output of our parser needs simply to encode such a structure. How might we go about that?\u003c/p\u003e\n\n\u003cp\u003eWell, the first thing we will need is a class to represent an atom node:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eAST\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eAtom\u003c/span\u003e\n    \u003cspan class=\"kp\"\u003eattr_reader\u003c/span\u003e \u003cspan class=\"ss\"\u003e:value\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"vi\"\u003e@value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAn atom node is the simplest kind of node; you simply initialize it with a value.\u003c/p\u003e\n\n\u003cp\u003eNext, we need to encode unary operations (like negation):\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eAST\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eUnaryOperation\u003c/span\u003e\n    \u003cspan class=\"kp\"\u003eattr_reader\u003c/span\u003e \u003cspan class=\"ss\"\u003e:operand\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoperand\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"vi\"\u003e@operand\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eoperand\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eUnary operations, as we recall from above, take only one operand; so, we initialize this kind of AST node with one operand. We only have one unary operation in our language, so let’s define our negation operation node now:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eAST\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eNegation\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eUnaryOperation\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eBinary operations are quite similar; they simply take two operands instead of one:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eAST\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eBinaryOperation\u003c/span\u003e\n    \u003cspan class=\"kp\"\u003eattr_reader\u003c/span\u003e \u003cspan class=\"ss\"\u003e:left\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:right\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"vi\"\u003e@left\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eleft\u003c/span\u003e\n      \u003cspan class=\"vi\"\u003e@right\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eright\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eLet’s now define the AST nodes to represent our 3 binary operators:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eAST\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eConjunction\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eBinaryOperation\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eDisjunction\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eBinaryOperation\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eImplication\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"no\"\u003eBinaryOperation\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThese classes encode all of the possible nodes for our abstract syntax tree. And, each of these classes is composable with any of the others; that is, like the graphical tree representation, they can be nested such that a negation operation is the left operand of a conjunction operation. All we need now is to build a parser that can accept a stream of tokens and output an abstract syntax tree represented by some composition of our newly minted node classes:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eParser\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etokens\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@tokens\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etokens\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eparse\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# this will be the public interface of this class\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow, before we can write the code that will live in our \u003ccode\u003eParser\u003c/code\u003e class, we need to define the grammar for our basic implementation of propositional logic. Let’s start with the grammar for basic arithmetic from above:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eexpression :: term ((PLUS | MINUS) term)*\nterm :: INTEGER\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eFirst, let’s simply replace the arithmetic binary operations with our binary operations:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eexpression :: term ((AND | OR | IFSO) term)*\nterm :: INTEGER\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNext, let’s replace the one integer token with our two Boolean tokens:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eexpression :: term ((AND | OR | IFSO) term)*\nterm :: TRUE | FALSE\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe are nearly there; we just need to handle our unary operation. Let’s add one further rule between the \u003ccode\u003eexpression\u003c/code\u003e rule and the \u003ccode\u003eterm\u003c/code\u003e rule for our negation operation:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eexpression :: formula ((AND | OR | IFSO) formula)*\nformula :: (NOT)? term\nterm :: TRUE | FALSE\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eFinally, we are going to change the \u003ccode\u003e*\u003c/code\u003e in the \u003ccode\u003eexpression\u003c/code\u003e rule to an \u003ccode\u003e?\u003c/code\u003e. This means that an \u003ccode\u003eexpression\u003c/code\u003e is made up of at least a \u003ccode\u003eformula\u003c/code\u003e and then either zero or one phrases of the shape operator and formula. The \u003ccode\u003e*\u003c/code\u003e meant that the \u003ccode\u003eformula\u003c/code\u003e could be followed by \u003cem\u003ezero or more\u003c/em\u003e phrases of that shape. We will get to handling multiple binary operators in our expressions in the next post in this series.\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eexpression :: formula ((AND | OR | IFSO) formula)?\nformula :: (NOT)? term\nterm :: TRUE | FALSE\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSo, our grammar states that a valid expression in our language is:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ecomposed of at least one formula\n    \u003cul\u003e\n      \u003cli\u003ewhich has zero or one negation operators followed by one term\n        \u003cul\u003e\n          \u003cli\u003ewhich is either a true or false token\u003c/li\u003e\n        \u003c/ul\u003e\n      \u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eoptionally followed by zero or one predicates\n    \u003cul\u003e\n      \u003cli\u003ewhich has one of three possible operators followed by one formula\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNow, this isn’t the most complicated or flexible grammar, but it is a valid grammar and it does encode the possible range of expressions in our tests from the start. Over this series of posts, we will expand on this grammar, but for now, let’s write the parser code for this grammar.\u003c/p\u003e\n\n\u003cp\u003eOur parser begins life with a stream of tokens, but we need to work through this stream one token at a time; so, we need a way to iterate through the stream of tokens in a controlled manner. We cannot simply call \u003ccode\u003e#each\u003c/code\u003e on the stream of tokens because we need to build our abstract syntax tree recursively. So, let’s implement our own iterator that will use a pointer for the current token that we will manually increment through the stream of tokens.\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eParser\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etokens\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@tokens\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etokens\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@stream\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@tokens\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_enum\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@current_token\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@stream\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enext\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etoken_type\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"vi\"\u003e@current_token\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003etoken_type\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ebegin\u003c/span\u003e\n      \u003cspan class=\"vi\"\u003e@current_token\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@stream\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enext\u003c/span\u003e\n    \u003cspan class=\"k\"\u003erescue\u003c/span\u003e \u003cspan class=\"no\"\u003eStopIteration\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eTo achieve our desired result, we are going to use Ruby’s \u003ca href=\"https://rossta.net/blog/what-is-enumerator.html\"\u003e\u003ccode\u003eEnumerator\u003c/code\u003e infrastructure\u003c/a\u003e. Our \u003ccode\u003e@stream\u003c/code\u003e will be an enumerator object that we can manually iterate over, one token at a time, using the \u003ccode\u003e#next\u003c/code\u003e method. Our \u003ccode\u003eParser#eat\u003c/code\u003e method will be the internal mechanism we use to move the pointer (\u003ccode\u003e@current_token\u003c/code\u003e) to the next token in our stream (with one extra bit of safety–only moving the pointer forward if the current token is of the type specified when the method is called).\u003c/p\u003e\n\n\u003cp\u003eWith a mechanism in place for manually iterating through the stream of tokens, let’s start encoding our grammar rules. The lowest level, and simplest, rule is the \u003ccode\u003eterm\u003c/code\u003e rule, so let’s start by writing a method for this rule:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eParser\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# term :: TRUE | FALSE\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eterm\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etoken\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@current_token\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:TRUE\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:TRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eAtom\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:FALSE\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:FALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eAtom\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eraise\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"si\"\u003e#{\u003c/span\u003e\u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003evalue\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e is an invalid term\"\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis code should be fairly straightforward. We inspect the current token and if it is a \u003ccode\u003e:TRUE\u003c/code\u003e type token, we move the current token point up and return an operand AST node with the Boolean \u003ccode\u003etrue\u003c/code\u003e value; whereas if the current token is a \u003ccode\u003e:FALSE\u003c/code\u003e type token, we move the pointer up and return an operand AST node with the \u003ccode\u003efalse\u003c/code\u003e value; otherwise, we raise an error.\u003c/p\u003e\n\n\u003cp\u003eNext, we need a method to handle our \u003ccode\u003eformula\u003c/code\u003e rule:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eParser\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# formula :: (NOT)? term\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eformula\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etoken\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@current_token\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:NOT\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:NOT\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eNegation\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eterm\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eterm\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHere, we either wrap a call to \u003ccode\u003eterm\u003c/code\u003e in a negation AST node (if the current token is a \u003ccode\u003e:NOT\u003c/code\u003e type), or we simply return the \u003ccode\u003eterm\u003c/code\u003e unwrapped.\u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote\"\u003e3\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003cp\u003eFinally, let’s implement the \u003ccode\u003eexpression\u003c/code\u003e rule:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eParser\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\n  \u003cspan class=\"c1\"\u003e# expression : formula ((AND | OR | IFSO) formula)?\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eexpression\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eformula\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etoken\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@current_token\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:AND\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:AND\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eConjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eformula\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:OR\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:OR\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eDisjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eformula\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003etoken\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:IFSO\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:IFSO\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eImplication\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eformula\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eresult\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis method begins by setting a temporary \u003ccode\u003eresult\u003c/code\u003e variable to the output of the \u003ccode\u003eParser#formula\u003c/code\u003e method (since every expression must begin with one valid formula). We then check if the current token (which has been updated by the call to \u003ccode\u003eParser#formula\u003c/code\u003e) is one of the three operator types; if it is, we move the current token pointer forward and then update that \u003ccode\u003eresult\u003c/code\u003e variable to be the proper AST operator node, where the left hand operand is the previous \u003ccode\u003eresult\u003c/code\u003e and the right hand operand is the result of a new call to the \u003ccode\u003eParser#formula method\u003c/code\u003e. Once these checks are all done, we return the final \u003ccode\u003eresult\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWith our grammar now fully and properly encoded in our parser, we can finally implement the \u003ccode\u003eParser#parse\u003c/code\u003e method. Luckily, this part is extremely simple, as a parsed stream of tokens is simply an expression:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eParser\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eparse\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexpression\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"the-interpreter\"\u003eThe Interpreter\u003c/h3\u003e\n\n\u003cp\u003eWith our \u003ccode\u003eLexer\u003c/code\u003e and \u003ccode\u003eParser\u003c/code\u003e now implemented, we have a pipeline for converting a string representation of a basic expression of propositional logic into an abstract syntax tree object that represents that exact same expression. The final piece of the puzzle is the interpreter that will actually take our abstract syntax tree object and calculate the Boolean output of that expression.\u003c/p\u003e\n\n\u003cp\u003eThe question becomes, how do we work with our abstract syntax tree to evaluate an output? Well, let’s start by thinking through what our abstract syntax tree \u003cem\u003eencodes\u003c/em\u003e. Let’s work with the expression from earlier, \u003ccode\u003e~T \u0026amp; F\u003c/code\u003e. Represented as a tree, we would have:\u003c/p\u003e\n\n\u003cdiv class=\"tree\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003e\u0026amp;\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\n          \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003e~\u003c/a\u003e\n          \u003cul\u003e\n            \u003cli\u003e\n              \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003eT\u003c/a\u003e\n            \u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003eF\u003c/a\u003e\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHow would we interpret this statement properly ourselves? We would take the first value—\u003ccode\u003eT\u003c/code\u003e for \u003ccode\u003etrue\u003c/code\u003e— and negate it; this would give us a value of \u003ccode\u003efalse\u003c/code\u003e. We would then compute the result of the expression \u003ccode\u003eF \u0026amp; F\u003c/code\u003e, which, given the truth table for the conjunction operator, would give us \u003ccode\u003efalse\u003c/code\u003e. Simple enough. Now, how could we do something essentially the same as this in code?\u003c/p\u003e\n\n\u003cp\u003eWell, what is it precisely that we did when we “processed” this expression ourselves? We started with values, applied operators to get new values, and followed this process until we had no more operators left, and thus only a value. We need to do the same thing with the abstract syntax tree. Let’s go ahead and translate our tree just above into a visual representation of our abstract syntax tree for this expression:\u003c/p\u003e\n\n\u003cdiv class=\"tree\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\n      \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003eAST::Conjunction\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\n          \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003eAST::Negation\u003c/a\u003e\n          \u003cul\u003e\n            \u003cli\u003e\n              \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003eAST::Atom(true)\u003c/a\u003e\n            \u003c/li\u003e\n          \u003c/ul\u003e\n        \u003c/li\u003e\n        \u003cli\u003e\n          \u003ca href=\"#\" class=\"monospace bg-lightgrey font-1em bold\"\u003eAST::Atom(false)\u003c/a\u003e\n        \u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/div\u003e\n\n\u003cp\u003eLet’s start at the bottom of this tree and walk through the basics of how to interpret an object like this. Starting with the left hand side of the conjunction, we have a negation operator applied to a true value operand. We know that we need the left hand side of the conjunction to be a value operand before we can evaluate it, so we first need to evaluate the negation operator. When looking at the negation operator node we see that it has only the one child node, only the one operand. To evaluate the operand, we simply need to get its value. With that node evaluated, we next simply need to apply the logic of negation on that value to generate a new value (\u003ccode\u003etrue\u003c/code\u003e becomes \u003ccode\u003efalse\u003c/code\u003e when negated). We now have a value for the left hand side of the conjunction. On the right hand side, we already have a value operand. So, we can simply evaluate the conjunction now; what is the output when the left hand side is \u003ccode\u003efalse\u003c/code\u003e and the right hand side is \u003ccode\u003efalse\u003c/code\u003e? Also \u003ccode\u003efalse\u003c/code\u003e. That is our output.\u003c/p\u003e\n\n\u003cp\u003eWhat we are doing is essentially “visiting” each node in our tree, recursively and one at a time. When we visit a node, we first check what type of node it is. If it is an operand type of node, we simply extract its value. If it is a unary operator node (like negation), we visit its one operand node. If it is a binary operator node (like conjunction), we visit its left operand node and its right operand node. These visits just restart the process, but for that new node (this is what makes the process recursive). In fact, this process of making our way through the hierarchical abstract syntax tree is a well-worn pattern in programming, called the \u003ca href=\"https://sourcemaking.com/design_patterns/visitor\"\u003eVisitor pattern\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWith a firmer understanding of \u003cem\u003ehow\u003c/em\u003e our \u003ccode\u003eInterpreter\u003c/code\u003e is going to interpret the expression represented by the abstract syntax tree passed into it, let’s get started actually writing the code.\u003c/p\u003e\n\n\u003cp\u003eFirst, we need an initializer that will take the abstract syntax tree that our interpreter needs to evaluate as well as the primary public method for this class, the \u003ccode\u003eInterpreter#interpret\u003c/code\u003e method.\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eInterpreter\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003east\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@ast\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003east\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einterpret\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e# this is where the magic will happen\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNext, we need to start implementing our “visitor” pattern. Let’s start with the simplest type of node, the operand node, and write a visitor method for that. As we said above, all this method needs to do is extract the value from the node:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eInterpeter\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit_atom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003evalue\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe only have one unary operator, negation, so let’s write a visitor method for that next. In our description above, we said that we need to visit this node’s operand child node and then flip the Boolean value. This leads us to our first issue: how do we determine which visitor method to use when visiting the operand child node? Well, we need to check the type of the node. So let’s do that:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eInterpeter\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit_negation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eoperand_node\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eoperand\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eoperand_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eoperand_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eAtom\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_atom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoperand_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003eoperand_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eNegation\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_negation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoperand_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003eoperand_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eConjunction\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_conjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoperand_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003eoperand_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eDisjunction\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_disjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoperand_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003eoperand_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eImplication\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_implication\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eoperand_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003eoperand_value\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe first figure out what kind of node the \u003ccode\u003enode.operand\u003c/code\u003e child node is, then we use the proper visitor method for that node type to get the value of that node. With the value, we can then implement the logic to flip the Boolean value.\u003c/p\u003e\n\n\u003cp\u003eNext, let’s try the first of our binary operators–conjunction. Our visitor method needs to do essentially the same thing as the negation visitor, just with two child nodes:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eInterpeter\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit_conjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eleft_node\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eleft\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eleft_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eleft_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eAtom\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_atom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eleft_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003eleft_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eNegation\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_negation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eleft_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003eleft_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eConjunction\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_conjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eleft_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003eleft_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eDisjunction\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_disjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eleft_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003eleft_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eImplication\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_implication\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eleft_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eright_node\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eright\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eright_value\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003eright_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eAtom\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_atom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eright_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003eright_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eNegation\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_negation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eright_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003eright_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eConjunction\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_conjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eright_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003eright_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eDisjunction\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_disjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eright_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003eright_node\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eImplication\u003c/span\u003e\n                      \u003cspan class=\"n\"\u003evisit_implication\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eright_node\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003eleft_value\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eright_value\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHere we see a clear opportunity for refactoring to clean this all up a bit. Instead of putting the logic to determine which visitor method to use based on the kind of node \u003cem\u003einside\u003c/em\u003e of each specific visitor method itself, let’s pull that out into its own separate method. This method will be the sort-of switchboard for all of our specific visitor methods; and each of our specific visitor methods can focus simply on the logic for converting their child nodes into a value:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eInterpreter\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eAtom\u003c/span\u003e\n      \u003cspan class=\"n\"\u003evisit_atom\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eNegation\u003c/span\u003e\n      \u003cspan class=\"n\"\u003evisit_negation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eConjunction\u003c/span\u003e\n      \u003cspan class=\"n\"\u003evisit_conjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eDisjunction\u003c/span\u003e\n      \u003cspan class=\"n\"\u003evisit_disjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eelsif\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"no\"\u003eAST\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eImplication\u003c/span\u003e\n      \u003cspan class=\"n\"\u003evisit_implication\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit_negation\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eoperand\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit_conjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e)]\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eMuch nicer! The process for writing the other binary operator visitor methods would be the same as the conjunction method, just with different logic for evaluating a Boolean value:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eInterpreter\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit_disjunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e)]\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003evisit_implication\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e)]\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhen\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n      \u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eFinally, with our visitor pattern all built out, we simply need to wire up the \u003ccode\u003eInterpreter#interpret\u003c/code\u003e method. Since our abstract syntax tree is simply a hierarchical, complex object—that is, it is a single node object that nests various levels of complexity within its children nodes—, we simply need to visit the tree object itself:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eInterpreter\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einterpret\u003c/span\u003e\n    \u003cspan class=\"n\"\u003evisit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"vi\"\u003e@ast\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWith that, we have a proper interpreter for working with simple expressions of propositional logic! Congrats on sticking with it this far. If you have been writing this in a file on your own computer, you can run the tests we defined at the outset and see that our interpreter works precisely as expected. Awesome!\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"wrapping-up\"\u003eWrapping Up\u003c/h3\u003e\n\n\u003cp\u003eSo, what all have we accomplished? We have written a \u003ccode\u003eLexer\u003c/code\u003e that takes an input string representing a basic logical expression and converts it into a stream of \u003ccode\u003eToken\u003c/code\u003e objects that represent the atomic components of the expression. We wrote a \u003ccode\u003eParser\u003c/code\u003e that takes such a stream of tokens and builds an abstract syntax tree to represent the expression based on a grammar that properly and fully describes the shape of our language. We finally built an \u003ccode\u003eInterpreter\u003c/code\u003e that takes an abstract syntax tree representation of a logical expression and evaluates its Boolean result.\u003c/p\u003e\n\n\u003cp\u003eAlong the way, we learned the basics of \u003cem\u003epropositional logic\u003c/em\u003e: its four basic operators, its two operand values, the truth tables for each operator, and the grammar of our simple subset of the language. We also learned what \u003cem\u003etokens\u003c/em\u003e are and how they are used in \u003cem\u003elexical analysis\u003c/em\u003e. We learned what a \u003cem\u003egrammar\u003c/em\u003e is, how we can define a grammar using \u003cem\u003erules\u003c/em\u003e, and how to encode those rules in a \u003cem\u003eparser\u003c/em\u003e. We then learned what an \u003cem\u003eabstract syntax tree\u003c/em\u003e is, how to structure one, and how to evaluate one using the \u003cem\u003evisitor pattern\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eAll in all, we have worked through a \u003cstrong\u003eton\u003c/strong\u003e of important and interesting material. I feel pretty accomplished, and so should you.\u003c/p\u003e\n\n\u003cp\u003eIn the next post, we are going to expand our grammar to allow for grouped expressions (e.g. \u003ccode\u003e~(T v F)\u003c/code\u003e), to allow multiple binary operators (e.g. an expression like \u003ccode\u003eT \u0026amp; F v T\u003c/code\u003e), to handle operator precedence (\u003ccode\u003eT \u0026amp; F v T\u003c/code\u003e should be read as \u003ccode\u003e(T \u0026amp; F) v T\u003c/code\u003e, not \u003ccode\u003eT \u0026amp; (F v T)\u003c/code\u003e), and to handle stacked negations (e.g. \u003ccode\u003e~~T\u003c/code\u003e). Hope you’ll be back to dive into that when it gets published.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eYou can find the script we have built to this point in \u003ca href=\"https://gist.github.com/fractaledmind/a072674b18086fdebf3b3a535c0f7dfb/09e7c7c28c71823f7611e8d1597a8758350cc9f2\"\u003ethis Gist\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eI have covered most of this in a section of a previous article: \u003ca href=\"http://fractaledmind.com/articles/conjunctive-binarism/#a-primer-on-propositional-logic\"\u003eA Primer on Propositional Logic\u003c/a\u003e \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:2\"\u003e\n      \u003cp\u003eThe \u003ccode\u003e:IFSO\u003c/code\u003e type does not have a corollary in the set of logic gates. This is a constant that I made up to fit the basic semantic pattern. \u003ca href=\"#fnref:2\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:3\"\u003e\n      \u003cp\u003eOur code here can be quite simple like this since our grammar specifies that a \u003ccode\u003eformula\u003c/code\u003e is optionally preceeded by \u003cem\u003ezero or one\u003c/em\u003e negation operators. If our grammar allowed for \u003cem\u003ezero or more\u003c/em\u003e negation operators, we would have to change this code fairly significantly. This will be one of the ways in which we evolve our grammar and thus our interpreter in this series of posts. \u003ca href=\"#fnref:3\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"Death of Self","url":"/articles/death-of-self/","content":"\u003cp\u003eIt was the Friday before Christmas, and I remember that my legs went first. One moment, I was capable of standing up; next, I wasn’t, and I was slowly but haphazardly bringing my body to the floor.\u003c/p\u003e\n\n\u003cp\u003eFrom there, I began to lose sensation in my hands. This cool notion of nothingness began to creep up my hands and into my arms. It called me to lie down, to relax, to let go. And it was the only thing that made any sense, so I lied down, relaxed, and I let go.\u003c/p\u003e\n\n\u003cp\u003eThat nothing-sense moved inward; it was cool but not cold, no thing but not nothing. As it made its way to my chest, I noticed how odd this all felt. I was functionally paralyzed—I couldn’t move my legs and I couldn’t move my arms. But that didn’t scare me; it felt right. In some real, visceral way “I” was receding. I felt my self waning like a flame starving of oxygen. I was flickering, and steadily and slowly I was going out.\u003c/p\u003e\n\n\u003cp\u003eAnd in full honesty, it didn’t feel bad and it didn’t feel scary. It simply felt; it simply was. Nothing anywhere else made any sense whatsoever. Nothing anywhere else felt right. Nothing anywhere was. It was all a facade; some shadow somehow colored to feign reality to those too stuck believing colors were all it took to be real, too naïve to ask if the image had depth. And so this shadow that I could sense in my chest felt right because it knew it was a shadow and presented itself as such. It was honest, and that wasn’t bad and that wasn’t scary.\u003c/p\u003e\n\n\u003cp\u003eUntil that flame, which for so long I had understood to be “me”, went out, and all that was left was the shadow and its cool darkness. And then I was scared. Because then I didn’t exist, except there I was, frightened by the notion that “I” no longer existed. And this didn’t make sense, and I was scared. And I lay on that floor swimming in that nothingness for some amount of time, I know not how long. And I truly felt I had just experienced my own death. But not the simple death of my body; I so obviously hadn’t died like that. No, I had experienced the deeper death of my self. And it was odd. Odd in ways that I will never be able to capture in words. That time, whatever all it was, is bound up in me.\u003c/p\u003e\n\n\u003cp\u003eAnd then, quite as quickly as my legs went, I no longer felt dead. The flame was still gone, but I had a self. It was small and simple and bare; and it wasn’t a flame. It was this room where the flame had burned, this open barren room. And it was me, and there was nothing left within it. And so I opened the door, and I got on my feet, and I walked out.\u003c/p\u003e\n","type":"article"},{"title":"The Word of God","url":"/articles/the-word-of-god/","content":"\u003cp\u003eThe \u003cstrong\u003eWord of God\u003c/strong\u003e, as a phrase, denotes 3 different things:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eUtterances of God to a person.\n    \u003cul\u003e\n      \u003cli\u003e\u003cem\u003eUnmediated\u003c/em\u003e revelation via\u003c/li\u003e\n      \u003cli\u003e\u003cem\u003eCommunication\u003c/em\u003e that is\u003c/li\u003e\n      \u003cli\u003e\u003cem\u003eAnchored\u003c/em\u003e in time.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eThe Scriptures.\n    \u003cul\u003e\n      \u003cli\u003e\u003cem\u003eMediated\u003c/em\u003e revelation via\u003c/li\u003e\n      \u003cli\u003e\u003cem\u003eCommunication\u003c/em\u003e that is\u003c/li\u003e\n      \u003cli\u003e\u003cem\u003eAnchored\u003c/em\u003e within a time-frame.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eOur Lord Jesus Christ.\n    \u003cul\u003e\n      \u003cli\u003eboth \u003cem\u003eUnmediated\u003c/em\u003e (he existed physically on earth) and \u003cem\u003eMediated\u003c/em\u003e (relative to us, who have not met his physical self) via\u003c/li\u003e\n      \u003cli\u003ethe \u003cem\u003eIncarnation\u003c/em\u003e and\u003c/li\u003e\n      \u003cli\u003eis both \u003cem\u003eTimeless\u003c/em\u003e and \u003cem\u003eIn-Time\u003c/em\u003e.\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eChrist is the Perfect Word of God (complete and without error).\u003c/p\u003e\n\n\u003cp\u003eScripture is \u003cem\u003eimperfect\u003c/em\u003e, in the sense of incomplete. It offers a Mediated representation of Reality, but it is True.\u003c/p\u003e\n","type":"article"},{"title":"On Antinomies and Paradoxes","url":"/articles/on-antinomies-and-paradoxes/","content":"\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e This post builds on and relates to a number of earlier posts where I am thinking through the nature of theological reasoning and logic. If you read this and it seems thin and implicit, try reading the other articles with these tags to flesh out the picture.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI define \u003cstrong\u003eantinomies\u003c/strong\u003e as \u003cem\u003eactual contradictions\u003c/em\u003e; \u003cstrong\u003eparadoxes\u003c/strong\u003e are \u003cem\u003eseeming contradictions\u003c/em\u003e. Here I follow Kant’s jargon that defines antinomies as the combination of a rationally-justified (and true?) thesis along with a rationally-justified (and true?) antithesis. If knowledge is defined as justified true belief, such an antinomy produces contradictory knowledge. That is, I know \u003ccode\u003eP\u003c/code\u003e and \u003ccode\u003enot-P\u003c/code\u003e. In the language of some of \u003ca href=\"http://fractaledmind.com/articles/conjunctive-binarism/\"\u003emy earlier posts\u003c/a\u003e, an antinomy is a strong “conjunctive binary”.\u003c/p\u003e\n\n\u003cp\u003eContrarily, a paradox produces \u003cem\u003eseeming\u003c/em\u003e contradiction. There is a rationally-justified (and true?) thesis and an unjustified (and untrue?) antithesis; however, both are believed. Thus, I believe that I know \u003ccode\u003eP\u003c/code\u003e and \u003ccode\u003enot-P\u003c/code\u003e; however, I only know \u003ccode\u003eP\u003c/code\u003e and merely believe \u003ccode\u003enot-P\u003c/code\u003e, such that I can be made to rationally disbelieve \u003ccode\u003enot-P\u003c/code\u003e. So much for introductory definitions.\u003c/p\u003e\n\n\u003cp\u003eNow, I have questioned the truth value of the propositions when describing both antinomies and paradoxes. The justification is the defining characteristic and differentiator; the truth value of either \u003ccode\u003eP\u003c/code\u003e or \u003ccode\u003enot-P\u003c/code\u003e \u003cem\u003emust be\u003c/em\u003e in question because Truth resides in the 2-D realm (for this analogy of Reality, Truth, and Correctness to dimensionality, see \u003ca href=\"http://fractaledmind.com/articles/degrees-of-separation/\"\u003ethis earlier post\u003c/a\u003e), whereas justification resides in our Blurry Vision realm. I am only concerned with that third realm in this post.\u003c/p\u003e\n\n\u003cp\u003eI believe that the central tenets of Christian theology are best understood as \u003cem\u003eantinomies\u003c/em\u003e in the Truth realm of 2-D representation, but \u003cem\u003eparadoxes\u003c/em\u003e in the Correctness realm of our blurry vision (Of course, in the Reality realm of the 3-D, such binaries are void and these terms are meaningless). By this I mean, we ought to presuppose that \u003cstrong\u003etheological propositions\u003c/strong\u003e will be paradoxical to our minds. Our thinking exists in that blurry realm of Correctness, two degrees separated from the reality of God; so, our fundamentally assumption should be, I believe, that thoughts about God will be \u003cem\u003eseeming contradictions\u003c/em\u003e to us.\u003c/p\u003e\n\n\u003cp\u003ePractically, I am suggesting that if we initially think that a theological position is simple and one-sided, then we should immediately pause and assume we are being overly simplistic. Moreover, when someone disagrees with us on a theological position, I am suggesting that it would be responsible first to meaningfully investigate the truth of that other position.\u003c/p\u003e\n\n\u003cp\u003eThe issue though is that at the 2-D level of Truth, that seeming paradox still cannot be finally resolved. We will come face-to-face with an \u003cem\u003eantinomy\u003c/em\u003e. Yet this ought not to lead to epistemic cynicism, as we know that the antinomy presupposes a human binary epistemology (for an initial articulation of why we might want to consider binary epistemologies to be essentially broken and fallen, see \u003ca href=\"http://fractaledmind.com/articles/ruminations-on-a-credal-logic/\"\u003ethis earlier post\u003c/a\u003e). It is thoroughly difficult (impossible?) not to think in binaries, so we will likely be stuck holding “contradictory” propositions (e.g. God is One; God is Three). Yet we also know that this is not a fully true contradiction, because there is something beyond the 2-D realm – the 3-D reality.\u003c/p\u003e\n\n\u003cp\u003eThus, in the 3-D:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003ccode\u003eQ\u003c/code\u003e (a single, complex proposition) simply is.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn the 2-D representation:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003ccode\u003eQ\u003c/code\u003e is (re-)presented as both \u003ccode\u003eP\u003c/code\u003e (a single, simple proposition) and \u003ccode\u003enot-P\u003c/code\u003e, each rationally-justified and each true (inasmuch as both are \u003ccode\u003eQ\u003c/code\u003e).\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eBut, in the realm of our Blurry Vision:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003ccode\u003eP\u003c/code\u003e and \u003ccode\u003enot-P\u003c/code\u003e are a priori presupposed to be \u003cem\u003eparadoxes\u003c/em\u003e, such that finer and finer distinctions will allow us to think what in even the 2-D representation is unthinkable.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI am hopeful that these divisions between the epistemic realms and distinctions of knowledge may help us to think about God more humbly and clearly.\u003c/p\u003e\n","type":"article"},{"title":"Degrees of Separation","url":"/articles/degrees-of-separation/","content":"\u003cp\u003eWhen talking about God, I’m not so certain that we have a great understanding of what we can and cannot say properly, or what we can and cannot understand properly. {{read more}} Might there not be degrees of separation between what we think we understand and what it actually is that we are attempting to understand?\u003c/p\u003e\n\n\u003cp\u003eI’m toying with a tripartite division of terms (and thus degrees):\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003eReality\u003c/td\u003e\n      \u003ctd\u003eTruth\u003c/td\u003e\n      \u003ctd\u003eCorrectness\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003e\u003cem\u003eReality\u003c/em\u003e is that which is as it truly is.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eTruth\u003c/em\u003e is that which is as it represents itself.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eCorrectness\u003c/em\u003e is that which is as we perceive it.\u003c/p\u003e\n\n\u003cp\u003eHere is an analogy: God’s thoughts are 3-D. As limited creations, our thoughts are 2-D. God’s Revelation through Scripture is a 2-D representation of a 3-D reality; that is, it is true, yet (in a meaningful sense) incomplete. This is the first degree of separation. However, there is a second degree. As fallen, limited humans, we are unable to see this 2-D representation clearly. It is as if we are looking at it with our glasses off; we can only see a blurry image of the 2-D representation of the 3-D thought. Once again, the 2-D representation is true (in a sense), yet (in another sense) incomplete. Our blurry vision does not affect its truth-value, but does affect our understanding.\u003c/p\u003e\n\n\u003cp\u003eTheology and Hermeneutics both help us to interpret this blurry vision correctly, but they require a correct interpretation themselves. This recursive cycle is the problem point. Whenever we say “the Bible is literally true,” are we saying that our blurry vision of the Bible is a complete understanding of the 3-D truth? \u003cstrong\u003eThis cannot be.\u003c/strong\u003e This must rather mean that the 2-D representation is a true (if relative to the original, incomplete) picture of Truth. Our blurry vision, however, is not literally true. It is fraught with problems. We may be construing our blurs incorrectly in a myriad of different ways. And even if construed correctly, we still are left with a Blurry Vision!\u003c/p\u003e\n\n\u003cp\u003eWe ought to seek to be Correct in our understanding of God’s revealed Truth, a 2-D representation of God’s 3-D Reality.\u003c/p\u003e\n","type":"article"},{"title":"I am but a water glass","url":"/articles/i-am-but-a-water-glass/","content":"\u003cp\u003eI am but a water glass,\u003cbr /\u003e\na container for my life.\u003cbr /\u003e\nLife osmoses through me\u003cbr /\u003e\nforming droplets of moments\u003cbr /\u003e\nthat ruin rivulet-like to the tabletop.\u003c/p\u003e\n\n\u003cp\u003e{{read more}}\u003c/p\u003e\n\n\u003cp\u003eI am but a water glass,\u003cbr /\u003e\nseparating inner from outer.\u003cbr /\u003e\nTime gloms to my edges\u003cbr /\u003e\ncondensed from the agitated infinite air around me\u003cbr /\u003e\nevaporating as quickly as it forms.\u003c/p\u003e\n\n\u003cp\u003eI am but a water glass,\u003cbr /\u003e\nfilled with molecules moving\u003cbr /\u003e\nboth thick and fast and hot\u003cbr /\u003e\nyet lithe and smooth and cool\u003cbr /\u003e\na fluid resembling a solid.\u003c/p\u003e\n\n\u003cp\u003eI am.\u003c/p\u003e\n","type":"article"},{"title":"Portrait of Pain II","url":"/articles/portrait-of-pain-ii/","content":"\u003cp\u003eI had felt it for a while, though even then I didn’t know it. I didn’t know that I knew. It’s odd when truth gnaws at your gut, but you stubbornly ignore it. It is odd because, on the one hand, \u003cem\u003eyou\u003c/em\u003e know it, but on the other, \u003cem\u003eyou\u003c/em\u003e don’t. It’s odd and it’s dangerous. The truth is the truth, and you know it, and it gnaws at your gut. But you ignore it, and it keeps gnawing and gnawing and biting and biting, until it finally eats you up. The truth eats you up and spits you out. I remember the night the truth vomited me out.\u003c/p\u003e\n\n\u003cp\u003eIn a total fluke, she updates her operating system and all of a sudden her phone has started sharing her location with me. She doesn’t know it; I know she doesn’t know. And in a normal situation, I would have just told her, and she would have turned it off, and we would have gone on none the wiser. But this wasn’t a normal situation, because I \u003cem\u003eknew\u003c/em\u003e, though I didn’t know that I knew. I knew and so I let it be. I didn’t say anything; but I would check from time to time. See where she is, imagine what she’s doing. And the imagining fed the truth. I \u003cem\u003efelt\u003c/em\u003e it; I’m starting to know what I knew.\u003c/p\u003e\n\n\u003cp\u003eOne night, I see that she leaves work and goes to a bar. I know she has a meeting coming up, and we’re texting, and I know she’s texting me from this bar. And we’re texting, chatting, and I’m thinking “Why is she at this bar? When is she going to leave? Why hasn’t she left yet?” And these questions start driving me mad. She’s still at the bar; we’re still texting. And the questions are burrowing deeper and deeper into my mind; I can’t get them out. “What is she doing here? Who did she meet? Why hasn’t she left?” I have to know. So I try to find out; I try to ask without asking, so I ask my awkward question, whatever it is. She gives her answer, whatever it is. And it’s fine. Question answered. But it isn’t fine; I \u003cem\u003eknow\u003c/em\u003e. I know it and I feel it, but I’m unaware.\u003c/p\u003e\n\n\u003cp\u003eMaybe it was the mixture of unawareness and knowledge and feeling, maybe it wasn’t. Maybe we can’t know and not know for too long. Or maybe we all have little monsters in our minds waiting for their moment to grab a passing thought and spin a story. Maybe the monster doesn’t want us to really know, but can’t deny that we \u003cem\u003eknow\u003c/em\u003e, so the monster is forced to spin the trueish false story that so easily ensares us. Maybe; or maybe not. I don’t know.\u003c/p\u003e\n\n\u003cp\u003eBut, after she answered, I felt searing guilt. I have rarely, if ever, felt such strong guilt. It burned me. What was I thinking? Why didn’t I trust her? Why was I lying to her by keeping her location sharing silent? I felt guilty and I felt evil. I had done a terrible thing. I had failed to trust her, I had angled and tried to manipulate her. I had suspected her. I was filthy and dirty and shameful and wrong. The weight was too much to bear. And so it broke me.\u003c/p\u003e\n\n\u003cp\u003eWhatever the reasons, however odd or normal, it doesn’t really matter, but when I break, I want to break myself. This is one of my monsters. Now, I can be honest and say that I have truly never wanted to end my own life; but, I have wanted to break myself. And it sounds vague because it is vague. It is just a strong sense that I need to make things right by \u003cem\u003edoing something\u003c/em\u003e, and doing it to myself. And so when I broke, on that night,\u003cbr /\u003e\n  I wanted to break myself;\u003cbr /\u003e\n    I wanted to break my skin;\u003cbr /\u003e\n      I wanted to make amends;\u003cbr /\u003e\ndeep down, I just wanted all the pain to stop. And maybe \u003cem\u003ereal\u003c/em\u003e pain would stop this other, amorphous, silent, scary pain. And that’s what I thought, and that’s what I wanted. And I sat on the side of the bed and I cried. I cried because I felt such guilt and shame; I cried because I wanted to hurt myself; I cried because I felt utterly broken; I cried because I felt \u003cem\u003eit\u003c/em\u003e, the truth, slowly spitting me out.\u003c/p\u003e\n\n\u003cp\u003eI cried, long and hard and ugly. And at some point I had gathered enough of myself to call her. I had to tell her. I had to take away the possibility of snooping and lying. I had to confess and start to make amends.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“I asked those awkward questions because I knew you were at the bar, and I knew you had your meeting, and I was honestly a bit suspicious. I’m so sorry. I’m so so sorry that I didn’t trust you, that I didn’t tell you about your location sharing.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eShe was understandably upset. She didn’t want to come home; she needed time.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“How could you do this? This is an invasion of my privacy. I feel hurt. I need time; I need space”.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eEvery word rang fully true. I had failed; I was a failure. I knew it and she knew it. And I broke again.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“You’re right. You are so right. It was wrong and I knew it was wrong. I feel so terrible.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI was broken and I wanted to break myself. But I couldn’t; I couldn’t really. I liked the idea more than the execution. So I told her.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“I want to hurt myself”.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI was reaching out; I was asking her what to do, I think. Am I broken? Should I do something to make up for being broken?\u003c/p\u003e\n\n\u003cp\u003eShe freaked out a bit, told me not to do anything, asked if I wanted to kill myself.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“No. Nothing like that. I just feel so bad.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“Don’t freak me out like that. Are you just trying to get me to come home? Is this a stunt?”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI don’t know; maybe, yes, no. I don’t know.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“No, it’s not a stunt. But you’re right, I was being crazy. I said something dumb in a low spot. I’m alright. You are understandably upset. You don’t need to come home. I promise; I won’t do anything.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAnd I didn’t.\u003c/p\u003e\n\n\u003cp\u003eI cried more, but I didn’t \u003cem\u003edo\u003c/em\u003e anything. I had broken twice, the truth gnawing at my gut had finally chewed its way through me. But it’s not like I realized anything that night, nothing changed. All I knew was the pain. And it wasn’t good, and it wasn’t bad; it simply was, like the truth that I knew and yet didn’t know.\u003c/p\u003e\n\n\u003cp\u003eTruth and pain\u003cbr /\u003e\npain and truth\u003cbr /\u003e\nme and her\u003cbr /\u003e\nme and I\u003c/p\u003e\n\n\u003cp\u003esome things simply are, or simply were, or simply will be …\u003c/p\u003e\n\n\u003cp\u003epain\u003c/p\u003e\n","type":"article"},{"title":"Time in Ruby and ActiveRecord","url":"/articles/time-in-ruby-and-activerecord/","content":"\u003cp\u003eI recently lost about a day of work trying to figure what the hell was going on when I was working with an ActiveRecord model that had a \u003ccode\u003etime\u003c/code\u003e type column. In the hopes that I will not loose such time again and that this post can help others avoid such lost time, I want to lay out my investigation into time in Ruby and ActiveRecord.\u003c/p\u003e\n\n\u003cp\u003eLet’s start with Ruby. The \u003ca href=\"https://ruby-doc.org/core-2.4.1/Time.html\"\u003edocumentation for Ruby 2.4.1\u003c/a\u003e describes the \u003ccode\u003eTime\u003c/code\u003e class like so:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eTime is an abstraction of dates and times. Time is stored internally as the number of seconds with fraction since the Epoch, January 1, 1970 00:00 UTC.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn short, an instance of the \u003ccode\u003eTime\u003c/code\u003e class represents an \u003cem\u003eexact\u003c/em\u003e moment in the history of our world (down to the nanosecond), a moment that happened on a particular date and at a particular time. The Ruby documentation offers the following example for creating a new instance of \u003ccode\u003eTime\u003c/code\u003e where we set the year, month, day, hour, minute, and second: \u003ccode\u003eTime.new(2002, 10, 31, 2, 2, 2)\u003c/code\u003e. Those are the elements (plus the timezone) that compose an instance of \u003ccode\u003eTime\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eAlright, now what about time in ActiveRecord? In ActiveRecord you can specify that a database column is of type \u003ccode\u003etime\u003c/code\u003e (e.g. \u003ccode\u003ecreate_table :foos { |t| t.time :column }\u003c/code\u003e). Now, if you are anything like me, you don’t have the column type in your application, so you probably don’t know much about what it is or how it works. So, what’s the first thing I do when I’m dealing with a new concept or problem? I start poking at it.\u003c/p\u003e\n\n\u003cp\u003eI had a Rails application with a test database, so I opened a console in the test environment and starting poking. I’m working with an instance of the \u003ccode\u003eFoo\u003c/code\u003e class (defined in this context as \u003ccode\u003efoo\u003c/code\u003e) that has a column called \u003ccode\u003etime\u003c/code\u003e that is, you guessed it, of type \u003ccode\u003etime\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u0026gt; foo.time\n=\u0026gt; Sat, 01 Jan 2000 01:00:00 UTC +00:00\n\u0026gt; foo.time.class\n=\u0026gt; ActiveSupport::TimeWithZone\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe first thing I want to do is look at a value from the \u003ccode\u003etime\u003c/code\u003e column. I find that ActiveRecord returns an instance of the \u003ccode\u003eActiveSupport::TimeWithZone\u003c/code\u003e class, which is a wrapper around Ruby’s \u003ccode\u003eTime\u003c/code\u003e class.\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e This makes sense; a column of database type \u003ccode\u003etime\u003c/code\u003e stores an instance of the Ruby \u003ccode\u003eTime\u003c/code\u003e class, or so I think. The next thing I do is start playing with this \u003ccode\u003etime\u003c/code\u003e column:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u0026gt; foo.time = 1.day.from_now.to_time\n=\u0026gt; 2017-11-17 15:08:54 -0500\n\u0026gt; foo.time\n=\u0026gt; Sat, 01 Jan 2000 20:08:54 UTC +00:00\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHrm. All of the date bits about our time disappeared… What in the hell is going on? As any sane developer would when faced with a situation that doesn’t make sense, I start Googling: “activerecord time column”, “active record column types”, etc. I can’t find official documentation anywhere for what the hell a \u003ccode\u003etime\u003c/code\u003e database column is. Luckily, there are other other sources of unofficial documentation (i.e. StackOverflow). In \u003ca href=\"https://stackoverflow.com/a/11894584/2884386\"\u003eone\u003c/a\u003e I find this:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cul\u003e\n    \u003cli\u003eTime:\n      \u003cul\u003e\n        \u003cli\u003eStores only a time (hours, minutes, seconds)\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn \u003ca href=\"https://stackoverflow.com/a/25702629/2884386\"\u003eanother\u003c/a\u003e I found these images:\u003c/p\u003e\n\n\u003cp\u003e\u0026lt;%= image_tag ‘activerecord-column-types-1.png’ %\u0026gt;\n\u0026lt;%= image_tag ‘activerecord-column-types-2.png’ %\u0026gt;\u003c/p\u003e\n\n\u003cp\u003eIn my test database, I’m using SQlite, so this column is being stored in the actual database as a SQLite \u003ccode\u003edatetime\u003c/code\u003e object. However, the first answer says that a column of this type represents \u003cem\u003eonly\u003c/em\u003e the combination of hour, minute, and second. Ok. Well, still, what’s going on here?\u003c/p\u003e\n\n\u003cp\u003eThe short answer is that Ruby has no class to represent \u003cem\u003eonly\u003c/em\u003e the combinarion of hour, minute, and second. While \u003ccode\u003eDate\u003c/code\u003e represents year, month, and day, and \u003ccode\u003eTime\u003c/code\u003e represents year, month, day, hour, minute, and second (I will write more about \u003ccode\u003eTime\u003c/code\u003e and \u003ccode\u003eDateTime\u003c/code\u003e at a later date), there is no class for simply hour, minute, and second. So, what does ActiveRecord do? The only thing it really can do, use the \u003ccode\u003eTime\u003c/code\u003e class. But, in order to ensure that the year, month, and day are meaningless, ActiveRecord \u003cstrong\u003ealways\u003c/strong\u003e forces the year, month, and day of any value set for a \u003ccode\u003etime\u003c/code\u003e type column to be \u003ccode\u003e2000-01-01\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis is why our date information disappeared in the above example. When ActiveRecord casts the value passed in (\u003ccode\u003e1.day.from_now.to_time\u003c/code\u003e), it resets the date portion. This can be seen by inspecting the \u003ccode\u003etime_before_type_cast\u003c/code\u003e value:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u0026gt; foo.time = 1.day.from_now.to_time\n=\u0026gt; 2017-11-17 15:08:54 -0500\n\u0026gt; foo.time\n=\u0026gt; Sat, 01 Jan 2000 20:08:54 UTC +00:00\n\u0026gt; foo.time_before_type_cast\n=\u0026gt; 2017-11-17 15:08:54 -0500\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSo, in short, the ActiveRecord \u003ccode\u003etime\u003c/code\u003e column type, while it does return an instance of the Ruby \u003ccode\u003eTime\u003c/code\u003e class, \u003cstrong\u003edoes not\u003c/strong\u003e represent the same kind of object. Ruby \u003ccode\u003eTime\u003c/code\u003e represents year, month, day, hour, minute, and second. ActiveRecord \u003ccode\u003etime\u003c/code\u003e represents hour, minute, and second.\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eYou can read more about this class \u003ca href=\"http://api.rubyonrails.org/v5.1/classes/ActiveSupport/TimeWithZone.html\"\u003ehere\u003c/a\u003e. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"Typecasting in Ruby and Rails","url":"/articles/typecasting-in-ruby-and-rails/","content":"\u003cp\u003eI recently had the need to typecast string values passed as query parameters to a controller action to their appropriate type. In solving this problem, I’ve learned a lot about Rails’ typecasting layer, Ruby’s typecasting methods, as well as a handful of edge cases. The result was a typecasting function that I think has a lot to offer.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe first key to any attempt at typecasting is to understand what you are casting \u003cem\u003efrom\u003c/em\u003e and what you are casting \u003cem\u003eto\u003c/em\u003e. It is no small task to write a typecaster that properly and intelligently handles casting any kind of value into any other kind of value. Luckily for me, this was not the situation I was in. I had a fixed \u003cem\u003efrom\u003c/em\u003e type–I was always casting \u003cem\u003efrom\u003c/em\u003e a string value. So, all I needed was a typecaster that properly and intelligently handles casting a string value into any other kind of value. ¯_(ツ)_/¯\u003c/p\u003e\n\n\u003cp\u003eI was working in the context of a Rails application, so my first thought was that I could simply use the typecasting layer baked into ActiveRecord. In Rails 4.x, \u003ccode\u003eActiveRecord::Type\u003c/code\u003e has a number of descendent classes representing the various datatypes that ActiveRecord handles:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eBoolean\u003c/li\u003e\n  \u003cli\u003eDate\u003c/li\u003e\n  \u003cli\u003eDateTime\u003c/li\u003e\n  \u003cli\u003eDecimal\u003c/li\u003e\n  \u003cli\u003eFloat\u003c/li\u003e\n  \u003cli\u003eInteger\u003c/li\u003e\n  \u003cli\u003eString\u003c/li\u003e\n  \u003cli\u003eTime\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eEach of these classes have an instance method \u003ccode\u003etype_cast\u003c/code\u003e that accepts one param and tries to return a new value of the type that class represents. So, for example, \u003ccode\u003eActiveRecord::Type::Boolean.new.type_cast('true')\u003c/code\u003e would return \u003ccode\u003etrue\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIn Rails 5.x, this same essential functionality lives in classes under the \u003ccode\u003eActiveModel::Type\u003c/code\u003e namespace and the instance method is \u003ccode\u003ecast\u003c/code\u003e. So, if I wanted something to work across Rails versions, I would need to handle these changes.\u003c/p\u003e\n\n\u003cp\u003eHowever, this Rails \u003ccode\u003eType\u003c/code\u003e layer has its limitations. First, it doesn’t cover all of the scalar Ruby types (the \u003ccode\u003eComplex\u003c/code\u003e and \u003ccode\u003eRational\u003c/code\u003e numeric types for example). Second, the boolean type does not map to an actual Ruby class. \u003ccode\u003etrue.class\u003c/code\u003e returns \u003ccode\u003eTrueClass\u003c/code\u003e, not \u003ccode\u003eBoolean\u003c/code\u003e. This limits our ability to simply use the class of the desired value type as a way of finding the appropriate \u003ccode\u003eType\u003c/code\u003e class to use for the casting.\u003c/p\u003e\n\n\u003cp\u003eThese aren’t major problems, but they are real ones.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eWhen investigating typecasting typecasting in Ruby, you hopefully shouldn’t go too far without thinking of the various \u003ccode\u003e#to_*\u003c/code\u003e methods. Ruby has a well defined and often used typecasting infrastructure. \u003ccode\u003eto_s\u003c/code\u003e casts a value to a \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eto_f\u003c/code\u003e casts a value to a \u003ccode\u003eFloat\u003c/code\u003e, \u003ccode\u003eto_i\u003c/code\u003e casts a value to an \u003ccode\u003eInteger\u003c/code\u003e, etc.\u003c/p\u003e\n\n\u003cp\u003eThese are a helpful tool in our toolbox, but this too has limitations. First, there is no \u003ccode\u003e#to_*\u003c/code\u003e method that casts values into \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e. Second, not every value instance has the same collection of \u003ccode\u003e#to_*\u003c/code\u003e methods available to it. Third, the \u003ccode\u003eto_date\u003c/code\u003e, \u003ccode\u003eto_datetime\u003c/code\u003e, and \u003ccode\u003eto_time\u003c/code\u003e methods are provided by ActiveSupport and are not a part of basic Ruby.\u003c/p\u003e\n\n\u003cp\u003eSome of these are major problems, others less so.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eHaving investigated these two mechanisms for typecasting, my thought was to combine them. Let’s try typecasting with one mechanism, and if it doesn’t work try the other one. I want a module namespace with one public method \u003ccode\u003ecast\u003c/code\u003e that takes two params, \u003ccode\u003efrom\u003c/code\u003e and \u003ccode\u003eto\u003c/code\u003e. I want the method to either return the \u003ccode\u003efrom\u003c/code\u003e value cast into the \u003ccode\u003eto\u003c/code\u003e class or, if that fails, to simply return back the \u003ccode\u003efrom\u003c/code\u003e value. I also want want the method to only use as many “adapters” as necessary (adapters being the typecasting mechanisms). So, if we can cast the value using basic Ruby, cast and return. Only use the Rails \u003ccode\u003eType\u003c/code\u003e layer if the Ruby layer can’t get the job done.\u003c/p\u003e\n\n\u003cp\u003eWith these feature requirements in mind, let’s start writing our module and method.\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eTypeCaster\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e:)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eadapters\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enil?\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHere I am expecting to be able to call an \u003ccode\u003eadapters\u003c/code\u003e getter that will return an Enumerable of classes that take two params on initialization and have a public \u003ccode\u003eprocess\u003c/code\u003e method. I am going to use the \u003ca href=\"https://bogdanvlviv.github.io/posts/ruby/patterns/design-patterns-in-ruby.html#adapter\"\u003eAdapter structural design pattern\u003c/a\u003e for these classes to provide a consistent interface to the two typecasting mechanisms we have. So, let’s start building that adapter classes.\u003c/p\u003e\n\n\u003cp\u003eWe know we have a few feature requirements:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003ethe class needs to accepts two params on initialization\u003c/li\u003e\n  \u003cli\u003ethe class needs a public \u003ccode\u003eprocess\u003c/code\u003e method that takes no params\u003c/li\u003e\n  \u003cli\u003ethe \u003ccode\u003eprocess\u003c/code\u003e method needs to \u003cem\u003eeither\u003c/em\u003e return the typecasted value \u003cem\u003eor\u003c/em\u003e \u003ccode\u003enil\u003c/code\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eThe first two are simple, so let’s start there:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePlainRubyAdapter\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe next key is getting the various \u003ccode\u003e#to_*\u003c/code\u003e method available on the \u003ccode\u003e@from\u003c/code\u003e value.\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePlainRubyAdapter\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"kp\"\u003eprivate\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_typecasters\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@possible_typecasters\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emethods\u003c/span\u003e\n                                   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to_s\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003estart_with?\u003c/span\u003e \u003cspan class=\"s1\"\u003e'to_'\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHere I am memoizing the result mostly as a general practice; healthy habit and all that. The logic itself of the method is straightforward though–from the set of all of \u003ccode\u003e@from\u003c/code\u003e’s methods, pull out those that start with the string \u003ccode\u003eto_\u003c/code\u003e. This will give us a collection of methods that will cast the \u003ccode\u003e@from\u003c/code\u003e value \u003cem\u003eto\u003c/em\u003e various other types. The next step is to actually use these methods to do some typecasting:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePlainRubyAdapter\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"kp\"\u003eprivate\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_values\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epossible_typecasters\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecompact\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_typecasters\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@possible_typecasters\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emethods\u003c/span\u003e\n                                   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to_s\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003estart_with?\u003c/span\u003e \u003cspan class=\"s1\"\u003e'to_'\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis \u003ccode\u003epossible_values\u003c/code\u003e method will convert a collection of typecasting methods into a collection of typecasted values (removing any \u003ccode\u003enil\u003c/code\u003es created along the way). The final step is simply to return the typecasted value that matches \u003ccode\u003e@to\u003c/code\u003e, if it exists in the collection of \u003ccode\u003epossible_values\u003c/code\u003e, or return \u003ccode\u003enil\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePlainRubyAdapter\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003epossible_values\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efind\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"kp\"\u003eprivate\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_values\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epossible_typecasters\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecompact\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_typecasters\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@possible_typecasters\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emethods\u003c/span\u003e\n                                   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to_s\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                   \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003estart_with?\u003c/span\u003e \u003cspan class=\"s1\"\u003e'to_'\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003eEnumerable#find\u003c/code\u003e is a perfect method for either returning a value in a collection that matches a condition or returning \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe \u003ccode\u003ePlainRubyAdapter\u003c/code\u003e was fairly straightforward; To handle the differences between Rails 4.x and 5.x, however, this next adapter will be a bit more complicated.\u003c/p\u003e\n\n\u003cp\u003eThe basic requirements are the same, so let’s start with the basic skeleton:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRailsTypeAdapter\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow, let’s begin with determining which namespace we can find the \u003ccode\u003eType\u003c/code\u003e code in. We know that we will need to \u003ccode\u003erequire\u003c/code\u003e an external dependency and use the appropriate namespace for finding descendent classes. Here’s a simple way to handle our two scenarios:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRailsTypeAdapter\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ebegin\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e'active_model/type'\u003c/span\u003e\n  \u003cspan class=\"k\"\u003erescue\u003c/span\u003e \u003cspan class=\"no\"\u003eLoadError\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e'active_record/type'\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"kp\"\u003eprivate\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etype_class\u003c/span\u003e\n    \u003cspan class=\"no\"\u003eActiveModel\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eType\u003c/span\u003e\n  \u003cspan class=\"k\"\u003erescue\u003c/span\u003e \u003cspan class=\"no\"\u003eNameError\u003c/span\u003e\n    \u003cspan class=\"no\"\u003eActiveRecord\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eType\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe will try to use the Rails 5.x (\u003ccode\u003eActiveModel::Type\u003c/code\u003e) code first and fallback to the Rails 4.x code otherwise (\u003ccode\u003eActiveRecord::Type\u003c/code\u003e). With that handled, let’s next gather the collection of possible typecasting classes:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRailsTypeAdapter\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ebegin\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e'active_model/type'\u003c/span\u003e\n  \u003cspan class=\"k\"\u003erescue\u003c/span\u003e \u003cspan class=\"no\"\u003eLoadError\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e'active_record/type'\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"kp\"\u003eprivate\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_typecasters\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@possible_typecasters\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"n\"\u003etype_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003econstants\u003c/span\u003e\n                                        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to_s\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ecan_typecast?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etype_class\u003c/span\u003e\n    \u003cspan class=\"no\"\u003eActiveModel\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eType\u003c/span\u003e\n  \u003cspan class=\"k\"\u003erescue\u003c/span\u003e \u003cspan class=\"no\"\u003eNameError\u003c/span\u003e\n    \u003cspan class=\"no\"\u003eActiveRecord\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eType\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ecan_typecast?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econst_name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etypecasting_class\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etype_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003econst_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econst_name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etypecasting_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einstance_methods\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:cast\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n      \u003cspan class=\"n\"\u003etypecasting_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einstance_methods\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:type_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eRecall that the Rails 5.x code (\u003ccode\u003eActiveModel::Type\u003c/code\u003e) uses the \u003ccode\u003ecast\u003c/code\u003e method, while the Rails 4.x code (\u003ccode\u003eActiveSupport::Type\u003c/code\u003e) uses the \u003ccode\u003etype_cast\u003c/code\u003e method. So, in order to determine if one of the descendent classes of the our type namespace can typecast, we need to check for either method. Aside from that, the logic is essentially the same as what we have in the \u003ccode\u003ePlainRubyAdapter\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eWith a collection of classes that are capable of typecasting, let’s now get the collection of typecasted values:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRailsTypeAdapter\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ebegin\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e'active_model/type'\u003c/span\u003e\n  \u003cspan class=\"k\"\u003erescue\u003c/span\u003e \u003cspan class=\"no\"\u003eLoadError\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e'active_record/type'\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"kp\"\u003eprivate\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_values\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epossible_typecasters\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003etype_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003econst_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003etypecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecompact\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_typecasters\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@possible_typecasters\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"n\"\u003etype_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003econstants\u003c/span\u003e\n                                        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to_s\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ecan_typecast?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etype_class\u003c/span\u003e\n    \u003cspan class=\"no\"\u003eActiveModel\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eType\u003c/span\u003e\n  \u003cspan class=\"k\"\u003erescue\u003c/span\u003e \u003cspan class=\"no\"\u003eNameError\u003c/span\u003e\n    \u003cspan class=\"no\"\u003eActiveRecord\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eType\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ecan_typecast?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econst_name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etypecasting_class\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etype_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003econst_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econst_name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etypecasting_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einstance_methods\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:cast\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n      \u003cspan class=\"n\"\u003etypecasting_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einstance_methods\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:type_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etypecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecaster\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ecaster\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ecaster\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003erespond_to?\u003c/span\u003e \u003cspan class=\"ss\"\u003e:type_cast\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecaster\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSince the typecasting method, whether \u003ccode\u003etype_cast\u003c/code\u003e or \u003ccode\u003ecast\u003c/code\u003e, is an instance method, we first need to initialize our classes. Once we have an instance of the \u003ccode\u003eType\u003c/code\u003e class, we can call the appropriate typecasting method. Finally, we discard any \u003ccode\u003enil\u003c/code\u003es. Our \u003ccode\u003epossible_values\u003c/code\u003e method will now return a collection of typecasted values. The last step is to either find the appropriate typecasted value or return \u003ccode\u003enil\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRailsTypeAdapter\u003c/span\u003e\n  \u003cspan class=\"k\"\u003ebegin\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e'active_model/type'\u003c/span\u003e\n  \u003cspan class=\"k\"\u003erescue\u003c/span\u003e \u003cspan class=\"no\"\u003eLoadError\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e'active_record/type'\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003epossible_values\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efind\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"kp\"\u003eprivate\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_values\u003c/span\u003e\n    \u003cspan class=\"n\"\u003epossible_typecasters\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003etype_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003econst_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003etypecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecompact\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_typecasters\u003c/span\u003e\n    \u003cspan class=\"vi\"\u003e@possible_typecasters\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"n\"\u003etype_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003econstants\u003c/span\u003e\n                                        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to_s\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                        \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ecan_typecast?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etype_class\u003c/span\u003e\n    \u003cspan class=\"no\"\u003eActiveModel\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eType\u003c/span\u003e\n  \u003cspan class=\"k\"\u003erescue\u003c/span\u003e \u003cspan class=\"no\"\u003eNameError\u003c/span\u003e\n    \u003cspan class=\"no\"\u003eActiveRecord\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eType\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ecan_typecast?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econst_name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etypecasting_class\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etype_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003econst_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econst_name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etypecasting_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einstance_methods\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:cast\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n      \u003cspan class=\"n\"\u003etypecasting_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einstance_methods\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:type_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etypecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecaster\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ecaster\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ecaster\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003erespond_to?\u003c/span\u003e \u003cspan class=\"ss\"\u003e:type_cast\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ecaster\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe now have to classes that conform to our adapter interface that we can use in our \u003ccode\u003eTypecaster.cast\u003c/code\u003e method. Let’s now wire up the \u003ccode\u003eadapters\u003c/code\u003e getter in that module:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eTypeCaster\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e:)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eadapters\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enil?\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eadapters\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"no\"\u003ePlainRubyAdapter\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"no\"\u003eRailsTypeAdapter\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAs one final piece, let’s also nest our adapter classes under the \u003ccode\u003eTypeCaster\u003c/code\u003e module namespace. This will help isolate them. We don’t want clients to use them directly; we want the only public interface to our typecasting logic to be \u003ccode\u003eTypeCaster.cast\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eHere is our final implementation:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003emodule\u003c/span\u003e \u003cspan class=\"nn\"\u003eTypeCaster\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e:,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e:)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eadapters\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n      \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eadapter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e \u003cspan class=\"k\"\u003eunless\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enil?\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nc\"\u003eself\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eadapters\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"no\"\u003ePlainRubyAdapter\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"no\"\u003eRailsTypeAdapter\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ePlainRubyAdapter\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n      \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e\n\n      \u003cspan class=\"n\"\u003epossible_values\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efind\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"kp\"\u003eprivate\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_values\u003c/span\u003e\n      \u003cspan class=\"n\"\u003epossible_typecasters\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003esend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                          \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecompact\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_typecasters\u003c/span\u003e\n      \u003cspan class=\"vi\"\u003e@possible_typecasters\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emethods\u003c/span\u003e\n                                     \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to_s\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                     \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003estart_with?\u003c/span\u003e \u003cspan class=\"s1\"\u003e'to_'\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRailsTypeAdapter\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ebegin\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e'active_model/type'\u003c/span\u003e\n    \u003cspan class=\"k\"\u003erescue\u003c/span\u003e \u003cspan class=\"no\"\u003eLoadError\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003erequire\u003c/span\u003e \u003cspan class=\"s1\"\u003e'active_record/type'\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003einitialize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003efrom\u003c/span\u003e\n      \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eto\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocess\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e\n\n      \u003cspan class=\"n\"\u003epossible_values\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efind\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eis_a?\u003c/span\u003e \u003cspan class=\"vi\"\u003e@to\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"kp\"\u003eprivate\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_values\u003c/span\u003e\n      \u003cspan class=\"n\"\u003epossible_typecasters\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003etype_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003econst_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                          \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003etypecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003em\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"vi\"\u003e@from\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n                          \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecompact\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epossible_typecasters\u003c/span\u003e\n      \u003cspan class=\"vi\"\u003e@possible_typecasters\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"n\"\u003etype_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003econstants\u003c/span\u003e\n                                          \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to_s\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n                                          \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eselect\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ecan_typecast?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003et\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etype_class\u003c/span\u003e\n      \u003cspan class=\"no\"\u003eActiveModel\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eType\u003c/span\u003e\n    \u003cspan class=\"k\"\u003erescue\u003c/span\u003e \u003cspan class=\"no\"\u003eNameError\u003c/span\u003e\n      \u003cspan class=\"no\"\u003eActiveRecord\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"no\"\u003eType\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003ecan_typecast?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econst_name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003etypecasting_class\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etype_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003econst_get\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econst_name\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003etypecasting_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einstance_methods\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:cast\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e\n        \u003cspan class=\"n\"\u003etypecasting_class\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einstance_methods\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:type_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n    \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003etypecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecaster\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003ecaster\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etype_cast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ecaster\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003erespond_to?\u003c/span\u003e \u003cspan class=\"ss\"\u003e:type_cast\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ecaster\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecast\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow, this doesn’t handle all of our edgecases just yet, but this is a solid start, and I think this post has gotten long enough, so I’m going to save that for a later post.\u003c/p\u003e\n","type":"article"},{"title":"Recalling my earliest deep regret","url":"/articles/recalling-my-earliest-deep-regret/","content":"\u003cp\u003eI remember my earliest deep regret. And thinking back on it, the depth of the regret seems so out of scope, but, in many ways, this story captures a part of my heart that I lost sight of for years and am only recently re-discovering.\u003c/p\u003e\n\n\u003cp\u003eI’ve always liked beautiful things; I’m an aesthete, what can I say. And when I was younger, maybe around 10 or so, I went through a phase where I was enamored with polished rocks. I loosely recall seeing some ad or something on TV for a rock polisher, and I was immediately hooked. They showed so many different rocks–different colors, different textures, different patterns–and each of them was beautiful. At the time, my family lived in a small trailer park in Louisiana, and there were rocks \u003cem\u003eeverywhere\u003c/em\u003e. The road through the park was a gravel road; rocks as far as my child’s eyes could see. I wanted a rock polisher badly. I wanted to polish the rocks in our driveway. I wanted to create something beautiful from something drab. But, rock polishers were pricey.\u003c/p\u003e\n\n\u003cp\u003eI don’t actually recall mentioning this fascination with my friends in the park, but I must have, because eventually this brother and sister from a couple of trailers down the road came by with an offer. They had a small collection of polished rocks. I have no idea where or how they got them, but they were pretty fine looking rocks. They offered to sell me the whole lot for $2. What a steal! I bought them then and there. I might not have had a rock polisher, but I did have polished rocks, and they were beautiful.\u003c/p\u003e\n\n\u003cp\u003eAnd here, let me step away from the rocks to give some needed context. I believe at the time I was still being homeschooled by my mom (I went to “regular” school in 5th grade), and my dad worked nights at a machine shop that manufactured industrial valves. So, my dad was at work while we were all sleeping, and he was asleep while we were in the house all afternoon. It was an awkward schedule, but I always enjoyed hanging out with my dad in the evenings before he went to work for the night (honestly, I also enjoyed hanging with my mom in the day doing “school”. My parents are cool; you’d enjoy hanging with them as well). And often, my dad would stop by as I was going to bed to say goodbye as he left for work.\u003c/p\u003e\n\n\u003cp\u003eBack to the rocks. One evening shortly after buying the rocks, my dad popped his head into my room to say goodnight and goodbye:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“Love ya, bud. Good night, sleep tight, don’t let the bedbugs bite.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“Love you too, Dad. Have a good night at work. See you tomorrow.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“Oh, hey, could I borrow $0.50 to buy a coke at work? I promise to pay you back tomorrow.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“Um… Sorry… I don’t have $0.50. I spent my money on those polished rocks.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“That’s fine. I’m sure I can borrow a few cents from a friend. Love ya, good night.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“Good night.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eA quick, simple exchange. He left, went to work, and no doubt got a coke. But I could not fall asleep. I felt terrible. I didn’t have much money, and one of the few times that I could have helped \u003cem\u003emy dad\u003c/em\u003e with \u003cem\u003emy money\u003c/em\u003e, I couldn’t. Why? Because I had spent the money on \u003cstrong\u003erocks\u003c/strong\u003e. Polished rocks, sure, but still, \u003cstrong\u003erocks\u003c/strong\u003e. I couldn’t stop comparing the value of my dad with the value of rocks. I felt frivolous, I felt foolish, I felt ashamed.\u003c/p\u003e\n\n\u003cp\u003eAnd I cried. I cried a lot. I’m pretty sure at some point my mom heard me and came in to check on me. I think I tried to explain why I was so upset, but I’m sure I didn’t make much sense. She calmed me down, explained that everything was fine, that dad would get a coke easily, he didn’t need my money, everything would be fine. Eventually, I was calm enough and tired enough to find a fitfull sleep.\u003c/p\u003e\n\n\u003cp\u003eThe next day, I sought out the culprits.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“I changed my mind. I don’t want the rocks. I want my money back.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“Sorry, we can’t.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“Yeah, we already spent your money.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“Already? … on what?”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e“On a Snickers.”\u003c/p\u003e\n\u003c/blockquote\u003e\n","type":"article"},{"title":"Encoding the Logic of Sets","url":"/articles/encoding-the-logic-of-sets/","content":"\u003cp\u003eI have \u003ca href=\"http://fractaledmind.com/articles/initial-thoughts-on-infinite-sets-and-procedures/\"\u003estarted thinking\u003c/a\u003e about how we conceive of sets in mathematics. My entry point is to consider sets as \u003cem\u003eprocedures\u003c/em\u003e, that is, as a structure that encodes the “shape” (I’m still trying to think through the appropriate language to use) of a set. I think that this conceptual model works particularly well for infinite sets, as infinite sets clearly cannot be conceived of as actual objects in the way that finite sets are objects. But if we are to conceive of infinite sets as procedures, ought we not also to conceive of finite sets similarly? And if we consider all sets as procedures, how does that affect how we categorize sets?\u003c/p\u003e\n\n\u003cp\u003eI think it is simplest to start with finite sets, so let’s start there and work our way up and out. How can we describe a finite set? Well, initially, it seems thoroughly straight-forward: \u003ccode\u003e{1, 2, 3, 4, 5}\u003c/code\u003e is a finite set. We can describe it as the collection of the numbers \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e2\u003c/code\u003e, \u003ccode\u003e3\u003c/code\u003e, \u003ccode\u003e4\u003c/code\u003e, and \u003ccode\u003e5\u003c/code\u003e. Each of those numbers are “objects,” and the set is simply a composite object. And I think that this is a sensible way to conceive of finite sets; but, \u003ca href=\"http://fractaledmind.com/articles/initial-thoughts-on-infinite-sets-and-procedures/\"\u003eas articulated in my earlier piece\u003c/a\u003e, this mode of thinking leads to logical complications when we consider infinite sets. Is the infinite set a composite object if it has no boundaries? Can we treat it as an “object” in any way similar to a finite set without logical contradiction? I think not. This is what led me to treating sets as procedures. So, how might we understand the set \u003ccode\u003e{1, 2, 3, 4, 5}\u003c/code\u003e as a procedure?\u003c/p\u003e\n\n\u003cp\u003eWell, let’s start with some pedantic tablesetting. Strictly speaking, finite sets are \u003cem\u003enot\u003c/em\u003e “procedures”, since they will all return an actual value. Infinite sets must be conceived of as procedures, because they will never actually return a value. A finite set can simply be a function, that is, a procedure that returns an actual value. Recall:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efunction\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexecute\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand_1\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexecute\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand_2\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocedure\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexecute\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand_1\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexecute\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand_2\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eBut, for the sake of simplicity, I am going to use “procedure” to mean any small, portable chunk of executable commands, whether it returns a value or not.\u003c/p\u003e\n\n\u003cp\u003eSo, the set \u003ccode\u003e{1, 2, 3, 4, 5}\u003c/code\u003e as a procedure. The first and simplest way to write that as a procedure would be to have a procedure that takes each of the elements of the set as a parameter/argument:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efive_element_set\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ethird\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efourth\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efifth\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003efirst\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esecond\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ethird\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efourth\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003efifth\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003efive_element_set\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# =\u0026gt; {1, 2, 3, 4, 5}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIn the world of computer programming, the “parameters” or “arguments” are simply the values that you pass into a procedure. This allows you to create procedures that are dynamic and flexible. Consider a simple example:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eleft\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eright\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eleft\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003eright\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# =\u0026gt; 4\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# =\u0026gt; 7\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHere, \u003ccode\u003e2\u003c/code\u003e and \u003ccode\u003e2\u003c/code\u003e are the parameters first passed to the \u003ccode\u003eadd\u003c/code\u003e procedure, which returns the value \u003ccode\u003e4\u003c/code\u003e. Then, we pass \u003ccode\u003e2\u003c/code\u003e and \u003ccode\u003e5\u003c/code\u003e as parameters and \u003ccode\u003eadd\u003c/code\u003e returns \u003ccode\u003e7\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eIt seems fairly straightforward, then, that \u003cem\u003eany\u003c/em\u003e finite set could be constructed as a procedure where each element of the set is simply one parameter passed to the procedure. So, the set \u003ccode\u003e{1, 2, 3, 4, 5}\u003c/code\u003e could be built with a procedure that takes 5 parameters where we pass \u003ccode\u003e1\u003c/code\u003e, \u003ccode\u003e2\u003c/code\u003e, \u003ccode\u003e3\u003c/code\u003e, \u003ccode\u003e4\u003c/code\u003e, and \u003ccode\u003e5\u003c/code\u003e as the parameters. Then set \u003ccode\u003e{3, 1, 4, 1, 5, 9, 2, 6, 5, 4}\u003c/code\u003e could be a procedure that takes 10 parameters, etc. Going back to the language of computer programming, we describe the number of parameters that a procedure takes as its \u003cem\u003earity\u003c/em\u003e. The \u003ccode\u003eadd\u003c/code\u003e procedure above would have an “arity” of 2, the procedure to generate the set \u003ccode\u003e{1, 2, 3, 4, 5}\u003c/code\u003e would have an “arity” of 5, and the procedure for \u003ccode\u003e{3, 1, 4, 1, 5, 9, 2, 6, 5, 4}\u003c/code\u003e would have an “arity” of 10. This means that we can say that \u003cstrong\u003eany finite set could be constructed as a procedure with an arity equal to the number of elements in that set where the procedure simply returns those elements in that order as a set\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eThat’s a bit wordy, so let’s give some pseudo-code examples:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# =\u0026gt; {3, 1, 4, 1, 5, 9, 2, 6, 5, 4}\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003efive\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# =\u0026gt; {1, 2, 3, 4, 5}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003epi\u003c/code\u003e is a procedure that accepts 10 parameters and thus has an arity of 10. It is a stupidly simple procedure because it simply takes those 10 parameters, in the order they were passed, and puts them in a set and returns that value. The point about order is important; consider this:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ee\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eg\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# =\u0026gt; {3, 1, 4, 1, 5, 9, 2, 6, 5, 4}\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003epi\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# =\u0026gt; {4, 5, 6, 2, 9, 5, 1, 4, 1, 3}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003ccode\u003epi\u003c/code\u003e, the procedure, has the exact same shape but with two different collections of parameters passed to it, it returns \u003cem\u003etwo totally different sets\u003c/em\u003e. Now, each set is composed of 10 elements, so they are similar sets, but they are also clearly different.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eNow, if you are anything like me, you will have gotten to this point and thought to yourself, “Who cares? \u003cem\u003eOf course\u003c/em\u003e a finite set could be constructed as a procedure that simply takes the elements as parameters and returns a set with those elements.” And you are right, that is boring. But, is that the \u003cem\u003eonly\u003c/em\u003e way to construct a procedure for a finite set?\u003c/p\u003e\n\n\u003cp\u003eLet’s go back to \u003ccode\u003e{1, 2, 3, 4, 5}\u003c/code\u003e; how else might we construct a procedure to output this set? How about this:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eadd_by_one\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"nb\"\u003eset\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003estart\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\n      \u003cspan class=\"nb\"\u003eset\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eadd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eset\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eadd_by_one\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# =\u0026gt; {1, 2, 3, 4, 5}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow this is starting to look interesting! We are doing much more than simply returning a collection of parameters as a set. The \u003ccode\u003eadd_by_one\u003c/code\u003e procedure is actually encoding some meaningful structure. Without necessarily getting into the specifics of the implementation, the idea is that we can structure the set \u003ccode\u003e{1, 2, 3, 4, 5}\u003c/code\u003e as a procedure that starts at \u003ccode\u003e1\u003c/code\u003e and adds new elements by adding \u003ccode\u003e1\u003c/code\u003e to the previous element until it gets to \u003ccode\u003e5\u003c/code\u003e at which point it ends the set. Note, we have constructed a procedure that returns the set we want, but \u003cem\u003eit only has an arity of 2\u003c/em\u003e, instead of 5. The only thing we need to generate that set is the starting number and the ending number. The rest of the structure of the set we can encode in the procedure.\u003c/p\u003e\n\n\u003cp\u003eThis leads me to my concluding thought for this piece:\u003c/p\u003e\n\n\u003cp\u003eIf we conceive of all sets, both infinite and finite, as \u003cem\u003eprocedures\u003c/em\u003e, we should strive to construct a procedure for each set we are interested in that has \u003cstrong\u003ethe lowest possible arity\u003c/strong\u003e. For, the lower the arity of the procedure, the more of the structure of the set is encoded in the procedure (and not in the parameters themselves). This then would mean that the procedure is more “purely” encoding the shape of the set, or maybe the “logic” of the set.\u003c/p\u003e\n","type":"article"},{"title":"On Death and Life","url":"/articles/on-death-and-life/","content":"\u003cp\u003eTo anyone who has ever hedged or criticized someone who has committed suicide. Don’t.\u003c/p\u003e\n\n\u003cp\u003eStop.\u003c/p\u003e\n\n\u003cp\u003eMourn.\u003c/p\u003e\n\n\u003cp\u003eWe are not all of us leased to live a life filled with distractions from the basic truth that this world, shaped by us after our own image, is broken, and primarily so because we are each of us broken and are breaking it.\u003c/p\u003e\n\n\u003cp\u003eSome of us have looked long into that abyss, that true abyss, and some have been unable to see anything beyond that darkness. Some of us have a flesh that feels nothing but scarred, have eyes that seem to have seen nothing but broken edges and sharp things. These things are each of them deeply real. And we must mourn for those who could not escape them, who sensed this brokenness and nothing else.\u003c/p\u003e\n\n\u003cp\u003eFor, despite all the dark broken shards, there is a light that refracts amongst them. And we are each blessed to have glimpsed enough of it to be breathing here, in this moment. For without that light, would we not, of necessity, have eventually joined them?\u003c/p\u003e\n\n\u003cp\u003eAnd yet, here we are.\u003c/p\u003e\n\n\u003cp\u003eThanks be to God.\u003c/p\u003e\n","type":"article"},{"title":"On Moral Judgment","url":"/articles/on-moral-judgment/","content":"\u003cp\u003eThere exists a moral universe. We are subject in that universe just as we are subject in the physical universe. We can affect the state of this universe, just as we can affect the state of the physical universe. We are also objects in the moral universe; we can be affected by the state of this universe. Ethics is a mode of analysis that considers how we do and how we ought to relate to this moral universe. The goal of ethics is to live life well. In order to live life well, we need to\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003esee the state of the moral universe as it truly is, and\u003c/li\u003e\n  \u003cli\u003erespond to that state appropriately.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn essence, ethics is this simple; the complexity arises when we actually attempt to live life well. The practice of ethics is difficult.\u003c/p\u003e\n\n\u003cp\u003eI find that one of the most common points of error in the practice of ethics is the application of judgment. I want to consider, briefly, what judgment is with respect to the moral universe, how it can be used properly, and how it is often used improperly.\u003c/p\u003e\n\n\u003cp\u003eJudgment is a type of critical analysis, and critical analysis is absolutely necessary to living life well. It is a key means to the end of seeing the state of the moral universe correctly and responding to it appropriately. It is preparation, exercise, and review. Conceptually, judgment has a few central characteristics. First and foremost, judgment always has a \u003cem\u003eparticular\u003c/em\u003e object of focus. We do not judge abstract ideas (we may critique them, but we do not–properly speaking–judge them); we judge people, actions, or beliefs. And this is the first key way in which we can differentiate judgment from criticism. One can be critical of either a general or a particular; one can only judge a particular. “That is bad/wrong/evil.”  There must be a “that” there. Judgment must be focused.\u003c/p\u003e\n\n\u003cp\u003eNote, however, that the language of judgment often elides the judge. \u003cem\u003eI\u003c/em\u003e am not the judge, for I cannot be a sufficient grounds for judgment. What makes “that” “bad/wrong/evil”? The answer to this question can be thought of as the \u003cem\u003esubject\u003c/em\u003e of the judgment. And while the \u003cem\u003eobject\u003c/em\u003e of the judgment is \u003cstrong\u003eparticular\u003c/strong\u003e, the \u003cem\u003esubject\u003c/em\u003e of the judgment must be \u003cstrong\u003egeneral\u003c/strong\u003e. No particular can provide a sufficient foundation for a moral judgement. We judge on the grounds of Right or Truth or Justice. We may be the mouthpiece for judgment, but we are not the judge.\u003c/p\u003e\n\n\u003cp\u003eThis leads us to consider the chief way in which judgment can be used properly within the moral universe. We can and should often judge ourselves, make ourselves the particular object of a judgment. We must hold ourselves accountable; we must judge our successes and failures in attempting to correctly see the state of the moral universe and appropriately respond to it. Now, I am not advocating any kind of ethical self-immolation. One could easily imagine taking things too far, but rutting in our mistakes to the exclusion of anything else very clearly does not help us to live life well. To live life well, we must live life; we must act and engage and take risks and keep moving forward, even when we do not know the way. Judgment can help us to turn our past mistakes into guards against future ones, it can help us to more clearly see the correct state of the moral universe, but it shouldn’t be an albatross that drags us into stagnation.\u003c/p\u003e\n\n\u003cp\u003eIf ethics is aimed at living life well, in what ways does judging others aid in achieving that goal? Does making someone else the particular object of judgment help me to live my life well? Does making someone else the particular object of judgment help them to live their live well? These are the questions we must ask before even beginning to judge others. In my opinion, there is often little value to my own goal of living life well in judging someone else. And while it might occasionally be beneficial to the other, the \u003cstrong\u003eonly\u003c/strong\u003e context in which that is true is when I and the other already share a close enough relationship that I can speak truth into their life. I believe firmly that there is no value in judging another with whom you have no pre-existing relationship. It does not help you to live life well and it will not help them to live life well. And yet, to my eyes, this is the \u003cem\u003eprimary\u003c/em\u003e context in which I see judgment being practiced.\u003c/p\u003e\n\n\u003cp\u003eBefore you start to judge, ask yourself: how is this helping me to live life well? How is this helping them to live life well? If you can’t come up with a concrete answer, an answer you can practically employ, you ought not to judge. In short, we may want to consider the deeper truths behind:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eJudge not, lest ye be judged.\u003c/p\u003e\n\u003c/blockquote\u003e\n","type":"article"},{"title":"Initial Thoughts on Infinite Sets and Procedures","url":"/articles/initial-thoughts-on-infinite-sets-and-procedures/","content":"\u003cp\u003eIn a \u003ca href=\"http://steve-patterson.com/cantor-wrong-no-infinite-sets/\"\u003ewell-written, clearly articulated piece\u003c/a\u003e on his personal site, Steve Patterson argues that Georg Cantor, the father of modern set theory, was simply, categorically, logically wrong in his understanding and presentation of infinite sets. I appreciate the simplicity, clarity, and forcefulness of his position:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eCantor’s argument isn’t ridiculous in isolation; the entire modern mathematics profession is also damned by association. Modern math, by not weeding out the illogical presuppositions of Cantor, has turned itself into modern Numerology.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eMore so, however, I commend his approach. Patterson takes seriously what he calls the “\u003ca href=\"http://steve-patterson.com/the-metaphysics-of-mathematics-against-platonism/\"\u003emetaphysics of mathematics\u003c/a\u003e”; he thinks carefully about the logical nature of these mathematical positions; he is explicit about his terms, what they mean, what he is doing with them, and why they are important. In short, he takes a very philosophical approach to mathematics.\u003c/p\u003e\n\n\u003cp\u003eThis is precisely my own bent as well. I am not a professional mathematician, nor am I a fully and/or properly trained mathematician. I am an amateur of the lowest order, but I am deeply drawn to, fascinated by, and enamored with the world of mathematics. I am particularly struck by the ways in which the work of mathematicians who have delved deep into such abstract waters can help us to better think about our minds, the world around us, and the state and nature of knowledge itself.\u003c/p\u003e\n\n\u003cp\u003eBut enough with the table setting. I want to write a bit about my response to Patterson’s piece. For while I appreciate his approach, his clarity of thought and presentation, I also fundamentally disagree with him. He places the world of rational, properly meaningful thought on one side and the world of modern mathematics, built on the concepts of set theory, on the other:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eMath needs to be logical – grounded in the principles of identity, non-contradiction, and clear conceptual reasoning – and it also needs to be metaphysically precise.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eHe begins from classical, Aristotelian logic and needs must (in his mind) cast out modern set theory. I want to work towards understanding the ground that properly unites them such that the one can illumine the other and vice versa.\u003c/p\u003e\n\n\u003cp\u003eSo, let’s begin.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eMy initial thoughts on this subject focus in on our understanding of what sets \u003cem\u003eeven are\u003c/em\u003e. This stands at the heart of Patterson’s critique, and I think he has it quite wrong. In his mind, mathematicians are conceiving of infinite sets in essentially the same manner that they conceive of finite sets:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eTo ask, “How many positive integers are there?” is to presuppose an error. Sets aren’t “out there.” They are created. All sets are exactly as large as they’ve been created. There is no such thing as “all the positive integers.”\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eBut are we indeed to conceive of infinite sets as \u003cem\u003ethings\u003c/em\u003e that exist “out there”? I think not. I believe mathematicians are quite aware that there aren’t infinite sets “out there,” and I do not think that mathematicians consider infinite sets primarily as “things.” This was how people understood finite sets, yes, but my understanding of Cantor’s position, and why he has affected mathematics so forcefully since, centers on a shift from conceiving of sets as \u003cem\u003ethings\u003c/em\u003e to conceiving of them as \u003cem\u003eprocedures\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eHere my own proclivity for computer programming is peeking through, as I am borrowing the concept of procedures from that world. In programming, the “program” is a chunk of executable commands to the computer. When talking about the smaller chunks of executable commands, programmers often refer to “functions” and “procedures,” each being a small, portable chunk of executable commands. The difference between a “function” and a “procedure” is noteworthy when thinking about sets, however. A function will return a value as a result of executing its commands; a procedure will not. Consider the following (pseudo-code):\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efunction\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexecute\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand_1\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexecute\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand_2\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003evalue\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprocedure\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexecute\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand_1\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eexecute\u003c/span\u003e \u003cspan class=\"n\"\u003ecommand_2\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSo, when I run the “function,” I will get the “value” back as a result after “command_1” and “command_2” are executed. When I run “procedure” though, “command_1” and “command_2” are both executed, but nothing is returned back to me (the caller) as a result.\u003c/p\u003e\n\n\u003cp\u003eBringing these concepts back to the world of sets, I begin to see possible conceptual connections. Finite sets are analogous to functions–they return something–, while infinite sets can correspond to procedures. This may seem a trivial analogy, but I believe it lies at the conceptual heart of modern set theory and our understanding of infinite sets (and thus, sets in general).\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eBefore Cantor’s investigation into infinite sets, set theory had as its “metaphysics” an understanding that sets were “things” or “values”–\u003ccode\u003e{1, 1, 2, 3, 5, 8}\u003c/code\u003e is a discrete value. It is a discrete value \u003cem\u003ecomposed\u003c/em\u003e of other discrete values, sure, but it is nonetheless itself discrete. Were we to consider the concept of “set” as strictly a “value,” Patterson’s critique would ring true, I believe. Infinite sets \u003cem\u003ecannot\u003c/em\u003e be values. Patterson clearly has this understanding of sets in mind when he writes:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eA set explicitly means an \u003cem\u003eactual, defined collection of elements\u003c/em\u003e. If you ever, at any point, have an actual collection of elements, you certainly do not have an infinite amount.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eBut is this how modern mathematicians, following Cantor, understand sets? I doubt it. And I doubt it primarily because Cantor’s own arguments and writing seem decently aware of this tension (see his desire to consider what we now call “infinite sets” as “\u003ca href=\"https://en.wikipedia.org/wiki/Transfinite_number\"\u003etransfinite sets\u003c/a\u003e”). Moreover, his arguments describing infinite sets are so clearly laying out \u003cem\u003eprocedures\u003c/em\u003e, not values. And, in my (very limited) opinion, this is key to Cantor’s revolution.\u003c/p\u003e\n\n\u003cp\u003eHe shifts the “metaphysical” understanding of sets away from values to procedures. He does not construct infinite sets by enumerating all of the discrete values that compose the set; he lays out a procedure for generating a set. \u003cstrong\u003eThe set is the procedure, and the procedure the set\u003c/strong\u003e. The set of all natural numbers is not properly understood as a value composed of all of the discrete values that are the natural numbers; it is to be understood as a procedure, the structure of which maps cleanly and clearly to the structure of the natural numbers.\u003c/p\u003e\n\n\u003cp\u003ePerhaps some pseudo-code would help here. How might we describe the set of the natural numbers as a procedure?\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003enaturals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003enaturals\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWere we to run this as a program, the computer would yell at us very quickly: “Runtime Error: maximum recursion depth exceeded.” This is a recursive procedure and there is nothing in its construction that would lead to it ever stopping from executing; it would execute forever if it could. This is why it is a procedure – it can never return a value. For to return a value would be to stop execution, but to stop execution would mean it had finished, and thus it was finite; but it is infinite.\u003c/p\u003e\n\n\u003cp\u003eThat doesn’t mean, however, that we can’t understand things about this procedure, particularly in comparison with other procedures:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eevens\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eevens\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eodds\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eodds\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThere are immediate, clear, and meaningful differences between the structures of the “naturals,” “evens,” and “odds” procedures. Just because none of these procedures would or ever \u003cem\u003ecould\u003c/em\u003e return a value doesn’t mean we can’t reason about them. And that is the heart of modern set theory; this is their “metaphysics of sets.” Sets are not primarily values (as this would restrict the definition of sets to include only finite sets); sets are primarily procedures (or, more properly, “programs” as finite sets would map to “functions” because they terminate and return values, while infinite sets would map to “procedures”).\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eI’m going to stop there for now. As I continue mulling on these thoughts, I want to explore further how the arity of the set/procedure (that is, the number of arguments that it takes) relates to the complexity and categorization of all sets, both finite and infinite. I am also interested in thinking through how recursive and non-recursive sets/procedures relate to the categorization of all sets. Finally, I’m curious as to whether a non-terminating procedure (that is, an infinite set) could ever be constructed as anything \u003cem\u003eother than\u003c/em\u003e a recursive procedure in this schema.\u003c/p\u003e\n\n\u003cp\u003eBut, all of those thoughts must wait for another day…\u003c/p\u003e\n","type":"article"},{"title":"Introducing: Togglicons","url":"/articles/introducing-togglicons/","content":"\u003cp\u003eI’ve finally created an initial version of one of my favorite side-projects: \u003ca href=\"http://togglicons.com\"\u003eTogglicons\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eVisit and click around. You can choose:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eany two icons you want to toggle between,\u003c/li\u003e\n  \u003cli\u003ethe color of the icons,\u003c/li\u003e\n  \u003cli\u003ethe animation transition easing,\u003c/li\u003e\n  \u003cli\u003ethe transition duration,\u003c/li\u003e\n  \u003cli\u003eand how rounded the icon edges are.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAnd it all just works!\u003c/p\u003e\n\n\u003cp\u003eIn the coming month, I’ll finish the full documentation and add that to the site.\u003c/p\u003e\n","type":"article"},{"title":"togglicons","url":"/projects/togglicons/","content":"\u003cp\u003e\u003cstrong\u003eDemo:\u003c/strong\u003e \u003ca href=\"http://togglicons.com\"\u003ehttp://togglicons.com\u003c/a\u003e\u003c/p\u003e\n\n\u003ch2 id=\"what\"\u003eWhat?\u003c/h2\u003e\n\n\u003cp\u003eA “togglicon” is an icon that toggles between two states. \u003cstrong\u003e\u003ccode\u003eTogglicons\u003c/code\u003e\u003c/strong\u003e is a toolkit for creating and adding any number and kind of togglicons to your project. In many ways, this project is similar to the \u003ca href=\"http://www.transformicons.com\"\u003eTransformicons\u003c/a\u003e project. The key differences are:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003ethat \u003cstrong\u003e\u003ccode\u003eTogglicons\u003c/code\u003e\u003c/strong\u003e is a “pure CSS” (it’s actually all written in SCSS) solution, requiring no JavaScript, and\u003c/li\u003e\n  \u003cli\u003ethat \u003cstrong\u003e\u003ccode\u003eTogglicons\u003c/code\u003e\u003c/strong\u003e offers nearly total control over the look and combination of your icons.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch2 id=\"why\"\u003eWhy?\u003c/h2\u003e\n\n\u003cp\u003eWhy use a togglicon, and in what contexts does it make sense? Since any and all togglicons can only switch between two icons, they only really make sense when you are toggling between two states and you want a UI signal of which state things are in at any given moment. One primary example would be collapsible panels. Another would be a button that show/hides a menu.\u003c/p\u003e\n\n\u003cp\u003eWithin those contexts, togglicons can help to add a sense of polish and whimsy to your UI. Instead of simply swapping out on Font Awesome icon for another, have \u003ccode\u003eiconA\u003c/code\u003e magically morph into \u003ccode\u003eiconB\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"how\"\u003eHow?\u003c/h2\u003e\n\n\u003cp\u003eIn order to add \u003cstrong\u003e\u003ccode\u003eTogglicons\u003c/code\u003e\u003c/strong\u003e to your project, you first need to download the SCSS source code and bring it into your project.\u003c/p\u003e\n\n\u003cp\u003eOnce you have the \u003ccode\u003esrc/\u003c/code\u003e directory in your project, you will have access to the \u003ccode\u003etogglicon\u003c/code\u003e mixin. Given the deep dynamicity of \u003cstrong\u003e\u003ccode\u003eTogglicons\u003c/code\u003e\u003c/strong\u003e, no CSS will be generated and no toggling icons will be added to your site until you \u003ccode\u003e@include togglicon\u003c/code\u003e somewhere in your projects SASS/SCSS. This will allow you to have multiple, different togglicons present on the same page, as well as reduce the overall CSS footprint of the togglicon library in your final stylesheets. For example, you might include the mixin within a particular namespace:\u003c/p\u003e\n\n\u003cdiv class=\"highlight scss\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"nc\"\u003e.togglicon-container\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003e@include\u003c/span\u003e \u003cspan class=\"nd\"\u003etogglicon\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis, however, is the least interesting way to include the mixin, as the mixin allows for a number of parameters to customize the look and feel of your togglicons.\u003c/p\u003e\n\n\u003cp\u003eFirst and foremost, you can declare which specific icons you want to toggle between. This will immediately and drastically reduce the final CSS footprint of togglicons, as the library will now only generate the CSS required for those specific icons. You set the set of icons you want these togglicons to toggle between with the \u003ccode\u003e$icons\u003c/code\u003e parameter passed to the mixin:\u003c/p\u003e\n\n\u003cdiv class=\"highlight scss\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"nc\"\u003e.togglicon-container\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003e@include\u003c/span\u003e \u003cspan class=\"nd\"\u003etogglicon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$icons\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'chevron-up'\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'chevron-down'\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhen it comes to the overall look of your icons, you have a number of options. You can also set the width (in pixels) of the icons as well as the multiplier used to calculate the height of the icons (\u003cem\u003eNote:\u003c/em\u003e Given the math used to ensure each icon is perfect positioned, the height needs to be a multiple of the width). This allows you to have togglicons as tall and thick or as small as your app requires. These variables are set using the \u003ccode\u003e$width\u003c/code\u003e and \u003ccode\u003e$multiplier\u003c/code\u003e parameters:\u003c/p\u003e\n\n\u003cdiv class=\"highlight scss\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"nc\"\u003e.togglicon-container\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003e@include\u003c/span\u003e \u003cspan class=\"nd\"\u003etogglicon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$width\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"nv\"\u003e$multiplier\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eFurthermore, you can specify the \u003ccode\u003eborder-radius\u003c/code\u003e of the icons by setting the \u003ccode\u003e$radius\u003c/code\u003e parameter:\u003c/p\u003e\n\n\u003cdiv class=\"highlight scss\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"nc\"\u003e.togglicon-container\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003e@include\u003c/span\u003e \u003cspan class=\"nd\"\u003etogglicon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$width\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"nv\"\u003e$multiplier\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e7\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"nv\"\u003e$radius\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou can then also set the color of the icons with the \u003ccode\u003e$color\u003c/code\u003e parameter:\u003c/p\u003e\n\n\u003cdiv class=\"highlight scss\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"nc\"\u003e.togglicon-container\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003e@include\u003c/span\u003e \u003cspan class=\"nd\"\u003etogglicon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$width\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e3\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"nv\"\u003e$multiplier\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e7\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"nv\"\u003e$radius\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"nv\"\u003e$color\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mh\"\u003e#111111\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe final bit of control you have is over the transitions between the icons. You can set both the \u003ccode\u003etransition-duration\u003c/code\u003e property (\u003ccode\u003e$duration\u003c/code\u003e) as well as the \u003ccode\u003etransition-timing-function\u003c/code\u003e property (\u003ccode\u003e$transition\u003c/code\u003e):\u003c/p\u003e\n\n\u003cdiv class=\"highlight scss\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"nc\"\u003e.togglicon-container\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003e@include\u003c/span\u003e \u003cspan class=\"nd\"\u003etogglicon\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nv\"\u003e$duration\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"mi\"\u003e.5\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e\n                       \u003cspan class=\"nv\"\u003e$transition\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nf\"\u003ecubic-bezier\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"mi\"\u003e.68\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e-0\u003c/span\u003e\u003cspan class=\"mi\"\u003e.55\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e0\u003c/span\u003e\u003cspan class=\"mi\"\u003e.265\u003c/span\u003e\u003cspan class=\"o\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"mi\"\u003e.55\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWith any or all of these parameters set, \u003cstrong\u003e\u003ccode\u003eTogglicons\u003c/code\u003e\u003c/strong\u003e will output precisely the CSS required to have beautiful toggling icons on your page.\u003c/p\u003e\n","type":"article"},{"title":"Can there be a property that is universally predicated of every instance of a set that is not simply the definition of that set?","url":"/jots/201706270013/","content":"\n","type":"article"},{"title":"Argument for the Reasonableness of Eucharistic Substantiation","url":"/articles/argument-for-the-reasonableness-of-eucharistic-substantiation/","content":"\u003cul\u003e\n  \u003cli\u003eJesus is fully God and fully man (\u003ccode\u003eJ == G \u0026amp;\u0026amp; M\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003e‘to be’ is a substantial statement (\u003ccode\u003e'==' = substantial\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eJesus’ substance is fully the substance of God and fully the substance of man (\u003ccode\u003es(J) == s(G) \u0026amp;\u0026amp; s(M)\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eThe substance of God is immaterial (\u003ccode\u003es(G) = i\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eThe substance of man is material (\u003ccode\u003es(M) = m\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eSo, the substance of Jesus is fully material and fully immaterial (\u003ccode\u003es(J) == i \u0026amp;\u0026amp; m\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eTherefore, some substances can be be fully material and fully immaterial (\u003ccode\u003eV s == i \u0026amp;\u0026amp; m\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eI am sure that someone could poke holes in the logic of that argument–and I welcome any such comments; however, I also currently find it convincing. Given the conclusion, then, I simply ask myself: “Is it likely that the Eucharist is a member of the set of possible substances that can be both fully material and fully immaterial?” To my mind, it is likely. When Jesus says “this is my body” and “this is my blood”, these are terms of a substantial register. Moreover, these are statements of identity (using the verb “to be”). Finally, for me, the parallelism of Jesus is to God and man as eucharistic bread is to Christ’s body and regular bread fits too well into the general structures of Christian thinking.\u003c/p\u003e\n\n\u003cp\u003eIn short, I believe both that \u003ca href=\"http://www.theopedia.com/consubstantiation\"\u003econsubstantiation\u003c/a\u003e is reasonable and true.\u003c/p\u003e\n","type":"article"},{"title":"It's the small things, the quiet ones, the moments between where meaning often runs deepest.","url":"/jots/201706230133/","content":"\n","type":"article"},{"title":"Each and every day, I exist, for there is life in the small things, light among the sharp edges.","url":"/jots/201706221136/","content":"\n","type":"article"},{"title":"This world chips away at us like waves against a cragg'd cliff, leaving us sharp yet fractal--complex by the simple iteration of the tide.","url":"/jots/201706190032/","content":"\n","type":"article"},{"title":"You are asking questions in prose that can only be answered in poetry.","url":"/jots/201706130731/","content":"\n","type":"article"},{"title":"Complexity is often no more than iterated simplicity.","url":"/jots/201706061113/","content":"\n","type":"article"},{"title":"Are goodbyes as hard as their related memories are soft--memories made soft by my now foreignness in them? I often feel like a ghost in my own memories, haunting a moment that is not quite mine.","url":"/jots/201706040723/","content":"\n","type":"article"},{"title":"Scars II","url":"/articles/scars-ii/","content":"\u003cp\u003eThe scar is wound and healing.\u003c/p\u003e\n\n\u003cp\u003eThe scar is flesh and memory.\u003c/p\u003e\n\n\u003cp\u003eThe scar is past and present.\u003c/p\u003e\n\n\u003cp\u003eWe are a people of scars.\u003c/p\u003e\n\n\u003cp\u003eThe world is broken; broken things are sharp; sharp things cut; cuts are wounds.\u003c/p\u003e\n\n\u003cp\u003eAs a people of scars, we too are broken.\u003c/p\u003e\n\n\u003cp\u003eYet the scar is brokenness and wholeness.\u003c/p\u003e\n\n\u003cp\u003eWe are wounded, yet also knit back together.\u003c/p\u003e\n\n\u003cp\u003eKnow this: your scars are real. They are seen and felt. I am broken with and for you.\u003c/p\u003e\n\n\u003cp\u003eBut you are so much more than your wounds. You are healing, wholeness, present.\u003c/p\u003e\n\n\u003cp\u003eI love you and your scars.\u003c/p\u003e\n","type":"article"},{"title":"Scars I","url":"/articles/scars-i/","content":"\u003cp\u003eI live a life of scars,\u003c/p\u003e\n\n\u003cp\u003eso small as to be invisible,\u003c/p\u003e\n\n\u003cp\u003elike the slivers and shards and fragments of shrapnel—broken and sharp—\u003c/p\u003e\n\n\u003cp\u003ethat seared them into the fleshy bits of my me.\u003c/p\u003e\n","type":"article"},{"title":"A life forgotten","url":"/articles/a-life-forgotten/","content":"\u003cp\u003eA life forgotten\u003c/p\u003e\n\n\u003cp\u003eEroding against the incremental scratch of time\u003c/p\u003e\n\n\u003cp\u003eLike a lonely obelisk in the desert\u003c/p\u003e\n\n\u003cp\u003eGraven with images\u003c/p\u003e\n","type":"article"},{"title":"Flatland and Theological Expectations","url":"/articles/flatland-and-theological-expectations/","content":"\u003cp\u003eI am going to confess at the outset that I have not read the novella \u003ca href=\"https://en.wikipedia.org/wiki/Flatland\"\u003e\u003cem\u003eFlatland: A Romance of Many Dimensions\u003c/em\u003e\u003c/a\u003e in its entirety.\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e The central conceit of the book, however, has fascinated me since I first learned of it. While scholars read the original work as a satire of Victorian culture and its class system, the work has gained a renewed notoriety since Einstein’s general theory of relativity gained wide-spread understanding. In needing a mechanism to think more concretely about the fourth-dimension, many saw this book by Edwin Abbott as a witty imagining of how dimensionality must be understood by being that exist within a certain dimension. In the story, the protagonist, a square who lives in a two-dimensional world, visits a one-dimension world, only to be threatened and chased off after he attempts to convince the people there of the existence of a second dimension. Later, the square is then visited by a sphere, who transports the square to a three-dimensional world. While the specifics of the plot have their charm, the key point for my purposes today is the conceit and the general questions it raises:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ehow are beings limited in their thinking by the world that they occupy?\u003c/li\u003e\n  \u003cli\u003eCan we think rationally about worlds with greater degrees of complexity (or “dimensions”) than our own?\u003c/li\u003e\n  \u003cli\u003eInsofar as we can think rationally about more complex worlds, what general expectations can we form about the nature and limits of our understanding of such things?\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn particular, as the title suggests, I am interested in how thought experiments of this sort might elucidate certain features of theology. Without spoiling the fun too much too early, I think that we can draw a meaningful analogy between squares attempting to think about and understand spheres and humans attempting to think about and understand God. But, before we go too far down that path, I want to return to Flatland.\u003c/p\u003e\n\n\u003ch3 id=\"thinking-in-flatland\"\u003eThinking in Flatland\u003c/h3\u003e\n\n\u003cp\u003eImagine that you are a square. You are a two-dimensional object that lives in a two-dimensional world. All around you are circles, triangles, parallelograms, quadrilaterals of all kinds, and every imaginable form of polygon. You can see height and width, but you have no sense of depth. You are in Flatland. Now, I want you to observe these shapes and think about what you can glean from them:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"images/cube_collection_1.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are four objects here. One is a simple square. Next we have a hectagon that is wider than it is tall, followed by another hectagon that is taller than it is wide. These two hectagons are fairly similar. The final object is also a hectagon, but is distinctly different from the first two. Like the second, it is tall, but like the first it has a pointed top. Unlike the second, however, it’s top and bottom angle are sharper. An intriguing collection of objects.\u003c/p\u003e\n\n\u003cp\u003eNow, I am going to tell you that these 4 images all represent the \u003cem\u003esame object\u003c/em\u003e. So, and don’t forget that you are a square in Flatland, what do we do this piece of information? Would this not be as perposterous as saying that Mr. Triangle (△) is actually the same as Miss Diamond (◇) or Sir Circle (○)? Maybe, \u003cem\u003emaybe\u003c/em\u003e, you could say that the second and third images represent the same object; Mr. Hectagon has simply decided to lie down for a nap. But \u003cem\u003eall four\u003c/em\u003e? Three of these images have 6 sides and one has 4. This simply cannot be. What object could possibly be represented by these four images?\u003c/p\u003e\n\n\u003cp\u003eSome of you may very well have a sense of the answer, but assuredly our poor Square does not. Not yet. So, let’s give him a helping hand and add a bit more detail:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"images/cube_collection_2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eHere are our four images with their foremost lines visible. At this point, the object is starting to come into focus. We are looking at various orientations of a \u003cstrong\u003ecube\u003c/strong\u003e as represented in two-dimensions. Imagine trying to explain a cube to Mr. Square. Imagine trying to not just convince him that the original four images are all the same object, but to help him understand \u003cem\u003ewhat that object is\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhile I hope that this small thought experiment starts to suggest the difficulty of thinking about greater orders of complexity than that within which we actually live, I also understand that all of us actually live in a three-dimensional world, and so we fundamentally \u003cem\u003ecan’t\u003c/em\u003e imagine being lowly squares. We can see those four images and fairly easily the single cube that each represents. We can imagine that cube and spin it in our mind’s eye into the four orientations pictured. In short, we are likely to undervalue how difficult a task poor Mr. Square has in understand this cube. So, to try and bring the point to bear with more clarity, I offer you those two aminated images:\u003c/p\u003e\n\n\u003cdiv style=\"display:flex;align-items:center;\"\u003e\n  \u003cimg style=\"width:50%;\" src=\"images/tesseract_2.gif\" /\u003e\n  \u003cimg style=\"width:50%;\" src=\"images/tesseract_3.gif\" /\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThese images are attempts at rendering a \u003ca href=\"https://en.wikipedia.org/wiki/Tesseract\"\u003etesseract\u003c/a\u003e, which is to a cube what a cube is to a square; it is the four-dimensional equivalent of a cube. I want you to study these animations, try to understand this object, try to picture it in your mind. If you follow a particular line in one of the animations, you will see at some point that it does something impossible; it crosses from behind to infront of another line.\u003c/p\u003e\n\n\u003cp\u003eThis is the central truth. Whether a square trying to understand a cube or a human trying to understand a tesseract, when something tries to reason about an object that exists in a greater degree of complexity, \u003cem\u003eparadoxes\u003c/em\u003e will start to appear. One object has both 4 sides and 6 sides; one line is both behind and infront of another.\u003c/p\u003e\n\n\u003ch3 id=\"thinking-about-god\"\u003eThinking about God\u003c/h3\u003e\n\n\u003cp\u003eTheology is, in essential form, nothing more than thinking about God. And, as I said at the beginning, I think we can draw a meaningful analogy between a square trying to think about a cube (or a cube trying to think about a tesseract) and humans theologizing about God. God is—metaphysically, existentially, definitionally—more complex than us humans. He is the Creator, we are created; He is beyond space and time, we are within it.\u003c/p\u003e\n\n\u003cp\u003eSo, given the examples above, what might we expect about the outcomes of theology? And note that I am being purposely very broad here. I am thinking of theology of any sort. We are trying to think about the nature and limits of thinking about God in general. Given the nature of God and nature of humans, what might be general characteristics of theology that we can expect? I consider this kind of meta-question similar in efficacy to the sorts of approximations we make when doing arithmetic. While I can’t determine the product of 17 and 24 immediately, I can know that the answer will be \u003cem\u003earound\u003c/em\u003e 400 (20 × 20). Knowing this can help me to avoid settling on a wrong answer, but cannot help me to determine the right answer. It is a heuristic, not a formula. Likewise, considering how our very natures and realities impinge upon our thinking can help us develop a theological heuristic that shows us certain types of theological conclusions are clearly false, even if it cannot show us that any particular theological claim is clearly true.\u003c/p\u003e\n\n\u003cp\u003eGod, within the minds of humans, is a \u003cem\u003eparadox\u003c/em\u003e, \u003cstrong\u003emust be\u003c/strong\u003e a paradox. This does not mean that we are incapable of thinking meaningful thoughts about God, nor does it mean that we cannot say some predicates are false of God. It does, however, impose a much stronger limit to the things we can say of God. Although, from a different perspective, it also opens up much that we can say of God. For many predicates, God is \u003cem\u003eboth\u003c/em\u003e X and not-X. Be wary of people peddling propositions that God is \u003cstrong\u003eonly\u003c/strong\u003e some X. Likewise, be wary of people suggesting God is \u003cem\u003eeverything\u003c/em\u003e, that there is nothing stable that we can think about or interact with. Like the tesseract, God has real qualities, there are things that are true of God and things that aren’t. But, like the tesseract, when we put our minds to God, there is much that fuzzes and distorts our minds. God is the cube; we, the square.\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eIf you wish to peruse it, Project Gutenberg has a \u003ca href=\"http://www.gutenberg.org/files/201/201-h/201-h.htm\"\u003efree HTML version\u003c/a\u003e. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"A Simple Tree Building Algorithm","url":"/articles/a-simple-tree-building-algorithm/","content":"\u003cp\u003eIt is, unfortunately, not that often that I get the opportunity to devise an algorithm to solve a problem at work. Most work simply doesn’t require that kind of thinking. But I thoroughly enjoy that kind of thinking, and thus thoroughly enjoyed the most recent opportunity I had to employ it. The problem was simple (though I have simplified and abstracted it for this post as well): we have a database table of \u003ccode\u003ethings\u003c/code\u003e, and these \u003ccode\u003ethings\u003c/code\u003e have a parent-child hierarchy, and we need to display a tree of these \u003ccode\u003ethings\u003c/code\u003e in our UI. So, let’s dig in.\u003c/p\u003e\n\n\u003cp\u003eFirst, let’s examine the basic shape of the database table. Each \u003ccode\u003ething\u003c/code\u003e has an \u003cem\u003eid\u003c/em\u003e, \u003cem\u003ename\u003c/em\u003e, and \u003cem\u003eparent_id\u003c/em\u003e, like so:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eid\u003c/th\u003e\n      \u003cth\u003ename\u003c/th\u003e\n      \u003cth\u003eparent_id\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n      \u003ctd\u003eA\u003c/td\u003e\n      \u003ctd\u003enil\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e2\u003c/td\u003e\n      \u003ctd\u003eB\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e3\u003c/td\u003e\n      \u003ctd\u003eC\u003c/td\u003e\n      \u003ctd\u003e1\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e4\u003c/td\u003e\n      \u003ctd\u003eD\u003c/td\u003e\n      \u003ctd\u003e2\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e5\u003c/td\u003e\n      \u003ctd\u003eE\u003c/td\u003e\n      \u003ctd\u003e4\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e6\u003c/td\u003e\n      \u003ctd\u003eF\u003c/td\u003e\n      \u003ctd\u003e3\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e7\u003c/td\u003e\n      \u003ctd\u003eG\u003c/td\u003e\n      \u003ctd\u003enil\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eEach row in the table gives us a “node” for our tree and tells us about that node’s parent. This means that we cannot know by looking at a single row whether or not that “node” will have any children, but we can know if that “node” has a parent and what other “node” that parent is. If we want to think of this data in Ruby, this would be an array of hashes:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"ss\"\u003eid: \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'A'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"ss\"\u003eid: \u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'B'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"ss\"\u003eid: \u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'C'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"ss\"\u003eid: \u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'D'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"ss\"\u003eid: \u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'E'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"ss\"\u003eid: \u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"ss\"\u003eid: \u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'G'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThat is the shape of the data that we are starting with, but what is the shape of the data that we want? We want a nested tree in the UI, so I think that is best represented in Ruby as a nested hash:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'A'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'B'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'D'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n            \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n              \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n                \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'E'\u003c/span\u003e\n              \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n      \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'C'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n          \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'F'\u003c/span\u003e\n          \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'G'\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe now know where we are coming from and where we are going; the only thing left to do is to get there.\u003c/p\u003e\n\n\u003cp\u003eI like to start with simple facts, things that I know to be true. For example, if we are starting with an array of hashes, our solution is going to need to iterate over that array. It is also a fact that any “node” in the tree can be described as one of three things: a “root”, a “leaf”, or a “branch”. Here I may be stretching the tree metaphor a bit too far, but bear with me.\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eA “root” is a top level object; it has children but no parent.\u003c/li\u003e\n  \u003cli\u003eA “leaf” is the exact opposite; it has a parent but no children.\u003c/li\u003e\n  \u003cli\u003eA “branch”, then, is simply a node that has both a parent and children.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNow, we said earlier that we cannot know by looking at a simple node whether or not it has children. This means that we cannot determine if a particular node is a “branch” or a “leaf” just by examining it. We \u003cem\u003ecan\u003c/em\u003e, however, determine if a particular node is a “root” or not on its own.\u003c/p\u003e\n\n\u003cp\u003eA final thing that we know is that an efficient algorithm to solve this problem will only scan the initial array once. We want to iterate over that array of hashes once and build up our nested hash as we go.\u003c/p\u003e\n\n\u003cp\u003eWe have some basic facts before us so let’s start actually trying to write some code. We need to iterate over the array of hashes, so let’s start there:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c1\"\u003e# `nodes` = the array of hashes\u003c/span\u003e\n\u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# some computation\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe also know that we want to get a hash out at the end, and that we will need to build that hash as we iterate over the array, so let’s initialize that hash as well:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# `nodes` = the array of hashes\u003c/span\u003e\n\u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# some computation\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe know that as we iterate over the \u003ccode\u003enodes\u003c/code\u003e, we need to insert each node into the \u003ccode\u003etree\u003c/code\u003e. Let’s start with a naive implementation:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# `nodes` = the array of hashes\u003c/span\u003e\n\u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ereject\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"ss\"\u003e:id\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eI call this “naive” not to be condescending; it is literally where I started and I think it is a healthy place to start. Iteration is at the heart of good programming, good thinking. We know where we are going but not how quite to get there, so let’s experiment and learn as we go. Here, we start to learn something important. For, while this will turn an array of hashes into a single hash, it gets us nowhere near a nested hash. If we were to run this code, we would simply get:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'A'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'B'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'C'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'D'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'E'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e6\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e7\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'G'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eOur array is now a hash, but the basic shape of the data hasn’t changed at all. Moreover, this naive approach has shown us that we really need to do something with the \u003ccode\u003eparent_id\u003c/code\u003e of each node as we process it. Also, I notice a key difference between our starting data and our desired output data: our starting data focuses on the “parent” of the “parent-child” relationship (via \u003ccode\u003eparent_id\u003c/code\u003e), while our output data focuses on the “child” (with the \u003ccode\u003echildren\u003c/code\u003e key). Making this switch will prove to be difficult, but let’s examine why.\u003c/p\u003e\n\n\u003cp\u003eWe said earlier that we can tell by looking at a single node whether or not it is a “root” or not, that is, whether or not it has a parent. This means we could build the first level of our nested hash quite simply:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# `nodes` = the array of hashes\u003c/span\u003e\n\u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ereject\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_s\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003einclude?\u003c/span\u003e \u003cspan class=\"s1\"\u003e'id'\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis would produce a \u003ccode\u003etree\u003c/code\u003e with this shape:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"A\"\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e7\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"G\"\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis, at least, is \u003cem\u003estarting\u003c/em\u003e to look like our desired output. But what do we do about the possible children? We don’t know if either of these nodes has children just by looking at them; we only that a node is a child if it has a \u003ccode\u003eparent_id\u003c/code\u003e. So this switch from a parent-centric perspective to a children-centric perspective is going to be difficult. In fact, spoiler warning, if we want to get the nested hash output we described initially \u003cstrong\u003eand\u003c/strong\u003e only parse the array once, \u003cem\u003ewe are screwed\u003c/em\u003e. We are screwed because we can’t insert a node into an arbitrary place in the nested hash.\u003c/p\u003e\n\n\u003cp\u003eWe could create an auto-vivifying hash and insert a node arbitrarily deep in the hash:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eautovivifying_tree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eHash\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"no\"\u003eHash\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003enew\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003eh\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edefault_proc\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003eautovivifying_tree\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edig\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# autovivifying_tree =\u0026gt; {1=\u0026gt;{2=\u0026gt;{4=\u0026gt;{5=\u0026gt;{}}}}}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe problem here is that we have to have the path to the nested node; we need to know that nodes ancestors. But, in our data, we can only learn the ancestor paths by parsing the whole array. This data model also fails to give us the \u003ccode\u003ename\u003c/code\u003e of each node. So, what to do?\u003c/p\u003e\n\n\u003cp\u003eAt this point, I determined that the nested hash was simply going to be impossible to create by parsing the array once. Moreover, I realized that it was not necessary (or even most effective) for storing the data in the way my UI would need it. While a nested hash most directly modeled the shape of the data I needed, the directness of the model comes at the expense of efficiency and ease of use. An arbitrarily nested hash is more difficult for the UI code to parse. It would need a recursive function, which would need to check if the hash under consideration had a \u003ccode\u003echildren\u003c/code\u003e key, and would have to traverse the whole tree without knowing the keys (a central benefit of Hashes as a data structure). Thus, while visually the closest to a “tree”, the nested hash comes with too much baggage for our implementation. So let’s go back to the drawing board for what our output data structure could and should look like.\u003c/p\u003e\n\n\u003cp\u003eAs I turned myself back to the problem, I thought about what kind of code I would like in my UI to generate the visual tree. I would like to efficiently navigate the entire collection of \u003ccode\u003ethings\u003c/code\u003e, moving from the top of the hierarchy (\u003ccode\u003ethings\u003c/code\u003e with no parent, i.e. “roots”) thru the various middle layers (the “branches”) and down to the very bottom (the “leaves”). I want this parsing to be as direct and efficient as the parsing of the database–one pass. When you want to navigate data directly and effienctly, \u003ccode\u003eHash\u003c/code\u003ees are a great place to start. But, we have already discussed the difficulties with a nested hash, so let’s use a flat hash. The keys should be the \u003ccode\u003eid\u003c/code\u003e of the \u003ccode\u003ething\u003c/code\u003e, one entry per row in the database. The values need to tell use at least two pieces of information: the \u003ccode\u003eparent\u003c/code\u003e and the \u003ccode\u003echildren\u003c/code\u003e of that particular \u003ccode\u003ething\u003c/code\u003e. That is, we want something that would look like this:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kp\"\u003enil\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'A'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'B'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'C'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'D'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'E'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e6\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e7\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'G'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe could navigate this data structure hierarchically with ease.\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003evisit_children\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"n\"\u003echildren\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"ss\"\u003e:children\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"n\"\u003econtent_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:li\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n    \u003cspan class=\"n\"\u003econtent_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:span\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"ss\"\u003e:name\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:ul\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n      \u003cspan class=\"n\"\u003esafe_join\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echildren\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003echild\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n        \u003cspan class=\"n\"\u003evisit_children\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecall\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003echild\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003echildren\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eroots\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"ss\"\u003e:children\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"n\"\u003econtent_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:ul\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eroots\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003evisit_children\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecall\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eroot\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis code would create this HTML:\u003c/p\u003e\n\n\u003cdiv class=\"highlight html\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;span\u0026gt;\u003c/span\u003eA\u003cspan class=\"nt\"\u003e\u0026lt;/span\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;span\u0026gt;\u003c/span\u003eB\u003cspan class=\"nt\"\u003e\u0026lt;/span\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n          \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026lt;span\u0026gt;\u003c/span\u003eD\u003cspan class=\"nt\"\u003e\u0026lt;/span\u0026gt;\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n              \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u0026lt;span\u0026gt;\u003c/span\u003eE\u003cspan class=\"nt\"\u003e\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt;\u003c/span\u003e\n            \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n          \u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;span\u0026gt;\u003c/span\u003eC\u003cspan class=\"nt\"\u003e\u0026lt;/span\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;ul\u0026gt;\u003c/span\u003e\n          \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u0026lt;span\u0026gt;\u003c/span\u003eF\u003cspan class=\"nt\"\u003e\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt;\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/li\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;li\u0026gt;\u0026lt;span\u0026gt;\u003c/span\u003eG\u003cspan class=\"nt\"\u003e\u0026lt;/span\u0026gt;\u0026lt;/li\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/ul\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eOur front-end code suggests to use that this data structure would work well for our needs. So, now all we need to do is munge our array of hashes into a hash of the structure described.\u003c/p\u003e\n\n\u003cp\u003eLet’s think through what precisely we need to happen. We need to iterate over an array of hashes. For each item/node/hash in that array, we need to store a reference in the \u003ccode\u003etree\u003c/code\u003e. For each node we also need to add that node to its parent reference in the \u003ccode\u003etree\u003c/code\u003e. This means we need to ensure that the reference to the parent \u003cem\u003ealready exists\u003c/em\u003e in the \u003ccode\u003etree\u003c/code\u003e; that is, imagine a scenario where we process node 2 before node 1 (the parent of node 2). We cannot add node 2 to node 1’s \u003ccode\u003echildren\u003c/code\u003e if node 1 does not exist in the tree. This, however, should be sufficient for parsing our array of hashes into a hash of nodes to be consumed by our UI code. So, let’s start building it!\u003c/p\u003e\n\n\u003cp\u003eWe already know we must start with a \u003ccode\u003etree\u003c/code\u003e and iterating of the \u003ccode\u003enodes\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# ...\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow, we also need to either find or create the reference to the \u003ccode\u003enode\u003c/code\u003e in the \u003ccode\u003etree\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe \u003ccode\u003e||=\u003c/code\u003e operator is what allows us to “find or create” a reference in the \u003ccode\u003etree\u003c/code\u003e hash. If \u003ccode\u003etree[node[:id]]\u003c/code\u003e already has a value, nothing happens; but, if it doesn’t, the value is set to the empty hash \u003ccode\u003e{}\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eBut we don’t just want an empty hash for the value in the \u003ccode\u003etree\u003c/code\u003e; we want to set the \u003ccode\u003eparent_id\u003c/code\u003e and initialize the \u003ccode\u003echildren\u003c/code\u003e array (plus insert the \u003ccode\u003ename\u003c/code\u003e):\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:name\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIf we were to process \u003ccode\u003enodes\u003c/code\u003e with just this code, at the end \u003ccode\u003etree\u003c/code\u003e would look like this:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"A\"\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"B\"\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"C\"\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"D\"\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"E\"\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e6\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"F\"\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e7\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s2\"\u003e\"G\"\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWe are close. All we need to do now is fill in the \u003ccode\u003echildren\u003c/code\u003e information. A first step would be to mimic what we do with \u003ccode\u003enode[:id]\u003c/code\u003e in dealing with \u003ccode\u003enode[:parent_id]\u003c/code\u003e, that is, “find or create” its reference in the \u003ccode\u003etree\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:name\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis has a hole, however, in its logic. Every node in \u003ccode\u003etree\u003c/code\u003e will only ever have the shape it was initialized with. This means that if we visit node 2 first, node 2’s \u003ccode\u003echildren\u003c/code\u003e array will never be updated to include node 4 and node 1’s reference will never have any more \u003ccode\u003echilren\u003c/code\u003e than node 2, never have a \u003ccode\u003ename\u003c/code\u003e, and never have a \u003ccode\u003eparent_id\u003c/code\u003e (the logic still holds even if, in this particular scenario, node 1’s parent is \u003ccode\u003enil\u003c/code\u003e). So, we need a way to update references when we gather new information (on subsequent iterations). The first thing we must do is ensure that we set \u003ccode\u003eparent_id\u003c/code\u003e and \u003ccode\u003ename\u003c/code\u003e for every \u003ccode\u003enode\u003c/code\u003e as we process it, whether that node has a reference in the \u003ccode\u003etree\u003c/code\u003e yet or not:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"n\"\u003edefault\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:name\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"n\"\u003edefault\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]].\u003c/span\u003e\u003cspan class=\"nf\"\u003emerge\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis code ensures that \u003ccode\u003etree[node[:id]]\u003c/code\u003e \u003cem\u003ealways\u003c/em\u003e has the proper \u003ccode\u003eparent_id\u003c/code\u003e and \u003ccode\u003ename\u003c/code\u003e. Unfortunately, however, it also obliterates any \u003ccode\u003echildren\u003c/code\u003e value that may have been previously set. So, let’s remove \u003ccode\u003echildren\u003c/code\u003e from our reference \u003ccode\u003edefault\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"n\"\u003edefault\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:name\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"n\"\u003edefault\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]].\u003c/span\u003e\u003cspan class=\"nf\"\u003emerge\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis now at least ensures that if I visit a parent node \u003cem\u003eafter\u003c/em\u003e I have visited one of its children, the parent’s \u003ccode\u003echildren\u003c/code\u003e array will still be intact. It does not, however, ensure that the \u003ccode\u003echildren\u003c/code\u003e array is properly updated. Recall that in our test data node 1 has two children (2 and 3). This code will \u003cem\u003enever\u003c/em\u003e give us a reference node with more than one item in the \u003ccode\u003echildren\u003c/code\u003e array. Moreover, it doesn’t help us, when I visit a parent node first and one of its children later, to ensure that the reference to the parent node is updated while processing the child node to have that child node in its \u003ccode\u003echildren\u003c/code\u003e array. What we need is to treat the parent node as intelligently as the current node on each processing cycle:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ecurrent_default\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:name\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrent_default\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e]].\u003c/span\u003e\u003cspan class=\"nf\"\u003emerge\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ecurrent_default\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003eparent_default\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e||=\u003c/span\u003e \u003cspan class=\"n\"\u003eparent_default\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparent_default\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emerge\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e]])\u003c/span\u003e\n  \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e]][\u003c/span\u003e\u003cspan class=\"ss\"\u003e:children\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nf\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis code can now handle multiple children and cares not for which node (parent or child) we visit first. This code, when processing our array of nodes, would produce:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"kp\"\u003enil\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'A'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'B'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'C'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'D'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'E'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e6\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'F'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n  \u003cspan class=\"mi\"\u003e7\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003ename: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'G'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eparent_id: \u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003echildren: \u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHuzzah! This is what we have been looking for! Pat yourself on the back, we’ve finally made our way to our goal. I hope this long (and sometimes circuitous) journey has helped you. I’ve tried to walk through the ups and downs, the missteps and recalibrations, that my actual process resembled. I have also tried to write code that is readable and understandable before all else. This code, however, is not the code that I actually ended up with or used. I used a few more elegant Ruby-isms to accomplish my goal. So, I leave you with my actual implementation, without a walk-thru, as a bit of mental homework. If you can understand how and why this code accomplishes the same goals as the above code, you will have learned a good deal about Ruby. And, I promise to write up an explanation at some point as well ;)\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etree\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003cspan class=\"n\"\u003enodes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eeach\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efetch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eparent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efetch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003etree\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"n\"\u003esiblings\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efetch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:children\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003eparent\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n  \u003cspan class=\"n\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:parent_id\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n  \u003cspan class=\"n\"\u003esiblings\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enode\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:id\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n","type":"article"},{"title":"Communication is Hard","url":"/articles/communication-is-hard/","content":"\u003cp\u003eCommunication is hard. I have found myself contemplating this truth a lot lately. At work it has become a kind of mantra on my team. Have you ever taken the proverbial step back to consider what all is involved in communicating with another human being? We have these thoughts, often messy, squishy, and loosely formed, which we attempt to shuttle from our mind into someone else’s mind (let alone a group of other minds). In order to get these nearly amorphous ideas out of our heads and into another, we package them up in words. We quiver these small muscles in our throats or we engage our wrists and fingers to hammer out some collection of runes or we sometimes even drag our hands across tree pulp scrawling out an even cruder form of these same symbols. There is no inherent connection between the etherial thoughts in our minds and these vibrations in the air or scribbles on a surface; there is nothing that guarantees this representation, whatever physical form it takes, properly encodes our thoughts. In fact, it is impossible for me to imagine that words could ever \u003cem\u003efully\u003c/em\u003e encode thought. But that is only half of it.\u003c/p\u003e\n\n\u003cp\u003eAfter we squeeze these atomless, formless ideas into some physical form, we send them out on a hope and a prayer toward the other mind, the other person. And they fly on what must be a hope and prayer as we no longer have any control over them; it is the chick out of the nest, the child off to college. Our words, these gangly bodies for our pure thoughts, now belong to that other person. He or she receives them, whether by ear or eye, takes them in, and must now begin the delicate, intricate task of decoding them. Their mind, like ours, has little use for mere words; it requires ideas in idea-form. So it attempts to perfectly trace our steps in reverse, to decode what we encoded. And can we really ever blame them for failing to achieve perfection? Perfect listening is a fool’s errand; perfect reading is hopeless. And yet, in the face of this impossible task, against these staggering odds, each and every day, billions of people in thousands of languages meaningfully communicate. To my mind, it is one of the most mesmerizing miracles this side of eternity.\u003c/p\u003e\n\n\u003cp\u003eIt saddens me, however, that so many people so often add to the burden, make the task that much more difficult, by shirking from communicating openly and honestly. Whether from shame or awkwardness, a twisted sense of propriety or an overly-tuned care for perfection, people consistently mince words, avoid topics, stop at smalltalk, or simply avoid the impossibly delicate dance of true and deep communication altogether. And, on the other side, how many people lazily and sloppily unpack the carefully considered package of meaning sent their way by a caring friend? Communication is hard, so why make it harder with slovenly listening or cheap talk? I would much rather slow down, consider well, package my thoughts carefully, listen empathetically, and dance the intricacies of meaningful communication.\u003c/p\u003e\n","type":"article"},{"title":"Thoughts on a Birthday","url":"/articles/thoughts-on-a-birthday/","content":"\u003cp\u003eI am 26 and as this, my 26th year, comes to a close I see that I have learned a lot.\u003c/p\u003e\n\n\u003cp\u003eI have learned how to truly cry–to give a thought, image, or emotion the space to breathe and grow and bubble up into my chest, and then to let that physical sensation extend and deepen as it struggles to find physical release in the form of tears, whether a slow sole tear or a mighty torrent.\u003c/p\u003e\n\n\u003cp\u003eI have learned the dedication needed for consistent mental and emotional health–that health, true health, requires asking for help, leaning on others, recognizing and accepting fault and responsibility, and living and communicating openly and honestly.\u003c/p\u003e\n\n\u003cp\u003eI have also learned that I can and do struggle with depression, with the ennui that seems to settle into your bones. Blessedly, however, I have also learned that there is a beauty within depression–that seeing, accepting, and being affected by the true brokenness of the world and the people in it is a signal of a depth of spirit that is a blessing.\u003c/p\u003e\n\n\u003cp\u003eI have learned that not all stories play out like the stories our culture or our minds tell us; some stories end abruptly, in some stories the “bad guy” “wins”, and some barely look like stories at all.\u003c/p\u003e\n\n\u003cp\u003eI have seen and felt the deep human desire to be truly seen and truly accepted, and I have seen and experienced the near-universal drive to receive this without ever giving it to others first or ever.\u003c/p\u003e\n\n\u003cp\u003eSuffice it to say, it has been quite the year.\u003c/p\u003e\n","type":"article"},{"title":"Evidentiary Arguments in 5th century prose","url":"/essays/empiricism-in-5th-century-prose/","content":"","type":"article"},{"title":"Ruminations on a Credal Logic","url":"/articles/ruminations-on-a-credal-logic/","content":"\u003cp\u003eHow do we understand our faith? More precisely, how do we reason deeply and precisely as faith-adherents? Or, perhaps most precisely, how might our faith shape our reason? Do we have a faith seeking the light of understanding, or a faith seeking out understanding with its light?\u003c/p\u003e\n\n\u003ch2 id=\"a-logical-primer\"\u003e0: A Logical Primer\u003c/h2\u003e\n\n\u003ch3 id=\"on-the-law-of-non-contradiction\"\u003e0.1: On the Law of Non-Contradiction\u003c/h3\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThe most certain of all basic principles is that contradictory propositions are not true simultaneously. (Aristotle, \u003cem\u003eMetaphysics\u003c/em\u003e 1011b13-14)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOne of the bedrocks of modern rationality, of contemporary logic, is the so-called \u003ca href=\"https://en.wikipedia.org/wiki/Law_of_noncontradiction\"\u003eLaw of Non-Contradiction\u003c/a\u003e (LNC), quoted above. A contradiction, expressed symbolically, is simply \u003ccode\u003eP \u0026amp; ~P\u003c/code\u003e; or, expressed logically, “the proposition \u003ccode\u003eP\u003c/code\u003e and its contradiction \u003ccode\u003enot-P\u003c/code\u003e”. This law of rationality states that no such contradictions can or do exist; that is, symbolically, \u003ccode\u003e~(P \u0026amp; ~P)\u003c/code\u003e, or logically, “it is not the case that both the proposition \u003ccode\u003eP\u003c/code\u003e and its contradiction \u003ccode\u003enot-P\u003c/code\u003e are both true (at the same time in the same way)”. The reason that this proposition \u003cem\u003emust be\u003c/em\u003e true, for the system of logic, is that \u003cem\u003eany\u003c/em\u003e contradiction allows for \u003cem\u003eany\u003c/em\u003e proposition to be logically deduced. Let’s quickly run through a logical argument that begins from a contradiction:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e1. All X is Y and not all X is Y            (P \u0026amp; ~P)\n2. All X is Y                               (P)\n    [by Conjunctive Elimination]\n3. Not all X is Y                           (~P)\n    [by Conjunctive Elimination]\n4. All X is Y or {something impossible}     (P v Q)\n    [by Disjunctive Introduction]\n5. {something impossible}                   (Q)\n    [by Disjunctive Syllogism]\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eGiven the logical rules for conjunctions (“and”/\u003ccode\u003e\u0026amp;\u003c/code\u003e) and disjunctions (“or”/\u003ccode\u003ev\u003c/code\u003e), any proposition (\u003ccode\u003eQ\u003c/code\u003e) can be logically deduced from a contradiction (\u003ccode\u003eP \u0026amp; ~P\u003c/code\u003e). This is the so-called “\u003ca href=\"https://en.wikipedia.org/wiki/Principle_of_explosion\"\u003ePrinciple of Explosion\u003c/a\u003e” (or “ECQ”, from its early Latin form \u003cem\u003eex contradictione (sequitur) quodlibet\u003c/em\u003e).\u003c/p\u003e\n\n\u003ch3 id=\"on-the-law-of-the-excluded-middle\"\u003e0.2: On the Law of the Excluded Middle\u003c/h3\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eIt is necessary for the affirmation or the negation to be true or false. (Aristotle, \u003cem\u003eOn Interpretation\u003c/em\u003e, 9.18a28-29)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eA corollary to the Law of Non-Contradiction is the so-called \u003ca href=\"https://en.wikipedia.org/wiki/Law_of_excluded_middle\"\u003eLaw of the Excluded Middle\u003c/a\u003e (LEM). Symbolically, it is represented as the disjunction \u003ccode\u003eP v ~P\u003c/code\u003e, logically, we could express it as “it is the case that either the proposition \u003ccode\u003eP\u003c/code\u003e is true or \u003ccode\u003enot-P\u003c/code\u003e is true”. I call it a corollary of the LNC because we can actually deduce its truth from the LNC. Consider: if it is true that \u003ccode\u003eP\u003c/code\u003e and \u003ccode\u003enot-P\u003c/code\u003e cannot both be true, then it is false that both \u003ccode\u003eP\u003c/code\u003e and \u003ccode\u003enot-P\u003c/code\u003e are both true. In order for a conjunction to be false, one of its conjucts must be false. Thus, either \u003ccode\u003eP\u003c/code\u003e or \u003ccode\u003enot-P\u003c/code\u003e must be false. Moreover, if \u003ccode\u003eP\u003c/code\u003e is false, then \u003ccode\u003enot-P\u003c/code\u003e is true; and, if \u003ccode\u003enot-P\u003c/code\u003e is false, then \u003ccode\u003eP\u003c/code\u003e is true. Thus, either \u003ccode\u003eP\u003c/code\u003e or \u003ccode\u003enot-P\u003c/code\u003e must be true. Symbolically, we might express that deduction as:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e1. ~(P \u0026amp; ~P) =\u0026gt; true\n2. P \u0026amp; ~P =\u0026gt; false\n3. (P =\u0026gt; false) v (~P =\u0026gt; false)\n4. (~P =\u0026gt; true) v (P =\u0026gt; true)\n5. P v ~P\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis principle of rational thought is called the “excluded middle” because it means that there is no middle ground between truth and falsity.\u003c/p\u003e\n\n\u003ch3 id=\"on-definite-descriptions\"\u003e0.3: On Definite Descriptions\u003c/h3\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eDenoting phrases never have any meaning in themselves, but every proposition in whose verbal expression they occur has a meaning. (Russell, “On Denoting”)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe LNC and the LEM are two of the three so-called “\u003ca href=\"https://en.wikipedia.org/wiki/Law_of_thought\"\u003eLaws of Thought\u003c/a\u003e” (the third (first really) is the \u003ca href=\"https://en.wikipedia.org/wiki/Law_of_identity\"\u003eLaw of Identity\u003c/a\u003e (\u003ccode\u003eA = A\u003c/code\u003e)). Whether we know it or not, whether we think about it or not, these principles undergird all of our thought. Yet even these foundational principles of rational thought are not without complications. The LEM, for example, was often criticized for failing to properly or fully handle propositions about non-existent subjects. Consider the proposition “All unicorns have horns”. The LEM compels us to state that either “All unicorns have horns” is true \u003cem\u003eor\u003c/em\u003e “All unicorns do not have horns” is true; yet, to state that either of these propositions is true would seem to imply that “unicorns” exist. One of the most famous and influential solutions to this problem is Bertrand Russell’s theory of \u003ca href=\"https://en.wikipedia.org/wiki/Definite_description\"\u003eDefinite Descriptions\u003c/a\u003e (“On Denoting”, 1905). In simplified form, Russell suggests that propositions of this sort (e.g. denoting propositions) should be considered logically as containing an implicit existential proposition. We might restate our proposition as “There exists at least one thing such that it is called ‘unicorn’ and it has a horn”. This is what we are really logically implying, in Russell’s view, when we assert that “All unicorns have horns”; that is, we assume the existence of our subject and then define it by describing it.\u003c/p\u003e\n\n\u003ch2 id=\"credal-propositions\"\u003e1: Credal Propositions\u003c/h2\u003e\n\n\u003ch3 id=\"faith-reason-and-truth-defined\"\u003e1.1: Faith, Reason, and Truth Defined\u003c/h3\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eWhat does Jerusalem have to do with Athens, the Church with the Academy, the Christian with the heretic? Our principles come from the Porch of Solomon. (Tertullian, \u003cem\u003ePrescriptions against Heretics\u003c/em\u003e 7)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThe question “What does Jerusalem have to do with Athens” is often abstracted to the form “What does \u003cem\u003efaith\u003c/em\u003e have to do with \u003cem\u003ereason\u003c/em\u003e”? But what do we mean by these terms? I believe that for many reason concerns itself with the realm of justified (or justifiable) belief and faith that of non-justified (or non-justifiable) belief. Both are, however, concerned primarily with \u003cem\u003ebelief\u003c/em\u003e, and thus with propositions. Moreover, for many, truth equates to \u003ca href=\"https://en.wikipedia.org/wiki/Justified_true_belief\"\u003ejustified true belief\u003c/a\u003e. However, insofar as truth is defined as justified true belief, faith is excluded from truth. And yet it is a foundational proposition of our faith that God is the source of all truth, is Truth itself. This is the first gap between a common understanding of faith, reason, and truth.\u003c/p\u003e\n\n\u003ch3 id=\"on-paradoxical-propositions-of-our-faith\"\u003e1.2: On Paradoxical Propositions of our Faith\u003c/h3\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eNo sooner do I conceive of the One than I am illumined by the splendour of the Three; no sooner do I distinguish Three than I am carried back into the One. When I think of any of the Three, I think of Him as the Whole, and my eyes are filled, and the greater part of what I am thinking escapes me. I cannot grasp the greatness of that One so as to attribute a greater greatness to the rest. When I contemplate the Three together, I see but one torch, and cannot divide or measure out the undivided light (Gregory of Nazianzus, \u003cem\u003eOrations\u003c/em\u003e 40.41)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eOne of the central propositions of our Christian faith is the Trinity; God is three and God is one. A central proposition concerning the nature of Jesus Christ is the Incarnation; Jesus is God and Jesus is man. These two foundations of the Christian faith are, in simplest form, paradoxes. Note, I call them “paradoxes” and not “contradictions”, for, where they “contradictions”, they would conflict with the LNC and stand in opposition to the foundations of human rationality. Indeed, there has been much effort of the thousands of years of Christian thought to show with clarity and adroitness that these and all articles of Christian faith are indeed rational. We need look no further than the work of the \u003ca href=\"https://en.wikipedia.org/wiki/Cappadocian_Fathers\"\u003eCappadocian Fathers\u003c/a\u003e in articulating the Trinity with respect to “substance” (\u003cem\u003eousia\u003c/em\u003e) and “persons” (\u003cem\u003ehypostaseis\u003c/em\u003e). Propositions of the Christian faith of this sort may \u003cem\u003eappear\u003c/em\u003e to be contradictions, but they are not; they are merely paradoxes, mysteries of the faith (\u003cem\u003emysteria fidei\u003c/em\u003e).\u003c/p\u003e\n\n\u003ch3 id=\"a-cartesian-re-assessment\"\u003e1.3: A Cartesian Re-Assessment\u003c/h3\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eFaith seeking understanding (St. Anselm)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eIn René Descartes’ \u003cem\u003eMeditations on First Philosophy\u003c/em\u003e, the philosopher begins by discarding all beliefs, all propositions, that he does not know for certain, and then attempts to build back up a system of beliefs by working systematically from what he can know for certain (\u003cem\u003ecogito ergo sum\u003c/em\u003e). One consequence of this methodical skepticism is that it immediately highlights the hierarchy of our beliefs. It separates the axioms from the theorems.\u003c/p\u003e\n\n\u003cp\u003eIt seems to me that with respect to articles of the Christian faith, the principles of reason are treated as axiomatic. We take pains to demonstrate how the mysteries of our faith adhere to the LNC, we struggle to articulate our terms and clarify our meaning, we shine the light of logic on these dark mysteries. And indeed, why should we not? The system of logic reflects the ordered, rational nature of God, does it not? Our minds are made in the image of God, are they not? Our faith should seek understanding in the light of logic, should it not?\u003c/p\u003e\n\n\u003ch2 id=\"a-christian-aetiology-of-epistemology\"\u003e2: A Christian Aetiology of Epistemology\u003c/h2\u003e\n\n\u003ch3 id=\"on-the-tree-of-the-knowledge-of-good-and-evil\"\u003e2.1: On the Tree of the Knowledge of Good and Evil\u003c/h3\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eBehold, the man has become like one of us in knowing good and evil. Now, lest he reach out his hand and take also of the tree of life and eat, and live forever. (\u003cem\u003eGenesis\u003c/em\u003e 3:22)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eEpistemology is at the center of the biblical narrative of the Fall. At the heart of Eden lie two trees: the Tree of Life and the Tree of the Knowledge of Good and Evil (Gen. 2:9). The first command God gives his human creation is “You may surely eat of every tree of the garden, but of the tree of the knowledge of good and evil you shall not eat, for in the day that you eat of it you shall surely die” (Gen. 2:16b-17). And it is, of course, this Tree of the Knowledge of Good and Evil that Eve and Adam eat from, and “[their] eyes were both opened” (Gen. 3:7a).\u003c/p\u003e\n\n\u003cp\u003eNow, the story of the Fall is rich with meaning, and there is much to be said and learned from it; however, I fear that the epistemic implications of this narrative are too often underconsidered. Whatever “knowledge of good and evil” might mean–experiential knowledge, a merism for knowledge generically, moral knowledge, etc–it is epistemic definitionally. Before the Fall the nature of knowledge, of reason, was in one state; and, after the Fall, it was in another. I believe this simply must be true, even if the delta is as simple as pre-Fall humanity did not have propositional knowledge of the concepts “good” and “evil”, and post-Fall they did. The Fall, among its many consequences, represents a state change in human knowing.\u003c/p\u003e\n\n\u003cp\u003eThough we cannot know with any confidence what the epistemic state change was, I offer the following as my interpretation.\u003c/p\u003e\n\n\u003ch3 id=\"on-binary-thinking\"\u003e2.2: On Binary Thinking\u003c/h3\u003e\n\n\u003cp\u003eI have always been fascinated by the fact that two of the most foundational axioms of logic concern contradictions. While the LNC and the LEM certainly strike the mind as intuitive, it is difficult to articulate a reason why these two propositions \u003cem\u003emust be\u003c/em\u003e foundational for thought. What is it about contradictions that proves so intuitively foundational to us? Well, for one, contradictions are logically-exhaustive binaries. If we think in terms of sets, \u003ccode\u003eS\u003c/code\u003e and \u003ccode\u003enot-S\u003c/code\u003e, regardless of the definition of \u003ccode\u003eS\u003c/code\u003e, would account for any and all \u003ccode\u003ex\u003c/code\u003e. Building a logical system atop logically-exhaustive entities must be more effective and efficient than the alternative (behold! another logically-exhaustive binary). In addition, contradictions make use of nothing but negation, a primitive logical operator in basically all propositional logical systems. Few movements of the mind would appear to come as naturally to the human person as negation. Yet again, however, we might ask, why? Why is negation a movement of the mind at all? Why is it so basic? Why are we seemingly drawn to the contradictions negation so easily creates?\u003c/p\u003e\n\n\u003cp\u003eWell, I’m inclined to think that some part of the answer lies in the Genesis account of the Fall. To have eaten of the Tree of the Knowledge of Good and Evil was to ground “knowledge” upon binaries, of the sort “good and evil”. To have eaten of the Tree of the Knowledge of Good and Evil was to have introduced analytical thinking (in the etymological sense, “thinking that separates”). To have eaten of the Tree of the Knowledge of Good and Evil was to have made negation a primitive logical operation (“good and evil” logically equaling “good and not-good”).\u003c/p\u003e\n\n\u003ch2 id=\"a-credal-logic\"\u003e3: A Credal Logic\u003c/h2\u003e\n\n\u003cp\u003eNow, none of this is to suggest that analytical thinking, negation, or binaries are “bad” or “wrong” or even “inferior” to anything. They are a necessary aspect of epistemology, of logic. However, this particular aetiology of epistemology, for me at least, opens up another gap between faith and reason. Faith is built on top of propositions of the (simplified) sort: \u003ccode\u003e3 = 1\u003c/code\u003e or \u003ccode\u003e100 + 100 = 100\u003c/code\u003e; reason is built on top of propositions of the sort: \u003ccode\u003e(3 = 3)\u003c/code\u003e, and \u003ccode\u003e(1 = 1)\u003c/code\u003e, and \u003ccode\u003e(3 ~= 1)\u003c/code\u003e. No matter what we do, there will always between tension between faith and reason; certain credal propositions of faith will always \u003cem\u003eat best\u003c/em\u003e be paradoxes in the light of reason. The question, to my mind, then becomes: in which direction is that tension resolved? Put another way, what does it mean for faith to seek understanding? Do we seek to understand our faith in the light of logical reason, or do we seek to understand our logical reason in light of our faith? I believe there is great value to be found in the latter, but what does that even look like?\u003c/p\u003e\n\n\u003cp\u003eFirst, let our credal logic begin from paradox and end in paradox. Instead of looking to resolve the paradoxes in the mysteries of our faith, to find refuge by demonstrating the ways, means, and degrees to which they are not contradictions, let us instead look to explore the paradoxes, their shape, nature, and edges.\u003c/p\u003e\n\n\u003ch3 id=\"and-the-trinity\"\u003e3.1: 1 = 0.9999… and the Trinity\u003c/h3\u003e\n\n\u003cp\u003eIn an overly-simplified mathematical form, we might represent the propositional content of the Trinity as the paradoxical \u003ccode\u003e3 = 1\u003c/code\u003e. This is a paradox of identity. In looking to explore this paradox, we might turn to a particular mathematical paradox of identity: \u003ccode\u003e1 = 0.9999...\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4 id=\"section\"\u003e3.1.1: 1 = 0.9999…\u003c/h4\u003e\n\n\u003cp\u003eTo begin, let me prove this identity statement:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# Define the infinitely-repeating decimal as a variable\u003c/span\u003e\nk \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.9999...\n\u003cspan class=\"c\"\u003e# Multiply both sides of the equation by 10\u003c/span\u003e\n10k \u003cspan class=\"o\"\u003e=\u003c/span\u003e 9.9999...\n\u003cspan class=\"c\"\u003e# Subtract the larger portions by the smaller portions\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e10k - k\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e9.9999... - 0.9999...\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# Since the infinitely-repeating decimals are both infinitely long,\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# subtraction cancels them out\u003c/span\u003e\n9k \u003cspan class=\"o\"\u003e=\u003c/span\u003e 9\n\u003cspan class=\"c\"\u003e# Divide both sides of the equation by 9\u003c/span\u003e\nk \u003cspan class=\"o\"\u003e=\u003c/span\u003e 1\n\u003cspan class=\"c\"\u003e# Replace k with our original identity\u003c/span\u003e\n1 \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.9999...\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow, this proof may perhaps feel a bit fishy to you; you may think that we are mathematically cheating somewhere, but I can promise you that every single step is totally valid. And if every step is totally valid, then the conclusion is valid. But how can this be and what does this mean?\u003c/p\u003e\n\n\u003cp\u003eThis “problem”, this seeming incongruity, arises because we have a hard time grappling with infinity. To put it another way, we underestimate the weight of that ellipsis. So let’s dig into that ellipsis a bit. What does \u003ccode\u003e0.9999...\u003c/code\u003e really mean, really represent? Well, we all remember from elementary school that decimals can also be represented by fractions, so let’s try to represent this decimal by a fraction. Unfortunately, there is no simple fraction to represent this number (like \u003ccode\u003e0.3333...\u003c/code\u003e being representable by \\(\\frac{1}{3}\\)). However, we can break this decimal down. We know that \u003ccode\u003e0.9\u003c/code\u003e is simply \\(\\frac{9}{10}\\), and \u003ccode\u003e0.09\u003c/code\u003e is \\(\\frac{9}{100}\\), and \u003ccode\u003e0.009\u003c/code\u003e is \\(\\frac{9}{1000}\\) and so on. We also know that \u003ccode\u003e0.9 + 0.09 + 0.009 = 0.999\u003c/code\u003e. So, we could represent \u003ccode\u003e0.9999...\u003c/code\u003e fractionally as:\u003c/p\u003e\n\n\u003cscript type=\"math/tex; mode=display\"\u003e\\frac{9}{10} + \\frac{9}{100} + \\frac{9}{1000} + \\frac{9}{10000} + \\ldots\u003c/script\u003e\n\n\u003cp\u003eIn mathematics, this is called an \u003ca href=\"http://www.waldron-math.com/BCCalculus/ClassNotes/Ch9/9.1_Infinite%20Series.pdf\"\u003e\u003cem\u003einfinite sum\u003c/em\u003e\u003c/a\u003e or an \u003cem\u003einfinite series\u003c/em\u003e; we are adding terms together to infinity. If you recall from your high school math class, you can represent an infinite sum with what is called \u003cstrong\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Summation#Capital-sigma_notation\"\u003esigma notation\u003c/a\u003e\u003c/strong\u003e, and our infinite sum above can be represented as:\u003c/p\u003e\n\n\u003cscript type=\"math/tex; mode=display\"\u003e\\sum_{n=1}^{\\infty} \\frac{9}{10^n}\u003c/script\u003e\n\n\u003cp\u003eThis is simply a more concise way of writing the larger sum of the fractions above.\u003c/p\u003e\n\n\u003cp\u003eInfinite sums are truly fascinating, and I hope to write more about them in the future, but for now I want to focus on one characteristic in particular. All infinite sums fit into one of two categories: \u003cem\u003econvergent\u003c/em\u003e or \u003cem\u003edivergent\u003c/em\u003e. Now, these are math-jargon terms that mean relatively simple things. An infinite sum is \u003cem\u003econvergent\u003c/em\u003e if it converges on a finite number. The language you might remember from your calculus class is that the \u003cem\u003elimit\u003c/em\u003e of the infinite sum \u003cem\u003eapproaches\u003c/em\u003e a finite number. So, a \u003cem\u003econvergent infinite sum\u003c/em\u003e is an infinity that touches the finite. In contrast, a \u003cem\u003edivergent infinite sum\u003c/em\u003e is one that has no limit, one that grows to infinity. A stock example is\u003c/p\u003e\n\n\u003cscript type=\"math/tex; mode=display\"\u003e\\sum_{n=1}^{\\infty} \\frac{1}{n}\u003c/script\u003e\n\n\u003cp\u003eor\u003c/p\u003e\n\n\u003cscript type=\"math/tex; mode=display\"\u003e1 + \\frac{1}{2} + \\frac{1}{3} + \\frac{1}{4} + \\ldots\u003c/script\u003e\n\n\u003cp\u003eThis is an infinite sum that approaches infinity, that is, it \u003cem\u003ediverges\u003c/em\u003e, it does not have a finite limit, it is unbounded.\u003c/p\u003e\n\n\u003cp\u003eReturning to our infinite sum, we have enough context now to see that saying \u003ccode\u003e1 = 0.9999...\u003c/code\u003e is really just one way of saying that the summation of \\(\\frac{9}{10^n}\\) as \u003ccode\u003en\u003c/code\u003e goes from 1 to infinity is a convergent infinite sum that converges on 1.\u003c/p\u003e\n\n\u003ch4 id=\"on-infinity-touching-the-finite\"\u003e3.1.2: On Infinity touching the Finite\u003c/h4\u003e\n\n\u003cp\u003eParadoxes abound when the infinite collides with the finite. On the one hand, it is quite clear that \u003ccode\u003e1\u003c/code\u003e \u003cem\u003edoes not equal\u003c/em\u003e \u003ccode\u003e0.9999...\u003c/code\u003e for the simple reason that \u003ccode\u003e1\u003c/code\u003e is a finite integer and \u003ccode\u003e0.9999...\u003c/code\u003e is an infinite series. If \u003cem\u003eequality\u003c/em\u003e is \u003cem\u003ecategorical identity\u003c/em\u003e, then \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e0.9999...\u003c/code\u003e are not equal. On the other hand, this whole post has shown that \u003ccode\u003e1\u003c/code\u003e \u003cem\u003edoes equal\u003c/em\u003e \u003ccode\u003e0.9999...\u003c/code\u003e. If \u003cem\u003eequality\u003c/em\u003e is \u003cem\u003ereferrential identity\u003c/em\u003e, then \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e0.9999...\u003c/code\u003e are equal. Now, note that I call this a paradox and not an antinomy. I want to define these two terms clearly and distinguish them.\u003c/p\u003e\n\n\u003cp\u003eIn my parlance, a \u003cstrong\u003eparadox\u003c/strong\u003e is a \u003cem\u003eseeming\u003c/em\u003e contradiction, while an \u003cstrong\u003eantinomy\u003c/strong\u003e is an \u003cem\u003eactual\u003c/em\u003e contradiction; that is, a paradox is resolvable and an antinomy is not. It is important, however, to note that resolving a paradox \u003cem\u003edoes not\u003c/em\u003e mean that one side “wins” and the other “loses”, that one proposition is “right” and the other is “wrong”; instead, it means that we can rationally make sense of the difference between the two propositions. This is why I used the if-then statements above. It is not that one of the propositions is “right” or “wrong”, it is that we can enumerate the conditions under which each one would be “right” and the other “wrong”. An antinomy does not submit itself to such enumeration; we cannot articulate the conditions under which one side is “right” and the other is “wrong”. So, if I were to abstract out my definitions of \u003cem\u003eparadoxes\u003c/em\u003e and \u003cem\u003eantinomies\u003c/em\u003e, I would describe them thusly:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eA paradox is composed of a proposition (\u003ccode\u003eP\u003c/code\u003e) and its negation (\u003ccode\u003enot-P\u003c/code\u003e) such that the conditionals “if \u003ccode\u003econditions for P\u003c/code\u003e, then \u003ccode\u003eP\u003c/code\u003e” and “if \u003ccode\u003econditions for not-P\u003c/code\u003e, then \u003ccode\u003enot-P\u003c/code\u003e” are both true, and thus the conjunction “if \u003ccode\u003econditions for P\u003c/code\u003e, then \u003ccode\u003eP\u003c/code\u003e and if \u003ccode\u003econditions for not-P\u003c/code\u003e, then \u003ccode\u003enot-P\u003c/code\u003e” is also true.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eAn antinomy is composed of a proposition (\u003ccode\u003eP\u003c/code\u003e) and its negation (\u003ccode\u003enot-P\u003c/code\u003e) such that there are no conditions for \u003ccode\u003eP\u003c/code\u003e or \u003ccode\u003enot-P\u003c/code\u003e and the conjunction “\u003ccode\u003eP\u003c/code\u003e and \u003ccode\u003enot-P\u003c/code\u003e” is true.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eAfter exploring a convergent infinite sums, we have a clearer understanding of identity paradoxes like \u003ccode\u003e1 = 0.9999... and 1 != 0.9999...\u003c/code\u003e. If we express that proposition in the form of the paradox explained above, we would express that proposition as “if equality means referential indentiy, then 1 = 0.9999… and if equality means categorical identity, then 1 != 0.9999…”.\u003c/p\u003e\n\n\u003ch4 id=\"section-1\"\u003e3.1.3: 3 = 1\u003c/h4\u003e\n\n\u003cp\u003eWe could now return to the Trinity and see that the orthodox articulation of this article of faith maps well onto this understanding of the shape of an identity paradox. We might recast the Cappadocian Fathers’ articulation of the Trinity as a proposition in the form: “if identity is defined by essence, then God is one and if identity is defined by person, then God is three”.\u003c/p\u003e\n\n\u003ch4 id=\"on-denotation\"\u003e3.1.4: On Denotation\u003c/h4\u003e\n\n\u003cp\u003eOne consequence of this approach to paradoxical identity statements is an analytical approach similar to Russell’s definite descriptions. Where definite descriptions analyze the subject of a proposition into an existential proposition, this method analyzes the verb of a proposition into a meaning-centric conditional.\u003c/p\u003e\n\n\u003ch3 id=\"wave-particle-duality-and-the-incarnation\"\u003e3.2: Wave-Particle Duality and the Incarnation\u003c/h3\u003e\n\n\u003cp\u003eFor now, how about we leave this as an exercise for the reader? ;)\u003c/p\u003e\n\n\u003ch2 id=\"ruminating\"\u003e4: Ruminating\u003c/h2\u003e\n\n\u003cp\u003eI cannot help but to feel that there is a value in pursuing a “credal logic”, in exploring the myriad ways that the propositions undergirding our faith illuminate ways of thinking that deepen “standard logic”. Moreover, it seems to me to be the case that these ways of thinking found in and through credal propositions align profoundly with various “secular” rationalities. All truth is indeed God’s truth. Finally, I am convinced that pushing against the boundaries of binary thinking is healthy, not only for the Christian, but for the human.\u003c/p\u003e\n\n\u003cp\u003eHowever, I believe that in one respect the Christian has an opportunity the non-Christian does not. The non-Christian, it seems to me, can never move beyond the boundaries of binary thinking and retain “rational” thinking; they can push but never break. The Christian, however, may very well be able to be “rational” without binary thinking. Or, to put it more concretely, it might simply be the case that God is three and one, that God is a contradiction, that Christ is a contradiction. It might be the case that when the infinity that is the divine intersects the finite that is this reality, contradictions arise (and not mere paradoxes). And, it might be the case that through faith, through revelation, we have the ability to think “rationally” with a credal logic grounded on contradictions. It might be the case…\u003c/p\u003e\n\n","type":"article"},{"title":"1 = 0.9999...","url":"/articles/1-0-9999/","content":"\u003cp\u003eI saw a wonderful video recently on an odd fact in mathematics:\u003c/p\u003e\n\n\u003cp\u003e\u003ca title=\"9.999... really is equal to 10\" href=\"http://www.youtube.com/watch?v=SDtFBSjNmm0\"\u003e\u003cimg alt=\"9.999... really is equal to 10 -- Mathologer\" src=\"http://img.youtube.com/vi/SDtFBSjNmm0/0.jpg\" /\u003e\u003c/a\u003e\u003c/p\u003e\n\n\u003cp\u003eIn the video (from a channel I would heartily recommend), the presenter offers a proof that \u003ccode\u003e10 = 9.9999...\u003c/code\u003e. Here the ellipsis is quite important, as it communicates that the \u003ccode\u003e9\u003c/code\u003es continue on \u003cem\u003eforever\u003c/em\u003e, that is, to infinity. So, \u003ccode\u003e9.9\u003c/code\u003e followed by an infinite number of \u003ccode\u003e9\u003c/code\u003es fully and simply equals \u003ccode\u003e10\u003c/code\u003e. I want to explore the proof for this fact and then move on to explore how this example of an infinity touching the finite might elucidate our understanding of paradoxes.\u003c/p\u003e\n\n\u003cp\u003eSo, the video is concerned with \u003ccode\u003e10 = 9.9999...\u003c/code\u003e, but I want to take it down a notch and think about \u003ccode\u003e1 = 0.9999...\u003c/code\u003e. Borrowing the proof from the video, we can show that this identity statement is true relatively simply:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# Define the infinitely-repeating decimal as a variable\u003c/span\u003e\nk \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.9999...\n\u003cspan class=\"c\"\u003e# Multiply both sides of the equation by 10\u003c/span\u003e\n10k \u003cspan class=\"o\"\u003e=\u003c/span\u003e 9.9999...\n\u003cspan class=\"c\"\u003e# Subtract the larger portions by the smaller portions\u003c/span\u003e\n\u003cspan class=\"o\"\u003e(\u003c/span\u003e10k - k\u003cspan class=\"o\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"o\"\u003e(\u003c/span\u003e9.9999... - 0.9999...\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# Since the infinitely-repeating decimals are both infinitely long,\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# subtraction cancels them out\u003c/span\u003e\n9k \u003cspan class=\"o\"\u003e=\u003c/span\u003e 9\n\u003cspan class=\"c\"\u003e# Divide both sides of the equation by 9\u003c/span\u003e\nk \u003cspan class=\"o\"\u003e=\u003c/span\u003e 1\n\u003cspan class=\"c\"\u003e# Replace k with our original identity\u003c/span\u003e\n1 \u003cspan class=\"o\"\u003e=\u003c/span\u003e 0.9999...\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow, this proof may perhaps feel a bit fishy to you; you may think that we are mathematically cheating somewhere, but I can promise you that every single step is totally valid. And if every step is totally valid, then the conclusion is valid. But how can this be and what does this mean?\u003c/p\u003e\n\n\u003cp\u003eThis “problem”, this seeming incongruity, arises because we have a hard time grappling with infinity. To put it another way, we underestimate the weight of that ellipsis. So let’s dig into that ellipsis a bit. What does \u003ccode\u003e0.9999...\u003c/code\u003e really mean, really represent? Well, we all remember from elementary school that decimals can also be represented by fractions, so let’s try to represent this decimal by a fraction. Unfortunately, there is no simple fraction to represent this number (like \u003ccode\u003e0.3333...\u003c/code\u003e being representable by \\(\\frac{1}{3}\\)). However, we can break this decimal down. We know that \u003ccode\u003e0.9\u003c/code\u003e is simply \\(\\frac{9}{10}\\), and \u003ccode\u003e0.09\u003c/code\u003e is \\(\\frac{9}{100}\\), and \u003ccode\u003e0.009\u003c/code\u003e is \\(\\frac{9}{1000}\\) and so on. We also know that \u003ccode\u003e0.9 + 0.09 + 0.009 = 0.999\u003c/code\u003e. So, we could represent \u003ccode\u003e0.9999...\u003c/code\u003e fractionally as:\u003c/p\u003e\n\n\u003cscript type=\"math/tex; mode=display\"\u003e\\frac{9}{10} + \\frac{9}{100} + \\frac{9}{1000} + \\frac{9}{10000} + \\ldots\u003c/script\u003e\n\n\u003cp\u003eIn mathematics, this is called an \u003cem\u003einfinite sum\u003c/em\u003e or an \u003cem\u003einfinite series\u003c/em\u003e; we are adding terms together to infinity. If you recall from your high school math class, you can represent an infinite sum with what is called \u003cstrong\u003e\u003ca href=\"https://en.wikipedia.org/wiki/Summation#Capital-sigma_notation\"\u003esigma notation\u003c/a\u003e\u003c/strong\u003e, and our infinite sum above can be represented as:\u003c/p\u003e\n\n\u003cscript type=\"math/tex; mode=display\"\u003e\\sum_{n=1}^{\\infty} \\frac{9}{10^n}\u003c/script\u003e\n\n\u003cp\u003eThis is simply a more concise way of writing the larger sum of the fractions above.\u003c/p\u003e\n\n\u003cp\u003eInfinite sums are truly fascinating, and I hope to write more about them in the future, but for now I want to focus on one characteristic in particular. All infinite sums fit into one of two categories: \u003cem\u003econvergent\u003c/em\u003e or \u003cem\u003edivergent\u003c/em\u003e. Now, these are math-jargon terms that mean relatively simple things. An infinite sum is \u003cem\u003econvergent\u003c/em\u003e if it converges on a finite number. The language you might remember from your calculus class is that the \u003cem\u003elimit\u003c/em\u003e of the infinite sum \u003cem\u003eapproaches\u003c/em\u003e a finite number. So, a \u003cem\u003econvergent infinite sum\u003c/em\u003e is an infinity that touches the finite. In contrast, a \u003cem\u003edivergent infinite sum\u003c/em\u003e is one that has no limit, one that grows to infinity.\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e A stock example is\u003c/p\u003e\n\n\u003cscript type=\"math/tex; mode=display\"\u003e\\sum_{n=1}^{\\infty} \\frac{1}{n}\u003c/script\u003e\n\n\u003cp\u003eor\u003c/p\u003e\n\n\u003cscript type=\"math/tex; mode=display\"\u003e1 + \\frac{1}{2} + \\frac{1}{3} + \\frac{1}{4} + \\ldots\u003c/script\u003e\n\n\u003cp\u003eThis is an infinite sum that approaches infinity, that is, it \u003cem\u003ediverges\u003c/em\u003e, it does not have a finite limit, it is unbounded.\u003c/p\u003e\n\n\u003cp\u003eReturning to our infinite sum, we have enough context now to see that saying \u003ccode\u003e1 = 0.9999...\u003c/code\u003e is really just one way of saying that the summation of \\(\\frac{9}{10^n}\\) as \u003ccode\u003en\u003c/code\u003e goes from 1 to infinity is a convergent infinite sum that converges on 1.\u003c/p\u003e\n\n\u003cp\u003eOk, so that was a fun romp through one fascinating branch of mathematics, but all we really did was gain enough context to state the “odd fact” in more precise mathematical language. What’s the point? I stated at the beginning that I was fascinated by some of the general ramifications of infinity touching the finite. What we have with convergent infinite sums are well-studied mathematical examples of precisely this phenomenon. And I find them so fascinating because they offer glimpses at some of the issues we face when thinking about infinity. However, they also show us that we \u003cem\u003ecan\u003c/em\u003e think well about infinity.\u003c/p\u003e\n\n\u003cp\u003eThe implication I’d like to explore a bit now is that paradoxes abound when the infinite colliding with the finite. On the one hand, it is quite clear that \u003ccode\u003e1\u003c/code\u003e \u003cem\u003edoes not equal\u003c/em\u003e \u003ccode\u003e0.9999...\u003c/code\u003e for the simple reason that \u003ccode\u003e1\u003c/code\u003e is a finite integer and \u003ccode\u003e0.9999...\u003c/code\u003e is an infinite series. If \u003cem\u003eequality\u003c/em\u003e is \u003cem\u003ecategorical identity\u003c/em\u003e, then \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e0.9999...\u003c/code\u003e are not equal. On the other hand, this whole post has shown that \u003ccode\u003e1\u003c/code\u003e \u003cem\u003edoes equal\u003c/em\u003e \u003ccode\u003e0.9999...\u003c/code\u003e. If \u003cem\u003eequality\u003c/em\u003e is \u003cem\u003ereferrential identity\u003c/em\u003e, then \u003ccode\u003e1\u003c/code\u003e and \u003ccode\u003e0.9999...\u003c/code\u003e are equal. Now, note that I call this a paradox and not an antinomy. I want to define these two terms clearly and distinguish them. In my parlance, a \u003cstrong\u003eparadox\u003c/strong\u003e is a \u003cem\u003eseeming\u003c/em\u003e contradiction, while an \u003cstrong\u003eantinomy\u003c/strong\u003e is an \u003cem\u003eactual\u003c/em\u003e contradiction; that is, a paradox is resolvable and an antinomy is not.\u003c/p\u003e\n\n\u003cp\u003eIt is important, however, to note that resolving a paradox \u003cem\u003edoes not\u003c/em\u003e mean that one side “wins” and the other “loses”, that one proposition is “right” and the other is “wrong”; instead, it means that we can rationally make sense of the difference between the two propositions. This is why I used the if-then statements above. It is not that one of the propositions is “right” or “wrong”, it is that we can enumerate the conditions under which each one would be “right” and the other “wrong”. An antinomy does not submit itself to such enumeration; we cannot articulate the conditions under which one side is “right” and the other is “wrong”. So, if I were to abstract out my definitions of \u003cem\u003eparadoxes\u003c/em\u003e and \u003cem\u003eantinomies\u003c/em\u003e, I would describe them thusly:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eA paradox is composed of a proposition (\u003ccode\u003eP\u003c/code\u003e) and its negation (\u003ccode\u003enot-P\u003c/code\u003e) such that the conditionals “if \u003ccode\u003econditions for P\u003c/code\u003e, then \u003ccode\u003eP\u003c/code\u003e” and “if \u003ccode\u003econditions for not-P\u003c/code\u003e, then \u003ccode\u003enot-P\u003c/code\u003e” are both true, and thus the conjunction “if \u003ccode\u003econditions for P\u003c/code\u003e, then \u003ccode\u003eP\u003c/code\u003e and if \u003ccode\u003econditions for not-P\u003c/code\u003e, then \u003ccode\u003enot-P\u003c/code\u003e” is also true.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eAn antinomy is composed of a proposition (\u003ccode\u003eP\u003c/code\u003e) and its negation (\u003ccode\u003enot-P\u003c/code\u003e) such that there are no conditions for \u003ccode\u003eP\u003c/code\u003e or \u003ccode\u003enot-P\u003c/code\u003e and the conjunction “\u003ccode\u003eP\u003c/code\u003e and \u003ccode\u003enot-P\u003c/code\u003e” is true.\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e2\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eI believe that paradoxes run deep in our world. I have written earlier on my neologism \u003ca href=\"http://fractaledmind.com/articles/conjunctive-binarism\"\u003e“conjunctive binarism”\u003c/a\u003e, a view that truth is probably most closely articulated as “the proposition \u003ccode\u003eP\u003c/code\u003e and its contradiction \u003ccode\u003e¬P\u003c/code\u003e are \u003cem\u003ekinda\u003c/em\u003e both true”. After exploring a convergent infinite sums, I feel that this definition of paradoxes more properly expresses my view of what this “kinda” maps to. So, \u003ccode\u003e1 = 0.9999... and 1 != 0.9999...\u003c/code\u003e is a “conjunctive binary”. If we express it in the form of the paradox explained above, we would express that proposition as “if equality means referential indentiy, then 1 = 0.9999… and if equality means categorical identity, then 1 != 0.9999…”. Going one step further, I would now define a conjunctive binary as a compound proposition of that form (“if \u003ccode\u003econditions for P\u003c/code\u003e, then \u003ccode\u003eP\u003c/code\u003e and if \u003ccode\u003econditions for not-P\u003c/code\u003e, then \u003ccode\u003enot-P\u003c/code\u003e”).\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:2\"\u003e\n\n      \u003cp\u003eWell, that is not properly technically true, as there are some divergent series that do not tend to infinity, but are also clearly not convergent. Take \u003ccode\u003e1 − 1 + 1 − 1 + ⋯\u003c/code\u003e. This is the so-called \u003ca href=\"https://en.wikipedia.org/wiki/Grandi%27s_series\"\u003eGrandi’s series\u003c/a\u003e, and if you attempt to resolve it using partial sums, you will quickly see that the value ocillates between \u003ccode\u003e1\u003c/code\u003e (when the number of terms in the partial sum is odd) and \u003ccode\u003e0\u003c/code\u003e (when the number of terms in the partial sum is even). However, modern mathematics defines its sum as \\(\\frac{1}{2}\\), which is a finite term (thus it would appear to “converge” on \\(\\frac{1}{2}\\)). Thus, this series would appear to have two conclusions:\u003c/p\u003e\n\n      \u003col\u003e\n        \u003cli\u003eThe series 1 − 1 + 1 − 1 + ⋯ has no sum.\u003c/li\u003e\n        \u003cli\u003eIts sum should be \\(\\frac{1}{2}\\).\u003c/li\u003e\n      \u003c/ol\u003e\n\n      \u003cp\u003eI find this infinite series fascinating, and may very well write it about at some point as well. \u003ca href=\"#fnref:2\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eThere is a branch of epistemology that believes such conjections do exist and calls them “dialetheias”. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"Portrait of Pain","url":"/articles/portrait-of-pain/","content":"\u003cp\u003eShe swipes from right to left, the red square appearing and then disappearing, along with the words. Five minutes later, caught initially in my peripheral vision, the red square again.\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eWhy did you delete those message tonight?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eWhat do you mean?\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eYou got a couple messages, and after reading them, you deleted the thread. I’m just curious why.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eI don’t know what you’re talking about.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eI wasn’t paying close attention, but I swear I saw the read delete and you delete the thread.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eIt must have been something else. I didn’t delete any message threads.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis is the first time she lies to my face and I know it. I learn she lies frequently. Past, present, and future are littered. But today is the one time I know she is lying. It’s confusing more than painful. The pain comes later.\u003c/p\u003e\n\n\u003cp\u003eIt’s a double-sided pain. First, the sting; she … lies … to me. Subject, verb, object. She’s an active force, I’m an object. And I feel like an object. Do I not warrant the truth? Am I not person enough that she can look into my eyes and tell me the lie? I am less then–I am inanimate, I am the object of her verb. After the sting comes the ache. A second pain and a different pain. Here I am the subject. I believed. Not this one time, but every other time. And even this one time, I almost believed. She doesn’t lie; people don’t lie. Not to your face, not to your eyes. Do eyes lie? Did the red square lie? The pain of foolishness, of naivete. It is a deep, aching pain. It hurts so deeply because it ought not to be true. I want to be that fool; I want the world to allow it. Look me in the eye and tell me the truth. Let me believe you; let me see you.\u003c/p\u003e\n\n\u003cp\u003eShe lies. Then the sting. Now the ache.\u003c/p\u003e\n","type":"article"},{"title":"An Example of an ERB Component","url":"/articles/an-example-of-an-erb-component/","content":"\u003cp\u003eIn a \u003ca href=\"http://fractaledmind.com/articles/a-function-for-generating-html-attribute-values/\"\u003eprevious post\u003c/a\u003e I discussed my need for a flexible function for generating values to pass into the HTML attribute options hash of the \u003ccode\u003econtent_tag\u003c/code\u003e helper. In this post, I want to discuss one particular context in which I needed the \u003ccode\u003emeld\u003c/code\u003e method.\u003c/p\u003e\n\n\u003cp\u003eFor one particular work project I found myself building a few “ERB components”, that is, ERB partials that had some flexibility around their HTML output via params passed on \u003ccode\u003erender\u003c/code\u003e. In one specific example, I was building a simple partial for rendering a key-value pair. I was using the description list HTML element (\u003ccode\u003edl\u003c/code\u003e), but I wanted the flexibility to have the entry render \u003cem\u003eeither\u003c/em\u003e as a “column” \u003cem\u003eor\u003c/em\u003e as a “row”, e.g.:\u003c/p\u003e\n\n\u003ch4 id=\"column-entry\"\u003eColumn Entry\u003c/h4\u003e\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e  Key\n value\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch4 id=\"row-entry\"\u003eRow Entry\u003c/h4\u003e\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eKey  value\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSo, I wanted one ERB partial where I could get either output based on params passed to the \u003ccode\u003erender\u003c/code\u003e call of that partial.\u003c/p\u003e\n\n\u003cp\u003eUsing Bootstrap 4, I know how I wanted the HTML for each entry to look:\u003c/p\u003e\n\n\u003ch4 id=\"column-entry-1\"\u003eColumn Entry\u003c/h4\u003e\n\u003cdiv class=\"highlight html\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"nt\"\u003e\u0026lt;dl\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"text-center my-0\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;dt\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eKey\u003cspan class=\"nt\"\u003e\u0026lt;/dt\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;dd\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003evalue\u003cspan class=\"nt\"\u003e\u0026lt;/dd\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/dl\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch4 id=\"row-entry-1\"\u003eRow Entry\u003c/h4\u003e\n\u003cdiv class=\"highlight html\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"nt\"\u003e\u0026lt;dl\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"d-flex my-0\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;dt\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"col-4\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eKey\u003cspan class=\"nt\"\u003e\u0026lt;/dt\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;dd\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"col\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003evalue\u003cspan class=\"nt\"\u003e\u0026lt;/dd\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/dl\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSo, I could write some aspirational ERB for how I would like the partial to work:\u003c/p\u003e\n\n\u003cdiv class=\"highlight erb\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003econtent_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:dl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003eprops_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:entry\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003econtent_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:dt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003eprops_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:key\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:key\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\n  \u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003econtent_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:dd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003eprops_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:value\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:value\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eI then could also write some aspirational \u003ccode\u003erender\u003c/code\u003e calls:\u003c/p\u003e\n\n\u003ch4 id=\"column-entry-2\"\u003eColumn Entry\u003c/h4\u003e\n\u003cdiv class=\"highlight erb\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003erender\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'entry'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"ss\"\u003ekey: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'Key'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003evalue: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'value'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"ss\"\u003eprops: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n             \u003cspan class=\"ss\"\u003eentry: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eclass: \u003c/span\u003e\u003cspan class=\"sx\"\u003e%[text-center my-0]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n             \u003cspan class=\"ss\"\u003ekey: \u003c/span\u003e\u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n             \u003cspan class=\"ss\"\u003evalue: \u003c/span\u003e\u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n           \u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch4 id=\"row-entry-2\"\u003eRow Entry\u003c/h4\u003e\n\u003cdiv class=\"highlight erb\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003erender\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'entry'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"ss\"\u003ekey: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'Key'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003evalue: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'value'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"ss\"\u003eprops: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n             \u003cspan class=\"ss\"\u003eentry: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eclass: \u003c/span\u003e\u003cspan class=\"sx\"\u003e%[d-flex my-0]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n             \u003cspan class=\"ss\"\u003ekey: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eclass: \u003c/span\u003e\u003cspan class=\"sx\"\u003e%[col-4]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n             \u003cspan class=\"ss\"\u003evalue: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eclass: \u003c/span\u003e\u003cspan class=\"sx\"\u003e%[col]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n           \u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow, I just needed to write the \u003ccode\u003eprops_for\u003c/code\u003e and \u003ccode\u003evalue_for\u003c/code\u003e methods for the partial. The first thing I need is to access the params passed into the partial. With ERB partials, you can get the full set of params passed into a partial via the \u003ccode\u003elocal_assigns\u003c/code\u003e variable. \u003ccode\u003elocal_assigns\u003c/code\u003e references a hash of the params. So, I wrote my methods like so:\u003c/p\u003e\n\n\u003cdiv class=\"highlight erb\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprops_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elocal_assigns\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edig\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:props\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003evalue_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elocal_assigns\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etry\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:dig\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e The \u003ccode\u003evalue_for\u003c/code\u003e method here is precisely the same as the \u003ccode\u003eaccess\u003c/code\u003e method I discussed in \u003ca href=\"http://fractaledmind.com/articles/accessing-values-form-nested-hashes/\"\u003ethis past article\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eWhile simple and elegant, these methods have two problems. First, \u003ccode\u003elocal_assigns\u003c/code\u003e is not accessible from any scope except the outer partial scope; you will get a \u003ccode\u003eundefined local variable or method 'local_assigns'\u003c/code\u003e error when you try to run these methods in the partial. Second, these methods won’t handle params passed using string keys. Let’s refactor and fix both of these issues:\u003c/p\u003e\n\n\u003cdiv class=\"highlight erb\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elocal_assigns\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edeep_symbolize_keys\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprops_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edig\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:props\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_sym\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003evalue_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to_sym\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstructions\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etry\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:dig\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow, we can simply pass the symbolized hash of \u003ccode\u003elocal_assigns\u003c/code\u003e into the methods as a param, and we ensure that we are always working with symbols. Our final ERB partial-as-component looks like so:\u003c/p\u003e\n\n\u003cdiv class=\"highlight erb\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elocal_assigns\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edeep_symbolize_keys\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eprops_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edig\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:props\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_sym\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e\n  \u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003evalue_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to_sym\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003einstructions\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etry\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:dig\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003econtent_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:dl\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003eprops_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:entry\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003econtent_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:dt\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003eprops_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:key\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:key\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\n  \u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003econtent_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:dd\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003eprops_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:value\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003evalue_for\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:value\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003einstructions\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e\u0026lt;%\u003c/span\u003e \u003cspan class=\"k\"\u003eend\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis will output the HTML we desire given the \u003ccode\u003erender\u003c/code\u003e calls outlined above.\u003c/p\u003e\n\n\u003ch4 id=\"column-entry-3\"\u003eColumn Entry\u003c/h4\u003e\n\u003cdiv class=\"highlight erb\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003erender\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'entry'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"ss\"\u003ekey: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'Key'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003evalue: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'value'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"ss\"\u003eprops: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n             \u003cspan class=\"ss\"\u003eentry: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eclass: \u003c/span\u003e\u003cspan class=\"sx\"\u003e%[text-center my-0]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n             \u003cspan class=\"ss\"\u003ekey: \u003c/span\u003e\u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n             \u003cspan class=\"ss\"\u003evalue: \u003c/span\u003e\u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n           \u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eoutputs\u003c/p\u003e\n\n\u003cdiv class=\"highlight html\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"nt\"\u003e\u0026lt;dl\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"text-center my-0\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;dt\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eKey\u003cspan class=\"nt\"\u003e\u0026lt;/dt\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;dd\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003evalue\u003cspan class=\"nt\"\u003e\u0026lt;/dd\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/dl\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch4 id=\"row-entry-3\"\u003eRow Entry\u003c/h4\u003e\n\u003cdiv class=\"highlight erb\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"cp\"\u003e\u0026lt;%=\u003c/span\u003e \u003cspan class=\"n\"\u003erender\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'entry'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"ss\"\u003ekey: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'Key'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003evalue: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'value'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n           \u003cspan class=\"ss\"\u003eprops: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n             \u003cspan class=\"ss\"\u003eentry: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eclass: \u003c/span\u003e\u003cspan class=\"sx\"\u003e%[d-flex my-0]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n             \u003cspan class=\"ss\"\u003ekey: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eclass: \u003c/span\u003e\u003cspan class=\"sx\"\u003e%[col-4]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n             \u003cspan class=\"ss\"\u003evalue: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"ss\"\u003eclass: \u003c/span\u003e\u003cspan class=\"sx\"\u003e%[col]\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n           \u003cspan class=\"p\"\u003e})\u003c/span\u003e \u003cspan class=\"cp\"\u003e%\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eoutputs\u003c/p\u003e\n\n\u003cdiv class=\"highlight html\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"nt\"\u003e\u0026lt;dl\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"d-flex my-0\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;dt\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"col-4\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003eKey\u003cspan class=\"nt\"\u003e\u0026lt;/dt\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;dd\u003c/span\u003e \u003cspan class=\"na\"\u003eclass=\u003c/span\u003e\u003cspan class=\"s\"\u003e\"col\"\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003evalue\u003cspan class=\"nt\"\u003e\u0026lt;/dd\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/dl\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"A function for generating HTML attribute values","url":"/articles/a-function-for-generating-html-attribute-values/","content":"\u003cp\u003eWhen using the ActionView \u003ccode\u003econtent_tag\u003c/code\u003e helper, you can pass either an array or a scalar value as the value of an HTML attribute. For example, these two method calls produce the exact same output:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003econtent_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:div\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'Hello world!'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eclass: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e'strong'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'highlight'\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"n\"\u003econtent_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:div\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'Hello world!'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eclass: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'strong highlight'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026lt;div class=\"strong highlight\"\u0026gt;Hello world!\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis is a nifty and helpful small feature. However, it has a few limitations.\u003c/p\u003e\n\n\u003cp\u003eFirst, it leaves a trailing space in sitations like this\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003econtent_tag\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:div\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'Hello world!'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003eclass: \u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e'strong'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'active'\u003c/span\u003e \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"n\"\u003ei_am_an_active_item?\u003c/span\u003e\u003cspan class=\"p\"\u003e)])\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026lt;div class=\"strong active\"\u0026gt;Hello world!\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# =\u0026gt; \u0026lt;div class=\"strong \"\u0026gt;Hello world!\u0026lt;/div\u0026gt;\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSecond, it can \u003cem\u003eonly\u003c/em\u003e work with one-dimensional arrays and scalar values. Now, it makes sense for this function to have a restricted type signature, but when working with this helper in other contexts, this limitation can be irksome.\u003c/p\u003e\n\n\u003cp\u003eI recently found myself in such a context and was thereby irked. This irk got me to thinking: How might I write a function that was as flexible as possible in its type signature, and yet still predictable and sane in its output of HTML attribute values?\u003c/p\u003e\n\n\u003cp\u003eI began by writing some expectations:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e         \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'b'\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e    \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a b'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e    \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e])).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e       \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'b'\u003c/span\u003e\u003cspan class=\"p\"\u003e])).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e  \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a b'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e])).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e  \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e'b'\u003c/span\u003e\u003cspan class=\"p\"\u003e])).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e  \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a b'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e  \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eI want my method to handle \u003cem\u003en\u003c/em\u003e number of params and to handle arrays; I also want it to handle \u003ccode\u003enil\u003c/code\u003es intelligently.\u003c/p\u003e\n\n\u003cp\u003eIn order to get these expectations passing, I wrote a method that looked like this:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eflatten\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecompact\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e' '\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWith those expectations met, I began considering other edge cases I wanted to cover. First, I don’t want duplicate values:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e          \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e])).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e        \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'b'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e     \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a b'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e'b'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e])).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e   \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a b'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e])).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e   \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis required a minor update:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eflatten\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecompact\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003euniq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e' '\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNext, I wanted to handle extraneous whitespace:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e' a '\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e         \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a '\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e          \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e' a'\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e          \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e' a '\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'b'\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e    \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a b'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a '\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e'b'\u003c/span\u003e\u003cspan class=\"p\"\u003e])).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e   \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a b'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s1\"\u003e' a'\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"s1\"\u003e'b'\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e   \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a b'\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e' a '\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e    \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a '\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e])).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e   \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e' a'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e     \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e' a '\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e])).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e  \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"s1\"\u003e'a '\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e   \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'a'\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAnother minor update to get these specs passing:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# NOTE: `strip` must come before `uniq`\u003c/span\u003e\n  \u003cspan class=\"c1\"\u003e# or else duplicates will sneak in\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eflatten\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecompact\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:strip\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003euniq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e' '\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eFinally, I wanted to handle non-string scalar values:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"mi\"\u003e64\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e                       \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'18446744073709551616'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kp\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e                        \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'true'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kp\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e                       \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'false'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eday\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efrom_now\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_date\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e      \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'2017-11-16'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eday\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efrom_now\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_datetime\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e  \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'2017-11-16T16:38:32-05:00'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eday\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efrom_now\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eto_time\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e      \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'2017-11-16 16:38:45 -0500'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e                        \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'1.11'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e                           \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e'1'\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kp\"\u003enil\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e                         \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e''\u003c/span\u003e\n\u003cspan class=\"n\"\u003eexpect\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:s\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nf\"\u003eto\u003c/span\u003e                          \u003cspan class=\"n\"\u003eeq\u003c/span\u003e \u003cspan class=\"s1\"\u003e's'\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eOnce again, this was a very minor update:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emy_method\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eflatten\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecompact\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to_s\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:strip\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nf\"\u003euniq\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e' '\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eI tend to prefer pipelines of \u003ccode\u003eEnumerable\u003c/code\u003e methods like this to be formatted with each “pipe” on a separate line. I also wanted to give it a more meaningful name. Since the key (and final) action is \u003ccode\u003ejoin\u003c/code\u003e, I wanted a name that communicated this essence in addition to the data-munging that goes on. After some consideration, I went with:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003emeld\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003eflatten\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ecompact\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to_s\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"ss\"\u003e:strip\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003euniq\u003c/span\u003e\n      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e' '\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"Accessing Values from Nested Hashes","url":"/articles/accessing-values-from-nested-hashes/","content":"\u003cp\u003eI need a function that will allow me to access values from a nested (i.e. multidimensional) hash. However, the shape of the hash is not strictly fixed.\u003c/p\u003e\n\n\u003cp\u003eIf you knew the keypath already (i.e. you didn’t need it to be a param that was passed into a function), the oldest standard way to achieve this in Ruby is:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:path\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:path\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"ss\"\u003e:path\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"ss\"\u003e:to\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"ss\"\u003e:key\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIf you wanted to take that approach and put it into a method, you could use \u003ccode\u003eEnumerable#reduce\u003c/code\u003e to work with the keypath’s array:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eaccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekeypath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ekeypath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ememo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ememo\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ememo\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eStarting in Ruby 2.3, the \u003ccode\u003eHash\u003c/code\u003e class actually added a method that does essentially this. \u003ccode\u003eHash#dig\u003c/code\u003e takes a keypath and will access the value:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edig\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:path\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:to\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"ss\"\u003e:key\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSo, we could rewrite our function to use \u003ccode\u003eHash#dig\u003c/code\u003e like so:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eaccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekeypath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003edig\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ekeypath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThat is both clean and uses modern Ruby semantics; however, it is not without its limitations. Let’s consider the following 2 hashes:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003ehash1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003epath: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"ss\"\u003eto: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"ss\"\u003ekey: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'value'\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"n\"\u003ehash2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"ss\"\u003epath: \u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"ss\"\u003eto: \u003c/span\u003e\u003cspan class=\"s1\"\u003e'key'\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAnd let’s also consider the following three keypaths:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003ekeypath1\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sx\"\u003e%i[path to key]\u003c/span\u003e\n\u003cspan class=\"n\"\u003ekeypath2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sx\"\u003e%i[path to nested key]\u003c/span\u003e\n\u003cspan class=\"n\"\u003ekeypath3\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"sx\"\u003e%i[path to key then another]\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhat will happen in these six scenarios?\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eaccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehash1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekeypath1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eaccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehash1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekeypath2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eaccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehash1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekeypath3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eaccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehash2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekeypath1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eaccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehash2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekeypath2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003eaccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ehash2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekeypath3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eWell, here’s the answer:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u0026gt; access(hash1, keypath1)\n=\u0026gt; \"value\"\n\u0026gt; access(hash1, keypath2)\n=\u0026gt; nil\n\u0026gt; access(hash1, keypath3)\nTypeError: String does not have #dig method\n\u0026gt; access(hash2, keypath1)\nTypeError: String does not have #dig method\n\u0026gt; access(hash2, keypath2)\nTypeError: String does not have #dig method\n\u0026gt; access(hash2, keypath3)\nTypeError: String does not have #dig method\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eScenario 1 makes sense. The hash has those keys defined in that structure, so the value is accessed.\u003c/p\u003e\n\n\u003cp\u003eScenario 2 also makes sense. The subhash returned from \u003ccode\u003ehash[:path][:to]\u003c/code\u003e does \u003cem\u003enot\u003c/em\u003e have the key \u003ccode\u003e:nested\u003c/code\u003e, so a \u003ccode\u003enil\u003c/code\u003e is returned.\u003c/p\u003e\n\n\u003cp\u003eBut each of the other 4 scenarios throw this \u003ccode\u003eTypeError\u003c/code\u003e. First, let’s answer why.\u003c/p\u003e\n\n\u003cp\u003eYou can get this error simply. Call \u003ccode\u003e'foo'.dig(:key)\u003c/code\u003e. We recall that \u003ccode\u003edig\u003c/code\u003e is an instance method on the \u003ccode\u003eHash\u003c/code\u003e class. It is not an instance method on the \u003ccode\u003eString\u003c/code\u003e class. Thus, when we try to call that method on an instance of \u003ccode\u003eString\u003c/code\u003e, we get this error.\u003c/p\u003e\n\n\u003cp\u003eThis error is being thrown in our final four scenarios because as soon as we hit a scalar value (a string in these cases), the implicit chained call to \u003ccode\u003edig\u003c/code\u003e on that value throws the error. I say that it is the “implicit chained call to \u003ccode\u003edig\u003c/code\u003e” because the \u003ccode\u003eHash#dig\u003c/code\u003e method is implemented recursively.\u003c/p\u003e\n\n\u003cp\u003eSo, the way \u003ccode\u003eHash#dig\u003c/code\u003e works is that it will return a \u003ccode\u003enil\u003c/code\u003e if it encounters a key that is not present in the current (sub-)hash that it is processing; however, if it encounters a key that \u003cem\u003eis present\u003c/em\u003e, but that returns a scalar value, it will blow up.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eWe need a function that won’t blow up. We need a function that \u003cem\u003eeither\u003c/em\u003e returns the value \u003cem\u003eor\u003c/em\u003e returns \u003ccode\u003enil\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eMaybe our original implemenation of \u003ccode\u003eaccess\u003c/code\u003e would work?\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eaccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekeypath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ekeypath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ememo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ememo\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ememo\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u0026gt; access(hash1, keypath1)\n=\u0026gt; \"value\"\n\u0026gt; access(hash1, keypath2)\n=\u0026gt; nil\n\u0026gt; access(hash1, keypath3)\nTypeError: no implicit conversion of Symbol into Integer\n\u0026gt; access(hash2, keypath1)\nTypeError: no implicit conversion of Symbol into Integer\n\u0026gt; access(hash2, keypath2)\nTypeError: no implicit conversion of Symbol into Integer\n\u0026gt; access(hash2, keypath3)\nTypeError: no implicit conversion of Symbol into Integer\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNot quite (I leave the explanation of this error to the reader).\u003c/p\u003e\n\n\u003cp\u003eUsing \u003ccode\u003eHash#fetch\u003c/code\u003e instead of \u003ccode\u003eHash#dig\u003c/code\u003e gives us a similar problem:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eaccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekeypath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ekeypath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ememo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ememo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003efetch\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{})\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u0026gt; access(hash1, keypath1)\n=\u0026gt; \"value\"\n\u0026gt; access(hash1, keypath2)\n=\u0026gt; {}\n\u0026gt; access(hash1, keypath3)\nNoMethodError: undefined method `fetch' for \"value\":String\n\u0026gt; access(hash2, keypath1)\nNoMethodError: undefined method `fetch' for \"key\":String\n\u0026gt; access(hash2, keypath2)\nNoMethodError: undefined method `fetch' for \"key\":String\n\u0026gt; access(hash2, keypath3)\nNoMethodError: undefined method `fetch' for \"key\":String\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eClearly, what we need is a way to tentatively call the method; and ActiveSupport’s \u003ccode\u003eObject#try\u003c/code\u003e fits the bill nicely. So, let’s try pairing \u003ccode\u003eObject#try\u003c/code\u003e with \u003ccode\u003eHash#dig\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight ruby\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003eaccess\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekeypath\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"n\"\u003ekeypath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003ehash\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e\u003cspan class=\"n\"\u003ememo\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003ememo\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nf\"\u003etry\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"ss\"\u003e:dig\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"k\"\u003eend\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u0026gt; access(hash1, keypath1)\n=\u0026gt; \"value\"\n\u0026gt; access(hash1, keypath2)\n=\u0026gt; nil\n\u0026gt; access(hash1, keypath3)\n=\u0026gt; nil\n\u0026gt; access(hash2, keypath1)\n=\u0026gt; nil\n\u0026gt; access(hash2, keypath2)\n=\u0026gt; nil\n\u0026gt; access(hash2, keypath3)\n=\u0026gt; nil\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSuccess!\u003c/p\u003e\n\n\u003cp\u003eWhen you need to attempt to access a value from a nested/multidimensional hash given a keypath that may or may not match the shape of the hash, try and dig.\u003c/p\u003e\n","type":"article"},{"title":"\"Oft evil will shall evil mar\" - J.R.R. Tolkien (via Theoden)","url":"/jots/201604051529/","content":"\n","type":"article"},{"title":"Elevator","url":"/articles/elevator/","content":"\u003cp\u003eYou step forward, press the button, and begin to wait.\u003cbr /\u003e\nDingy carpet in a worn-down lobby, a space almost asking you to leave it.\u003cbr /\u003e\nElevator crawls down the walls; is it fighting back?\u003cbr /\u003e\nEven so, button pressed, future sealed.\u003c/p\u003e\n\n\u003cp\u003eDing. It arrives. Future becomes present. Doors open.\u003cbr /\u003e\nGold and chrome and shining things. You enter.\u003cbr /\u003e\nPerhaps slow at first, perhaps not. Doors close.\u003cbr /\u003e\nButtons arrayed in simple lines belie the complexity of choice. Each button a world. Present becomes future.\u003cbr /\u003e\nYou hesitate; or do you? Button pressed, future sealed.\u003cbr /\u003e\nThe elevator flies–a new floor, a better world.\u003c/p\u003e\n\n\u003cp\u003eDing. Doors open.\u003cbr /\u003e\nClean carpet and soft lights, inviting. You step out.\u003cbr /\u003e\nElevator closes and returns, it’s task complete.\u003c/p\u003e\n","type":"article"},{"title":"Cleaning up Git repos","url":"/articles/cleaning-up-git-repos/","content":"\u003ch3 id=\"deleting-old-remote-branches\"\u003eDeleting old remote branches\u003c/h3\u003e\n\n\u003cp\u003eIf you have a repository that’s been around for long enough, you probably have a fair number of “stray branches”: deadends, false starts, orphans, etc. Let’s clean up all of the remote branches that haven’t been touched in the last 6 months:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003efor \u003c/span\u003ek \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"k\"\u003e$(\u003c/span\u003egit branch -r | grep -E -v \u003cspan class=\"s1\"\u003e'\u0026gt;|master|prod'\u003c/span\u003e\u003cspan class=\"k\"\u003e)\u003c/span\u003e; \u003cspan class=\"k\"\u003edo\n  if\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e -z \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003egit log -1 --since\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'6 months ago'\u003c/span\u003e -s \u003cspan class=\"nv\"\u003e$k\u003c/span\u003e\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e; \u003cspan class=\"k\"\u003ethen\n    \u003c/span\u003egit push origin --delete \u003cspan class=\"k\"\u003e$(\u003c/span\u003ecut -d\u003cspan class=\"s2\"\u003e\"/\"\u003c/span\u003e -f2- \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$k\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e)\u003c/span\u003e;\n  \u003cspan class=\"k\"\u003efi\ndone\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWalking through the various steps:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003e\u003ccode\u003egit branch -r\u003c/code\u003e lists all remote branches\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003egrep -E -v '\u0026gt;|master|prod'\u003c/code\u003e filters that list of branches, removing any that have \u003ccode\u003e\u0026gt;\u003c/code\u003e (e.g. \u003ccode\u003eorigin/HEAD -\u0026gt; origin/master\u003c/code\u003e), \u003ccode\u003emaster\u003c/code\u003e (e.g. \u003ccode\u003eorigin/master\u003c/code\u003e), or \u003ccode\u003eprod\u003c/code\u003e (e.g. \u003ccode\u003eorigin/prod\u003c/code\u003e) in their names.\u003c/li\u003e\n  \u003cli\u003eIterating over each of these branches (as \u003ccode\u003e$k\u003c/code\u003e), \u003ccode\u003egit log -1 --since='6 months ago' -s $k\u003c/code\u003e checks if the branch has been commited to in the last 6 months (you could obviously set the timeframe to whatever suited your needs).\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ecut -d\"/\" -f2- \u0026lt;\u0026lt;\u0026lt; \"$k\")\u003c/code\u003e trims a branch string like \u003ccode\u003eorigin/feature/some_branch\u003c/code\u003e to a string like \u003ccode\u003efeature/some_branch\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003eFinally \u003ccode\u003egit push origin --delete $(...)\u003c/code\u003e removes that branch from the remote repository.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003ch3 id=\"deleting-already-merged-remote-branches\"\u003eDeleting already-merged remote branches\u003c/h3\u003e\n\n\u003cp\u003eYou may also find yourself needing to remove remote branches that have also already been merged to \u003ccode\u003emaster\u003c/code\u003e.\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003egit branch -r --merged origin/master\n| grep -E -v \u003cspan class=\"s1\"\u003e'\u0026gt;|master|prod'\u003c/span\u003e\n| cut -d\u003cspan class=\"s2\"\u003e\"/\"\u003c/span\u003e -f2-\n| xargs git push origin --delete\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHere we see many of the same basic sub-commands we used before. There is, however, one note-worthy difference. We specify the specific branch we want to check whether the remote branches have been merged into by specifying \u003ccode\u003eorigin/master\u003c/code\u003e. This ensures that only remote branches that have been merged into remote \u003ccode\u003emaster\u003c/code\u003e are passed to the next sub-command.\u003c/p\u003e\n\n\u003ch3 id=\"deleting-already-merged-local-branches\"\u003eDeleting already-merged local branches\u003c/h3\u003e\n\n\u003cp\u003eFinally, if you need to clean up your local repository, you can prune the local branches that have already been merged into \u003ccode\u003emaster\u003c/code\u003e in a similar way:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003egit branch -d \u003cspan class=\"k\"\u003e$(\u003c/span\u003egit branch --merged master | grep -E -v \u003cspan class=\"s1\"\u003e'\\*|master|prod'\u003c/span\u003e\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eA word of warning though: have local copies of these branches somewhere, just in case you delete a branch you want back at some point ;)\u003c/p\u003e\n","type":"article"},{"title":"The best cure for the past is the present","url":"/jots/201603111233/","content":"\n","type":"article"},{"title":"Everything a word, not everything a meaning","url":"/jots/201603111232/","content":"\n","type":"article"},{"title":"I, who wear the horns","url":"/jots/201603072312/","content":"\n","type":"article"},{"title":"Who am I that You are mindful of me?","url":"/jots/201603061800/","content":"\n","type":"article"},{"title":"Forever the mind races; forever the body reacts. And life keeps spinning all around me.","url":"/jots/201603052310/","content":"\n","type":"article"},{"title":"In brokenness we find a chaotic refracted beauty that immediately reveals itself to be _real_ and all other beauty to be some mathematical abstraction, some too clean facsimile.","url":"/jots/201602231006/","content":"\n","type":"article"},{"title":"You, Made and Unmade","url":"/articles/you-made-and-unmade/","content":"\u003cp\u003eWhat is time? Time is commonly dissected into three parts: past, present, and future. The past is done, it is set; the future is yet to be done, it is possibility. But what of the present? The present is, in simplest form, the future being made the past. Yet if the present is nothing more than the future being made the past, why is it “the present”, this thing on the same level as the past and future? Well, I think the answer is masked by the passive voice, “being made” by whom? By you. The present is the future being made the past by you.\u003c/p\u003e\n\n\u003cp\u003eHow do you convert the future into the past? What is involved? Again, in simple form, there is you and there are outside stimuli, outside signals. There is you and not-you, which is outside of you. But the two spheres are not totally separate, as you receive many of these external signs and signals; you, via your five senses, have some connection to the not-you. And, in response to those outside signs and signals, you either act or don’t act, you think, you respond. You convert the future into the past by reacting to signals from the not-you.\u003c/p\u003e\n\n\u003cp\u003eSo, what is time? Time is the combination of the not-you things you have done, the not-you things you have yet to do, and the not-you things you are doing. Time is not-you, made and unmade, and you, making. But what is not-you without you? Nothing. Time is you, becoming; time is you, made and unmade.\u003c/p\u003e\n","type":"article"},{"title":"Conjunctive Binarism","url":"/articles/conjunctive-binarism/","content":"\u003cp\u003eEpistemology has fascinated me far longer than I have known what that word means. Built upon the Greek words for “knowledge” (ἐπιστήμη) and “study” (λόγος), epistemology means the study of knowledge. This can (and does) encompass a wide variety of specific ideas: the nature of knowledge, the acquisition of knowledge, the difference between knowledge and opinion, etc. It is a field of inquiry that aims to help us answer questions like “How do I know something?”, “What does it mean to know something?”, “Are some things unknowable?”, etc. Now, before we go too far down this (admittedly intriguing) rabbit-hole, I had said that I wanted to consider alethiology, not epistemology. While epistemology is the study of knowledge, alethiology is the study of truth. The two inquiries are cousins; indeed, one can barely call alethiology a field of inquiry \u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e and is often considered a sub-field of epistemology. The standard definition of knowledge holds that knowledge equals justified true belief \u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote\"\u003e2\u003c/a\u003e\u003c/sup\u003e. In debating the finer points of that definition, academics must then define their terms. What does it mean for a belief to be justified? What does it mean for a belief to be true? What is truth? This context is, I believe, important as it helps to situate the kinds of questions I am interested in pursuing within their general philosophical context. I want to probe around the edges of the question “What is truth?”, which, as we see, has strong implications on the nature of knowledge.\u003c/p\u003e\n\n\u003ch2 id=\"a-primer-on-propositional-logic\"\u003eA Primer on Propositional Logic\u003c/h2\u003e\n\n\u003cp\u003eWhen considering the nature of truth, it is common to think about \u003ca href=\"http://www.iep.utm.edu/prop-log/#H1\"\u003epropositions\u003c/a\u003e. Propositions are simply declarative sentences; they are statements. In most high school English courses we learn that sentences that end with a period (\u003ccode\u003e.\u003c/code\u003e) are declarative sentences (\u003ccode\u003e?\u003c/code\u003e = interrogatives, \u003ccode\u003e!\u003c/code\u003e = interjections). So, that previous sentence was a declarative sentence. So was that one! Ah, now we have an interjection. Well, I could play this game all night (really, I’m easily amused), but the point ought to be clear: propositions == statements == declarative sentences. They are forms of communication that say something is the case. A key characteristic of propositions is that they are either true or false. When I state that something is the case, it either is the case or it isn’t. Either most high school English classes \u003cem\u003edo\u003c/em\u003e teach that sentences ending in a period are declarative sentences, or they don’t. Either that previous sentence is a declarative sentence, or it isn’t. Now, one important thing to note immediately is that we need not be able to determine whether a proposition is true or false; this has no bearing on its “propositionness”. The statement “God exists” is a proposition, it is either true or false; however, we have no way of determining whether it is true or false (regardless of what anyone has ever told you). So, propositions are statements that something is the case that are either true or false, but we need not determine whether they are actually true or actually false for them to be propositions.\u003c/p\u003e\n\n\u003cp\u003eIn academic logic, propositions are generally referred to using the symbolic shorthand \u003ccode\u003eP\u003c/code\u003e. This is the generic proposition, the Ur-proposition, in computer programming terms we might say it is the proposition type. Like algebraic variables, we can use any uppercase letter to designate other propositions. So, for example, if I needed to talk about three propositions, I could use \u003ccode\u003eP\u003c/code\u003e, \u003ccode\u003eQ\u003c/code\u003e, and \u003ccode\u003eR\u003c/code\u003e (these are the common letters used in academic circles, for whatever the reasons). Now, when dealing with multiple propositions there are two key operators that we will use\u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote\"\u003e3\u003c/a\u003e\u003c/sup\u003e: \u003ccode\u003e\u0026amp;\u003c/code\u003e and \u003ccode\u003ev\u003c/code\u003e. Perhaps these symbols seem a bit foreign, but I promise that their concepts are utterly simple. \u003ccode\u003e\u0026amp;\u003c/code\u003e is the “and” operator; it combines two propositions to make one new proposition, called the “conjunction” of the two propositions. \u003ccode\u003ev\u003c/code\u003e is the “or” operator; it also combines two propositions to make one new proposition, called the “disjunction” of the two propositions. In high school English we would say that “and” and “or” are conjunctions, and just like in English class we can take two declarative sentences and combine them with a conjunction to make a new sentence. Ah, that sentence was a perfect example (almost as if I planned it ;)). So, symbolically we could write \u003ccode\u003eP \u0026amp; Q =\u0026gt; R\u003c/code\u003e and \u003ccode\u003eP v Q =\u0026gt; S\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eOk, so propositions can be combined to make new propositions in two different ways, but what precisely is the difference? Well, I’m interested in truth, so you might have already guessed the difference. The difference between \u003ccode\u003eR\u003c/code\u003e and \u003ccode\u003eS\u003c/code\u003e from above is what is required for them to be true. When using the \u003ccode\u003e\u0026amp;\u003c/code\u003e operator to combine \u003ccode\u003eP\u003c/code\u003e and \u003ccode\u003eQ\u003c/code\u003e, the conjunction \u003ccode\u003eR\u003c/code\u003e is only true when \u003cstrong\u003eboth\u003c/strong\u003e \u003ccode\u003eP\u003c/code\u003e and \u003ccode\u003eQ\u003c/code\u003e are themselves true. If either \u003ccode\u003eP\u003c/code\u003e or \u003ccode\u003eQ\u003c/code\u003e is false, then \u003ccode\u003eR\u003c/code\u003e is also false. When using the \u003ccode\u003ev\u003c/code\u003e operator, the disjunction \u003ccode\u003eS\u003c/code\u003e is true if either \u003ccode\u003eP\u003c/code\u003e or \u003ccode\u003eQ\u003c/code\u003e is true. These relationships are most often considered using a “truth table”. Consider the following, which lays out all of the possible scenarios for the \u003ccode\u003e\u0026amp;\u003c/code\u003e operator:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eP\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eQ\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e(P \u0026amp; Q)\u003c/code\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eHere we can clearly see that the expression \u003ccode\u003e(P \u0026amp; Q)\u003c/code\u003e is only true whenever both the proposition \u003ccode\u003eP\u003c/code\u003e and the proposition \u003ccode\u003eQ\u003c/code\u003e are true. This is contrasted with the \u003ccode\u003ev\u003c/code\u003e operator:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eP\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eQ\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e(P v Q)\u003c/code\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eHere the relationship is almost the exact opposite. The expression \u003ccode\u003e(P v Q)\u003c/code\u003e is only \u003cem\u003efalse\u003c/em\u003e whenever both the proposition \u003ccode\u003eP\u003c/code\u003e and the proposition \u003ccode\u003eQ\u003c/code\u003e are false. In every other instance the expression \u003ccode\u003e(P v Q)\u003c/code\u003e is true, as one of the two constituent propositions is true.\u003c/p\u003e\n\n\u003cp\u003eThese two operators handle how the truth values relate when combining two or more propositions, but there is one last operator we need to discuss, which is used on single propositions. The “negation” operator \u003ccode\u003e¬\u003c/code\u003e is used, you guessed it, to negate propositions. The truth table for this operator is pretty straight forward:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eP\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e¬P\u003c/code\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eThe negation operator basically just “flips” the truth value of the proposition.\u003c/p\u003e\n\n\u003cp\u003eWith all of that now settled, we can finally turn to the heart of this excursion.\u003c/p\u003e\n\n\u003ch2 id=\"p--p\"\u003e\u003ccode\u003eP \u0026amp; ¬P\u003c/code\u003e\u003c/h2\u003e\n\n\u003cp\u003eNow, I will readily admit that “conjunctive binarism” is a phrase that I totally made up \u003csup id=\"fnref:4\"\u003e\u003ca href=\"#fn:4\" class=\"footnote\"\u003e4\u003c/a\u003e\u003c/sup\u003e, but I was trying to find a phrase that accurately captured the idea I had in my head, which I was initially conceiving of in purely symbolic terms: \u003ccode\u003eP \u0026amp; ¬P\u003c/code\u003e \u003csup id=\"fnref:BB\"\u003e\u003ca href=\"#fn:BB\" class=\"footnote\"\u003e5\u003c/a\u003e\u003c/sup\u003e. In many ways I find the symbolic phrase far clearer than the English phrase “conjunctive binarism”, but hopefully my English phrase at least accurately describes precisely what I’m interested in.\u003c/p\u003e\n\n\u003cp\u003eI said at the beginning that I was interested in the question “What is truth?”, yet now that we have a firmer grasp on what precisely “conjunctive binarism” means, I’m sure that you, my reader, are a bit worried. And, I would say, rightfully so. Here is the truth table for the conjunctive binary:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eP\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e¬P\u003c/code\u003e\u003c/th\u003e\n      \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e(P \u0026amp; ¬P)\u003c/code\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n      \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eWell there you have it, the conjunctive binary \u003ccode\u003e(P \u0026amp; ¬P)\u003c/code\u003e \u003cem\u003ecan never be true\u003c/em\u003e \u003csup id=\"fnref:AA\"\u003e\u003ca href=\"#fn:AA\" class=\"footnote\"\u003e6\u003c/a\u003e\u003c/sup\u003e. In many ways the the simplest, most intuitive answer to the question of “What is truth?” is “I don’t know, but it certainly isn’t \u003ccode\u003e(P \u0026amp; ¬P)\u003c/code\u003e”. In fact, Aristotle himself states this directly in his \u003cem\u003eMetaphysics\u003c/em\u003e\u003csup id=\"fnref:5\"\u003e\u003ca href=\"#fn:5\" class=\"footnote\"\u003e7\u003c/a\u003e\u003c/sup\u003e:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThe most certain of all basic principles is that contradictory propositions are not true simultaneously. (1011b13-14)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis idea, that a proposition (\u003ccode\u003eP\u003c/code\u003e) and its contradiction (\u003ccode\u003e¬P\u003c/code\u003e) cannot both be true in the same sense at the same time, is so fundamental to human logical thought that it is a \u003cem\u003elaw\u003c/em\u003e, the Law of Non-Contradiction.\u003c/p\u003e\n\n\u003cp\u003eNow, I am not quite so bold as to suggest that the Law of Non-Contradiction is wrong; however, I would like to press it a bit. The caveats in the definition of the LNC are clearly important. I’m sure we can all think of examples where a proposition (\u003ccode\u003eP\u003c/code\u003e) and its contradiction (\u003ccode\u003e¬P\u003c/code\u003e) are both true, just in different senses. As one contrived examples, the proposition “Citi is a bank” and its contradiction “Citi is not a bank” would both be true if “bank” in the first case meant “a financial institution” and “bank” in the second case meant “the side of a river”. Likewise, if time is not an issue, we can certainly conceive of an example where some proposition is true and then later its contradiction is true. Taking the same contrived example, right now the proposition “Citi is a bank” is true, but if in the future they were to go out of business, the contradiction “Citi is not a bank” would then be true.\u003c/p\u003e\n\n\u003cp\u003eWhat I would like to suggest is that while the Law of Non-Contradiction is strictly true, it is not practically all that helpful when confronting the question “What is truth?”. Specifically, I would argue (and hopefully I will at some point soon) that \u003cem\u003ein the everyday world\u003c/em\u003e one of those two caveats is very likely to be true. That is to say, I contend and my definition of Conjunctive Binarism states that a proposition (\u003ccode\u003eP\u003c/code\u003e) and its contradiction (\u003ccode\u003e¬P\u003c/code\u003e) are likely both true either in different senses or at different times. More simply, I argue that \u003cstrong\u003e\u003ccode\u003e(P \u0026amp; ¬P)\u003c/code\u003e will likely be true \u003cem\u003ein some way\u003c/em\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eIf I could create my own logical symbol, I would create the “fuzzy” symbol \u003ccode\u003e~\u003c/code\u003e, which would denote the existence of one or more of these caveats. In my logical lexicon the “fuzzy” symbol \u003ccode\u003e~\u003c/code\u003e generally maps to the English word “kinda”. So, in strictest form Conjunctive Binarism would be expressed symbolically as \u003ccode\u003e~(P \u0026amp; ¬P)\u003c/code\u003e, or even more strictly as \u003ccode\u003e(~P ~\u0026amp; ~¬P)\u003c/code\u003e. In plain English we might say “the proposition \u003ccode\u003eP\u003c/code\u003e and its contradiction \u003ccode\u003e¬P\u003c/code\u003e are kinda both true”.\u003c/p\u003e\n\n\u003ch2 id=\"fin\"\u003eFin\u003c/h2\u003e\n\n\u003cp\u003eI plan, in later posts, to explore this thesis from various angles, to consider some of its consequences, and to argue for its correctness. For now, however, I leave it at this: my answer to the question “What is truth?” would be, in a more rigorous and philosophic way than this sounds, “Kinda everything”.\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eThe term “alethiology” is fairly rare in academia; for example, the ten-volume \u003ca href=\"https://en.wikipedia.org/wiki/Routledge_Encyclopedia_of_Philosophy\"\u003eRoutledge Encyclopedia of Philosophy\u003c/a\u003e mentions it only once. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:2\"\u003e\n      \u003cp\u003eFor those readers of a more academic bent, \u003ca href=\"http://plato.stanford.edu/entries/knowledge-analysis/#KnoJusTruBel\"\u003ethis article\u003c/a\u003e from the Stanford Encyclopedia of Philosophy provides a robust explanation of this analysis of knowledge, and indeed of knowledge in general. \u003ca href=\"#fnref:2\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:3\"\u003e\n\n      \u003cp\u003eThere are, in fact, many other logical operators beside these two:\u003c/p\u003e\n\n      \u003ctable class=\"tables\"\u003e\n        \u003cthead\u003e\n          \u003ctr\u003e\n            \u003cth style=\"text-align: center\"\u003eSign\u003c/th\u003e\n            \u003cth style=\"text-align: center\"\u003eOperator\u003c/th\u003e\n          \u003c/tr\u003e\n        \u003c/thead\u003e\n        \u003ctbody\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026amp;\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003e“and”\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003ev\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003e“or”\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e→\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003e“if… then…”\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e↔\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003e“if and only if”\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e¬\u003c/code\u003e\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003e“not”\u003c/td\u003e\n          \u003c/tr\u003e\n        \u003c/tbody\u003e\n      \u003c/table\u003e\n\n      \u003cp\u003eSee \u003ca href=\"http://www.iep.utm.edu/prop-log/#SH3a\"\u003ehere\u003c/a\u003e for a more in-depth analysis of them all. \u003ca href=\"#fnref:3\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:4\"\u003e\n      \u003cp\u003eA Google search for the exact phrase “conjunctive binarism” returns \u003ca href=\"https://www.google.com/search?q=%22conjunctive+binarism%22\"\u003eno results\u003c/a\u003e. \u003ca href=\"#fnref:4\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:BB\"\u003e\n      \u003cp\u003eThis construction of the constructive binarism marks it as a close kin of \u003ca href=\"http://plato.stanford.edu/entries/dialetheism/\"\u003edialetheism\u003c/a\u003e, a newer philosophical position that holds that dialetheias do in fact exist, and a dialetheia is simply a sentence, \u003ccode\u003eA\u003c/code\u003e, such that both it and its negation, \u003ccode\u003e¬A\u003c/code\u003e, are true; that is, \u003ccode\u003eA \u0026amp; ¬A\u003c/code\u003e. \u003ca href=\"#fnref:BB\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:AA\"\u003e\n\n      \u003cp\u003eThis is in direct contrast with the disjunctive binary, which is always true.\u003c/p\u003e\n\n      \u003ctable class=\"tables\"\u003e\n        \u003cthead\u003e\n          \u003ctr\u003e\n            \u003cth style=\"text-align: center\"\u003e\u003ccode\u003eP\u003c/code\u003e\u003c/th\u003e\n            \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e¬P\u003c/code\u003e\u003c/th\u003e\n            \u003cth style=\"text-align: center\"\u003e\u003ccode\u003e(P v ¬P)\u003c/code\u003e\u003c/th\u003e\n          \u003c/tr\u003e\n        \u003c/thead\u003e\n        \u003ctbody\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n          \u003c/tr\u003e\n          \u003ctr\u003e\n            \u003ctd style=\"text-align: center\"\u003eF\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n            \u003ctd style=\"text-align: center\"\u003eT\u003c/td\u003e\n          \u003c/tr\u003e\n        \u003c/tbody\u003e\n      \u003c/table\u003e\n\n      \u003cp\u003eIn fact, the disjunctive binary, by definition, includes \u003cem\u003eall possible states\u003c/em\u003e, as any state would either be \u003ccode\u003eP\u003c/code\u003e or \u003ccode\u003e¬P\u003c/code\u003e. Since \u003ccode\u003e¬P\u003c/code\u003e is simply the negation of \u003ccode\u003eP\u003c/code\u003e, the disjunction offers a logically exhaustive set of states. \u003ca href=\"#fnref:AA\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:5\"\u003e\n      \u003cp\u003e\u003ca href=\"http://plato.stanford.edu/entries/aristotle-noncontradiction/\"\u003eThis article\u003c/a\u003e from the Stanford Encyclopedia of Philosophy provides a rich analysis of Aristotle on the Law of Non-Contradiction. \u003ca href=\"#fnref:5\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"I am now swimming against the grain.","url":"/jots/201602201430/","content":"\n","type":"article"},{"title":"The greatest lie the world ever told was that _you_ deserve to be loved.","url":"/jots/201602201248/","content":"\n","type":"article"},{"title":"\"You are more powerful than you think you are, act accordingly.\" - Seth Godin","url":"/jots/201602131253/","content":"\n","type":"article"},{"title":"On Lent and Marriage","url":"/articles/on-lent-and-marriage/","content":"\u003cp\u003eLent is a time of fasting. We deny ourselves an earthly good in order to, hopefully, receive a heavenly good. We fast to clear our minds and reset our hearts, to find balance with ourself and with God. Lent isn’t easy; it isn’t meant to be easy. It isn’t easy to say no, to turn your mind and heart toward God every time your flesh desires that earthly good you’ve denied yourself. It isn’t easy to enact your will–to make a commitment and stand by it– especially when you have committed yourself to a fasting.\u003c/p\u003e\n\n\u003cp\u003eThis Lenten season I am giving up my marriage. I am fasting from my spouse. Let me be clear, I am not ending my marriage; in fact, I pray that this season will deepen and strengthen my marriage. However, for these 40 days my wife and I will be separated, in the full sense of that word. Let me attempt to explain why and how I hope to use this time to better my life, my faith, and my marriage.\u003c/p\u003e\n\n\u003cp\u003eMarriage is hard. I’d go so far as to say it is one of the hardest things a human person could endeavor to do. And I don’t just mean “marriage” in its simple everyday sense–two people who live together, are monogamous, and form a family unit. I mean \u003cem\u003emarriage\u003c/em\u003e; I mean the commitment and the act of grafting your soul to another soul; I mean the pursuit of unconditional love; I mean the coming together of two people to form \u003cem\u003eone\u003c/em\u003e. \u003cstrong\u003eThat\u003c/strong\u003e kind of marriage is \u003cem\u003ehard\u003c/em\u003e. But, I believe that kind of marriage is the most rewarding. That’s the kind of marriage worth fighting for.\u003c/p\u003e\n\n\u003cp\u003eMarriage is hard, and for me, that means specifically that being a husband is hard. It’s hard in ways I cannot even fathom. It’s hard in ways I didn’t fathom when I made my vows. It’s hard in ways I could never hope to communicate to you. It is \u003cem\u003ehard\u003c/em\u003e. And, to be honest, I’ve failed at it time and time again. I would hope that in the simply everyday sense, I’ve been a pretty good husband. I would hope that the world would judge me at least a mediocre husband. But I’m not sure it would. That’s of little matter, however, because in the deep and true sense, I \u003cem\u003eknow\u003c/em\u003e that I have failed as a husband. There is no point in listing out my failures here. First, because I do truly believe that all sins are equal, but our minds are built to rank things. I also won’t list out my particular failings because they are \u003cem\u003emine\u003c/em\u003e. I own them. I am responsible for them. Nothing I say and nothing I do will change that. I confess them to God and make amends to man. I take steps to Pharisaism when I confess them to man and make amends to God.\u003c/p\u003e\n\n\u003cp\u003eMarriage is hard and I am a failed husband. In my life, at this moment, those two facts have now generated a third fact: my wife doesn’t love me. Again, I don’t mean “love” in a trite sense; we’re talking about deep, meaningful love. And love like that isn’t easy. This form of deep and meaningful love comes when you meet another person, another soul, and you \u003cem\u003esee\u003c/em\u003e them. They grant you the ability to truly \u003cem\u003esee\u003c/em\u003e them. And when you see them, when you meet them, when you \u003cem\u003eknow\u003c/em\u003e them, your soul changes. Your soul becomes a little bit more like them. You graft them into your soul and it changes you. Some part of them now \u003cem\u003eis\u003c/em\u003e you, is a part of you. This kind of love is hard. It is hard to open yourself up to another person to allow them to love you like this. It is hard to receive another person if they have opened themselves up to you. It is hard to allow yourself to change because of another person. This kind of love is hard. My wife still likes me, my wife is still fond of me, we are still friends; but my wife no longer \u003cem\u003eloves\u003c/em\u003e me.\u003c/p\u003e\n\n\u003cp\u003eNow, let’s briefly set two things straight. First, I don’t say this to gain your sympathy. 7 billion people on this planet do not love me in this way, do not love you in this way. No one has a right to this kind of love. It is rare and it is given freely. It is never earned and never taken. Marriage is hard and I am failed husband; I have no right to this from her. Second, she is under no obligation to give it to me. She is not “wrong” for not loving me. She simply doesn’t. This is not a matter to be judged or adjudicated; this simply is. We are responsible for our thoughts and our actions, not for our state. Now, our state will factor strongly in our thoughts and actions, but that is beside the point. I am not responsible for being a male, but I am responsible for how I think and how I act \u003cem\u003eas\u003c/em\u003e a male. I am not responsible for being a husband, but I am responsible for how I think and how I act \u003cem\u003eas\u003c/em\u003e a husband. The kind of love we are talking about is so deep, so low, that it is a state. I am not responsible for being a male husband who loves his wife. I simply am that. What I am responsible for is how I live my life \u003cem\u003eas\u003c/em\u003e such a person. And as a male husband who loves his wife, I am responsible for my failings as well as for my successes. And as a female wife who does not love her husband, my wife is responsible for her failings and her successes. But in both cases, the state of our love stands outside of the arena of responsibility. And it stands outside this arena quite simply because we are not in control of it. I have no more control over whether or not I love my wife as she does of whether or not she doesn’t. Actions and thoughts affect our state, but they don’t control it. Certainly, my thoughts and my actions over the course of our marriage have some causal relationship to her current state, but I didn’t \u003cem\u003ecause\u003c/em\u003e her to not love me. And certainly her thoughts and actions have some relation to her current state, but again those things did not \u003cem\u003ecause\u003c/em\u003e them. There is no simple \u003cem\u003ecause\u003c/em\u003e to low-lying states of mind and heart.\u003c/p\u003e\n\n\u003cp\u003eSo, marriage is hard. I am a failed husband. My wife doesn’t love me. These are facts; these are states. This is the spilt milk not worth crying over (though I certainly have cried, about all three facts). The real question, the real challenge, the real point of this post is, what next? How do I respond? How do I think and act next? And my answers to this question are why I am giving up my marriage for Lent.\u003c/p\u003e\n\n\u003cp\u003eI am a computer programmer; I often like to break down complex problems by trying to isolate the constants and the variables. Constants are things that simply \u003cem\u003eare\u003c/em\u003e, variables are things that can, have, and/or will change. So, we might say that “marriage is hard” is a constant. That is like a definition of marriage: it is hard. We could also say that “I am a failed husband” is a constant. It is a statement about the past, it cannot change. Likewise “my wife doesn’t love me” is a constant, insofar as it is simply a statement about the present moment. I would say that “my wife’s love” is a variable; that can and has changed. However, the statement “my wife doesn’t love me” is a constant; it simply is true right now. So, are there any other constants worth taking into consideration when thinking about what to do next. I believe so. First, I believe that I \u003cem\u003eought\u003c/em\u003e to continue to love my wife; this is an ethical constant. I believe that full and deep love is unconditional; this is a definitional constant. I believe that all human beings have the authority and autonomy to exercise their own wills; this is an ontological constant. I also believe that God exists and loves \u003cem\u003eme\u003c/em\u003e; this is a faith constant. So, when I start to take all of these constants into consideration, it makes how I should respond to all of the variables a bit clearer. But before we get there, let’s take a moment to think through some of the things that are variables.\u003c/p\u003e\n\n\u003cp\u003eMy wife loving me is a variable; it could change in the future. My wife being my wife could change. Me loving my wife is variable; that could change. Me being a failed husband, that could change (not in a true ontological sense, but in a true practical sense). These are the key variables in this situation. However, in life, \u003cem\u003emost things are variables\u003c/em\u003e. Life is flux; things change. And few things are as dangerous to living life well as treating variables as constants (another danger: treating constants as variables). This is, to my mind, the main reason not to “cry over spilt milk”; milk being spilt is a variable. You can clean up the milk. You can buy new milk. You can take care not to spill the new milk. Cry about constants.\u003c/p\u003e\n\n\u003cp\u003eSo, I feel like I have some sense of what key things are constants and what things are variables. How does that affect my thinking and my action? If true and deep love is unconditional, and if I ought to continue to love my wife, then I ought to love my wife unconditionally. Now, how do I do that? As I hope you sense, this is far easier said than done. I have, in fact, thought this for years. I have believed that I \u003cem\u003eought\u003c/em\u003e to love my wife unconditionally as long as we have been married. I can say without a shadow of a doubt that I have \u003cem\u003enever\u003c/em\u003e loved her unconditionally. My love always has conditions. I frequently don’t see them in the present, but they always come out, creep to the surface. One of the things I have been wrestling with lately is whether or not loving someone unconditionally was even \u003cem\u003epossible\u003c/em\u003e. Am I barking up the wrong tree here? Is this a fool’s errand? My answer today is, no. It \u003cem\u003eis\u003c/em\u003e possible to love someone unconditionally, and I really only have one piece of evidence to support that. I believe that we can love someone unconditionally because we love \u003cem\u003eourselves\u003c/em\u003e unconditionally. The more I think about it, the clearer it becomes. I fully believe that I have failed in my role as a husband, yet I still love myself. In fact, it wasn’t that hard. I wasn’t always happy with myself, I wasn’t always satisfied, but I can’t remember ever not loving myself. And the reason seems pretty simple. If love, true love, is the other side of true empathy, then how could we ever not empathize with ourselves? I am me, therefore I understand what it is like to be me. I am in my own shoes, so to speak. And certainly it is harder to love another person unconditionally, but I do believe it is possible. I can’t imagine that it is possible to do all the time, to do perfectly, but what is? I’m not searching for perfection, I’m searching for deeply meaningful love.\u003c/p\u003e\n\n\u003cp\u003eMy goal in this Lenten season is to come to love my wife unconditionally. That is my true goal. “Giving up my marriage” for Lent is merely the means I am attempting to reach that end. And the reason I chose that means, that path, is simply because I have come to realize one of the deepest conditions of my love: returned love. I feel slighted, I feel wronged when I love and that love is not returned. “That is unfair”, I say to myself (maybe even to others at times); or even, “That’s just plain stupid”. Why give out love for nothing? I’m devaluing my love. I’m selling my stock short. If you want my love, you have to give me something back in return. And when it comes to my wife, what I want back is deep love. I want her to accept me, to see me as I truly am and to accept and love me. I want her to know me, I want her to join with me in living life. I want to become one. I want her to want me. I want it, I need it. And every time I act out of love and I don’t feel that her response is up to snuff, I feel victimized, hell, I feel dehumanized. I have reached out in love, I have tried to see you and to know you as you truly are, and \u003cem\u003ethis\u003c/em\u003e is what I get in response? Like a petulant child, I cry foul. This isn’t right, this isn’t fair! Well, one of the constants I laid out earlier states that all human beings have the authority and autonomy to exercise their own wills. I also stated earlier that I have no right to my wife’s (or anyone’s) love. It is not owed to me, regardless of what I do or don’t do. Thus, I feel I must give up my marriage for Lent. I must spend 40 days in an emotional desert in the hopes of finding the grace to love without requiring love back. As long as I feel wronged by not being loved by someone, I am utterly incapable of loving that person unconditionally.\u003c/p\u003e\n\n\u003cp\u003eThis brings me, finally, back to the season of Lent. We Christians spend 40 days in fasting as we prepare for Easter, the day that signifies Jesus Christ’s rise from death. And while I do believe that the variables and constants outlined above, the behaviors and thoughts that I espouse, are true for anyone, regardless of religion or faith, these things make the most sense, contain the most truth, when viewed within the light of the Christian faith. Within that light, we see that there are in fact two instances of unconditional love. Not only do we, as humans, unconditionally love ourselves (“love your neighbor as yourself”), but God himself, incarnated, loved each and every one of us unconditionally. He did not require love in return, he simply loved. He loved fully and he loved deeply. He loved to the point of death. He loved in ways and to degrees that I cannot and probably will never fathom. And yet that is my desire. I want to love as Christ loved. But how? How can I ever possibly hope to love like that? I know for a fact that I will never love in that manner on my own. I’ve tried, and every time I have failed. It is beyond me. I am too selfish, too self-centered; I am too \u003cem\u003eme\u003c/em\u003e. I am ontologically, at the core of my being, incapable of giving out love without receiving love. I \u003cem\u003emust\u003c/em\u003e be loved. I, my self, my ego, is nothing, is undefined, until I am loved. There is no subject \u003cem\u003eI\u003c/em\u003e until there is the object \u003cem\u003eme\u003c/em\u003e. My identity, first and foremost, exists as an object in a sentence with some other subject. I can do nothing until He loved me; I am nothing until He loved me. You see (but do I?), I am already loved, I already have all that I need. I can give love to others because I have received love from God, from Christ. I \u003cem\u003eknow\u003c/em\u003e this. This Lent, I pray that I will \u003cem\u003efeel\u003c/em\u003e this. I pray that I will feel God’s love so fully, so deeply, so truly that I can love others unconditionally as easily as I love myself. And so, this Lent, I am giving up my marriage in the hope and with the prayer that by giving God the space, finally, to be the source of my “belovedness” (and not my wife, or my family, or my peers, as it has been in the past), I will grow able to love others (my wife, my family, my peers) as Christ loves me.\u003c/p\u003e\n","type":"article"},{"title":"Patience ...","url":"/jots/201602101939/","content":"\n","type":"article"},{"title":"Sometimes the most loving action is inaction.","url":"/jots/201602091517/","content":"\n","type":"article"},{"title":"To love is nothing more than to see another as fully human.","url":"/jots/201602041409/","content":"\n","type":"article"},{"title":"Pain is a yoke requiring another.","url":"/jots/201601192153/","content":"\n","type":"article"},{"title":"A man’s greatest threats are often the barely bearable burden and the barely there burden.","url":"/jots/201601152317/","content":"\n","type":"article"},{"title":"The discrete is nothing but an accident of the infinite.","url":"/jots/201601011324/","content":"\n","type":"article"},{"title":"Analogies are broken fractals.","url":"/jots/201510212018/","content":"\n","type":"article"},{"title":"Consolation and Commemoration in Horace Odes 1.24 and 4.12","url":"/essays/consolation-and-commemoration-in-horace-odes-1-24-and-4-12/","content":"","type":"article"},{"title":"Evidence and Inference in Herodotus","url":"/essays/evidence-and-inference-in-herodotus/","content":"","type":"article"},{"title":"Full communication is actually impossible, and the degree of communication we do have is a total miracle.","url":"/jots/201509221446/","content":"\n","type":"article"},{"title":"To understand and be understood, that is the quest.","url":"/jots/201509221444/","content":"\n","type":"article"},{"title":"git-do","url":"/projects/git-do/","content":"\u003ch4 id=\"version-01\"\u003eVersion 0.1\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-githubhttpsgithubcomsmarghgit-do\"\u003eDownload on \u003ca href=\"https://github.com/smargh/git-do\"\u003eGitHub\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e is a \u003ca href=\"https://git-scm.com/\"\u003eGit\u003c/a\u003e extension that adds a new perspective to the standard Git workflow. I conceive of it as a promises-based workflow.\u003c/p\u003e\n\n\u003cp\u003eTo better explain, let me begin by laying out the default Git workflow:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eYou start working on a new feature/fix/item\u003c/li\u003e\n  \u003cli\u003eMaybe you create a new branch for this feature to live in\u003c/li\u003e\n  \u003cli\u003eYou get in the flow and knockout the feature in 1 hour\u003c/li\u003e\n  \u003cli\u003eYou realize you should commit some of this great workflow\u003c/li\u003e\n  \u003cli\u003eYou want your commit history to be clean and readable, so you want to chunk your work into logical commits\u003c/li\u003e\n  \u003cli\u003eSo, you use \u003ccode\u003egit status\u003c/code\u003e and \u003ccode\u003egit diff\u003c/code\u003e to figure out which changes/additions/deletions should live together in a single commit\u003c/li\u003e\n  \u003cli\u003eThis whole time, your mind is running forward, thinking of the next thing you \u003cem\u003eactually want to code\u003c/em\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis general flow happens to me almost every time I code. I’m future oriented, always thinking about what’s next. So, few things bog me down quite like having to stop after writing code only to retroactively document what I’ve done. This is Git’s default point-of-view: backwards-facing, past-oriented. You can only commit \u003cem\u003eafter\u003c/em\u003e you’ve done some work.\u003c/p\u003e\n\n\u003cp\u003eNow, of course, this makes good sense. How could you commit nothing? You need to have done something in order to commit it. Yes, but committing is more than simply adding your work to the Git history; committing is also directly tied to documenting, describing, and summarizing your work. As many developers have argued, commit messages explain \u003cem\u003ewhy\u003c/em\u003e the changes are there (diffs explain \u003cem\u003ewhat\u003c/em\u003e changed).\u003c/p\u003e\n\n\u003cp\u003eIn an intriguing and well-written \u003ca href=\"https://arialdomartini.wordpress.com/2012/09/03/pre-emptive-commit-comments/\"\u003eblog post\u003c/a\u003e, Arialdo Martini suggests that pre-emptive commit messages confer a number of benefits:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eMore focus while developing\u003c/li\u003e\n  \u003cli\u003eCommit review is easier\u003c/li\u003e\n  \u003cli\u003eLess cognitive load\u003c/li\u003e\n  \u003cli\u003eMore precise comments\u003c/li\u003e\n  \u003cli\u003eDeclaration of intent\u003c/li\u003e\n  \u003cli\u003eTriggers micro design session\u003c/li\u003e\n  \u003cli\u003eSets a micro goal\u003c/li\u003e\n  \u003cli\u003eCreates a little timebox\u003c/li\u003e\n  \u003cli\u003eCommit history gains balanced granularity\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eI heartily recommend that you read the entire post and wrestle with Arialdo’s points yourselves; I, for one, think he’s on to something. Pre-emptive commit messages have become, for me, something akin to micro \u003ca href=\"\"\u003efeature branches\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eWhen using feature branches, you necessarily are pre-planning what all the feature entails, how best to describe/name it, and what it looks like to complete said feature. Pre-emptive commit messages are conceptually the same thing, just on a smaller scale. In addition to considering what an entire feature entails, you consider what your next commit will entail \u003cem\u003ebefore you start writing any code\u003c/em\u003e for that commit. This method of working forces you to \u003ca href=\"http://programmer.97things.oreilly.com/wiki/index.php/Know_Your_Next_Commit\"\u003eknow your next commit\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eAs a co-developer pointed out, this is really just taking the philosophy of Test-Driven Development (TDD) and enforcing it’s mental model even at the commit level (conceptually, the commit is the atomic unit of Git). Everything you do, you do with purpose. You declare your intention before you begin. You know exactly what the code needs to do for this commit to be ready. You make a promise with yourself.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThe actual api for \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e is utterly simple. Before you start your next task (by “task” here I mean whatever you conceive of as your smallest unit of work), you run \u003ccode\u003egit do \"\u0026lt;message\u0026gt;\"\u003c/code\u003e. As soon as you have completed your task, you run \u003ccode\u003egit done\u003c/code\u003e. That’s it!\u003c/p\u003e\n\n\u003cp\u003eUnder the hood \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e is doing a few things. First, it will save your commit message to a temporary file (in a created \u003ccode\u003e.git/.git-do/\u003c/code\u003e directory) as well as the name of whatever branch you are on when you run the \u003ccode\u003egit do\u003c/code\u003e command. It will then create and checkout a new branch (using the naming schema \u003ccode\u003edo/\u0026lt;slugify(message)\u0026gt;\u003c/code\u003e). \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e checkouts out a new branch so that you have a safe “sand-box” to do your work, allowing you to leave if something urgent comes up (e.g. you need to create a hotfix branch from master and solve a critical problem). This branch, however, will be deleted as soon as you run \u003ccode\u003egit done\u003c/code\u003e, so you should always think of it and treat it as a temporary branch.\u003c/p\u003e\n\n\u003cp\u003eAs you do your work in the \u003ccode\u003edo/\u003c/code\u003e branch, you need not commit anything. Remember, \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e exists at the level of the individual commit. If you think you want to use \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e, but think you will probably have multiple commits, create a feature branch instead. Once you have finished whatever constitutes your commit, you run \u003ccode\u003egit done\u003c/code\u003e. This will stage and commit all of the changes made in the \u003ccode\u003edo/\u003c/code\u003e branch. It will use the message your wrote for \u003ccode\u003egit do\u003c/code\u003e as the actual commit message. It will then checkout the \u003ccode\u003edo/\u003c/code\u003e branch’s parent branch and merge that one commit. This merge must be a \u003ca href=\"\"\u003efast forward merge\u003c/a\u003e, which means you can’t have changed or done anything in the parent branch after running \u003ccode\u003egit do\u003c/code\u003e but before running \u003ccode\u003egit done\u003c/code\u003e (Again, anything you do using \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e should fit in one commit and should be your branch’s next commit. Don’t let the fact that \u003cstrong\u003e\u003ccode\u003egit-do\u003c/code\u003e\u003c/strong\u003e creates a temporary branch lull you into thinking you should treat your work there as anything but a single, simple commit).\u003c/p\u003e\n\n\u003cp\u003eAfter merging your commit into the original parent branch, \u003ccode\u003egit done\u003c/code\u003e will delete the \u003ccode\u003edo/\u003c/code\u003e branch. So, if you have a terminal prompt that doesn’t specify the current branch, you would never know the \u003ccode\u003edo/\u003c/code\u003e branch ever existed. Your commit history would look exactly as it would had you done the work and written the commit message at the end.\u003c/p\u003e\n\n\u003cp\u003eBelow is a (contrived) example to demonstrate how simple and short I believe the workflow ought to be:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"gp\"\u003e$ \u003c/span\u003egit \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Demonstrate how git-do works for my project page\"\u003c/span\u003e\n\u003cspan class=\"gp\"\u003e$ \u003c/span\u003etouch demonstration.txt\n\u003cspan class=\"gp\"\u003e$ \u003c/span\u003evi demonstration.txt\n\u003cspan class=\"gp\"\u003e$ \u003c/span\u003egit \u003cspan class=\"k\"\u003edone\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"A Depressed Graduate Student","url":"/articles/a-depressed-graduate-student/","content":"\u003cp\u003eIn my \u003ca href=\"http://fractaledmind.com/articles/a-failed-graduate-student\"\u003eprevious post\u003c/a\u003e on my time in graduate school, I discussed how I learned to handle failures better. Today, I’m going to talk about how I failed to handle the depression that these mounting failures produced.\u003c/p\u003e\n\n\u003cp\u003eLet’s start where some people find it difficult to start: I have struggled with depression, and odds are that I will stuggle with depression again in my future. This isn’t a sign of weakness; this isn’t something shameful. This is just a fact of my life. I’m a self-critical perfectionist who tends toward absolutist perceptions of reality; of course I’m going to struggle with depression. Unfortunately, when I entered graduate school, I was generally unaware of this likelihood. As with Imposter’s Syndrome, I thought I knew what depression was and I thought I could spot it fairly early on. And, as with Imposter’s Syndrome, it snuck up on me slowly but fiercely.\u003c/p\u003e\n\n\u003cp\u003eWhen you feel like you are failing frequently and regularly, when those failures build up on top of one another, it can start to have odd effects. The more I thought I failed, the more I wanted to succeed in my next task. Yet, the more I thought I failed, the less energy I had to put into that next task. “I’ve failed at these things; I’ll probably fail at this. Why even try so hard?” This is the internal thought-process I assume my mind had. I say “assume” because I never consciously thought anything like this. My conscious mind wanted to succeed, to return to my old form. My unconscious mind seems to have grown more and more weary, more and more gun-shy.\u003c/p\u003e\n\n\u003cp\u003eFor me, depression felt like I was loosing control of my intention. What my conscious mind wanted seemed to have very little effect over what I actually ended up doing. This is the vicious cycle that Imposter’s Syndrome and Depression can generate. The more I thought I was failing, the less energy I could muster to tackle the next task. Putting less energy in, I was more likely to see the result (whatever it might actually be) as a failure, a failure to perform with enough vim and vigor. Failure -\u0026gt; Waning energy -\u0026gt; Failure … on and on.\u003c/p\u003e\n\n\u003cp\u003eI got caught in this cycle for probably two years without really noticing what was happening. This is one of the shittiest things about depression–once you’re in it, it is \u003cem\u003eso much harder\u003c/em\u003e to get out on your own. It’s like trying to run in mud: the more you try, the dirtier and more tired you get, without actually getting as far as you think you should.\u003c/p\u003e\n\n\u003cp\u003eDepression is a spiraling-in on oneself. You are the center of gravity, so \u003cem\u003eyou\u003c/em\u003e cannot generate the outside force to propel yourself out. However, others can. I wish I didn’t take so long to actually talk to someone about how I felt. I was so ashamed of my failures, so oblivious to my depression, so insecure in my position, that I kept everything hidden, consciously. There can be a quiet cloud that lingers over graduate school which says that weakness is death, progress is paramount. In many departments, this isn’t probably actually true, but the shadow remains, and a shadow can be enough. I lived in that shadow for far too long.\u003c/p\u003e\n\n\u003cp\u003eBut, after finally getting to a point where I simply was unable to keep moving forward with all of the stress internalized, I went and got help. I started going to a therapist. This was a wise decision. No practical effects came of it–I didn’t get any diagnoses, no prescriptions–but I did get better. Talking with someone, being honest about my feelings, emotions, fears, got those things outside of my head, put them in front of me, and thus allowed me to see them for the puny things they were. Fear and depression grow in the shadow; in the light, they shrink to their actual sizes.\u003c/p\u003e\n\n\u003cp\u003eSo, I’ve been depressed, I’ve been (and continue to go) to therapy. For anyone out there in anything at all similar to my situation, know that understood weakness is the foundation of wisdom, progress without wisdom is folly, and getting help really will help.\u003c/p\u003e\n","type":"article"},{"title":"A Failed Graduate Student","url":"/articles/a-failed-graduate-student/","content":"\u003cp\u003eI’m no longer a graduate student. I’ve graduated; I’m out. It’s a somewhat odd feeling, made even odder because I haven’t felt like a graduate for the last year. I was in graduate school for 3 years and got my Masters, but for the final year I was a “lame-duck” graduate student–I knew I was leaving, my department knew I was leaving, but I was still there. This lame-duck year has been odd, but it has also been the year where I have grown most, matured more, learned truly important things, and started to better understand myself. Hopefully, I can capture some glimmer of those insights in the few words that follow.\u003c/p\u003e\n\n\u003cp\u003eWhen I started graduate school, I was coming off the single most successful years of my life. I had set lofty goals as an undergraduate, and I had met all of them plus some. I literally thought I was the smartest student at a university of some 10,000 students, and I had enough evidence to convince myself and maybe even some others. I had reached summits I didn’t even know existed when I first started. To put it simply, I hadn’t really ever failed. Then, I started graduate school. I came down from the mountain and entered the valley, starting a new climb. It was odd\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e, certainly, to go from being convinced I was the smartest to feeling deep down that I was one of the dumbest. Everyone knew more than me, everyone knew how to talk better than me, everyone looked calmer than me, everyone was ahead of me. I had heard of “Imposter’s Syndrome” before I came to graduate school, and I thought I knew what it was. I was wrong. You think you’ll be able to spot a “syndrome” when you’re inside of it–“I won’t foolishly think I’m dumb if in actuality I’m not”, I thought. The whole crux of Imposter’s Syndrome is that it is a false perception of reality. I’ll know when I’m perceiving reality incorrectly, won’t I? Well, not to fall too deeply into the Matrix metaphor, but how will you know if your perception of reality is true or not if you don’t have any other external guide? In graduate school, I failed to find such a guide. No one ever told me that I was dumb, that I was saying dumb things, that I was mucking things up; but, no one ever told me otherwise either. For me, this was one of the hardest things about graduate school–I got virtually no feedback, and when I did, it was either generic or negative. The negative feedback, however, was apparently institutional. “Don’t worry about your first year translation exams. Everyone fails and everyone gets bad emails.” This is what multiple upper-classmen in the department told me. Well, I took my first year translation exams; I failed; I got a bad email. Apparently, just like everyone else. But how can I know that my email was “just like” everyone else’s. Why would anyone say something that wasn’t at least based in truth? Why would someone say that it didn’t appear that I \u003cem\u003etruly\u003c/em\u003e knew Latin if that was false? Maybe everyone got somewhat negative emails, but I got the truth, and the truth was horrific. I failed, and I failed hard; a first, but not the last.\u003c/p\u003e\n\n\u003cp\u003eFailure is hard. It’s harder still when you don’t really know how to deal with it. I spent most of graduate school feeling like I had failed in small ways time and time again. Turn in a paper, no response = failure. Turn in a paper late, good response = failure. Bumble a sight-reading in class = failure. Not get through all the assigned reading = failure. Not talk enough in class = failure. Talk too much in class = failure. I’ll let you in on a nasty secret–most of those things I saw as failures, my professors didn’t even notice. One of the most liberating things that came out of me talking to my professors about my desire to leave was learning how surprised they were. They thought I was a good student, added value to the department, did good work, was bright. I never would have thought that. Never. And this is the pernicious trouble with unhandled failure–it blinds you. I couldn’t handle my failures, real or perceived, and so they built up on top of one another. Each increasing the odds that I would see more failures in the future. The more you fail, you more you think of yourself as a failures. What do failures do, they fail, so you expect to fail more, so you see more failures, and the process spirals out of control. To anyone who may read this, \u003cstrong\u003edon’t be stupid, learn to handle failure\u003c/strong\u003e. Well, you would ask, how the hell do I do that? To be honest, I’m not entirely sure still, but I think I’ve gotten better, so I’ll talk about those small advancements.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eNot all failures are created equal.\u003c/em\u003e This may seem obvious, but it took me an unfortunately long time to realize this simple truth. True failures live on a spectrum, some more grievous than others. A typo in this essay is a failure. Missing a bill payment is a failure. Clearly, they are different failures with different weights. Don’t waste your energy lamenting the small ones. If the problem is fixable, fix it and move on. If not, add a mental note to not make that same mistake in the future and move on. Save your energy to lament the big ones.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eLament big failures.\u003c/em\u003e Don’t try to bottle away emotion caused by failure.Don’t try to act like a robot who can rationally handle the failure and move on easily. If you failed, it will make you feel bad. Actually feel that. Allow yourself to sit in that emotion for a bit. Acknowledge its existence. I let way too many failures build up because I thought I had dealt with them simply by rationalizing them. “Failed in this way, by doing these things. Don’t do those things in these situations again. Dealt with.” I was dumb.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eDon’t wallow.\u003c/em\u003e Sit in emotion, but don’t swim in it. You do need to move on. While only rationalizing away a failure will probably cause you more grief further down the road, not actually rationally considering how you failed, what you did to directly cause the failure, and how best to avoid that failure in the future, you will probably just spiral into depression. Failing sucks, but it is a much better learning experience than success.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003eTalk with someone.\u003c/em\u003e This can work on a number of fronts. You should actually talk with people to ensure that your sense of the failure (its existence, weight, repercussions) are close to reality. If only I had sat down and had frank conversations with my professors early and often, I would have learned that I was grossly over-estimating the weight of my perceived failures. But, even if you did actually fail, talking to someone ensures that you don’t try to deal with it all on your own. We’re social animals; don’t fight that.\u003c/p\u003e\n\n\u003cp\u003eOK. This little sermonette is over, but I wanted to go down that path because it’s intensely important to me. Learning to deal with failure was the primary benefit of graduate school for me. From what I gather talking to others, it’s an absolutely essential part of any successful individual, whether graduate student or not. More importantly, however, not handling failure well is what sent me into depression. This is a deeper topic for discussion and consideration in another post, but suffice it say that I would wish for no one to become depressed due to perceived failures. I would confidently assert, without knowing anything about you individually, that you almost certainly haven’t failed as badly as you think, the repercussions aren’t as dire as you think, and your worth is still much higher than you think. If you don’t take my word for it, talk to someone else and check; you might be surprised by what they think.\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eThere’s that word again. I will almost certainly return to it, as its monosyllabic gruffness is the closest I can come to capturing reality. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"ZotQuery","url":"/projects/zotquery/","content":"\u003ch4 id=\"version-85\"\u003eVersion 8.5\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-packalhttppackalorgworkflowzotquery\"\u003eDownload on \u003ca href=\"http://packal.org/workflow/zotquery\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e is an Alfred workflow that grants the user access to the data stored in their \u003ca href=\"https://www.zotero.org\"\u003eZotero\u003c/a\u003e application.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"requirements\"\u003eREQUIREMENTS\u003c/h3\u003e\n\n\u003cp\u003eTo date, it has only been tested on a Mac with both Zotero Firefox and Standalone installed. \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e should work with only Zotero Firefox or Standalone installed, but that is currently untested. If you are using the workflow successfully with either one only installed, please let me know. It has also only been tested on Alfred 2.1+. Finally, it was tested on the standard Python distribution for Mac OS X Mavericks (10.9), which is 2.7.6, and not on Python 3. Once again, if anyone is using the workflow successfully on another distribution of Python, please let me know.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"configuration\"\u003eCONFIGURATION\u003c/h3\u003e\n\n\u003cp\u003eWhen you first download the workflow, you will need to run \u003ccode\u003ez:config\u003c/code\u003e first to configure the necessary settings before you attempt any queries. In fact, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e will kick you to the \u003ccode\u003ez:config\u003c/code\u003e command if you try any of the queries without having first configured your settings.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"configuration\" src=\"../../images/projects/zotquery/zq_config_init.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOn first run, the configurator will begin by searching for, and creating if necessary, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e’s workflow data folder, which can always be found at \u003ccode\u003e/Users/$USER/Library/Application Support/Alfred 2/Workflow Data/com.hackademic.zotquery/\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eNow, in version 5.5 and on, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e \u003cstrong\u003eno longer needs to install any Python dependencies.\u003c/strong\u003e The workflow ships with all necessary components baked in. This has already removed a vast majority of the support issues.\u003c/p\u003e\n\n\u003cp\u003eThe configurator next moves on to find all the necessary Zotero paths. \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e requires the full path to 3 things:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eyour Zotero sqlite database\u003c/li\u003e\n  \u003cli\u003eyour Zotero storage folder\u003c/li\u003e\n  \u003cli\u003ethe folder that holds your linked attachments\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe configurator attempts to find all necessary paths automatically, but if it fails, it will ask you to select one manually. The title of the dialog box will alert you to what path the configurator requires:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"choosing the Zotero folder where linked attachments reside\" src=\"../../images/projects/zotquery/zq_config_choose-folder.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce all paths are stored, the configurator moves on to set up your \u003ca href=\"http://www.zotero.org/support/dev/server_api/v2/start\"\u003eZotero API\u003c/a\u003e information. This workflow utilizes the Zotero API to export citations of chosen items. In order for the user to utilize these functions, they must have and set up a Zotero private key. Step one requires your Zotero User ID:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"entering Zotero user ID\" src=\"../../images/projects/zotquery/zq_config_userid.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you do not have or do not know your Zotero User ID, click the \u003ccode\u003eWhere do I find my User ID?\u003c/code\u003e button. This will open Zotero’s “Feeds/API” tab, where you may need to login. Once logged in, you will see a page similar to this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"creatingnew Zotero private key\" src=\"../../images/projects/zotquery/Zotero___Settings___Feeds_API-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis shows a user who has two API keys set up, one for personal use and one for the iOS app \u003ca title=\"PaperShip - Manage, Annotate, and Share your Papers On The Go ...\" href=\"http://www.papershipapp.com/\"\u003ePaperShip\u003c/a\u003e. If you do not have a Personal API key, you can easily set one up by clicking the “Create new private key” link. Your User ID will be a number, probably less than 8 digits. Insert it into the text field and click \u003ccode\u003eSet User ID\u003c/code\u003e (\u003cstrong\u003eNote\u003c/strong\u003e: Applescript text input dialog boxes do not respond, typically, to the keyboard shortcut for paste, so you will likely need to right-click and manually paste in the ID).\u003c/p\u003e\n\n\u003cp\u003eSecond, you will need to input your API Key:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"entering Zotero API key\" src=\"../../images/projects/zotquery/zq_config_apikey-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eSince \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e reads this \u003ccode\u003esettings.json\u003c/code\u003e file whenever it attempts to connect to the Zotero API, if you don’t insert the proper data here, the “Export Citation” and “Export Reference” (see below) functions \u003cstrong\u003ewill not work\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003eFinally, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e (now in version 4.0) will also allow you to set your export style and format. Once you have entered your API information, the configurator will move to setting your export preferences:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"choosing export style and format\" src=\"../../images/projects/zotquery/zq_prefs1.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFirst, you will select the \u003ca href=\"http://citationstyles.org/\"\u003eCSL Style\u003c/a\u003e that you wish to use. Currently \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e can export data in 5 different styles: Chicago (author-date), APA, MLA, Zotero’s own RTF-Scan format, and BibTeX. Now, in \u003cstrong\u003eversion 6.2\u003c/strong\u003e, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e will also allow users to export in the \u003ca href=\"http://zotero-odf-scan.github.io/zotero-odf-scan/\"\u003eODT-RTF Scannable Cites format\u003c/a\u003e (option not shown in image below). This will determine the format of exported citations and references.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"choosing CSL style\" src=\"../../images/projects/zotquery/zq_prefs2-4.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNext, you will select the text formatting for exported data. \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e (in version 4.0) can export in either \u003ca href=\"http://daringfireball.net/projects/markdown/basics\"\u003eMarkdown\u003c/a\u003e or \u003ca href=\"http://en.wikipedia.org/wiki/Rich_Text_Format\"\u003eRich Text\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"choosing export text format\" src=\"../../images/projects/zotquery/zq_prefs3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAll exported text is put in your clipboard, so you can use it anywhere in any text editor. You can also alter your export preferences at any point, using the \u003ccode\u003ez:settings\u003c/code\u003e command.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:settings command\" src=\"../../images/projects/zotquery/zq_export_settings.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFinally, you will need to select which Zotero client you use, either \u003ca href=\"https://www.zotero.org/download/\"\u003eZotero Standalone\u003c/a\u003e or \u003ca href=\"https://www.zotero.org/download/\"\u003eZotero for Firefox\u003c/a\u003e. This will determine which app will open any items that you select.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"choosing Zotero client\" src=\"../../images/projects/zotquery/zq_client.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce all settings and preferences are set, the configurator will finally build the JSON cache of your Zotero data. \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e will clone your Zotero database and also generate a JSON file with all pertinent information. Once cached, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e is configured.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"functions\"\u003eFUNCTIONS\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e has 5 main functions:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eSearch\u003c/li\u003e\n  \u003cli\u003eCite\u003c/li\u003e\n  \u003cli\u003eOpen\u003c/li\u003e\n  \u003cli\u003eCache\u003c/li\u003e\n  \u003cli\u003eand Add\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn general, the order of operations would be: cache, search, open/cite. This means, in order to search, you need to have an up-to-date cache, and in order to cite or open an item, you will first need to search and select it.\u003c/p\u003e\n\n\u003cp\u003eUnder \u003ccode\u003eSearch\u003c/code\u003e there are 8 options:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eGeneral search\u003c/li\u003e\n  \u003cli\u003eTitle-specific search\u003c/li\u003e\n  \u003cli\u003eAuthor-specific search\u003c/li\u003e\n  \u003cli\u003eTag-specific search\u003c/li\u003e\n  \u003cli\u003eCollection-specific search\u003c/li\u003e\n  \u003cli\u003eAttachment-specific search\u003c/li\u003e\n  \u003cli\u003eNotes-specific search\u003c/li\u003e\n  \u003cli\u003eNew items only\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eNote that all searches coerce both the query and the data into lowercase, so you can search using lowercase queries and still get matches.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eGeneral\u003c/strong\u003e search is launched by the keyword \u003ccode\u003ezot\u003c/code\u003e or the short version \u003ccode\u003ez\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot general search command\" src=\"../../images/projects/zotquery/zq_gen_init-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will search your entire Zotero database for any use of the query provided. The search script is “loose,” that is, it searches for matches of the query “in” the data not matches that “equal” the data. This means you can search half words, words in the middle of titles, etc.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e will not begin searching until you have entered at least 3 characters. This ensures faster, smarter results. Until you have typed at least 3 characters, you will see this result:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot general search with too short query\" src=\"../../images/projects/zotquery/Screen_Shot_2014-01-18_at_6_10_23_PM-4.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you complete your query, and the script catches up with you, you will see a list of all of your Zotero items that match the query. If your query doesn’t have any matches, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e returns an error:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot general search no results\" src=\"../../images/projects/zotquery/zq_error_res-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIf, however, you have results, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e presents them in a ranked order:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot general search ranked results\" src=\"../../images/projects/zotquery/zq_gen_search-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFor ease of use, the workflow provides unique icons for the various item types:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003earticle   \u003cimg alt=\"article icon\" src=\"../../images/projects/zotquery/n_article.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003ebook      \u003cimg alt=\"book icon\" src=\"../../images/projects/zotquery/n_book.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003echapter   \u003cimg alt=\"chapter icon\" src=\"../../images/projects/zotquery/n_book.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003econference paper \u003cimg alt=\"conference icon\" src=\"../../images/projects/zotquery/n_conference.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003eother \u003cimg alt=\"other icon\" src=\"../../images/projects/zotquery/n_written.png\" /\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf your item has an attachment, the icon changes to signal the addition as will the subtitle field. The subtitle field will include \u003ccode\u003eAttachments: n\u003c/code\u003e, where n is the number of attachments:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"item with attachments\" src=\"../../images/projects/zotquery/zq_attachments-4.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe altered icons each have a small plus sign in the top-right corner:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003earticle + attachment  \u003cimg alt=\"article icon with attachment\" src=\"../../images/projects/zotquery/att_article.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003ebook + attachment     \u003cimg alt=\"book icon with attachment\" src=\"../../images/projects/zotquery/att_book.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003echapter + attachment  \u003cimg alt=\"chapter icon with attachment\" src=\"../../images/projects/zotquery/att_chapter.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003econference paper + attachment   \u003cimg alt=\"conference icon with attachment\" src=\"../../images/projects/zotquery/att_conference.png\" /\u003e\u003c/li\u003e\n  \u003cli\u003eother + attachment    \u003cimg alt=\"other icon with attachment\" src=\"../../images/projects/zotquery/att_written.png\" /\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eAuthor\u003c/strong\u003e search is launched by \u003ccode\u003ezot:a\u003c/code\u003e or the short version \u003ccode\u003eza\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot:a author search command\" src=\"../../images/projects/zotquery/zq_a_init-4.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis search only queries the last names of the authors of your Zotero data. For example: \u003ccode\u003ezot:a thomas\u003c/code\u003e will return all the items that have an author (or editor, translator, etc.) with the last name “Thomas”.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot:a author search results\" src=\"../../images/projects/zotquery/zq_a_search-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eTitle\u003c/strong\u003e search is launched by \u003ccode\u003ezot:t\u003c/code\u003e or the short version \u003ccode\u003ezt\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot:t title search command\" src=\"../../images/projects/zotquery/zq_t_init-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis search only queries the title fields of your Zotero data. For example: \u003ccode\u003ezot:t virgil\u003c/code\u003e will return all of the items whose title contains the word “Virgil”.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot:t title search results\" src=\"../../images/projects/zotquery/zq_t_search.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe final two searches (Tag and Collection) are two-step searches. In step-one, you search \u003cem\u003efor\u003c/em\u003e a particular Tag or Collection; in step-two you search \u003cem\u003ewithin\u003c/em\u003e that particular Tag or Collection for your query.\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eTag\u003c/strong\u003e search is launched by \u003ccode\u003ez:tag\u003c/code\u003e or the short version \u003ccode\u003eztg\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:tag tags search command\" src=\"../../images/projects/zotquery/zq_tag_init.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis allows you to search through all of your Zotero tags.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:tag tags search results\" src=\"../../images/projects/zotquery/zq_tag_search.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you select a tag, Alfred will automatically initiate the \u003ccode\u003ezot:tag\u003c/code\u003e search, which will search within that tag for your query. The \u003ccode\u003ezot:tag\u003c/code\u003e (or \u003ccode\u003eznt\u003c/code\u003e) query functions just like the general \u003ccode\u003ezot\u003c/code\u003e query, except that it is limited to those items with the previously chosen tag.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot:tag in-tag search results\" src=\"../../images/projects/zotquery/zq_intag_seach.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe \u003cstrong\u003eCollection\u003c/strong\u003e search is similar. It is launched by \u003ccode\u003ez:col\u003c/code\u003e, or by \u003ccode\u003ezc\u003c/code\u003e, which begins a search for all of your Zotero collections.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:col collections search command\" src=\"../../images/projects/zotquery/zq_col_init.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs you type, it will filter any collections that contain the query.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:col collections search results\" src=\"../../images/projects/zotquery/zq_col_search-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you choose a particular collection, Alfred will initiate the \u003ccode\u003ezot:c\u003c/code\u003e search (also \u003ccode\u003eznc\u003c/code\u003e), which will search within that particular collection.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"zot:c in-collection search results\" src=\"../../images/projects/zotquery/zq_incol_search.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs above, the \u003ccode\u003ezot:c\u003c/code\u003e search functions just like the simple \u003ccode\u003ezot\u003c/code\u003e search.\u003c/p\u003e\n\n\u003cp\u003eFinally, you can now (after version 4.1) search only items with attachments using the \u003ccode\u003ez:att\u003c/code\u003e query (short version = \u003ccode\u003ezat\u003c/code\u003e). This query allows you to quickly find pdfs or epubs in your Zotero library and open them in your default application. As of now, \u003ccode\u003ez:att\u003c/code\u003e only allows for you to open the attached files.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:att attachments search results\" src=\"../../images/projects/zotquery/zq_attachment_search.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eSimilarly, you can use \u003ccode\u003ezot:n\u003c/code\u003e (or \u003ccode\u003ezn\u003c/code\u003e) to search through the notes for any items. This can prove very helpful for people who use Zotero as their notes repository for all of their secondary sources.\u003c/p\u003e\n\n\u003cp\u003eFinally, the \u003ccode\u003ez:new\u003c/code\u003e search will bring all of the items added to Zotero since the last cache update. This feature is there to make it easier to find items if you do one long research run, adding lots of items to Zotero before re-using \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e. Using \u003ccode\u003ez:new\u003c/code\u003e you can double check exactly what’s been added.\u003c/p\u003e\n\n\u003cp\u003eTogether these 8 search options provide you with various ways to find the exact item you need. Once you find that item, you have a few options with what you can do next.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eOnce you select an item (in all the searches except \u003ccode\u003ez:att\u003c/code\u003e), there are 5 options:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eOpen Zotero to that item.\u003c/li\u003e\n  \u003cli\u003eExport a short reference to that item.\u003c/li\u003e\n  \u003cli\u003eExport a citation of that item.\u003c/li\u003e\n  \u003cli\u003eOpen the item’s attachment (if it has any).\u003c/li\u003e\n  \u003cli\u003eAppend a citation of the item to a temporary bibliography\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIf you merely hit \u003ccode\u003ereturn\u003c/code\u003e on your chosen item, option 1 will occur and Zotero will open to that item.\u003c/p\u003e\n\n\u003cp\u003eIf you hit \u003ccode\u003eoption+return\u003c/code\u003e when you choose your item, you will export a short reference to that item.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"export reference\" src=\"../../images/projects/zotquery/zq_gen_ref.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eDepending on your style and format settings, your reference will be of various types.\u003c/p\u003e\n\n\u003cp\u003eIf you hit \u003ccode\u003econtrol+return\u003c/code\u003e, you will export a full citation of the item in your chosen format.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"export markdown citation\" src=\"../../images/projects/zotquery/zq_gen_cite.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNext, if you hit \u003ccode\u003eshift+return\u003c/code\u003e, you will open the attachment of that item.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"open attachment\" src=\"../../images/projects/zotquery/zq_gen_open.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFinally, if you hit \u003ccode\u003efn+return\u003c/code\u003e, you will append a citation of the item to a temporary bibliography file.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"append markdown citation to bibliography\" src=\"../../images/zq_gen_append.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis bibliography file is stored in the workflow’s cache folder. You can add as many citations to it as you wish. This function allows you to dynamically build a Bibliography/Works Cited page. When you have put all the needed citations in the temporary file, you need only run the \u003ccode\u003ez:bib\u003c/code\u003e command to export them.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:bib export command\" src=\"../../images/projects/zotquery/zq_bib_init-5.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will take all of the citations in the temporary bibliography file, organize them in alphabetical order, and copy the result to the clipboard. A result in Markdown format will resemble this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"exported markdown citations example\" src=\"../../images/projects/zotquery/WORKS_CITED-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe temporary bibliography file is not the only way, however, to automatically generate a full Bibliography/Works Cited page. Since many Zotero users, myself included, use either Tags or Collections to organize their library into writing projects, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e also allows the user to export a full formatted bibliography (in alphabetical order) for any Tag or Collection.\u003c/p\u003e\n\n\u003cp\u003eWhen you are searching for a Tag or a Collection with \u003ccode\u003ez:tag\u003c/code\u003e or \u003ccode\u003ez:col\u003c/code\u003e, you can use \u003ccode\u003econtrol+return\u003c/code\u003e to export a bibliography of that Tag or Collection, instead of simply searching within that Tag or Collection by hitting \u003ccode\u003ereturn\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"export bibliography of collection\" src=\"../../images/projects/zotquery/zq_col_bib.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThus, if you organize the citations for particular project within a certain Collection or under a certain Tag, you can create full, formatted Works Cited pages on the fly from \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e!\u003c/p\u003e\n\n\u003cp\u003eTaken together, these export options make \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e an academic’s best friend in the writing process. You can insert in-text references, full citations, or generate entire Works Cited all from \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e. These citations, references, and bibliographies can also now be Rich Text in addition to Markdown. This allows users who write in \u003ca href=\"http://office.microsoft.com/en-us/word/\"\u003eMicrosoft Word\u003c/a\u003e, \u003ca href=\"http://www.apple.com/mac/pages/\"\u003ePages\u003c/a\u003e, or \u003ca href=\"http://literatureandlatte.com/scrivener.php\"\u003eScrivener\u003c/a\u003e to utilize \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e. You can also open Zotero directly to an item (for quick meta-data editing) or even open an item’s attachment to double check a quote.\u003c/p\u003e\n\n\u003cp\u003eThere are, however, a few caveats and possible configurations. First, these final options (export reference, export citations, append citation, and generate works cited) all use Zotero’s web API, and so they require an internet connection. If you are not connected to the internet, all will fail (gracefully). Second, the workflow defaults to Chicago (author-date) style both for short references and full citations (examples above). If you wish to use another of Zotero’s CSL styles, you will need to change the style via the \u003ccode\u003ez:settings\u003c/code\u003e command. Since \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e now exports BibTeX and RTF-Scan cite keys, even users who prefer to write in [MultiMarkdown](http://fletcherpenney.net/multimarkdown/ “MultiMarkdown - fletcherpenney.net”) and convert to [LaTeX](http://www.latex-project.org/ “LaTeX – A document preparation system”) can utilize \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: These features will also require that you have the proper Zotero API data in the \u003ccode\u003esettings.json\u003c/code\u003e file. For instructions on setting this up, see above.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThere is also the Caching function. All of the query scripts are querying a JSON cache of your Zotero database. This file is created and then updated with the keyword \u003ccode\u003ez:cache\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"z:cache caching command\" src=\"../../images/projects/zotquery/zq_cache_init-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis function will find your Zotero sqlite database, read its contents, and create a JSON cache of the pertinent information.\u003c/p\u003e\n\n\u003cp\u003eWhen you first download the workflow, the configurator will run this command in order to create the cache that all of the query scripts will read. You will always be able to update the cache with this command as well, although the workflow is configured to auto-update the cache after every query execution; that is, after you do any action on an item (open, reference, citation, append). This means that after you perform an action on an item, the workflow will check if the cache needs updating and if so, the workflow will update it in the background.\u003c/p\u003e\n\n\u003cp\u003eNote, however, that if you have altered your Zotero data and are about to use \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e, you will need to force an update using \u003ccode\u003ez:cache\u003c/code\u003e before any of the queries have access to the new information. As a general rule of thumb, I will force update the cache each time I sit down to a lot of work with \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e, but will let it auto-update most of the time.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"additional-features\"\u003eADDITIONAL FEATURES\u003c/h3\u003e\n\n\u003cp\u003eAside from the core features, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e comes with some additional features. First, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e comes with the ability to set up a keyboard shortcut to launch the title-specific search. I use \u003ccode\u003ecommand+shift+Z\u003c/code\u003e as my hotkey. If you setup the hotkey, you can launch immediately into the title search (with a snazzy interface):\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"auto title search\" src=\"../../images/projects/zotquery/zq_hotkey_search-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eYou can also change this hotkey to launch whichever query you like.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e also has the ability to be an option in your Alfred fallback searches. In order to setup \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e as a fallback search option, open Alfred’s preferences and go to the \u003ccode\u003eFeatures\u003c/code\u003e tab. Near the bottom of the page you will see a button to \u003ccode\u003eSetup fallback results\u003c/code\u003e:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"add fallback search in preferences pt. 1\" src=\"../../images/projects/zotquery/zq_fallback_setup-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eWhen you click that button a panel will slide out of top:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"add fallback search in preferences pt. 2\" src=\"../../images/projects/zotquery/zq_fallback-3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eClick the \u003ccode\u003e+\u003c/code\u003e button and select \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e from the \u003ccode\u003eWorkflow Trigger\u003c/code\u003e list. You can even re-order the fallback searches, and put \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e near the top. When setup, this will allow you to search in Alfred like this:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"add fallback search in preferences pt. 3\" src=\"../../images/projects/zotquery/zq_fallback_search-2.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAnd have it immediately become a \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e search.\u003c/p\u003e\n\n\u003cp\u003eIt’s also possible to manually determine what \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e will use to search for the various query types. \u003cstrong\u003eNOTE:\u003c/strong\u003e This is probably a \u003cem\u003epower-user\u003c/em\u003e feature and not for those who don’t know their way around JSON.\u003c/p\u003e\n\n\u003cp\u003eIn order to alter the search scope for any query type, you will need to find and open the \u003ccode\u003ezot_filters.json\u003c/code\u003e file in \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e’s storage folder (\u003ccode\u003ez:bug\u003c/code\u003e -\u0026gt; \u003ccode\u003eStorage\u003c/code\u003e to open that folder). If you edit this file, it changes what \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e looks at for the various filters. The file is (obviously) in JSON format. The keys are the various types of filters (\u003ccode\u003egeneral\u003c/code\u003e, \u003ccode\u003etitles\u003c/code\u003e, \u003ccode\u003ein-collection\u003c/code\u003e, etc). For each key, there is a list of items that it will search. This items are themselves lists with two items (except for \u003ccode\u003enotes\u003c/code\u003e, which is only one item). To remove an item, be sure to remove its entirety:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e[\n\"data\",\n\"title\"\n],\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou could also use a scripting language to read the JSON, manipulate the dictionary, then overwrite the file with new JSON.\u003c/p\u003e\n\n\u003cp\u003eAnother “power-user” feature allows users to limit the overall scope of \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e to only their personal library. Since \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e now indexes and caches any Group Libraries that you may be a part of, these items are searchable from \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e. However, it is occasionally the case that user’s don’t want to search these items, but only their own personal items. In order to restrict \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e’s scope to \u003cem\u003eonly\u003c/em\u003e your personal library, you only need to change a few things.\u003c/p\u003e\n\n\u003cp\u003eIf you open Alfred and \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e, and you open the Run Script action connected to \u003ccode\u003ez:cache\u003c/code\u003e you will find this:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003epython zotquery.py --cache True False\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThese three arguments tell zotquery to use the caching object (\u003ccode\u003e--cache\u003c/code\u003e), to force a cache update (\u003ccode\u003eTrue\u003c/code\u003e) and to not limit the scope to only the user’s personal library (\u003ccode\u003eFalse\u003c/code\u003e). As detailed in the description at the top of \u003ccode\u003ezotquery.py\u003c/code\u003e, the last argument is a Boolean value for whether or not to limit the scope of the cache to the user’s personal library. By default, it is set to \u003ccode\u003eFalse\u003c/code\u003e, which means that group libraries are included in \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e’s cache. If you change this to \u003ccode\u003eTrue\u003c/code\u003e, \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e will only cache your personal library, and thus will only search your personal library.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e also has a cache updater that runs each time you perform an action. This is the Run Script action beneath the “Citation Copied!” notification for each filter type. If you open this Run Script action you will see:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003epython zotquery.py --cache False False\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eThis will check to see if the cache needs updating (thus the \u003ccode\u003eFalse\u003c/code\u003e force argument), and will include all libraries. To exclude group libraries, change each of these Run Script actions to:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003epython zotquery.py --cache False True\u003c/code\u003e.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eSo that’s how you use \u003cstrong\u003e\u003ccode\u003eZotQuery\u003c/code\u003e\u003c/strong\u003e. It’s a powerful tool. I hope you like it.\u003c/p\u003e\n","type":"article"},{"title":"Wikify","url":"/projects/wikify/","content":"\u003ch4 id=\"version-26\"\u003eVersion 2.6\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-packalhttpwwwpackalorgworkflowwikify\"\u003eDownload on \u003ca href=\"http://www.packal.org/workflow/wikify\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e is a workflow to add some great \u003ca href=\"http://daringfireball.net/projects/markdown/\"\u003eMarkdown\u003c/a\u003e and wiki goodness to \u003ca href=\"https://www.evernote.com/\"\u003eEvernote\u003c/a\u003e. In this post, I want to lay out all of the functionality and how to take advantage of it.\u003c/p\u003e\n\n\u003ch3 id=\"markdown-functionality\"\u003eMarkdown Functionality\u003c/h3\u003e\n\n\u003cp\u003eOne half of \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e’s functionality concerns integrating Markdown and Evernote. Essentially, this means being able to send Markdown text to Evernote as HTML \u003cem\u003eand\u003c/em\u003e being able to export an Evernote note to a Markdown text file.\u003c/p\u003e\n\n\u003cp\u003eIn order to export an Evernote note to a Markdown text file, you can use the \u003ccode\u003eenmd\u003c/code\u003e keyword from Alfred. \u003ccode\u003eenmd\u003c/code\u003e stands for “Evernote to Markdown”, and this command will take your currently selected Evernote note and create a Markdown formatted text file which will immediately be opened in your default text editor. In addition, \u003ccode\u003eenmd\u003c/code\u003e will fill in the note’s title, notebook, and tags as metadata at the top of the file (this will make it a snap to edit the note and send it back to Evernote using the \u003ccode\u003emden\u003c/code\u003e command, which I will talk about next). The workflow also comes with the ability to bind a keyboard shortcut to this function (I use \u003ccode\u003ecmd + shift + 9\u003c/code\u003e). No fuss, no hassle, no wait. Export your Evernote note into Markdown in a flash.\u003c/p\u003e\n\n\u003cp\u003eBut what about getting data \u003cem\u003einto\u003c/em\u003e Evernote? \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e will also allow you to write notes in Markdown in your text editor of choice and then send that text to Evernote, where it will be formatted and displayed in proper HTML. Now, this function has a bit of quirks to it, so let me elaborate. You can launch this function in one of two ways:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ethe \u003ccode\u003emden\u003c/code\u003e keyword in Alfred\u003c/li\u003e\n  \u003cli\u003esetup a keyboard shortcut\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe keyboard shortcut will actually allow you simply to select your text (\u003ccode\u003ecmd + a\u003c/code\u003e for “Select All”) and then press the shortcut to run the script. Alternatively, you can select the text, \u003cem\u003ecopy it to the clipboard\u003c/em\u003e, and then pop up Alfred and use the \u003ccode\u003emden\u003c/code\u003e command (this is, obviously, short for “Markdown to Evernote”). It is important to note that if you use the \u003ccode\u003emden\u003c/code\u003e command from Alfred, your Markdown text \u003cem\u003emust\u003c/em\u003e be in the clipboard.\u003c/p\u003e\n\n\u003cp\u003eNow, how do you tell \u003ccode\u003emden\u003c/code\u003e \u003cem\u003ewhere\u003c/em\u003e to send your note, or what tags it should have, or what it’s title is? In order to assign Note Title, Notebook, and Tags, you can use simple \u003ca href=\"http://fletcherpenney.net/multimarkdown/\"\u003eMultiMarkdown Headers\u003c/a\u003e, or simple symbols which are placed at the top of the document:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eTitle:\u003c/code\u003e or \u003ccode\u003e#\u003c/code\u003e for the note’s title\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eNotebook:\u003c/code\u003e or \u003ccode\u003e=\u003c/code\u003e for the note’s notebook destination\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eTags:\u003c/code\u003e or \u003ccode\u003e@\u003c/code\u003e for the note’s tags\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eSo, the top of your Markdown text note might look something like this:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e# Text Note Title\n= My Default Notebook\n@ tag1, tag2, tag3\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eBut, that’s not all that \u003ccode\u003emden\u003c/code\u003e can do. I’ve added a few extras to its capabilities. In addition to converting Markdown to text to HTML and sending that to Evernote, \u003ccode\u003emden\u003c/code\u003e has three other pretty cool features:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003edocument-specific text snippets (use \u003ccode\u003e^^^snippet^^^\u003c/code\u003e syntax)\u003c/li\u003e\n  \u003cli\u003eauto-linking to pre-existing Evernote notes (no special syntax)\u003c/li\u003e\n  \u003cli\u003eauto-linking to new Evernote notes (use \u003ccode\u003e[[double bracket]]\u003c/code\u003e syntax)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFirst, let me explain document-specific text snippets. This feature was inspired recently as I was taking notes in class. In-class note-taking is a bit unique, since you won’t exactly know what words will be used repeatedly before the class begins. I’m all about \u003ca href=\"http://smilesoftware.com/TextExpander/\"\u003eTextExpander\u003c/a\u003e, but I can’t set up snippets if I don’t know what will be the key words for that class. Plus, I don’t want to clutter my TextExpander library with these one-off snippets. So, document-specific text snippets was born. The idea is to use snippets in your notes as you type, and then define the \u003ccode\u003esnippet:expanded text\u003c/code\u003e relationship before you use \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e to send the notes to Evernote. The syntax is dead-simple. Simply wrap your “snippet dictionary” in triple carets (\u003ccode\u003e^^^snippet:expanded text^^^\u003c/code\u003e). You can have one-off “dictionaries” or you can make one long dictionary at the end of your document. The only things you need to remember are:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eALWAYS use ,, as your in-text prefix (you \u003cem\u003ecan\u003c/em\u003e change this in the code)\u003c/li\u003e\n  \u003cli\u003eif its a one-off (only one snippet), the “dictionary” needs to exist on its own line\u003c/li\u003e\n  \u003cli\u003eif its a multi-snippet “dictionary”, use the triple carets like fenced code blocks\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eTo ensure these few easy syntax rules makes sense, here’s an example:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e,,p are separated by a blank line.\n^^^p:Paragraphs^^^\nNew text.\n2nd paragraph. *,,i*, **,,b**, `,,m`.\n^^^\ni:Italics\nb:BOLD\nm:monospace\n^^^\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThats all there is to it. Note how each snippet is prefixed by \u003ccode\u003e,,\u003c/code\u003e. This ensures that both you and the processor know what text needs to be expanded, and you don’t need to have the commas in the snippet dictionary. You can mix and match single-line snippet dictionaries with multi-snippet dictionaries in the same document. You can even use non-ASCII characters in your snippets or in your expanded text. For me, this is a killer feature. I hope someone else finds it useful.\u003c/p\u003e\n\n\u003cp\u003eNext, auto-linking to pre-existing Evernote notes. This is really the feature at the heart of \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e, because this is what allows you to “wikify” your Evernote library. The idea is really quite simple: write your note as you normally would (in this case in Markdown, but I’ll discuss later how this can work within Evernote itself), and \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e will ensure that anytime you reference \u003cem\u003eany other Evernote note\u003c/em\u003e by title, your note will have a hyperlink to that other note. Let me offer a simple example. Say I began a new note like so:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e# Note Title\n= Notebook\n@ tag1, tag2\n\nThis is the first line of my new note on Alfred App!\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow, if I had a note in my Evernote account entitled “Alfred App”, when I process this note to send it to Evernote, \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e will now catch that and hyperlink to that pre-existing note, so this new note would have the phrase “Alfred App” linked directly to that other Evernote note. No fuss, no hassle, no funky syntax. And (this is what was holding me back on this feature for while), this is SUPER-FAST!\u003c/p\u003e\n\n\u003cp\u003eThe final feature that “wikifies” Evernote when you are sending Markdown text to Evernote is smoothly creating new spaces to fill with data later, while simultaneously creating the inter-linking between notes. \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e has you covered here as well. Let’s say as you’re typing up a new Evernote note, you realize that you are discussing an idea, topic, or person that you want to research further, but at some later date. What to do? Well, you can use the standard wiki-syntax of the \u003ccode\u003e[[double brackets]]\u003c/code\u003e to mark that idea, topic, or person as something you want to create a new note for, while also linking to that new note from within your current note. To return to our sample note above, let’s say you added this:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e# Note Title\n= Notebook\n@ tag1, tag2\nThis is the first line of my new note on Alfred App!\nI want to talk more about [[AppleScript]].\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhenever you have \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e process this Markdown text and send it to Evernote, it will first create a new note (in the same notebook as the one specified in the meta-data) entitled “AppleScript”, then embed the Evernote hyperlink to that new note within this current note. This means that your new Evernote note will have 2 links: one to the pre-existing note “Alfred App” and one to the newly created, blank note “AppleScript”. All of this without you having to do anything but type!\u003c/p\u003e\n\n\u003cp\u003eFor anyone who prefers to write in Markdown, but loves the always-there accessibility of Evernote, this can be a powerful addition to your workflow. But obviously, not everyone writes their Evernote notes in Markdown first. Most people just write their notes directly in Evernote. But what if you wanted to still “wikify” your Evernote library, to easily create these interlinked notes? Well, I’ve tried to solve that problem too.\u003c/p\u003e\n\n\u003ch3 id=\"wiki-functionality\"\u003eWiki Functionality\u003c/h3\u003e\n\n\u003cp\u003eWhile I’ve already discussed some of the wiki functionality that’s inherent in the \u003ccode\u003emden\u003c/code\u003e function, that isn’t the only way to ensure that all of your Evernote data is intelligently interlinked. I have versions of both the link to pre-existing note and link to new note capabilities detailed above that work purely within Evernote. Here’s how they work.\u003c/p\u003e\n\n\u003cp\u003eIn order to interlink any of your current Evernote notes with \u003cem\u003epre-existing\u003c/em\u003e notes, you can use the \u003ccode\u003ewfy\u003c/code\u003e command from Alfred. Simply open up Evernote and select the notes you want to “wikify” (the workflow does accept multiple selections, but you shouldn’t over tax it). Once your notes are selected, pull up Alfred and use the \u003ccode\u003ewfy\u003c/code\u003e (short for “wikify”) keyword. The workflow will then process each of your notes individually, auto-linking to any pre-existing other notes which it references by name. \u003cstrong\u003eNOTE:\u003c/strong\u003e In order to use this feature, you will need the \u003ca href=\"http://www.satimage.fr/software/en/downloads_osaxen.html\"\u003eSatimage OSAX Scripting Addition\u003c/a\u003e. I’ve set it up such that this is remarkably easy to install. Simply use the keyword in Alfred \u003ccode\u003ewfy:install\u003c/code\u003e and the Satimage installer will boot up and walk you through the process. It really is as simple as that. The script will search your note’s content for any references to other notes’ titles. If any are found, that text will be replaced with a hyperlink to that note. Here’s a gif that shows the process in action:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"wfy command\" src=\"../../images/projects/wikify/wfy.gif\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNext, let’s say that you are in Evernote and see a phrase or term in one of your notes that you want to research more, while creating the wiki-environment that \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e is all about. I’ve added a companion feature which will:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003etake the currently selected text in the open Evernote note\u003c/li\u003e\n  \u003cli\u003ecreate a new note in that notebook whose title is the selected text\u003c/li\u003e\n  \u003cli\u003eembed a hyperlink back to the original note as the first line of this new note\u003c/li\u003e\n  \u003cli\u003eand replace the selected text with a hyperlink to that newly created note\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis means that you have two-way hyperlinking (which is impossible in the \u003ccode\u003emden\u003c/code\u003e version of this functionality) between your current note and your new note. Creating spaces for new thought, while retaining context and wiki-style hyperlinking has never been easier. To use this feature, you can either use a user-specified keyboard shortcut, or copy the selected text to the clipboard and run \u003ccode\u003eensel\u003c/code\u003e. Here’s another gif to illustrate:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"ensel command\" src=\"../../images/projects/wikify/ensel.gif\" /\u003e\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eTo sum up, \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e has 4 main commands:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003emden\u003c/code\u003e to send Markdown text to Evernote\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eenmd\u003c/code\u003e to export an Evernote note to Markdown\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003ewfy\u003c/code\u003e to “wikify” the selected Evernote note\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eensel\u003c/code\u003e to create and wikify a new Evernote note from selection\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eWith these features, and all of the “sub-features” elaborated above, I truly believe that \u003cstrong\u003e\u003ccode\u003eWikify\u003c/code\u003e\u003c/strong\u003e could be a great help to those others out there who love Evernote, Markdown, and Wiki goodness.\u003c/p\u003e\n","type":"article"},{"title":"Snippets","url":"/projects/snippets/","content":"\u003ch4 id=\"version-12\"\u003eVersion: 1.2\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-packalhttpwwwpackalorgworkflowsnippets\"\u003eDownload on \u003ca href=\"http://www.packal.org/workflow/snippets\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eHave you ever been taking notes and realized that certain terms or phrases were going to be used repeatedly? You don’t have the time or really the desire to create all new TextExpander snippets for these terms or phrases, but you’d also really like to shorten your typing. That’s where \u003cstrong\u003e\u003ccode\u003eSnippets\u003c/code\u003e\u003c/strong\u003e comes in. \u003cstrong\u003e\u003ccode\u003eSnippets\u003c/code\u003e\u003c/strong\u003e is a dead simple Alfred workflow that allows you to use simple snippet syntax while writing, and then seamlessly convert your text to its full glory.\u003c/p\u003e\n\n\u003cp\u003eThe set-up is simple. As you’re typing, and you realize you want to make a snippet, simply prepend your snippet with \u003ccode\u003e,,\u003c/code\u003e (comma comma). Then, when you get a free moment, create a “snippet dictionary” to tell Snippets what that snippet means. To create the dictionary, simply wrap it in \u003ccode\u003e^^^\u003c/code\u003e (triple carets). Here’s an example:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eThis is an example of ,,sn. ,,sn is a fantastic workflow for ,,a!\n\n^^^\nsn: **`Snippets`**\na: Alfred\n^^^\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThat’s all there is to it. Once your dictionary is complete and you have finished typing, either copy the text to the clipboard and use the keyword \u003ccode\u003esnip\u003c/code\u003e, or assign a keyboard shortcut for even quicker results. When you activate \u003cstrong\u003e\u003ccode\u003eSnippets\u003c/code\u003e\u003c/strong\u003e, the text above will instantly become:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eThis is an example of **`Snippets`**. **`Snippets`** is a fantastic workflow for Alfred!\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIt’s so simple. Double-comma before the snippet; dictionary wrapped in triple-carets with snippet: expanded. Nothing more, nothing less.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"demo\" src=\"https://raw.githubusercontent.com/smargh/alfred_snippets/master/snippets.gif\" /\u003e\u003c/p\u003e\n","type":"article"},{"title":"Skimmer","url":"/projects/skimmer/","content":"\u003ch3 id=\"version-221\"\u003eVersion: 2.2.1\u003c/h3\u003e\n\n\u003ch3 id=\"download-at-packalhttpwwwpackalorgworkflowskimmer\"\u003eDownload at \u003ca href=\"http://www.packal.org/workflow/skimmer\"\u003ePackal\u003c/a\u003e\u003c/h3\u003e\n\n\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eThis workflow \u003cstrong\u003eonly\u003c/strong\u003e works with the free Mac PDF app \u003ca href=\"http://skim-app.sourceforge.net/\"\u003eSkim\u003c/a\u003e. Skim is a fantastic app with great Applescript support (and its \u003cem\u003efree!\u003c/em\u003e). This workflow provides quick, easy access to a few custom Applescripts that I’ve written to deal with certain pesky problems I’ve come across when dealing with PDFs. There are currently four actions:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCrop and Split PDF\u003c/li\u003e\n  \u003cli\u003eExtract Data and Search Google Scholar\u003c/li\u003e\n  \u003cli\u003eExport Annotations\u003c/li\u003e\n  \u003cli\u003eSearch your PDFs\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIn this description I will explain how each of these works, and why you might want to use it.\u003c/p\u003e\n\n\u003ch3 id=\"crop-and-split-pdf\"\u003eCrop and Split PDF\u003c/h3\u003e\n\n\u003cp\u003eFirst, \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e allows you to properly format those darned scanned PDFs. You know the ones I’m talking about, 2 books pages scanned into one, landscape-oriented PDF page. I want all of my PDFs in pretty, proper format with one PDF page corresponding to one portrait-oriented book/article page. In the past, it was quite the ordeal to crop the PDF so that the right- and left-hand margins were equal, and then to split each individual page and finally reconstruct the entire PDF. \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e makes this whole process as simple as π. You can use either a Hotkey or the Keyword \u003ccode\u003esplit\u003c/code\u003e to activate this feature.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"split\" src=\"https://www.evernote.com/shard/s41/sh/83197405-2d1a-469e-a3ca-64cc4a481807/36b73f97006ac7fd5b650e22fb122769/deep/0/skimmer_split.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e then does 3 things:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eCrop the PDF using a user-inserted Line Annotation (if necessary) (see image below)\u003c/li\u003e\n  \u003cli\u003eSplit the two-page PDF into individual pages\u003c/li\u003e\n  \u003cli\u003eRe-assemble everything and clean up\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eLet me walk you thru the process. To begin, you will need to \u003cem\u003eensure that the two scanned book pages have equal margins\u003c/em\u003e. \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will split the PDF page right down the middle, so we want the middle of the PDF to be the middle of the two pages. If the margins are unequal, you only need to use Skim’s Line Annotation to create a border for \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e. Here’s an example:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"cropping\" src=\"https://www.evernote.com/shard/s41/sh/d34511a1-b571-4df0-a6df-5c7b370704a6/0759f2d2f21a614c9a39d72f8eab0d42/deep/0/skimmer_original.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eNote the small, vertical line at the bottom of the page. \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will crop off everything to the left of this line. You could put the line anywhere on the page. If you the right-hand margin were too big, you could put it to the right, and \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e would automatically crop the excess stuff to the right of that line. If both margins are too big, you can put two lines on each side and \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will take care of the rest.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will crop \u003cem\u003eevery page\u003c/em\u003e at this point, so find the farthest extremity on any page and use that as your guide. \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e can tell what page you are looking at, so it’ll make things work (note that in the image above, this is one of the middle pages being used as the cropping template). \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e does not crop Top or Bottom Margins, so you will need to manually crop PDFs with wacky top and/or bottom margins.\u003c/p\u003e\n\n\u003cp\u003eOnce \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e has cropped the PDF, it will go thru and split each page into two separate pages. Depending on the length of the PDF, this can take a bit (approximately 0.67 seconds per original PDF page). This is all done invisibly tho, so that’s a bonus.\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e In order to ensure that \u003ccode\u003eSkimer\u003c/code\u003e splits the PDF properly, regardless of orientation, the script will split the first page and ask you what portion of the page you are seeing (left-hand, right-hand, top-half, or bottom-half). Your choice will ensure that \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e does the splitting properly.\u003c/p\u003e\n\n\u003cp\u003eAfter it splits all the pages, \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will save a copy of your original PDF and then close it as it opens the new, split PDF. This new PDF will be properly formatted and saved in the same folder as the original PDF. Here’s an example of the PDF above after it was automatically cropped and split:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"completed\" src=\"https://www.evernote.com/shard/s41/sh/ac701fb0-3e1b-4ac6-ab6d-04dfdddae2f7/0cfdc3db448db7e430613b018a30f31e/deep/0/skimmer_final.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFor anyone who deals with lots of scanned PDFs, I can promise you, this is a godsend.\u003c/p\u003e\n\n\u003ch3 id=\"extract-data-and-search-google-scholar\"\u003eExtract Data and Search Google Scholar\u003c/h3\u003e\n\n\u003cp\u003eThe second feature will take \u003ca href=\"http://en.wikipedia.org/wiki/Optical_character_recognition\"\u003eOCR’d\u003c/a\u003e PDFs and try to extract relevant search information and then search \u003ca href=\"http://scholar.google.com/\"\u003eGoogle Scholar\u003c/a\u003e (which will make it easy to then add citation information to your citation manager of choice. Users of \u003ca href=\"http://fractaledmind/projects/zotquery\"\u003eZotQuery\u003c/a\u003e will immediately see where I’m going with this…). This feature can be activated by a user-assigned Hotkey or by the Keyword \u003ccode\u003eextract\u003c/code\u003e when the desired PDF is open in Skim.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"extract\" src=\"https://www.evernote.com/shard/s41/sh/5bf09958-9d77-4a54-aaa2-b5fff51ef70a/7edaae34fc339aa9230a700703de218e/deep/0/skimmer_extract.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis feature will look for three possible things \u003cem\u003ein the currently viewed page\u003c/em\u003e:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ea \u003ca href=\"http://www.doi.org/\"\u003eDOI\u003c/a\u003e (Digital Object Identifier)\u003c/li\u003e\n  \u003cli\u003ean ISBN (for books)\u003c/li\u003e\n  \u003cli\u003eJSTOR title page\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf it cannot find any of these things, it will present the user with a list of Capitalized Words from the currently viewed page. You then select whichever words you want to be the Google Scholar query. Once the query is chosen (whether automatically as one of the 3 types above, or user-chosen keywords), \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will automatically launch your default browser to Google Scholar using the query. What you do from there is up to you.\u003c/p\u003e\n\n\u003ch3 id=\"export-annotations\"\u003eExport Annotations\u003c/h3\u003e\n\n\u003cp\u003eIn short, this feature allows you to export all of your PDF annotations from your Skim PDF to \u003ca href=\"https://www.evernote.com/\"\u003eEvernote\u003c/a\u003e (or the clipboard) while giving you \u003cstrong\u003elive hyperlinks\u003c/strong\u003e back to the exact PDF page for the annotation!! You heard me, your Evernote note will have all of your PDF annotations, and each annotation will have a hyperlink that will open up that PDF to the exact page where that annotation is. Trust me, it’s super cool, amazingly helpful, and downright near magical.\u003c/p\u003e\n\n\u003cp\u003eCompatible annotations include Text notes, Anchor notes, Underlined text, Strike-Thru text, and Highlighted text. \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will take all of your annotations, format them into some pretty HTML and send that to Evernote. I have been working on this code for quite some time, so it is FAST! It can handle and 100+ page book in a jiffy. But, since we all work slightly differently, I’ve also worked hard to make it FLEXIBLE. In order to use this function, simply use the \u003ccode\u003eexport\u003c/code\u003e keyword. Alternatively, you can assign a keyboard shortcut to the command as well (I use \u003cem\u003ecmd + shift + -\u003c/em\u003e myself).\u003c/p\u003e\n\n\u003cp\u003eLet me outline how you can make Annotation Export work exactly as you’d like.\u003c/p\u003e\n\n\u003cp\u003eFirst and foremost, I’ve added the ability for you to assign your own custom palette of Highlight Colors. One of the nicer touches to this feature is the ability to translate certain highlight colors into text headers. This can come in quite handy for really breaking down your text and your thoughts about the text into certain groupings. Now, I have a default set of 6 colors and their 6 corresponding text values, but you can change both the colors and the text to fit exactly your needs. But how, you might ask? Well, version 2.0 comes with a new Help PDF. Simply use the \u003ccode\u003esk:help\u003c/code\u003e keyword and select \u003ccode\u003eOpen PDF\u003c/code\u003e to view this document. On the second page, you will see these annotations:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"helper pdf\" src=\"https://www.evernote.com/shard/s41/sh/0e33ffc1-d931-4932-9949-a668c1554a0f/cb6e0abe1897462a15e5708cfffc4043/deep/0/skimmer_config1.pdf-(page-2-of-4).png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThe text of the PDF will lay this all out for you, but basically, you simply change the highlight colors and change the corresponding text to what ever you like. There are an (nearly) infinite number of possibilities. The only things to remember are \u003cstrong\u003edon’t mess with the actual highlights, merely change their colors\u003c/strong\u003e and \u003cstrong\u003edon’t delete prefixed numbers in the text notes, only the text\u003c/strong\u003e. Otherwise, you can fiddle to your hearts content. Just so you can get a feel for how the process will work, here’s what the Evernote note would look like if you ran the Annotation Export script on the Help PDF (well, this is only the highlights section; run the script to see how text notes are handled):\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"exported note\" src=\"https://www.evernote.com/shard/s41/sh/4fadbe0b-e763-4d0c-b100-d82048ad378a/6b115224808df230224e325e710abeb0/deep/0/skimmer_config.pdf---Evernote-Premium.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e If you change the highlight colors and/or the text meanings, you will have to run \u003ccode\u003esk:help\u003c/code\u003e -\u0026gt; \u003ccode\u003eSet Highlights\u003c/code\u003e before \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e will apply your changes. So, to change the Highlights:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eOpen the Help PDF (\u003ccode\u003esk:help\u003c/code\u003e -\u0026gt; \u003ccode\u003eOpen PDF\u003c/code\u003e) and alter the highlights and text on the second page.\u003c/li\u003e\n  \u003cli\u003eRun \u003ccode\u003esk:help\u003c/code\u003e -\u0026gt; \u003ccode\u003eSet Highlights\u003c/code\u003e to save your changes.\u003c/li\u003e\n  \u003cli\u003eThen, you can use \u003ccode\u003eexport\u003c/code\u003e to actually send your Skim annotations to Evernote.\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eNow, the ability to alter your highlights palette goes a long way in making this script personalizable (is that even a word?), but I went a step further. You can also tweak the HTML formatting used to create the Evernote note. Unfortunately, however, this will require opening up some Applescript and doing some code tweaking.\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote\"\u003e2\u003c/a\u003e\u003c/sup\u003e But I’ve tried to make it not so scary. Essentially, each annotation type has a general formatting template used to create the HTML. I’ve abstracted this format and placed each variable element under your control. You can find all of the templates and some basic examples in the Help PDF (page 3), but here is one example, for the Highlight Notes:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e--The alterable variables are wrapped in {curlies}, while the fixed elements are in \u0026lt;carets\u0026gt;.\n{pre}{wrap}\u0026lt;title\u0026gt;{/wrap} {wrap}\u0026lt;note text\u0026gt;{/wrap} {wrap}\u0026lt;link\u0026gt;{p.} \u0026lt;#\u0026gt;{/wrap}\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSo, you can prefix anything you’d like to the front of a note type: a dash, a tab, a few tabs, a word, etc. You can then wrap the title of the highlight (this is the text given for whatever color that highlighted annotation was) in anything at all: make it bold, italics, wrap it in [brackets], whatever. You can also wrap the actual text highlighted: in “quotes”, make it italics, etc. Finally, you have what you wrap the hyperlink in: it could be (parentheses) or {braces}, etc. And you can specify what page abbreviation you want: p., page, #. Now, the script defaults to settings that I think work pretty well, and you can use those to get a feel for what’s possible. Just remember, \u003cem\u003eit needs to be valid HTML\u003c/em\u003e. All of these properties are near the top of the \u003ccode\u003eaction_export-notes.scpt\u003c/code\u003e found in the workflow directory (you can use \u003ccode\u003esk:bug\u003c/code\u003e -\u0026gt; \u003ccode\u003eRoot\u003c/code\u003e to open this folder easily). Feel free to ask me if you have something you’d like to format but can’t quite figure it out.\u003c/p\u003e\n\n\u003cp\u003eSince I’ve added the PDF hyperlinking functionality, I’ve also added the ability to copy a PDF pages custom URL to the clipboard, if you want to hyperlink to that PDF page in any other context. Simply use the \u003ccode\u003esk:copy\u003c/code\u003e keyword. This whole URL hyperlinking works because I have written a custom URL handler which is bundled with the workflow that interprets the custom URLs that I’ve written to open PDFs in Skim to the appropriate page. It’s pretty cool, but \u003cem\u003ethe URL uses the path to the PDF, so if you move the PDF the URL will \u003cstrong\u003ebreak\u003c/strong\u003e until you alter all the old URLs to use your new path\u003c/em\u003e.\u003c/p\u003e\n\n\u003ch3 id=\"search-your-pdfs\"\u003eSearch your PDFs\u003c/h3\u003e\n\n\u003cp\u003eFinally, you can also search through all of your PDFs and open any one of them right in Skim. Use either the keyword \u003ccode\u003eskimmer\u003c/code\u003e or the shorter \u003ccode\u003esk\u003c/code\u003e to begin the query. Then enter your query term. The results will update as you type. You can hit \u003ccode\u003ereturn\u003c/code\u003e to open any item directly in Skim, or you can \u003ccode\u003eright-arrow\u003c/code\u003e to enter Alfred’s file browser for that item.\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003eAs I hope you can see, if you’re someone who deals with PDFs frequently, this workflow could be of help. Whether it’s splitting PDFs, searching through your PDF library, or exporting annotations, \u003cstrong\u003e\u003ccode\u003eSkimmer\u003c/code\u003e\u003c/strong\u003e can help you out.\u003c/p\u003e\n\n\u003cp\u003ePlus, it’s fairly simple to add functionality by simply adding more Applescripts, so if you have a great script for working with Skim, let me know in the comments.\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eMy original script would have to pop up each individual page for a split second. It was almost stroke inducing. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:2\"\u003e\n      \u003cp\u003eReader DrLulz has given a great example of this by tweaking the workflow to work best for PDFs of outline-based powerpoints. His comment and link can be found \u003ca href=\"http://www.alfredforum.com/topic/4052-skimmer-pdf-actions-for-skim/?p=27270\"\u003ehere\u003c/a\u003e. \u003ca href=\"#fnref:2\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"Pandoctor","url":"/projects/pandoctor/","content":"\u003ch4 id=\"version-105\"\u003eVersion: 1.0.5\u003c/h4\u003e\n\n\u003ch4 id=\"download-from-packalhttpwwwpackalorgworkflowpandoctor\"\u003eDownload from \u003ca href=\"http://www.packal.org/workflow/pandoctor\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003ch2 id=\"changelog\"\u003eChangelog\u003c/h2\u003e\n\n\u003cul\u003e\n  \u003cli\u003eversion 1.0.5: fixes a small bug in the template variables\u003c/li\u003e\n  \u003cli\u003eversion 1.0.2: fixes bug with user template commands\u003c/li\u003e\n  \u003cli\u003eversion 1.0.1: adds pdf as output in \u003ccode\u003edr:out\u003c/code\u003e filter\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e \u003ca href=\"https://github.com/jgm/pandoc/releases/tag/1.13.0.1\"\u003ePandoc 1.13.0.1\u003c/a\u003e is now out. This is a major upgrade, which includes the \u003ccode\u003e.docx\u003c/code\u003e files as input files. This means you can convert Word files to Markdown files! Anyways, once you update pandoc, you will need to run \u003ccode\u003edr:config\u003c/code\u003e again for \u003ccode\u003ePandoctor\u003c/code\u003e to update its internals for the new version of pandoc. This will then show \u003ccode\u003e.docx\u003c/code\u003e in the inputs window, and will properly interface with Pandoc 1.13.\u003c/p\u003e\n\n\u003cp\u003eSo, enjoy the newest versions of Pandoc and Pandoctor!\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e is a relatively simple, easy-to-use way to bring the high-powered functionality of \u003ca href=\"http://johnmacfarlane.net/pandoc/\"\u003e\u003ccode\u003epandoc\u003c/code\u003e\u003c/a\u003e to you. For those new to \u003ccode\u003epandoc\u003c/code\u003e, \u003ccode\u003epandoc\u003c/code\u003e is “the universal document converter”. It is an amazingly powerful utility that allows you to convert structured text from a ton of possible input formats to an even larger number of output formats.\u003c/p\u003e\n\n\u003cp\u003eA potential downside to \u003ccode\u003epandoc\u003c/code\u003e, however, for many users is that it is entirely a command line utility. This means, on the Mac, you \u003cem\u003ehave to\u003c/em\u003e open Terminal to use it. For many Mac/Alfred users, this is at least slightly daunting. Yet I believe that this should not be a deterrent to more people coming to use the power of \u003ccode\u003epandoc\u003c/code\u003e. This is the reason for \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e. Now, Alfred users can enjoy the comfortability and familiarity of the Alfred interface to manage \u003ccode\u003epandoc\u003c/code\u003e. Here’s how:\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e is accessed via \u003ca href=\"http://support.alfredapp.com/workflows:config:triggers-file-action\"\u003eFile Actions\u003c/a\u003e. The basic file action is “New Pandoc Conversion”, which will kick off a series of interactive Alfred menus to create your \u003ccode\u003epandoc\u003c/code\u003e conversion. Once you have chosen the file you want to convert and selected the file action, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e works in 4 stages:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003especify the text format of the chosen file\u003c/li\u003e\n  \u003cli\u003echose the output format you want for the converted file\u003c/li\u003e\n  \u003cli\u003echose any options you want for the conversion process\u003c/li\u003e\n  \u003cli\u003erun \u003ccode\u003epandoc\u003c/code\u003e to convert the input file using your chosen options\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eLuckily, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e is built to move you through these four steps seamlessly and without any interaction on your part aside from selecting and setting the formats and options you want. Let’s walk through the steps.\u003c/p\u003e\n\n\u003ch2 id=\"configuration\"\u003eConfiguration\u003c/h2\u003e\n\n\u003cp\u003eWhen you first download \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e, you will need to configure a few settings. Luckily, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e takes care of this for you. All you need to do is use the \u003ccode\u003edr:config\u003c/code\u003e keyword to get everything set up. Once you see the completion notification, you can start using \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e for real.\u003c/p\u003e\n\n\u003ch2 id=\"running-a-new-pandoc-conversion\"\u003eRunning a new \u003ccode\u003epandoc\u003c/code\u003e Conversion\u003c/h2\u003e\n\n\u003ch3 id=\"using-the-file-action\"\u003eUsing the File Action\u003c/h3\u003e\n\n\u003cp\u003eIf you’ve configured, you begin \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e by using \u003ca href=\"http://support.alfredapp.com/features:file-search\"\u003eAlfred’s file navigation abilities\u003c/a\u003e to find the file you want \u003ccode\u003epandoc\u003c/code\u003e to convert for you. Once you’ve found the file, enter Alfred’s File Actions pane for that file (by default this is \u003ccode\u003e→\u003c/code\u003e). Then find \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e’s “New Pandoc Conversion” file action:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Conversion File Action\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/file_action_new.png\" /\u003e\u003c/p\u003e\n\n\u003ch3 id=\"selecting-the-input-format\"\u003eSelecting the Input Format\u003c/h3\u003e\n\n\u003cp\u003eThis tells \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e to begin a new conversion on that file. Once you select “New Pandoc Conversion”, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will automatically ask you to choose the format of this input file:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:in` Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_in.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e tries to be smart about formatting, so it will pre-fill the search bar with what it believes to be the file’s formatting. However, if you need to, you can simply delete this and start searching yourself. You will see that \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e displays the full name of the input format as well as a short description to help you discern between similar formats (such as the 4 types of \u003ca href=\"http://daringfireball.net/projects/markdown/\"\u003eMarkdown\u003c/a\u003e \u003ccode\u003epandoc\u003c/code\u003e accepts).\u003c/p\u003e\n\n\u003ch3 id=\"selecting-the-output-format\"\u003eSelecting the Output Format\u003c/h3\u003e\n\n\u003cp\u003eWhen you choose the input format, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will then automatically ask you to select what format you want the outputted, converted file to be:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:out` Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_out.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eYou have access to the full range of possible output formats from this selection. You can use the arrow keys to navigate down, or start searching for your desired output format by name:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:out` Searching\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_out_search.png\" /\u003e\u003c/p\u003e\n\n\u003ch3 id=\"selecting-any-options\"\u003eSelecting any Options\u003c/h3\u003e\n\n\u003cp\u003eAs soon as you select the output format, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will ask you what Options you want to add to this \u003ccode\u003epandoc\u003c/code\u003e conversion:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:opt` Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt.png\" /\u003e\u003c/p\u003e\n\n\u003ch4 id=\"pandoctor-ui\"\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e UI\u003c/h4\u003e\n\n\u003cp\u003eThere are a few elements to the UI that require more explanation. First, you see that some items have the inner rectangle filled, and others do not. This is your visual cue to determine which options are active for this conversion (filled) and which are not (empty).\u003c/p\u003e\n\n\u003ch4 id=\"pandoctor-default-options\"\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e Default Options\u003c/h4\u003e\n\n\u003cp\u003eWhen you first come to this “screen” or “window” (not sure what to call individual Alfred windows/pop-ups), you will see that some options are already filled, even though you didn’t select them. These are \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e’s \u003ccode\u003eDefault Options\u003c/code\u003e. The file (\u003ccode\u003epandoc_defaults.json\u003c/code\u003e) specifying which options are by default always on (filled) can be found inside the workflow’s folder (if you need to open this folder, you can do so easily using the \u003ccode\u003edr:help\u003c/code\u003e keyword and selecting \u003ccode\u003eRoot\u003c/code\u003e). This file also has comments for most options, which gives some information about them (Obviously, for detailed information about \u003ccode\u003epandoc\u003c/code\u003e’s options, visit the \u003ca href=\"http://johnmacfarlane.net/pandoc/README.html\"\u003eUser Guide\u003c/a\u003e). When installed, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e has 4 default options on:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003eparse-raw\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003eDescription: “Parse untranslatable HTML codes and LaTeX environments as raw HTML or LaTeX, instead of ignoring them.”\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003esmart\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003eDescription: “Produce typographically correct output, converting straight quotes to curly quotes, — to em-dashes, – to en-dashes, and … to ellipses.”\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003enormalize\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003eDescription: “Normalize the document after reading: merge adjacent Str or Emph elements, for example, and remove repeated Spaces.”\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003estandalone\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003eDescription: “Produce output with an appropriate header and footer (e.g. a standalone HTML, LaTeX, or RTF file, not a fragment).”\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"user-default-options\"\u003eUser Default Options\u003c/h4\u003e\n\n\u003cp\u003eIf you want to set your own default options (overriding these), you can use the \u003ccode\u003edr:defs\u003c/code\u003e keyword. This will provide a “window” similar to the standard Options window, but without anything selected. Here select whatever items you want to be on by default for any new conversion.\u003c/p\u003e\n\n\u003ch3 id=\"selecting-any-options-pt-2\"\u003eSelecting any Options, pt. 2\u003c/h3\u003e\n\n\u003cp\u003eBack to the \u003ccode\u003eOptions Selection\u003c/code\u003e, though. You will also see that that there are 2 basic types of options:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eBoolean\u003c/li\u003e\n  \u003cli\u003eArgument\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"selecting-boolean-options\"\u003eSelecting Boolean Options\u003c/h4\u003e\n\n\u003cp\u003eIf you select a Boolean option, it will simply “turn on” (the rectangle will be filled) and this screen will refresh. For example, here’s this screen right before I choose to “turn on” the \u003ccode\u003estrict\u003c/code\u003e option:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`parse` Option off\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_parse_off.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eand here’s what the screen looks like as soon as it refreshes after I selected that option:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`parse` Option on\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_parse_on.png\" /\u003e\u003c/p\u003e\n\n\u003ch4 id=\"selecting-argument-options\"\u003eSelecting Argument Options\u003c/h4\u003e\n\n\u003cp\u003eSo, “turning on” Boolean options is simple. Argument options, however, require a bit more work. As the name suggests, this type of option requires more information (an “argument”). (Again, if any of this is confusing, I would highly recommend reading through \u003ccode\u003epandoc\u003c/code\u003e’s \u003ca href=\"http://johnmacfarlane.net/pandoc/README.html\"\u003eUser Guide\u003c/a\u003e). This means that you will need to tell \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e what you want the “argument”, the information, to be. So, whenever you select an \u003ccode\u003eArgument\u003c/code\u003e option, you are taken to an intermediary “screen” where you can supply the needed information. For example, if I were to select the \u003ccode\u003etoc-depth\u003c/code\u003e argument option, I would then see this screen:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Set Option Empty\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_set_pre.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eI would then fill in the information (I want the Table of Contents in the converted  file to only go 4 levels deep):\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Set Option Filled\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_set_filled.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOnce you fill in the information, press \u003ccode\u003ereturn\u003c/code\u003e (i.e. “Set argument value of chosen option”) and return to the base Options “screen”.\u003c/p\u003e\n\n\u003ch4 id=\"finalizing-options\"\u003eFinalizing Options\u003c/h4\u003e\n\n\u003cp\u003eNow, as soon as you have set all of the options you need, you only need to select the top item on this “screen”: \u003ccode\u003eDone setting Options?\u003c/code\u003e. This will close this screen. As I’ve noted before, if you instead select an option, this screen will merely refresh.\u003c/p\u003e\n\n\u003ch4 id=\"pandoctor-ui-pt-2\"\u003e\u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e UI, pt. 2\u003c/h4\u003e\n\n\u003cp\u003e\u003cem\u003eA small UI note\u003c/em\u003e: there is always a “header” for every list that \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e displays. However, there are 2 different kinds of headers:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003einformational and non-selectable\u003c/li\u003e\n  \u003cli\u003einterrogative and selectable\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe purely informational headers have the little \u003ccode\u003ei\u003c/code\u003e in the center. These headers are found when selecting input and output formats. They cannot be selected; they simply tell you what that “screen” is. The interrogative headers, however, can be selected. These have the \u003ccode\u003e?\u003c/code\u003e in the center. You will use these to “close” the screen you are viewing.\u003c/p\u003e\n\n\u003ch4 id=\"running-your-pandoc-conversion\"\u003eRunning your \u003ccode\u003epandoc\u003c/code\u003e Conversion\u003c/h4\u003e\n\n\u003cp\u003eReturning to the flow of the conversion, you have just finished selecting all of the options for your \u003ccode\u003epandoc\u003c/code\u003e conversion. As soon as you hit \u003ccode\u003eDone setting Options?\u003c/code\u003e, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will begin processing the conversion. This process can take a bit of time (particularly when generating PDFs), but when it is complete, you will see a notification in the top right of your screen:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"notify\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_notification.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThat’s all there is to it really. In 4 simple steps, you can convert just about anything. However, for those more inclined toward “power-use”, there are a few other abilities under \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e’s hood.\u003c/p\u003e\n\n\u003chr /\u003e\n\n\u003ch2 id=\"ignoring-options\"\u003eIgnoring Options\u003c/h2\u003e\n\n\u003cp\u003eFirst off, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e offers the ability to “hide” or “ignore” certain options in the Select Options screen. \u003ccode\u003epandoc\u003c/code\u003e itself offers \u003cem\u003ea lot\u003c/em\u003e of options, and always seeing them all is often unnecessary. If there are any options that you \u003cstrong\u003enever\u003c/strong\u003e use, you can simply remove them. To do this, you need to use the \u003ccode\u003edr:ignore\u003c/code\u003e keyword:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`dr:ignore` Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will bring up a “screen” almost identical to the Select Options screen, but here you are choosing what options are hidden from that other screen. Once again, the two icons are informative. If an item is filled in, this means that it is going to be ignored:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`data-dir` Ignored\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore_data_on.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOtherwise (not filled in), it will appear in the standard Select Options window:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"`data-dir` Not Ignored\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore_data_off.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs with the basic window, you can search here or just use the arrow keys. Select all of the options you want to ignore, and when you are done, select \u003ccode\u003eDone setting Ignore?\u003c/code\u003e to exit.\u003c/p\u003e\n\n\u003ch2 id=\"template-commands\"\u003eTemplate Commands\u003c/h2\u003e\n\n\u003cp\u003eFor those who use \u003ccode\u003epandoc\u003c/code\u003e frequently, you will likely use the same basic command over and over again. If that’s the case, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e has a “power-user” feature just for you. In addition to the “on-the-fly” conversion available via the “New Pandoc Conversion” file action, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e also hase a “Templated Pandoc Conversion” file action:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"template\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/file_action_template.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis action grants you access to any and all \u003ccode\u003epandoc\u003c/code\u003e template commands you have set up. Before I detail how to create a new template, let’s briefly discuss the elements of a template. \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e ships with a file in the workflow directory that has some sample templates. This file is titled \u003ccode\u003epandoc_templates.json\u003c/code\u003e. If you open this file in your text editor of choice, it will look just like this:\u003c/p\u003e\n\n\u003ch3 id=\"sample-templates\"\u003eSample Templates\u003c/h3\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e/*\n    PANDOC TEMPLATED COMMANDS\n\n    The ``defaults``, at initiation the `parse-raw`, `smart`, `normalize`, and `standalone`\n    options, are found at ``pandoc_defaults.json``.\n\n    HOW TO CREATE TEMPLATE:\n        + take your CLI pandoc command\n            (e.g. \"pandoc -s -S --toc -c pandoc.css -A footer.html README -o example3.html\")\n        + convert all \"short option + space + argument\" to \"long option + '=' + argument\"\n            (e.g. \"pandoc -s -S --toc --css=pandoc.css --include-after-body=footer.html README --output=example3.html\")\n        + split all options into list of individual options\n            (e.g. [pandoc, -s, -S, --toc, --css=pandoc.css, --include-after-body=footer.html, README, --output=example3.html])\n        + remove initial call to `pandoc` and replace input text path with ``{input}`` variable\n            (e.g. [-s, -S, --toc, --css=pandoc.css, --include-after-body=footer.html, {input}, --output={input}.html])\n        + make sure every option is a JSON string\n            (e.g. [\"-s\", \"-S\", \"--toc\", \"--css=pandoc.css\", \"--include-after-body=footer.html\", \"{input}\", \"--output={input}.html\"])\n        + give it a memorable name\n        + determine if you want to automatically add your default options to the command or not.\n\n    In order to make your templates more extensible, you can use any of 3 built-in\n    variables that relate to the file chosen to convert:\n        * {input_file} = The full path to the file, including file extension\n        * {input_name} = The full path to the file, without file extension\n        * {input_dir} = The full path to the parent directory of the file\n\n    For example, this template would only work if you kept a project directory\n    that contained both `biblio.bib` and `chicago-author-date.csl` alongside\n    your input file.\n        {\n            \"name\": \"Biblio Test\",\n            \"use_defaults\": false,\n            \"options\": [\n                \"-s\",\n                \"-S\",\n                \"--biblio={input_dir}/biblio.bib\",\n                \"--csl={input_dir}/chicago-author-date.csl\",\n                \"{input_file}\",\n                \"--output={input_name}.html\"\n            ]\n        }\n*/\n[\n    {\n        \"name\": \"XeLaTeX PDF\",\n        \"use_defaults\": true,\n        \"options\": [\n            \"-N\",\n            \"--variable=mainfont:Georgia\",\n            \"--variable=sansfont:Arial\",\n            \"--variable=monofont:\\\"Andale Mono\\\"\",\n            \"--variable=fontsize:12pt\",\n            \"{input_file}\",\n            \"--latex-engine=xelatex\",\n            \"--toc\",\n            \"--output={input_name}.pdf\"\n        ]\n    },\n    {\n        \"name\": \"Pandoc MD -\u0026gt; HTML\",\n        \"use_defaults\": true,\n        \"options\": [\n            \"--toc\",\n            \"--css=pandoc.css\",\n            \"{input_file}\",\n            \"--output={input_name}.html\"\n        ]\n    }\n]\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"template-elements\"\u003eTemplate Elements\u003c/h3\u003e\n\n\u003cp\u003eAs you can see, it comes with two “default” templates, as well as one commented-out template. These are there to help you see the format of the JSON as well as \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e’s unique features. As the default templates show, each template must have 3 keys:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003ename\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003euse_defaults\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003eoptions\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThe type of value for each of these is fixed. For \u003ccode\u003ename\u003c/code\u003e, you must use a string; for \u003ccode\u003euse_defaults\u003c/code\u003e, you use a Boolean (either \u003ccode\u003etrue\u003c/code\u003e or \u003ccode\u003efalse\u003c/code\u003e); and for \u003ccode\u003eoptions\u003c/code\u003e, you use a list/array of strings. The \u003ccode\u003ename\u003c/code\u003e parameter is simple; this is the name of your template (what will be displayed when you are asked to choose which template you want to use). The \u003ccode\u003euse_defaults\u003c/code\u003e parameter is fairly self-explanatory as well; do you want to automatically add the default options to this command or not? It is the \u003ccode\u003eoptions\u003c/code\u003e parameter where the magic happens, and this is the one that requires the most precision.\u003c/p\u003e\n\n\u003cp\u003eAs the comments in the file will tell you, you need to properly format your \u003ccode\u003epandoc\u003c/code\u003e command for use as a \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e template. This means, each option is its own item in the list and each option is without spaces (unless properly quoted). This will require you to use the “long” version of any option along with the an equals [\u003ccode\u003e=\u003c/code\u003e]. The 3 given examples give thorough demonstration of what acceptable templates can look like.\u003c/p\u003e\n\n\u003ch3 id=\"template-variables\"\u003eTemplate Variables\u003c/h3\u003e\n\n\u003cp\u003eIn addition to these formatting requirements, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e also gives you the ability to abstract your template properly. For any template, you have access to 3 variables:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003e\u003ccode\u003e{input_file}\u003c/code\u003e = The full path to the file, including file extension\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e{input_name}\u003c/code\u003e = The full path to the file, without file extension\u003c/li\u003e\n  \u003cli\u003e\u003ccode\u003e{input_dir}\u003c/code\u003e = The full path to the parent directory of the file\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThese variables will allow you to properly use your template with any conversion. You will see that every template should use \u003ccode\u003e{input_file}\u003c/code\u003e and \u003ccode\u003e{input_name}\u003c/code\u003e for the input and output options respectively. In addition, if you specify any outside resource files, you can then use \u003ccode\u003e{input_dir}\u003c/code\u003e to ensure that the full path is properly constructed (see the “Biblio Test” example in the comments).\u003c/p\u003e\n\n\u003ch3 id=\"running-a-template-command\"\u003eRunning a Template Command\u003c/h3\u003e\n\n\u003cp\u003eOnce you set up a template, it will make using \u003ccode\u003epandoc\u003c/code\u003e \u003cem\u003eso much easier\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003eAll you have to do is select the file in Alfred’s file navigator, choose the “Templated Pandoc Conversion” file action, and then choose which template you want to use. That’s it.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"**`Pandoctor`** Templates Filter\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_temps.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs with the New Conversion, the process takes a variable amount of time. Whenever the conversion does finish, however, you will see a notification in the top right of your screen:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Notification\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_notify.png\" /\u003e\u003c/p\u003e\n\n\u003ch3 id=\"creating-a-template\"\u003eCreating a Template\u003c/h3\u003e\n\n\u003cp\u003eSo, how do you set up template commands? As the Template Elements section describes, each template requires 3 things. So, in order to create a new template, you will need to create each of these 3 elements. Hopefully, however, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e makes this dead-simple to do.\u003c/p\u003e\n\n\u003cp\u003eTo begin creating a new template, use the \u003ccode\u003edr:temp:set\u003c/code\u003e keyword:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"Keyword to Create New Template\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_kw.png\" /\u003e\u003c/p\u003e\n\n\u003ch4 id=\"setting-template-name\"\u003eSetting Template Name\u003c/h4\u003e\n\n\u003cp\u003eType the keyword and then press \u003ccode\u003ereturn\u003c/code\u003e. This will immediately jump you to assigning a name for your new template. This will be the “screen” that you see:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Add Name\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_name_pre.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eTo assign a name, simply type the name of the template. As seen in the screenshot above, this name will be all that you will see in the Script Filter to choose which template you want to run. As an example, I created a new template called “Template Test”:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Set Name\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_name.png\" /\u003e\u003c/p\u003e\n\n\u003ch4 id=\"setting-template-defaults\"\u003eSetting Template Defaults\u003c/h4\u003e\n\n\u003cp\u003eOnce you finish typing your template name, hit \u003ccode\u003ereturn\u003c/code\u003e and \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e will then automatically ask you if you want your Default Options to always be added to the template command:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Add Defaults\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_defs.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eIf you select \u003ccode\u003eTrue\u003c/code\u003e, this means that whatever options your template command has, your assigned Default Options will be added to the final \u003ccode\u003epandoc\u003c/code\u003e command. For example, if you have set \u003ccode\u003estandalone\u003c/code\u003e to be a Default Option, regardless of whether or not you have that option in your template command, \u003ccode\u003epandoc\u003c/code\u003e will still create a standalong document. If, however, you select \u003ccode\u003eFalse\u003c/code\u003e, only the options you have in the template will be run through \u003ccode\u003epandoc\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4 id=\"setting-template-command\"\u003eSetting Template Command\u003c/h4\u003e\n\n\u003cp\u003eThe final element you need to add to create your new template is, of course, the actual \u003ccode\u003epandoc\u003c/code\u003e command:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Add Command\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_cmd_pre.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs the section above described, \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e requires your template command options to be in a very specific format. However, must \u003ccode\u003epandoc\u003c/code\u003e users don’t actually type commands into Terminal in this format. In order to make \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e as simple as possible, I have written a script that will convert the standard, short-form \u003ccode\u003epandoc\u003c/code\u003e command into the long-form \u003cstrong\u003e\u003ccode\u003ePandoctor\u003c/code\u003e\u003c/strong\u003e compliant format. This means that all you have to do is copy your command from Terminal and paste it into this field:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"New Template Set Command\" src=\"https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_cmd.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAs it is currently implemented, there is the possibility of some bugs in the conversion process. This means it is in your best interest to double check the \u003ccode\u003euser_templates.json\u003c/code\u003e file in your workflow storage folder (you can open this folder easily using the \u003ccode\u003edr:help\u003c/code\u003e keyword and selecting \u003ccode\u003eStorage\u003c/code\u003e). Ensure that the variables are properly used. Also ensure that the all of the short-form options where correctly translated into their long-form version. Remember, you can use the \u003ccode\u003epandoc_templates.json\u003c/code\u003e file as a guide for the template JSON format.\u003c/p\u003e\n","type":"article"},{"title":"Parsers","url":"/projects/parsers/","content":"\u003ch4 id=\"version-20\"\u003eVersion: 2.0\u003c/h4\u003e\n\n\u003ch4 id=\"download-at-packalhttpwwwpackalorgworkflowparsers\"\u003eDownload at \u003ca href=\"http://www.packal.org/workflow/parsers\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e is a relatively simple workflow for \u003ca href=\"http://www.alfredapp.com/\"\u003eAlfred\u003c/a\u003e. It allows you to quickly and easily look up parsing information for Greek \u003cem\u003eor\u003c/em\u003e Latin words. It gets its parsing information from the powerful \u003ca href=\"http://www.perseus.tufts.edu/\"\u003ePerseus project\u003c/a\u003e, but presents the results in the clean user-interface of Alfred. To use \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e, simply open Alfred and type the keyword \u003ccode\u003eparse\u003c/code\u003e. Follow the keyword with the Latin or Greek word you want to look up:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"alfred_parser\" src=\"https://www.evernote.com/shard/s41/sh/2c444d67-b4ca-40b3-b914-c20dc5ebbfb6/9d54f19c489deda365c65f1e6b5232e6/deep/0/alfred_parser.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e will display the results for you as quickly as possible.\u003c/p\u003e\n\n\u003cp\u003eAs you can see, \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e displays the parsing information in the main title field for each item. Below that, in the sub-title field, it displays the lemma and a short definition separated by \u003ccode\u003e::\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eLet’s say you are reading some Greek or Latin, however, and don’t want to have to open Alfred, type \u003ccode\u003eparse\u003c/code\u003e, then type the word you’re interested in. Well, \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e has thought of that. From within Alfred’s Preferences, you can set up a keyboard shortcut to pass the currently selected text on your Mac to \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e. I have mine set up as \u003ccode\u003ecmd+fn+-\u0026gt;\u003c/code\u003e. This makes using \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e even easier.\u003c/p\u003e\n\n\u003cp\u003eOnce you have found the parsing information that you believe is correct in your reading context, \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e can do 2 things for you:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ecopy the parsing information to the clipboard in a nicely formatted way (\u003ccode\u003ecmd+return\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003ecopy the dictionary entry for that lemma to the clipboard (\u003ccode\u003eshift+return\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf, for instance, you were to choose the Nominative Singular Feminine form of \u003ccode\u003eaura\u003c/code\u003e (with \u003ccode\u003ecmd+return\u003c/code\u003e), \u003cstrong\u003e\u003ccode\u003eParsers\u003c/code\u003e\u003c/strong\u003e would copy this to the clipboard:\u003c/p\u003e\n\n\u003cdiv class=\"highlight plaintext\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003eType: noun\nNumber: sg\nGender: fem\nCase: voc\n\nDefinition: the air (in motion), a breeze, breath of air, wind, blast:\nLemma:  aura\n\nLexicon Links:\n  + [Lewis \u0026amp; Short](http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3Atext%3A1999.04.0059%3Aentry%3Daura)\n  + [Elem. Lewis](http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3Atext%3A1999.04.0060%3Aentry%3Daura)\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAlternatively, you can use \u003ccode\u003eshift+return\u003c/code\u003e to view a HUD of the lexicon entry for that parsing term, and this lexicon data will also be copied to the clipboard (\u003cem\u003eNOTE\u003c/em\u003e: Parsers will attempt to display the lexicon entry from the most concise lexicon available for the chosen term or allow you to choose out of the available dictionaries).\u003c/p\u003e\n\n\u003cp\u003eAll you should need to read your Greek and/or Latin with ease.\u003c/p\u003e\n","type":"article"},{"title":"A Complete PDF Annotation Workflow","url":"/articles/a-complete-pdf-annotation-workflow/","content":"\u003cp\u003eWhen I was in graduate school, I was inundated with PDFs. PDFs of all kinds, from all kinds of sources, with all kinds of needs. Suffice to say, over a few years my tinkering spirit and the sheer number of PDFs I needed to handle led to a collection of tools organized into a workflow that I believe works well, and is thus well worth sharing. In this post I want to outline how I (1) \u003ca href=\"#pdf-preparation\"\u003eprepare PDFs\u003c/a\u003e, (2) \u003ca href=\"#pdf-annotation\"\u003eannotate PDFs\u003c/a\u003e, and (3) \u003ca href=\"#pdf-storage\"\u003estore PDFs\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003e{{read more}}\u003c/p\u003e\n\n\u003ch2 id=\"pdf-preparation\"\u003ePDF Preparation\u003c/h2\u003e\n\n\u003cp\u003eWhen you recieve a high volume of PDFs, you come to realize the many various states in which PDFs can be created–books scanned on a flatbed, books scanned by an iPhone, articles downloaded from the internet, PDFs generated from other sources. PDFs truly do come in all shapes and sizes. I, however, want all of my PDFs in one consistent format. I want every page of content to correspond to one PDF page (in constrast to book scans, where two content pages are often scanned into one landscape PDF). I also want to OCR every PDF to ensure that the text content is machine readable (and thus selectable in any PDF reader). I finally want to keep a consistent naming scheme for all of my PDFs. So, how does one get from point A to point B?\u003c/p\u003e\n\n\u003cp\u003eLet’s begin with normalizing PDF page layout. For anyone who has ever had to manually split scanned PDFs, you know how mind-numbly boring and tedious such work is. Yet, we do it because we must. If there is anything worse than maunally splitting PDF pages, it dealing with double page PDF scans. Well, I abhor tedium, so I set out to remove this particular tedium from my life. My solution, which I will get to below, however, relies on an application that will come up frequently in this post, so it’s worth discussing here now. I use, almost exclusively, the Mac application \u003ca href=\"http://skim-app.sourceforge.net/\"\u003eSkim\u003c/a\u003e for my PDF-related tasks. This is primarily because Skim is \u003ca href=\"http://sourceforge.net/p/skim-app/wiki/Features/\"\u003eincredibly powerful\u003c/a\u003e, but also because it grants access to much of this functionality via \u003ca href=\"http://sourceforge.net/p/skim-app/wiki/AppleScript/\"\u003erobust AppleScript support\u003c/a\u003e. This allows tinkerers like myself to further extend it functionality. Many of the tools described in this post are uniquely built on top of Skim, so if you want to use the tool, you have to use the app. Luckily, the app is free to download, an open source project, and thoroughly stable. However, I understand if you already have your own preferred PDF application, so I will mark all Skim-dependent tools accordingly.\u003c/p\u003e\n\n\u003cp\u003eBack to automagically splitting PDF pages. Using a handful of Skim’s awesome features, I have written an AppleScript which will split two-page scanned PDFs for you. The script itself is a part of my \u003ca href=\"http://fractaledmind.com/projects/skimmer/\"\u003eSkimmer project\u003c/a\u003e, which is one of my many Alfred Workflows. For those who want the simplest access to this functionality, I would recommend getting \u003ca href=\"http://www.alfredapp.com/\"\u003eAlfred\u003c/a\u003e and downloading the workflow. If, however, you simply want the AppleScript itself, you can find it \u003ca href=\"https://github.com/smargh/alfred_skimmer/blob/master/source/action_pdf-splitter.applescript\"\u003ein the GitHub repo\u003c/a\u003e. In short, it asks you to determine the PDF orientation and then in the background splits the entire PDF. If you deal with many scanned PDFs, this will be a major time-saver.\u003c/p\u003e\n\n\u003cp\u003eWhen it comes to \u003ca href=\"http://en.wikipedia.org/wiki/Optical_Character_Recognition\"\u003eOptical Character Recognition\u003c/a\u003e, I use the open source \u003ca href=\"http://en.wikipedia.org/wiki/Tesseract_(software)\"\u003e\u003ccode\u003etesseract\u003c/code\u003e\u003c/a\u003e utility. It can be a bit tricky to install, as it requires compilation and has a number of compiled dependencies. Building off of the work of \u003ca href=\"https://twitter.com/ryanfb\"\u003eRyan Baumann\u003c/a\u003e, I have created \u003ca href=\"https://gist.github.com/smargh/cd2fc4125bef57bcb3e2\"\u003ea Gist\u003c/a\u003e to simplify installing \u003ccode\u003etesseract\u003c/code\u003e on a Mac\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e#!/usr/bin/env bash\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Check for Homebrew,\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# Install if we don't have it\u003c/span\u003e\n\u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003etest\u003c/span\u003e ! \u003cspan class=\"k\"\u003e$(\u003c/span\u003ewhich brew\u003cspan class=\"k\"\u003e)\u003c/span\u003e; \u003cspan class=\"k\"\u003ethen\n  \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Installing homebrew...\"\u003c/span\u003e\n  ruby -e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ecurl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n\u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# Ensure `homebrew` is up-to-date and ready\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Updating homebrew...\"\u003c/span\u003e\nbrew doctor\n\n\u003cspan class=\"c\"\u003e# Ensure the Homebrew cache directory exists\u003c/span\u003e\nmkdir ~/Library/Caches/Homebrew\n\n\u003cspan class=\"c\"\u003e# Install leptonica with TIFF support (and every other format, just in case)\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Installing leptonica...\"\u003c/span\u003e\nbrew install --with-libtiff --with-openjpeg --with-giflib leptonica\n\n\u003cspan class=\"c\"\u003e# Install Ghostscript\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Installing ghostscript...\"\u003c/span\u003e\nbrew install gs\n\n\u003cspan class=\"c\"\u003e# Install ImageMagick with TIFF and Ghostscript support\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Installing imagemagick...\"\u003c/span\u003e\nbrew install --with-libtiff --with-ghostscript imagemagick\n\n\u003cspan class=\"c\"\u003e# Install Tesseract devel with all languages\u003c/span\u003e\n\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Installing tesseract...\"\u003c/span\u003e\nbrew install --devel --all-languages tesseract\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eOnce you have \u003ccode\u003etesseract\u003c/code\u003e installed, it can also be a bit complicated to run it from the Terminal. Again, I have \u003ca href=\"https://gist.github.com/smargh/0581e6199049ea7c51df\"\u003ea Gist\u003c/a\u003e to simplify this process. It is a simple function that accepts a path to a PDF. It will convert the PDF to the appropriate format for \u003ccode\u003etesseract\u003c/code\u003e\u003csup id=\"fnref:2\"\u003e\u003ca href=\"#fn:2\" class=\"footnote\"\u003e2\u003c/a\u003e\u003c/sup\u003e, split the PDF into one file per page, OCR that collection of files, and recombine everything into one OCR’d PDF:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e#!/usr/bin/env bash\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# courtesy of : \u0026lt;https://ryanfb.github.io/etc/2014/11/13/command_line_ocr_on_mac_os_x.html\u0026gt;\u003c/span\u003e\n\nocr\u003cspan class=\"o\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"c\"\u003e# get name of input pdf\u003c/span\u003e\n  \u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebasename \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e .pdf\u003cspan class=\"k\"\u003e)\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Prefix is: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$PREFIX\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n\n  \u003cspan class=\"c\"\u003e# check for any `tesseract` flags\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"o\"\u003e[\u003c/span\u003e ! -z \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$TESSERACT_FLAGS\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"o\"\u003e]\u003c/span\u003e; \u003cspan class=\"k\"\u003ethen\n    \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Picked up TESSERACT_FLAGS: \u003c/span\u003e\u003cspan class=\"nv\"\u003e$TESSERACT_FLAGS\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\n  \u003cspan class=\"k\"\u003efi\u003c/span\u003e\n\n  \u003cspan class=\"c\"\u003e# use `imagemagick` to convert pdf to individual `.tif` files\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Converting to TIFF...\"\u003c/span\u003e\n  convert -density 300 \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$1\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e -type Grayscale -compress lzw -background white +matte -depth 32 \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e_page_%05d.tif\"\u003c/span\u003e\n\n  \u003cspan class=\"c\"\u003e# use `tesseract` to OCR those individual `.tif` files\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Performing OCR...\"\u003c/span\u003e\n  \u003cspan class=\"k\"\u003eif \u003c/span\u003e\u003cspan class=\"nb\"\u003ecommand\u003c/span\u003e -v parallel \u0026gt;/dev/null 2\u0026gt;\u0026amp;1; \u003cspan class=\"k\"\u003ethen\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e# if you can, parallelize this process using GNU Parallel\u003c/span\u003e\n    parallel --bar \u003cspan class=\"s2\"\u003e\"tesseract \u003c/span\u003e\u003cspan class=\"nv\"\u003e$TESSERACT_FLAGS\u003c/span\u003e\u003cspan class=\"s2\"\u003e {} {.} pdf 2\u0026gt;/dev/null\"\u003c/span\u003e ::: \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e_page_\u003cspan class=\"k\"\u003e*\u003c/span\u003e.tif\n  \u003cspan class=\"k\"\u003eelse\n    for \u003c/span\u003ei \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e_page_\u003cspan class=\"k\"\u003e*\u003c/span\u003e.tif; \u003cspan class=\"k\"\u003edo\n      \u003c/span\u003e\u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"OCRing \u003c/span\u003e\u003cspan class=\"nv\"\u003e$i\u003c/span\u003e\u003cspan class=\"s2\"\u003e...\"\u003c/span\u003e\n      tesseract \u003cspan class=\"nv\"\u003e$TESSERACT_FLAGS\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$i\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e$(\u003c/span\u003ebasename \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"nv\"\u003e$i\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e .tif\u003cspan class=\"k\"\u003e)\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e pdf 2\u0026gt;/dev/null\n    \u003cspan class=\"k\"\u003edone\n  fi\u003c/span\u003e\n\n  \u003cspan class=\"c\"\u003e# combine individual OCR'd pdf pages back into a single OCR'd pdf using `ghostscript`\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Combining output to \u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e-OCR.pdf...\"\u003c/span\u003e\n  gs -q -dNOPAUSE -dBATCH -sDEVICE\u003cspan class=\"o\"\u003e=\u003c/span\u003epdfwrite -sOutputFile\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e__OCR.pdf\"\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e_page_\u003cspan class=\"k\"\u003e*\u003c/span\u003e.pdf \u0026gt;/dev/null 2\u0026gt;\u0026amp;1\n\n  \u003cspan class=\"c\"\u003e# delete all of the individual files (both `.tif` and `.pdf`)\u003c/span\u003e\n  \u003cspan class=\"nb\"\u003eecho\u003c/span\u003e \u003cspan class=\"s2\"\u003e\"Cleaning up...\"\u003c/span\u003e\n  rm \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e_page_\u003cspan class=\"k\"\u003e*\u003c/span\u003e.tif \u003cspan class=\"s2\"\u003e\"\u003c/span\u003e\u003cspan class=\"k\"\u003e${\u003c/span\u003e\u003cspan class=\"nv\"\u003ePREFIX\u003c/span\u003e\u003cspan class=\"k\"\u003e}\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"\u003c/span\u003e_page_\u003cspan class=\"k\"\u003e*\u003c/span\u003e.pdf\n\u003cspan class=\"o\"\u003e}\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis script makes OCRing a PDF as simple as \u003ccode\u003e$ ocr ~/path/to/my.pdf\u003c/code\u003e.\u003c/p\u003e\n\n\u003cp\u003eFinally, when it comes to naming conventions, I try to be authoritarian and consistent. The real goal is consistency, and however you decide to name your files, be sure to stick with it. I want make any explicit recommendations, as it truly does depend on your particular situation, but I will recommend a few apps and utilities that will make it easier for your to enforce consistency once you have determined your naming schema. The first is \u003ca href=\"http://www.noodlesoft.com/hazel.php\"\u003eHazel\u003c/a\u003e, which is a Mac app that will watch certain folders for you, waiting for some criteria to be met and then perform certain actions. For example, you have it watch the folder where you stick all your PDFs, and then rename any PDFs which don’t follow your naming convention. \u003ca href=\"http://www.documentsnap.com/use-hazel-to-magically-process-downloaded-pdfs/\"\u003eDocumentSnap\u003c/a\u003e has a good tutorial on one way you can achieve this functionality. Another app/utility is \u003ca href=\"http://manytricks.com/namemangler/\"\u003eName Mangler\u003c/a\u003e, which provides a number of features to make batch renaming a breeze. Whatever your choice, having a consistently, universally applied naming schema will greatly help you in the long run.\u003c/p\u003e\n\n\u003ch2 id=\"pdf-annotation\"\u003ePDF Annotation\u003c/h2\u003e\n\n\u003cp\u003ePDF annotation has led me down a long and winding path, but in the end I believe I’ve reached something like my own personal PDF nirvana. Grant me your patience for a bit as I (speedily) recall some major points on this personal journey.\u003c/p\u003e\n\n\u003cp\u003eFor me, my fascination with PDF annotation started with two versions of an Applescript to extract PDF annotations from \u003ca href=\"http://skim-app.sourceforge.net/\"\u003eSkim\u003c/a\u003e. The original was by John Sidiropolus over at \u003ca href=\"http://www.organognosi.com/export-skim-notes-according-to-their-highlight-colors/\"\u003eOrganoGnosi.com\u003c/a\u003e, and then \u003ca href=\"http://drosophiliac.com/2012/09/creating-a-custom-url-scheme-via-applescript-and-python.html\"\u003eWalton Jones at drosophiliac.com\u003c/a\u003e worked up his own version of the script. Building on their great work, I wrote a script that would export all of your Skim annotations (not just highlights) and could handle a 300+ page book in seconds (the original scripts really lagged on any PDFs with triple-digit page numbers). In \u003ca href=\"https://gist.github.com/smargh/63d8c8ff251068a275b8\"\u003emy latest version of the script\u003c/a\u003e, I had an Applescript application that would extract all of my Skim annotations, format them into beautiful HTML, and create a new Evernote note where I had hyperlinks that would open the PDF in Skim to the exact page referenced. This script has served me well for months.\u003c/p\u003e\n\n\u003cp\u003eThis mini-history skips, however, the \u003cem\u003ecoolest\u003c/em\u003e feature of this script. In \u003ca href=\"http://drosophiliac.com/2012/09/creating-a-custom-url-scheme-via-applescript-and-python.html\"\u003ea companion piece\u003c/a\u003e to his post on his own export script, Walton Jones describes how he created a custom URL scheme to allow him to generate hyperlinks for his notes. His method relied on a combination of Applescript and Python, as well as his own rigid PDF naming conventions. This is truly amazing in my book. This allows me to engage in information extraction while retaining the ability to return information to its context. When I annotate an OCR’d PDF, I can extract what I believe to be the essential information\u003csup id=\"fnref:xx\"\u003e\u003ca href=\"#fn:xx\" class=\"footnote\"\u003e3\u003c/a\u003e\u003c/sup\u003e, then view only that information (in an Evernote note in this instance) or view that information in its original context (the PDF) by clicking a link that opens the PDF to the exact page with that content.\u003c/p\u003e\n\n\u003cp\u003eWhen I got my iPad, however, I immediately came across an annoyance. One of the best features of \u003ca href=\"https://evernote.com/\"\u003eEvernote\u003c/a\u003e is its cross-platform capabilities. So I could read my annotation summaries on my iPad, but the hyperlinks were totally useless. Since they were custom URLs that required a custom handler on the Mac, iOS doesn’t recognize them. I spent some time thinking about how I could have my hyperlinks work on iOS when I came to discover the Wild West of iOS–url schemes. While there are a crazy number of interesting things one can accomplish with URL schemes on iOS,\u003csup id=\"fnref:3\"\u003e\u003ca href=\"#fn:3\" class=\"footnote\"\u003e4\u003c/a\u003e\u003c/sup\u003e in their simplest form they function just like internet urls; they let you jump directly to a specific location.\u003c/p\u003e\n\n\u003cp\u003eEach iOS app has to register their own URL scheme (if they do at all), which is one of the main reasons I describe this realm as the Wild West of iOS. There is often very little documentation of an app’s URL scheme (since its really primarily a “power user feature”) and there isn’t really any standardization.\u003csup id=\"fnref:4\"\u003e\u003ca href=\"#fn:4\" class=\"footnote\"\u003e5\u003c/a\u003e\u003c/sup\u003e Well, I jumped into this jungle searching for a PDF app that had a URL scheme that would allow me to jump to a specific PDF and a specific page. This was 4 months ago. Unfortunately, no such PDF application had a robust enough URL scheme. The top tier applications would allow you to open a specific PDF, but none of them would let you specify a page.\u003csup id=\"fnref:5\"\u003e\u003ca href=\"#fn:5\" class=\"footnote\"\u003e6\u003c/a\u003e\u003c/sup\u003e So, I put in a number of feature requests and waited.\u003c/p\u003e\n\n\u003cp\u003eFinally, the folks at \u003ca href=\"http://smilesoftware.com/\"\u003eSmile Software\u003c/a\u003e upgraded \u003ca href=\"https://itunes.apple.com/us/app/pdfpen-for-ipad/id490774625?mt=8\"\u003ePDFPen for iPad\u003c/a\u003e as well as \u003ca href=\"https://itunes.apple.com/us/app/pdfpen-for-iphone/id557705455?mt=8\"\u003ePDFPen for iPhone\u003c/a\u003e to include a page specific URL scheme. This has finally opened the door to a cross-platform, wiki-style PDF workflow. In order for this workflow to, well, flow, we need two components: (1) a custom URL handler for the Mac and (2) a script to export PDF annotations with this custom URL embedded in the links. Luckily for you :) I have two such things.\u003c/p\u003e\n\n\u003ch3 id=\"the-url-handler\"\u003eThe URL Handler\u003c/h3\u003e\n\n\u003cp\u003eThe PDFPen for iPad app handles a URL scheme like this: \u003ccode\u003epdfpen:///filename.pdf?pg=2\u003c/code\u003e. There are a few things to note here. First, PDFPen does not currently have any folder system, so you will never have to deal with any other elements besides filename and page number. Second, the identifier (\u003ccode\u003epdfpen\u003c/code\u003e) is followed by a colon and then \u003cstrong\u003ethree\u003c/strong\u003e backslashes (\u003ccode\u003e///\u003c/code\u003e), not two. In order to have these urls function on the Mac, I needed to write an Applescript URL handler. Luckily, Applescript has built into it the \u003ccode\u003eon open location\u003c/code\u003e function. This allows you to script responses to clicks of URL types, essentially letting you register your own custom URL schemes with OS X.\u003c/p\u003e\n\n\u003cp\u003eMy URL handler for the PDFPen URL scheme faced one major hurdle. Since the PDFPen URL scheme only has the file name, the URL handler on the Mac needs to determine the file path of a PDF from only its filename. My solution relies on\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003esaving my PDFs to a cloud folder, like Dropbox\u003c/li\u003e\n  \u003cli\u003eusing a shell script to get the file path of every file in that folder\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eIn short, the URL handler searches my synced folder, where I know the PDF resides and generates a list of all of the files in that folder (including all sub-folders). It then searches that list for the item with the filename, and thus grabs the file path of the PDF on your Mac. This works well for me, but if anyone has another suggestion, drop me a line in the comments.\u003c/p\u003e\n\n\u003cp\u003eIf you want to view my URL handler script, visit my GitHub page \u003ca href=\"https://gist.github.com/smargh/7064788\"\u003ehere\u003c/a\u003e. If you simply want to download the application, so that the .plist file is correct, and everything \u003cem\u003ejust works\u003c/em\u003e, then you can \u003ca href=\"https://dl.dropboxusercontent.com/u/98731674/PDFPen%20URL%20Handler%20copy.zip\"\u003edownload it\u003c/a\u003e. Please note, however, that for the application to work “out of the box”, you need to save all of your cross-platform PDFs to your Dropbox folder on the Mac. Otherwise, the handler won’t be able to find the file path of your PDF.\u003c/p\u003e\n\n\u003ch3 id=\"exporting-skim-annotations-with-the-pdfpen-url-scheme\"\u003eExporting Skim Annotations with the PDFPen URL scheme\u003c/h3\u003e\n\n\u003cp\u003eThis is the central script for the workflow. This script extracts and exports all of your Skim annotations directly to Evernote with the proper PDFPen urls embedded in the annotations. This script is all-in-one. It begins by displaying three prompts:\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eWhere you want to save the PDF, you need to ensure that it is saved in the Folder that your url handler scours.\u003c/li\u003e\n  \u003cli\u003eInput a number that relates the printed page number of the PDF to the indexed page number.\u003csup id=\"fnref:6\"\u003e\u003ca href=\"#fn:6\" class=\"footnote\"\u003e7\u003c/a\u003e\u003c/sup\u003e As the prompt directs, all you need to do is subtract the printed page number from the indexed page number. If this means that you have a negative number, simply use a \u003ccode\u003e-\u003c/code\u003e.\u003c/li\u003e\n  \u003cli\u003eWhether the current PDF is a primary text or a secondary text. Depending on your answer, the script translates your highlight colors differently.\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003cp\u003eOnce you respond to these prompts, the script generally runs in about 3-5 seconds. Whenever the new Evernote note is created, the script displays a \u003ca href=\"http://growl.info/\"\u003eGrowl notification\u003c/a\u003e (if you have Growl installed).\u003c/p\u003e\n\n\u003cp\u003eThe script will export all of your Skim annotations to an Evernote notebook entitled “PDF Notes”. If such a notebook doesn’t exist, the script will create it. It will also assign two tags to the note: a “notes” tag and a “pdfpen”, both of which, if they don’t exist, will be created. As always, the script generates beautifully formatted html notes in Evernote, with clear section divisions and key information at the top. I use Skim’s text notes only for section headers, so the script will take all text notes and generate a Table of Contents at the top of the note. It also treats all yellow highlights as Summary text, and puts the Text Summary right after the ToC. All of the other annotations are grouped by type in the rest of the note. Here’s an example of an annotation summary note in Evernote:\u003c/p\u003e\n\n\u003cp\u003eFinally, of course, the script automatically embeds the PDFPen urls into the individual annotations. Since we input the relation of the printed page number to the indexed page number, the actual Evernote note displays the printed page number, while the url will take you to the proper indexed page number.\u003c/p\u003e\n\n\u003cp\u003eIf you want to grab this script, head over to my \u003ca href=\"https://gist.github.com/smargh/7065110\"\u003eGist\u003c/a\u003e and save the script as an application, so you can launch it from \u003ca href=\"http://www.alfredapp.com/\"\u003eAlfred\u003c/a\u003e, \u003ca href=\"http://obdev.at/products/launchbar/index.html\"\u003eLaunchBar\u003c/a\u003e, or \u003ca href=\"http://www.apptivateapp.com/\"\u003eApptivate\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor those of you who don’t have an iPad or simply prefer to have your PDFs spread about your file system, I have another version of the script that uses my own custom URL scheme which will encode the full path to the PDF\u003csup id=\"fnref:zz\"\u003e\u003ca href=\"#fn:zz\" class=\"footnote\"\u003e8\u003c/a\u003e\u003c/sup\u003e. This is actually the script that I use in my Alfred Workflow \u003ca href=\"http://fractaledmind.com/projects/skimmer\"\u003eSkimmer\u003c/a\u003e, which is by far the simplest way to use this functionality.\u003c/p\u003e\n\n\u003ch2 id=\"pdf-storage\"\u003ePDF Storage\u003c/h2\u003e\n\n\u003cp\u003eAs some of my previous comments will no doubt suggest, I highly recommend that your have a clear plan for where you will store your (consistently named) PDFs. Chaos in any part of your PDF workflow will breed chaos in other places as well. Moreover, both of the versions of the annotation exporting scripts require the PDFs to be sedentary. Again, I won’t recommend where or how to store your PDFs, but I can make some suggestions on tools.\u003c/p\u003e\n\n\u003cp\u003eOnce again, \u003ca href=\"http://www.noodlesoft.com/hazel.php\"\u003eHazel\u003c/a\u003e will prove adept at this sort of task. You can tell it to watch certain folders (like your \u003ccode\u003e/Downloads\u003c/code\u003e, \u003ccode\u003e/Documents\u003c/code\u003e, and/or \u003ccode\u003e/Desktop\u003c/code\u003e) for PDF files, and then have it move any PDFs put there to another location (maybe even changing the file name as it does so). Alternatively, you could opt for the big guns and use \u003ca href=\"http://www.devontechnologies.com/products/devonthink/overview.html\"\u003eDEVONthink\u003c/a\u003e, which offers an entire app dedicated to file management, with AI, sorting, searcing, indexing, and all sorts of whiz-bang features. It’s not a cheap app, but many people\u003csup id=\"fnref:yy\"\u003e\u003ca href=\"#fn:yy\" class=\"footnote\"\u003e9\u003c/a\u003e\u003c/sup\u003e swear by its power and capabilities.\u003c/p\u003e\n\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\n\u003cp\u003ePDFs can be a pain in the butt, but they are also vitally important in today’s world. So much information is still transferred via PDF. I hope that some of these tools, some of these ideas at least, can help you handle your PDFs better and with less stress.\u003c/p\u003e\n\n\u003cp\u003eAs always, if you have thoughts, questions, or suggestions, drop me a line.\u003c/p\u003e\n\n\u003cp\u003estephen\u003c/p\u003e\n\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eThe installation script has been tested on 10.9 and 10.10. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:2\"\u003e\n      \u003cp\u003e\u003ccode\u003etesseract\u003c/code\u003e prefers files in \u003ccode\u003e.tif\u003c/code\u003e format. \u003ca href=\"#fnref:2\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:xx\"\u003e\n      \u003cp\u003eThis uses highlight colors as a signal for various types of information. \u003ca href=\"#fnref:xx\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:3\"\u003e\n      \u003cp\u003eIf you’re interested, check out \u003ca href=\"http://www.macstories.net/tag/url-scheme/\"\u003eFrederico Viticci’s work\u003c/a\u003e or \u003ca href=\"http://www.geekswithjuniors.com/ios-url-schemes/\"\u003eEric Pramona\u003c/a\u003e \u003ca href=\"#fnref:3\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:4\"\u003e\n      \u003cp\u003eThere is beginning to be some standardization thanks to the work of Greg Pierce and Marco Arment’s \u003ca href=\"http://x-callback-url.com/\"\u003ex-callback-url specificiation\u003c/a\u003e. \u003ca href=\"#fnref:4\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:5\"\u003e\n      \u003cp\u003e\u003ca href=\"http://www.branchfire.com/iannotate/\"\u003eiAnnotate\u003c/a\u003e uses the \u003ccode\u003eiannotate://open//\u003c/code\u003e scheme. \u003ca href=\"https://itunes.apple.com/us/app/goodreader-for-ipad/id363448914?mt=8\"\u003eGoodReader\u003c/a\u003e uses the \u003ccode\u003egropen://\u003c/code\u003e scheme. \u003ca href=\"https://itunes.apple.com/us/app/pdf-expert-fill-forms-annotate/id393316844?mt=8\"\u003ePDF Expert\u003c/a\u003e uses the \u003ccode\u003epdfefile:///folder1/filename.pdf?cc=1\u003c/code\u003e scheme. \u003ca href=\"#fnref:5\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:6\"\u003e\n      \u003cp\u003eJohn Sidiropolus has a great explanation of the various ways in which printed page numbers can relate to indexed page numbers in \u003ca href=\"http://www.organognosi.com/latin-page-numbers-arabic-page-numbers-and-the-fifth-skim-note/\"\u003ethis post\u003c/a\u003e. \u003ca href=\"#fnref:6\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:zz\"\u003e\n      \u003cp\u003eNaturally, this still requires you to not move the PDF once you export the annotations. Again, having a consistent naming schema and a consistent storage plan will only help you in the long run. \u003ca href=\"#fnref:zz\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n    \u003cli id=\"fn:yy\"\u003e\n      \u003cp\u003eCheck out \u003ca href=\"http://nerdquery.com/search.php?query=devonthink\u0026amp;search=1\u0026amp;category=24\u0026amp;catid=24\u0026amp;type=and\u0026amp;results=50\u0026amp;db=0\u0026amp;prefix=0\u0026amp;media_only=0\"\u003eGabe Weatherhead’s posts\u003c/a\u003e on macdrifter.com as well as his appearance on \u003ca href=\"http://www.relay.fm/mpu/251\"\u003eMac Power Users\u003c/a\u003e for a clear guide and why and how DEVONthink could work within a larger workflow. \u003ca href=\"#fnref:yy\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"},{"title":"Spritzr","url":"/projects/spritzr/","content":"\u003ch4 id=\"version-11\"\u003eVersion 1.1\u003c/h4\u003e\n\n\u003ch4 id=\"download-on-packalhttpwwwpackalorgworkflowspritzr\"\u003eDownload on \u003ca href=\"http://www.packal.org/workflow/spritzr\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eSpritzr is a relatively simple workflow that allows you to speed-read text on your Mac using \u003ca href=\"http://www.spritzinc.com/the-science/\"\u003eSpritz-style\u003c/a\u003e techniques. The simple idea is that one word of your input text is displayed at a time in quick enough succession that you are no longer \u003ca href=\"http://en.wikipedia.org/wiki/Subvocalization\"\u003eSub-Vocalizing\u003c/a\u003e, which is the largest impediment to reading at a comfortable, yet swift pace. The added layer of nuance, however, is that each word is positioned around the so-called \u003ca href=\"http://www.spritzinc.com/blog/\"\u003eOptimal Reading Position\u003c/a\u003e. To borrow an image from the Spritz website, the difference between most electronic speedreaders and Spritz-style speedreaders is the alignment of the words:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"word_positioning_blog3.png\" src=\"http://www.spritzinc.com/wp-content/uploads/2014/02/word_positioning_blog3.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThis workflow achieves a similar affect, thus making reading simpler and faster.\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNOTICE\u003c/strong\u003e: I wrote all of this software from scratch and have no affiliation with the Spritz company. I was inspired by other open-source projects that attempt to mirror the Spritz functionality: \u003ca href=\"https://github.com/Miserlou/OpenSpritz\"\u003eOpenSpritz\u003c/a\u003e and \u003ca href=\"https://github.com/littleq0903/spritz-cmd\"\u003espritz-cmd\u003c/a\u003e, but this software has no relation to Spritz aside from appearances.\u003c/p\u003e\n\n\u003cp\u003eSpritzr currently only has one command: \u003ccode\u003espritz\u003c/code\u003e. This takes text input which will be parsed and displayed in the Spritzr window.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"spritzr.png\" src=\"https://www.evernote.com/shard/s41/sh/288af1c4-bed2-4dfc-ab5f-391ee6c39b32/606b76b31d8c6fbbb4558f38d505cfe5/deep/0/spritzr.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eAlternatively, you can pass text files (\u003ccode\u003e.txt\u003c/code\u003e, \u003ccode\u003e.md\u003c/code\u003e, \u003ccode\u003e.mmd\u003c/code\u003e) into Spritzr using the File Action \u003ccode\u003eFile Spritzr\u003c/code\u003e. This will parse and display the text content of that file in the Spritzr window.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"spritzr_file.png\" src=\"https://www.evernote.com/shard/s41/sh/0da5e015-ca7c-461a-bdb4-675b69ae26ea/15682e931bf8c6daf2fcad14f9b200eb/deep/0/spritzr_file.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eThere are two settings, which can be changed using the \u003ccode\u003espritzr:set\u003c/code\u003e keyword:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eWords per Minute\u003c/li\u003e\n  \u003cli\u003eReading Mode\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eIf you which to change your wpm, simply invoke \u003ccode\u003espritzr:set\u003c/code\u003e and input an integer (the default is 250). If you which to change the reading mode, invoke \u003ccode\u003espritzr:set\u003c/code\u003e and input either \u003ccode\u003edark\u003c/code\u003e or \u003ccode\u003elight\u003c/code\u003e (the default is \u003ccode\u003elight\u003c/code\u003e).\u003c/p\u003e\n\n\u003cp\u003eDark Mode: \u003cimg alt=\"spritzr_dark.png\" src=\"https://www.evernote.com/shard/s41/sh/a620b423-7a24-49b8-86e1-6a6088304b0b/5605e456e9e00a944a2d52609b360222/deep/0/spritzr_dark.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eLight Mode: \u003cimg alt=\"spritzr_light.png\" src=\"https://www.evernote.com/shard/s41/sh/95a765b1-b622-4a27-911e-5b7d2e6b5a40/f3b77ee67f52cd3afa44dec5656ee4dc/deep/0/spritzr_light.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eOther than that, you can just start spritzing!\u003c/p\u003e\n","type":"article"},{"title":"BibQuery","url":"/projects/bibquery/","content":"\u003ch4 id=\"version-101\"\u003eVersion: 1.0.1\u003c/h4\u003e\n\n\u003ch4 id=\"download-from-packalhttpwwwpackalorgworkflowbibquery\"\u003eDownload from \u003ca href=\"http://www.packal.org/workflow/bibquery\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eBibQuery is essentially a visual clone of \u003ca href=\"http://fractaledmind.com/projects/zotquery/\"\u003eZotQuery\u003c/a\u003e for the Mac app \u003ca href=\"http://bibdesk.sourceforge.net/\"\u003eBibDesk\u003c/a\u003e, which is a citation manager for \u003ca href=\"http://www.bibtex.org/\"\u003eBibTeX\u003c/a\u003e. Users of BibDesk can now enjoy the clean search interface found in ZotQuery, with clear icons for publication type and clean presentation of publication data.\u003c/p\u003e\n\n\u003cp\u003e\u003cimg alt=\"bibquery.png\" src=\"https://www.evernote.com/shard/s41/sh/e354f593-a127-47e9-8ec3-212124341231/39f92d48e93282af26881d5cc0e95e97/deep/0/bibquery.png\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eUsers can also search their \u003ccode\u003e.bib\u003c/code\u003e databases with the same variety of queries:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003egeneral (keywords: \u003ccode\u003ebib\u003c/code\u003e or \u003ccode\u003eb\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003etitles (keywords: \u003ccode\u003ebib:t\u003c/code\u003e or \u003ccode\u003ebt\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003ecreators (keywords: \u003ccode\u003ebib:a\u003c/code\u003e or \u003ccode\u003eba\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003ein-keyword (keywords: \u003ccode\u003ebib:nk\u003c/code\u003e or \u003ccode\u003ebnk\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003ein-group (keywords: \u003ccode\u003ebib:ng\u003c/code\u003e or \u003ccode\u003ebng\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003efor keyword (keywords: \u003ccode\u003ebib:k\u003c/code\u003e or \u003ccode\u003ebk\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003efor group (keywords: \u003ccode\u003ebib:g\u003c/code\u003e or \u003ccode\u003ebg\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eAlso of note, BibQuery works \u003cem\u003ewithout\u003c/em\u003e BibDesk being open and even functions if you have multiple \u003ccode\u003e.bib\u003c/code\u003e databases that BibDesk manages. In short, BibQuery brings all of your citations to you.\u003c/p\u003e\n\n\u003cp\u003eOnce you find the item you’re looking for, BibQuery currently has 3 possible actions:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eyou can open up BibDesk to that item (simply press \u003ccode\u003ereturn\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eyou can copy a LaTeX cite command for that item (simply press \u003ccode\u003econtrol+return\u003c/code\u003e)\u003c/li\u003e\n  \u003cli\u003eyou can open that item’s PDF attachment, if it has one (simply press \u003ccode\u003eshift+return\u003c/code\u003e)\u003c/li\u003e\n\u003c/ul\u003e\n","type":"article"},{"title":"Reboot","url":"/projects/reboot/","content":"\u003cp\u003eThis is my personal fork of \u003ca href=\"https://github.com/MatthewMueller/dots\"\u003eMatthew Mueller’s \u003ccode\u003edots\u003c/code\u003e repo\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e\n\n\u003cp\u003eOne-liner:\u003c/p\u003e\n\n\u003cdiv class=\"highlight shell\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"o\"\u003e(\u003c/span\u003emkdir -p /tmp/dots \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e /tmp/dots \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e curl -L https://github.com/smargh/reboot/archive/master.tar.gz | tar zx --strip 1 \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sh ./install.sh\u003cspan class=\"o\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"design\"\u003eDesign\u003c/h3\u003e\n\n\u003cp\u003eThe goal of reboot is to automate the process of getting your operating system from a stock build to a fully functional machine.\u003c/p\u003e\n\n\u003cp\u003eReboot should be the first thing you download and run to get your computer set up.\u003c/p\u003e\n\n\u003cp\u003eThis library tries to be organized like a \u003ccode\u003enode\u003c/code\u003e application, while working within the constraints of \u003ccode\u003ebash\u003c/code\u003e.\u003c/p\u003e\n\n\u003ch4 id=\"mac-os-x\"\u003eMac OS X\u003c/h4\u003e\n\n\u003cp\u003eThe OS X build does the following:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003einstall \u003ccode\u003ehomebrew\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003einstalls binaries (\u003ccode\u003egraphicsmagick\u003c/code\u003e, \u003ccode\u003epython\u003c/code\u003e, \u003ccode\u003esshfs\u003c/code\u003e, \u003ccode\u003eack\u003c/code\u003e, \u003ccode\u003egit\u003c/code\u003e, etc.)\u003c/li\u003e\n  \u003cli\u003esets OS X defaults\u003c/li\u003e\n  \u003cli\u003einstalls applications via \u003ccode\u003ehomebrew-cask\u003c/code\u003e (one-password, sublime-text, virtualbox, nv-alt, iterm2, etc.)\u003c/li\u003e\n  \u003cli\u003esets up the \u003ccode\u003e~/.bash_profile\u003c/code\u003e\u003c/li\u003e\n  \u003cli\u003ehandle custom icons for applications\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003ch4 id=\"credits\"\u003eCredits\u003c/h4\u003e\n\n\u003cul\u003e\n  \u003cli\u003eOriginal project by \u003ca href=\"https://github.com/MatthewMueller/\"\u003eMatthew Mueller\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","type":"article"},{"title":"Classical Studies Resources","url":"/projects/classical-studies-resources/","content":"\u003cp\u003eThis is a work-in-progress collection of structured data and scripts for Classical Studies/Classics.\u003c/p\u003e\n\n\u003cp\u003eThe data has been compiled and organized from various online resources including:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003ethe \u003ca href=\"http://www.perseus.tufts.edu/\"\u003ePerseus Project\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://dcc.dickinson.edu/\"\u003eDickenson College Commentaries\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://dge.cchs.csic.es/index.en\"\u003eThe Diccionario Griego-Español Project\u003c/a\u003e\u003c/li\u003e\n  \u003cli\u003e\u003ca href=\"http://www.annee-philologique.com/\"\u003eL’Année philologique\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThis is a work-in-progress collection of structured data and scripts for Classical Studies/Classics. The data has been compiled and organized from various online resources including the Perseus Project, Dickenson College Commentaries, The Diccionario Griego-Español Project, and L’Année philologique.\u003c/p\u003e\n\n\u003cp\u003eCurrently, these are the JSON structured files:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eDCC Greek Core Vocabulary\u003c/li\u003e\n  \u003cli\u003eDCC Latin Core Vocabulary\u003c/li\u003e\n  \u003cli\u003eGreek Authors\u003c/li\u003e\n  \u003cli\u003eGreek Texts\u003c/li\u003e\n  \u003cli\u003eLatin Texts\u003c/li\u003e\n  \u003cli\u003eL’Année philologique Journal Abbreviations (in two forms)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eThere are also plain text files:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eDGE Authors and Works\u003c/li\u003e\n  \u003cli\u003eDGE Dictionary Abbreviations\u003c/li\u003e\n  \u003cli\u003eIndex to Smyth’s Greek Grammar\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eFinally, there is a random collection of scripts (mostly compiled Applescripts) that I have made at various points for various uses. This section requires much cleaning up, refactoring, and organization at this stage. But I am putting them here for now nonetheless.\u003c/p\u003e\n\n\u003cp\u003eHopefully, these will find some use for others.\u003c/p\u003e\n","type":"article"},{"title":"LibGen","url":"/projects/libgen/","content":"\u003cp\u003eSeach the \u003ca href=\"http://libgen.in/\"\u003eLibrary Genesis\u003c/a\u003e project's catalogue of books and download right from your keyboard, without ever launching a browser.\u003c/p\u003e\n\n\u003ch4 id=\"version-11\"\u003eVersion 1.1\u003c/h4\u003e\n\n\u003ch4 id=\"download-from-packalhttpwwwpackalorgworkflowlibgen\"\u003eDownload from \u003ca href=\"http://www.packal.org/workflow/libgen\"\u003ePackal\u003c/a\u003e\u003c/h4\u003e\n\n\u003cp\u003eThis is a relatively simple workflow that allows users to search the \u003ca href=\"http://gen.lib.rus.ec/\"\u003eLibrary Genesis PDF repository\u003c/a\u003e. For those who do not know, the Library Genesis project is:\u003c/p\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003ebased in Russia, this is the largest currently openly available collection. They have several initiatives: i. +1 million files of mainly non-fiction ebooks, ii. +900k of mainly fiction ebooks, iii. +20 million papers from journals of science, history, art etc., iv. comics, magazines and paintings; totally amounting to at least 30 TB – easily the Library of Congress of the digital world. The Libgen movement mainly focusses on downloading whole collections that have already been posted in fora or as torrents, although a significant portion is also due to individual efforts. (per \u003ca href=\"https://sites.google.com/site/themetalibrary/library-genesis\"\u003eGoogle Sites\u003c/a\u003e)\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003cp\u003eThis workflow has only one keyword and one action. Use the keyword \u003ccode\u003elibgen\u003c/code\u003e to begin a search. Select an item and press \u003ccode\u003eReturn\u003c/code\u003e to begin a download of the file in your browser of choice. The only real oddity of this workflow is that it requires the user to type a period (\u003ccode\u003e.\u003c/code\u003e) after the query in order to initiate the search. This helps with performance.\u003c/p\u003e\n","type":"article"},{"title":"Metadata","url":"/projects/metadata/","content":"\u003cp\u003ePython wrapper for OS X \u003ccode\u003emdfind\u003c/code\u003e and \u003ccode\u003emdls\u003c/code\u003e\u003c/p\u003e\n\n\u003ch3 id=\"installation\"\u003eInstallation\u003c/h3\u003e\n\n\u003cp\u003eDownload the \u003ccode\u003e.zip\u003c/code\u003e file from GitHub.\u003c/p\u003e\n\n\u003cp\u003eI’m working on getting the library on \u003ca href=\"https://pypi.python.org/pypi\"\u003ePyPi\u003c/a\u003e soon.\u003c/p\u003e\n\n\u003ch3 id=\"file-metadata-query-expression-syntax\"\u003eFile Metadata Query Expression Syntax\u003c/h3\u003e\n\n\u003cp\u003eI have modeled the Python syntax on \u003ca href=\"https://developer.apple.com/library/mac/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html\"\u003eApple’s original Spotlight query syntax\u003c/a\u003e. File metadata queries are constructed using a simple query language that takes advantage of Python’s flexible class construction. The syntax is relatively straightforward, including comparisons, language agnostic options, and time and date variables.\u003c/p\u003e\n\n\u003ch4 id=\"comparison-syntax\"\u003eComparison Syntax\u003c/h4\u003e\n\n\u003cp\u003eThe \u003ccode\u003emetadata\u003c/code\u003e library implements 3 custom classes (\u003ccode\u003eMDAttribute\u003c/code\u003e, \u003ccode\u003eMDComparison\u003c/code\u003e, and \u003ccode\u003eMDExpression\u003c/code\u003e) to represent the various units of \u003ccode\u003emdfind\u003c/code\u003e’s \u003ca href=\"https://developer.apple.com/library/mac/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html\"\u003eQuery Expression Syntax\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eQuery comparisons have the following basic format:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003e[attribute] [operator] [value]\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThe following sub-sections will describe these 3 elements more fully, but any such comparison will generate a \u003ccode\u003eMDComparison\u003c/code\u003e object. If you ever want to see what a particular \u003ccode\u003eMDComparison\u003c/code\u003e object will look like as an query string, you can coerce it into a unicode string using the \u003ccode\u003eunicode()\u003c/code\u003e operation (or into a string using the \u003ccode\u003estr()\u003c/code\u003e operation).\u003c/p\u003e\n\n\u003ch4 id=\"attribute\"\u003eAttribute\u003c/h4\u003e\n\n\u003cp\u003eThe first element of a query comparison is the \u003cem\u003eattribute\u003c/em\u003e, which is a \u003ccode\u003eMDAttribute\u003c/code\u003e object in \u003ccode\u003emetadata\u003c/code\u003e. \u003ccode\u003emetadata\u003c/code\u003e automatically generates \u003ccode\u003eMDAttribute\u003c/code\u003e objects for every Spotlight attribute on your system. You can view the names of all of these objects via \u003ccode\u003emetadata.attributes\u003c/code\u003e variable. Attributes have a Pythonic naming scheme, so \u003ccode\u003ekMDItemFSName\u003c/code\u003e becomes \u003ccode\u003emetadata.name\u003c/code\u003e and \u003ccode\u003ekMDItemContentType\u003c/code\u003e becomes \u003ccode\u003emetadata.content_type\u003c/code\u003e. The \u003ccode\u003eMDAttribute\u003c/code\u003e class is built on top of the metadata information retrieved from \u003ccode\u003emdimport -A\u003c/code\u003e. If you wish to see all of the information for a metadata attributes, you can use the \u003ccode\u003emetadata.[attribute].info()\u003c/code\u003e function.\u003c/p\u003e\n\n\u003cp\u003eAs with all of the custom classes, you can coerce a \u003ccode\u003eMDAttribute\u003c/code\u003e object into a unicode string using the \u003ccode\u003eunicode()\u003c/code\u003e operation (i.e. \u003ccode\u003eunicode(metadata.name)\u003c/code\u003e returns \u003ccode\u003eu'kMDItemFSName'\u003c/code\u003e).\u003c/p\u003e\n\n\u003ch4 id=\"operator\"\u003eOperator\u003c/h4\u003e\n\n\u003cp\u003eThe \u003cem\u003eoperator\u003c/em\u003e can be any one of the following:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003eOperator\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e==\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eequal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e!=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003enot equal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eless than (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003egreater than (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eless than or equal (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003egreater than or equal (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003ein_range(attribute, min_value, max_value)\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003enumeric values within the range of min_value through max_value in the specified attribute\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eThe \u003ccode\u003e==\u003c/code\u003e and \u003ccode\u003e!=\u003c/code\u003e operators allow for modification. These modifiers specify how the comparison is made.\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eModifier\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode\u003emetadata.[object].ignore_case\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eThe comparison is case insensitive.\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003ccode\u003emetadata.[object].ignore_diacritics\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eThe comparison is insensitive to diacritical marks.\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003eBoth modifiers are on by default. In order to turn one off, you need to set the property to \u003ccode\u003eFalse\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003emetadata\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eignore_case\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"bp\"\u003eFalse\u003c/span\u003e\n\u003cspan class=\"n\"\u003ecomparison\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e'com.adobe.pdf'\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch4 id=\"value\"\u003eValue\u003c/h4\u003e\n\n\u003cp\u003eThe \u003cem\u003evalue\u003c/em\u003e element of a query comparison can be a string or integer. Strings can use wildcard characters (\u003ccode\u003e*\u003c/code\u003e and \u003ccode\u003e?\u003c/code\u003e) to make the search fuzzy. The \u003ccode\u003e*\u003c/code\u003e character matches multiple characters whereas the \u003ccode\u003e?\u003c/code\u003e wildcard character matches a single character (\u003cem\u003eNote\u003c/em\u003e: Even in the Terminal, I cannot get wildcard searches with \u003ccode\u003e?\u003c/code\u003e to function properly. I would recommend using \u003ccode\u003e*\u003c/code\u003e as your ony wildcard character). Here are some examples demonstrating how the wildcards function:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# Matches attribute values that begin with “paris”. For example, matches “paris”, but not “comparison”.\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_content\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"paris*\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Matches attribute values that end with “paris”.\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_content\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"*paris\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Matches attributes that contain \"paris\" anywhere within the value. For example, matches “paris” and “comparison”.\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_content\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"*paris*\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Matches attribute values that are exactly equal to “paris”.\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etext_content\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"paris\"\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIn order to use any of the greater-than or less-than operators, your value needs either to be an integer (or float) or a date object. In order to make the API as intuitive as possible, \u003ccode\u003emetadata\u003c/code\u003e allows for human-readable date statements. That is, you do not need to pass \u003ccode\u003edatetime\u003c/code\u003e objects as the \u003cem\u003evalue\u003c/em\u003e of a comparison with a date attribute (like \u003ccode\u003emetadata.creation_date\u003c/code\u003e). \u003ccode\u003emetadata\u003c/code\u003e uses the \u003ccode\u003eparsedatetime\u003c/code\u003e library to convert human-readable dates into \u003ccode\u003edatetime\u003c/code\u003e objects. The following are all acceptable date comparisons:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# Created before today\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreation_date\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e'today'\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# Created after last month\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecreation_date\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"s\"\u003e'one month ago'\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cp\u003eIf \u003ccode\u003emetadata\u003c/code\u003e cannot parse your datetime string, it will raise an \u003ccode\u003eException\u003c/code\u003e. The parsing engine is good, but not perfect and can seem capricious. For example, \u003ccode\u003eone month ago\u003c/code\u003e is parsable, but \u003ccode\u003ea month ago\u003c/code\u003e is not. Datetime strings that are parsed are converted into an ISO-8601-STR compliant string.\u003c/p\u003e\n\n\u003ch3 id=\"expression-syntax\"\u003eExpression syntax\u003c/h3\u003e\n\n\u003cp\u003eYou can combine \u003ccode\u003eMDComparison\u003c/code\u003e objects to create a more complex expression, represented by the \u003ccode\u003eMDExpression\u003c/code\u003e class. Comparison objects can be combined in one of two ways: using a conjuction (\u003ccode\u003e\u0026amp;\u003c/code\u003e) or using a disjuction (\u003ccode\u003e|\u003c/code\u003e). Not only can \u003ccode\u003eMDComparison\u003c/code\u003e objects be combined, but you can nest and combine any combination of \u003ccode\u003eMDComparison\u003c/code\u003e objects and \u003ccode\u003eMDExpression\u003c/code\u003e objects. For example:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e# query for audio files authored by “stephen” (ignoring case)\u003c/span\u003e\n\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# query for audio files authored by “stephen” or “daniel”\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# query for audio or video files authored by “stephen” or “daniel”\u003c/span\u003e\n\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.video\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e# you could also break the last expression into chunks\u003c/span\u003e\n\u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.video\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003efinal_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cp\u003eHere’s a complex expression to find only audio or video files that have been changed in the last week authored by someone named either “Stephen” or “Daniel” (ignoring case and diacritics, so it would match a file authored by “danièl”):\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.video\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etime_comp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_change_date\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e'one week ago'\u003c/span\u003e\n\u003cspan class=\"n\"\u003equery_expression\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etime_comp\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003cp\u003e\u003cem\u003eNote\u003c/em\u003e: parentheses are needed for the first two expressions. Without them, you would get a \u003ccode\u003eTypeError\u003c/code\u003e as Python thinks you are trying to combine the string \u003ccode\u003e\"daniel\"\u003c/code\u003e with the \u003ccode\u003eMDAttribute\u003c/code\u003e object \u003ccode\u003eauthors\u003c/code\u003e, which is an obviously unsupported expression.\u003c/p\u003e\n\n\u003cp\u003eOnce you have created your query expression (or even a simple comarison), you will pass this to \u003ccode\u003emetadata.find()\u003c/code\u003e in order to execute the file searching.\u003c/p\u003e\n\n\u003ch2 id=\"functions\"\u003eFunctions\u003c/h2\u003e\n\n\u003ch3 id=\"find\"\u003e\u003ccode\u003efind\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe main function is \u003ccode\u003emetadata.find()\u003c/code\u003e. It takes one required argument, \u003ccode\u003equery_expression\u003c/code\u003e, which can be either an \u003ccode\u003eMDExpression\u003c/code\u003e object or an \u003ccode\u003eMDComparison\u003c/code\u003e object. In addition to this one required argument, \u003ccode\u003emetadata.find()\u003c/code\u003e also has the optional argument \u003ccode\u003eonly_in\u003c/code\u003e for you to focus the scope of your search to a particular directory tree. This simply needs to be a full (non-relative) path passed as a Unicode string. Other than that, there’s nothing else to it. Build you query expression, pass it to \u003ccode\u003efind()\u003c/code\u003e and get your results as a Python list. Here’s an example of building the sample expression above and passing it to \u003ccode\u003emetadata.find()\u003c/code\u003e:\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\n6\n7\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003emetadata\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"daniel\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eauthors\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"stephen\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.audio\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_type\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e\"public.video\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"n\"\u003etime_comp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003econtent_change_date\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"s\"\u003e'one week ago'\u003c/span\u003e\n\u003cspan class=\"n\"\u003equery_expression\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eauthor_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etype_exp\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003etime_comp\u003c/span\u003e\n\u003cspan class=\"n\"\u003eresults\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003equery_expression\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"list\"\u003e\u003ccode\u003elist\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eIn addition to \u003ccode\u003efind()\u003c/code\u003e, the \u003ccode\u003emetadata\u003c/code\u003e module has the \u003ccode\u003elist\u003c/code\u003e function, which is a wrapper around the \u003ccode\u003emdls\u003c/code\u003e command. You simply pass it a file path and it returns a dictionary of metadata attributes and values. Once again, the attribute names (the dictionary keys) are simplified using the algorithm used to convert Spotlight attributes to Pythonic names.\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003emetadata\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003efile_metadata\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003emetadata\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile_path\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003efile_metadata\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e'name'\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"write\"\u003e\u003ccode\u003ewrite\u003c/code\u003e\u003c/h3\u003e\n\n\u003cp\u003eFinally, there is an alpha version of a \u003ccode\u003ewrite()\u003c/code\u003e function, which allows you to write metadata to a file. Right now, I have it defaulted to writing to the \u003ccode\u003ekMDItemUserTags\u003c/code\u003e attribute, but a few others have worked. I need to test it more to make it more general.\u003c/p\u003e\n","type":"article"},{"title":"Pandoc Templates","url":"/projects/pandoc-templates/","content":"\u003ch2 id=\"description\"\u003eDescription\u003c/h2\u003e\n\n\u003cp\u003eA collection of support files for use with \u003ca href=\"http://johnmacfarlane.net/pandoc/\"\u003ePandoc\u003c/a\u003e, and specifically for helping to turn pandoc markdown files\ninto nice HTML, LaTeX, PDF, and Microsoft Word Document output. These files go in your \u003ccode\u003e~/.pandoc/\u003c/code\u003e folder.\u003c/p\u003e\n\n\u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e\n\n\u003cp\u003eTo install, simply run this command from your Terminal:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003epython\ngit clone https://github.com/smargh/pandoc-templates.git ~/.pandoc\n\u003c/code\u003e\u003c/p\u003e\n\n\u003cp\u003eThis will clone this repositorty into the appropriate Pandoc templates directory.\u003c/p\u003e\n\n\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\n\u003cp\u003eWhat’s included?\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eUnder \u003ccode\u003etemplates\u003c/code\u003e, some \u003ca href=\"http://johnmacfarlane.net/pandoc/\"\u003ePandoc\u003c/a\u003e templates for an article in PDF (via LaTeX) or HTML. These can be be pointed to directly with the \u003ccode\u003e--template=\u003c/code\u003e switch as appropriate. The \u003ccode\u003ehtml.template\u003c/code\u003e, \u003ccode\u003elatex.template\u003c/code\u003e, and \u003ccode\u003exelatex.template\u003c/code\u003e files are all forked from KJ Healy’s \u003ca href=\"https://github.com/kjhealy/pandoc-templates\"\u003e\u003ccode\u003epandoc-templates repo\u003c/code\u003e\u003c/a\u003e. The \u003ccode\u003ereference.docx\u003c/code\u003e file, however, is of my own creation. It can be used via the \u003ccode\u003e--reference-docx\u003c/code\u003e pandoc option. The \u003ccode\u003e.docx\u003c/code\u003e template uses \u003ca href=\"http://www.typography.com/fonts/hoefler-text/overview/\"\u003eHoefler Text\u003c/a\u003e as its font. It is double spaced, with small caps headers and 1” indented, single-line block quotes. It works well for academic papers. The \u003ccode\u003elatex.template\u003c/code\u003e and \u003ccode\u003exelatex.template\u003c/code\u003e depend on the style files in \u003ca href=\"http://kjhealy.github.com/latex-custom-kjh/\"\u003elatex-custom-kjh\u003c/a\u003e.\u003c/li\u003e\n  \u003cli\u003eUnder \u003ccode\u003emarked\u003c/code\u003e, a single CSS file for generating HTML previews of Markdown documents using \u003ca href=\"http://marked2app.com/\"\u003eMarked\u003c/a\u003e, a very handy HTML live previewer for markdown files. The \u003ccode\u003ecss\u003c/code\u003e file in the \u003ccode\u003emarked/\u003c/code\u003e folder is meant to be used together with pandoc and \u003ca href=\"http://markedapp.com/\"\u003eMarked\u003c/a\u003e. To have \u003ca href=\"http://marked2app.com/\"\u003eMarked\u003c/a\u003e work with \u003ca href=\"http://johnmacfarlane.net/pandoc/\"\u003ePandoc\u003c/a\u003e, simply go to Marked \u0026gt; Preferences \u0026gt; Advanced. Then specify the filepath to Pandoc like this (e.g.): \u003ccode\u003e/usr/bin/pandoc\u003c/code\u003e and the various switches and arguments to pandoc in the ‘Args’ field below it, like this:\n  \u003ccode\u003eshell\n  -r markdown -w html -s -S --bibliography=biblio.bib\n \u003c/code\u003e\nThen check the box telling Marked to use this by default. The \u003ccode\u003epandoc\u003c/code\u003e CSS file can be added in Marked \u0026gt; Style \u0026gt; Custom CSS. Marked can then use it to format the HTML output such that it looks like the final \u003ccode\u003e.docx\u003c/code\u003e file will.\u003c/li\u003e\n  \u003cli\u003eThe CSL files in the \u003ccode\u003ecsl/\u003c/code\u003e folder format the bibliography generated by pandoc and citeproc. (For simplicity we avoid dealing with biblatex directly at all.) The \u003ccode\u003echicago-syllabus.csl\u003c/code\u003e file makes a tiny change to a standard Chicago Notes CSL file so you can use it to output citation information in the body text of a document. This makes it useful for lists of references in CVs and course syllabuses. The other files are the APA, MLA, and Chicago standard files from the main \u003ca href=\"https://github.com/citation-style-language/styles\"\u003eCSL styles repository\u003c/a\u003e.\u003c/li\u003e\n  \u003cli\u003eUnder \u003ccode\u003edefaults\u003c/code\u003e, you will find all of Pandoc’s standard templates for the many of its output formats. These can be helpful in creating your own templates.\u003c/li\u003e\n  \u003cli\u003eFinally, under \u003ccode\u003eexamples\u003c/code\u003e, you will find one plain text Markdown file, one BibTeX \u003ccode\u003e.bib\u003c/code\u003e file and a \u003ccode\u003e.docx\u003c/code\u003e file. These demonstrate how these templates can be used to generate a beautiful Microsoft Word file from Pandoc. To generate the files for youself, use this pandoc command:\n  \u003ccode\u003eshell\n  -r markdown -w docx -s -S --bibliography=Thesis.bib --csl=/Users/smargheim/Documents/GitHub/pandoc-templates/csl/chicago-author-date.csl --reference-docx=/Users/smargheim/Documents/GitHub/pandoc-templates/templates/reference.docx academic_test.txt --output=academic_test.docx\n \u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","type":"article"},{"title":"Plato’s Fractal Line","url":"/essays/platos-fractal-line/","content":"","type":"article"},{"title":"Aristotle on Secondary Substance","url":"/essays/aristotle-on-secondary-substances/","content":"","type":"article"},{"title":"Aemulatio and Epicurean Semiosis at *Georgics* 1.415-23","url":"/essays/aemulatio-and-epicurian-semiosis-at-georgics-1-415-23/","content":"","type":"article"},{"title":"*Airs, Waters, Places* in Context","url":"/essays/theory-and-the-language-of-proof-in-awp/","content":"","type":"article"},{"title":"What Epicurean Friendship is Not","url":"/essays/what-epicurean-friendship-is-not/","content":"","type":"article"},{"title":"Banking on Friendship","url":"/essays/banking-on-friendship/","content":"","type":"article"},{"title":"Saussurean Delimitation and Plato’s *Cratylus*","url":"/essays/saussurean-delimitation-and-platos-cratylus/","content":"","type":"article"},{"title":"Barfield Contra Lewis on Truth and Imagination","url":"/essays/barfield-contra-lewis-on-truth-and-imagination/","content":"","type":"article"},{"title":"Socrates and Reader","url":"/essays/socrates-and-reader/","content":"","type":"article"},{"title":"I have come to fret the night, the simple silence that it offers.","url":"/jots/201602142233/","content":"\n","type":"article"},{"title":"Example *Article*","url":"/articles/example-article/","content":"\u003cp\u003eThis is an example article. It contains a wide range of various content to demonstrate how this blog styles such content. For example, this is some text with a footnote.\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\n\u003cp\u003e{{read more}}\u003c/p\u003e\n\n\u003cp\u003eThis is a way to determine the number of characters per line in the various layouts:\u003c/p\u003e\n\n\u003cp\u003e0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\u003c/p\u003e\n\n\u003cscript type=\"math/tex; mode=display\"\u003e\\sum_{n=1}^{\\infty} \\frac{1}{n}\u003c/script\u003e\n\n\u003cp\u003eThis text is \u003cem\u003eitalic\u003c/em\u003e, while this is \u003cstrong\u003ebold\u003c/strong\u003e, and this is a \u003ca href=\"smargh.github.io\"\u003elink\u003c/a\u003e.\u003c/p\u003e\n\n\u003cp\u003eFor code, you have two types:\u003c/p\u003e\n\n\u003cp\u003e\u003ccode\u003einline code\u003c/code\u003e\u003c/p\u003e\n\n\u003cdiv class=\"highlight python\"\u003e\u003ctable style=\"border-spacing: 0\"\u003e\u003ctbody\u003e\u003ctr\u003e\u003ctd class=\"gutter gl\" style=\"text-align: right\"\u003e\u003cpre class=\"lineno\"\u003e1\n2\n3\n4\n5\u003c/pre\u003e\u003c/td\u003e\u003ctd class=\"code\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003edef\u003c/span\u003e \u003cspan class=\"nf\"\u003efunction\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e\u003cspan class=\"n\"\u003ekwargs\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eargs\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003evar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"n\"\u003elist_comp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)]\u003c/span\u003e\n\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/tbody\u003e\u003c/table\u003e\n\u003c/div\u003e\n\n\u003cblockquote\u003e\n  \u003cp\u003eThis is an example block quote. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus\u003c/p\u003e\n\u003c/blockquote\u003e\n\n\u003ch1 id=\"h1\"\u003eH1\u003c/h1\u003e\n\n\u003ch2 id=\"h2\"\u003eH2\u003c/h2\u003e\n\n\u003ch3 id=\"h3\"\u003eH3\u003c/h3\u003e\n\n\u003ch4 id=\"h4\"\u003eH4\u003c/h4\u003e\n\n\u003ch5 id=\"h5\"\u003eH5\u003c/h5\u003e\n\n\u003cp\u003e\u003cimg alt=\"fractal\" src=\"images/fractal.svg\" /\u003e\u003c/p\u003e\n\n\u003cp\u003eFor example, a list:\u003c/p\u003e\n\n\u003cul\u003e\n  \u003cli\u003eItem number one\u003c/li\u003e\n  \u003cli\u003eItem number two\n    \u003cul\u003e\n      \u003cli\u003eA nested item\u003c/li\u003e\n    \u003c/ul\u003e\n  \u003c/li\u003e\n  \u003cli\u003eA final item\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003eor with numbers!\u003c/p\u003e\n\n\u003col\u003e\n  \u003cli\u003eRemember to buy some milk\u003c/li\u003e\n  \u003cli\u003eDrink the milk\u003c/li\u003e\n  \u003cli\u003eTweet that I remembered to buy the milk, and drank it\u003c/li\u003e\n\u003c/ol\u003e\n\n\u003chr /\u003e\n\n\u003cp\u003eThis is a sample table:\u003c/p\u003e\n\n\u003ctable class=\"tables\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth style=\"text-align: center\"\u003eOperator\u003c/th\u003e\n      \u003cth\u003eDescription\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e==\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eequal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e!=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003enot equal\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026lt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eless than (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003egreater than (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026lt;=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003eless than or equal (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003e\u0026gt;=\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003egreater than or equal (available for numeric values and dates only)\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd style=\"text-align: center\"\u003e\u003ccode\u003ein_range(attribute, min_value, max_value)\u003c/code\u003e\u003c/td\u003e\n      \u003ctd\u003enumeric values within the range of min_value through max_value in the specified attribute\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n\u003cp\u003efin.\u003c/p\u003e\n\u003cdiv class=\"footnotes\"\u003e\n  \u003col\u003e\n    \u003cli id=\"fn:1\"\u003e\n      \u003cp\u003eThis is a footnote for my \u003ccode\u003eExample Article\u003c/code\u003e. \u003ca href=\"#fnref:1\" class=\"reversefootnote\"\u003e\u0026#8617;\u003c/a\u003e\u003c/p\u003e\n    \u003c/li\u003e\n  \u003c/ol\u003e\n\u003c/div\u003e\n","type":"article"}]
