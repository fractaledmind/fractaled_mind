<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fractaled Mind</title>
  <subtitle>Disparate thoughts, connected</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-03-14T20:00:00-04:00</updated>
  <author>
    <name>Stephen Margheim</name>
  </author>
  <entry>
    <title>Deleting old Git branches</title>
    <link rel="alternate" href="http://blog.url.com/articles/deleting-old-git-branches/"/>
    <id>http://blog.url.com/articles/deleting-old-git-branches/</id>
    <published>2016-03-14T20:00:00-04:00</published>
    <updated>2016-03-14T22:11:27-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;If you have a repository that’s been around for long enough, you probably have a fair number of “stray branches”: deadends, false starts, orphans, etc. Let’s clean up all of the remote branches that haven’t been touched in the last 6 months:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;for &lt;/span&gt;k &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;git branch -r | grep -E -v &lt;span class="s1"&gt;'&amp;gt;|master|prod'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;; &lt;span class="k"&gt;do
  if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git log -1 --since&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'6 months ago'&lt;/span&gt; -s &lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;git push origin --delete &lt;span class="k"&gt;$(&lt;/span&gt;cut -d&lt;span class="s2"&gt;"/"&lt;/span&gt; -f2- &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;;
  &lt;span class="k"&gt;fi
done&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Walking through the various steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;git branch -r&lt;/code&gt; lists all remote branches&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;grep -E -v '&amp;gt;|master|prod'&lt;/code&gt; filters that list of branches, removing any that have &lt;code&gt;&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;origin/HEAD -&amp;gt; origin/master&lt;/code&gt;), &lt;code&gt;master&lt;/code&gt; (e.g. &lt;code&gt;origin/master&lt;/code&gt;), or &lt;code&gt;prod&lt;/code&gt; (e.g. &lt;code&gt;origin/prod&lt;/code&gt;) in their names.&lt;/li&gt;
  &lt;li&gt;Iterating over each of these branches (as &lt;code&gt;$k&lt;/code&gt;), &lt;code&gt;git log -1 --since='6 months ago' -s $k&lt;/code&gt; checks if the branch has been commited to in the last 6 months (you could obviously set the timeframe to whatever suited your needs).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;cut -d"/" -f2- &amp;lt;&amp;lt;&amp;lt; "$k")&lt;/code&gt; trims a branch string like &lt;code&gt;origin/feature/some_branch&lt;/code&gt; to a string like &lt;code&gt;feature/some_branch&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Finally &lt;code&gt;git push origin --delete $(...)&lt;/code&gt; removes that branch from the remote repository.&lt;/li&gt;
&lt;/ol&gt;

</content>
  </entry>
  <entry>
    <title>You, Made and Unmade</title>
    <link rel="alternate" href="http://blog.url.com/articles/you-made-and-unmade/"/>
    <id>http://blog.url.com/articles/you-made-and-unmade/</id>
    <published>2016-02-21T19:00:00-05:00</published>
    <updated>2016-02-21T22:01:56-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;What is time? Time is commonly dissected into three parts: past, present, and future. The past is done, it is set; the future is yet to be done, it is possibility. But what of the present? The present is, in simplest form, the future being made the past. Yet if the present is nothing more than the future being made the past, why is it “the present”, this thing on the same level as the past and future? Well, I think the answer is masked by the passive voice, “being made” by whom? By you. The present is the future being made the past by you.&lt;/p&gt;

&lt;p&gt;How do you convert the future into the past? What is involved? Again, in simple form, there is you and there are outside stimuli, outside signals. There is you and not-you, which is outside of you. But the two spheres are not totally separate, as you receive many of these external signs and signals; you, via your five senses, have some connection to the not-you. And, in response to those outside signs and signals, you either act or don’t act, you think, you respond. You convert the future into the past by reacting to signals from the not-you.&lt;/p&gt;

&lt;p&gt;So, what is time? Time is the combination of the not-you things you have done, the not-you things you have yet to do, and the not-you things you are doing. Time is not-you, made and unmade, and you, making. But what is not-you without you? Nothing. Time is you, becoming; time is you, made and unmade.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Conjunctive Binarism</title>
    <link rel="alternate" href="http://blog.url.com/articles/conjunctive-binarism/"/>
    <id>http://blog.url.com/articles/conjunctive-binarism/</id>
    <published>2016-02-20T19:00:00-05:00</published>
    <updated>2016-02-21T19:23:02-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;Epistemology has fascinated me far longer than I have known what that word means. Built upon the Greek words for “knowledge” (ἐπιστήμη) and “study” (λόγος), epistemology means the study of knowledge. This can (and does) encompass a wide variety of specific ideas: the nature of knowledge, the acquisition of knowledge, the difference between knowledge and opinion, etc. It is a field of inquiry that aims to help us answer questions like “How do I know something?”, “What does it mean to know something?”, “Are some things unknowable?”, etc. Now, before we go too far down this (admittedly intriguing) rabbit-hole, I had said that I wanted to consider alethiology, not epistemology. While epistemology is the study of knowledge, alethiology is the study of truth. The two inquiries are cousins; indeed, one can barely call alethiology a field of inquiry &lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; and is often considered a sub-field of epistemology. The standard definition of knowledge holds that knowledge equals justified true belief &lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. In debating the finer points of that definition, academics must then define their terms. What does it mean for a belief to be justified? What does it mean for a belief to be true? What is truth? This context is, I believe, important as it helps to situate the kinds of questions I am interested in pursuing within their general philosophical context. I want to probe around the edges of the question “What is truth?”, which, as we see, has strong implications on the nature of knowledge.&lt;/p&gt;

&lt;h2 id="a-primer-on-propositional-logic"&gt;A Primer on Propositional Logic&lt;/h2&gt;

&lt;p&gt;When considering the nature of truth, it is common to think about &lt;a href="http://www.iep.utm.edu/prop-log/#H1"&gt;propositions&lt;/a&gt;. Propositions are simply declarative sentences; they are statements. In most high school English courses we learn that sentences that end with a period (&lt;code&gt;.&lt;/code&gt;) are declarative sentences (&lt;code&gt;?&lt;/code&gt; = interrogatives, &lt;code&gt;!&lt;/code&gt; = interjections). So, that previous sentence was a declarative sentence. So was that one! Ah, now we have an interjection. Well, I could play this game all night (really, I’m easily amused), but the point ought to be clear: propositions == statements == declarative sentences. They are forms of communication that say something is the case. A key characteristic of propositions is that they are either true or false. When I state that something is the case, it either is the case or it isn’t. Either most high school English classes &lt;em&gt;do&lt;/em&gt; teach that sentences ending in a period are declarative sentences, or they don’t. Either that previous sentence is a declarative sentence, or it isn’t. Now, one important thing to note immediately is that we need not be able to determine whether a proposition is true or false; this has no bearing on its “propositionness”. The statement “God exists” is a proposition, it is either true or false; however, we have no way of determining whether it is true or false (regardless of what anyone has ever told you). So, propositions are statements that something is the case that are either true or false, but we need not determine whether they are actually true or actually false for them to be propositions.&lt;/p&gt;

&lt;p&gt;In academic logic, propositions are generally referred to using the symbolic shorthand &lt;code&gt;P&lt;/code&gt;. This is the generic proposition, the Ur-proposition, in computer programming terms we might say it is the proposition type. Like algebraic variables, we can use any uppercase letter to designate other propositions. So, for example, if I needed to talk about three propositions, I could use &lt;code&gt;P&lt;/code&gt;, &lt;code&gt;Q&lt;/code&gt;, and &lt;code&gt;R&lt;/code&gt; (these are the common letters used in academic circles, for whatever the reasons). Now, when dealing with multiple propositions there are two key operators that we will use&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" class="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;: &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt;. Perhaps these symbols seem a bit foreign, but I promise that their concepts are utterly simple. &lt;code&gt;&amp;amp;&lt;/code&gt; is the “and” operator; it combines two propositions to make one new proposition, called the “conjunction” of the two propositions. &lt;code&gt;v&lt;/code&gt; is the “or” operator; it also combines two propositions to make one new proposition, called the “disjunction” of the two propositions. In high school English we would say that “and” and “or” are conjunctions, and just like in English class we can take two declarative sentences and combine them with a conjunction to make a new sentence. Ah, that sentence was a perfect example (almost as if I planned it ;)). So, symbolically we could write &lt;code&gt;P &amp;amp; Q =&amp;gt; R&lt;/code&gt; and &lt;code&gt;P v Q =&amp;gt; S&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ok, so propositions can be combined to make new propositions in two different ways, but what precisely is the difference? Well, I’m interested in truth, so you might have already guessed the difference. The difference between &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;S&lt;/code&gt; from above is what is required for them to be true. When using the &lt;code&gt;&amp;amp;&lt;/code&gt; operator to combine &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;Q&lt;/code&gt;, the conjunction &lt;code&gt;R&lt;/code&gt; is only true when &lt;strong&gt;both&lt;/strong&gt; &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;Q&lt;/code&gt; are themselves true. If either &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;Q&lt;/code&gt; is false, then &lt;code&gt;R&lt;/code&gt; is also false. When using the &lt;code&gt;v&lt;/code&gt; operator, the disjunction &lt;code&gt;S&lt;/code&gt; is true if either &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;Q&lt;/code&gt; is true. These relationships are most often considered using a “truth table”. Consider the following, which lays out all of the possible scenarios for the &lt;code&gt;&amp;amp;&lt;/code&gt; operator:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;(P &amp;amp; Q)&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here we can clearly see that the expression &lt;code&gt;(P &amp;amp; Q)&lt;/code&gt; is only true whenever both the proposition &lt;code&gt;P&lt;/code&gt; and the proposition &lt;code&gt;Q&lt;/code&gt; are true. This is contrasted with the &lt;code&gt;v&lt;/code&gt; operator:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;(P v Q)&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here the relationship is almost the exact opposite. The expression &lt;code&gt;(P v Q)&lt;/code&gt; is only &lt;em&gt;false&lt;/em&gt; whenever both the proposition &lt;code&gt;P&lt;/code&gt; and the proposition &lt;code&gt;Q&lt;/code&gt; are false. In every other instance the expression &lt;code&gt;(P v Q)&lt;/code&gt; is true, as one of the two constituent propositions is true.&lt;/p&gt;

&lt;p&gt;These two operators handle how the truth values relate when combining two or more propositions, but there is one last operator we need to discuss, which is used on single propositions. The “negation” operator &lt;code&gt;¬&lt;/code&gt; is used, you guessed it, to negate propositions. The truth table for this operator is pretty straight forward:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;¬P&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The negation operator basically just “flips” the truth value of the proposition.&lt;/p&gt;

&lt;p&gt;With all of that now settled, we can finally turn to the heart of this excursion.&lt;/p&gt;

&lt;h2 id="p--p"&gt;&lt;code&gt;P &amp;amp; ¬P&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Now, I will readily admit that “conjunctive binarism” is a phrase that I totally made up &lt;sup id="fnref:4"&gt;&lt;a href="#fn:4" class="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;, but I was trying to find a phrase that accurately captured the idea I had in my head, which I was initially conceiving of in purely symbolic terms: &lt;code&gt;P &amp;amp; ¬P&lt;/code&gt; &lt;sup id="fnref:BB"&gt;&lt;a href="#fn:BB" class="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;. In many ways I find the symbolic phrase far clearly than the English phrase “conjunctive binarism”, but hopefully my English phrase at least accurately describes precisely what I’m interested in.&lt;/p&gt;

&lt;p&gt;I said at the beginning that I was interested in the question “What is truth?”, yet now that we have a firmer grasp on what precisely “conjunctive binarism” means, I’m sure that you, my reader, are a bit worried. And, I would say, rightfully so. Here is the truth table for the conjunctive binary:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;¬P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;(P &amp;amp; ¬P)&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Well there you have it, the conjunctive binary &lt;code&gt;(P &amp;amp; ¬P)&lt;/code&gt; &lt;em&gt;can never be true&lt;/em&gt; &lt;sup id="fnref:AA"&gt;&lt;a href="#fn:AA" class="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;. In many ways the the simplest, most intuitive answer to the question of “What is truth?” is “I don’t know, but it certainly isn’t &lt;code&gt;(P &amp;amp; ¬P)&lt;/code&gt;”. In fact, Aristotle himself states this directly in his &lt;em&gt;Metaphysics&lt;/em&gt;&lt;sup id="fnref:5"&gt;&lt;a href="#fn:5" class="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The most certain of all basic principles is that contradictory propositions are not true simultaneously. (1011b13-14)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This idea, that a proposition (&lt;code&gt;P&lt;/code&gt;) and its contradiction (&lt;code&gt;¬P&lt;/code&gt;) cannot both be true in the same sense at the same time, is so fundamental to human logical thought that it is a &lt;em&gt;law&lt;/em&gt;, the Law of Non-Contradiction.&lt;/p&gt;

&lt;p&gt;Now, I am not quite so bold as to suggest that the Law of Non-Contradiction is wrong; however, I would like to press it a bit. The caveats in the definition of the LNC are clearly important. I’m sure we can all think of examples where a proposition (&lt;code&gt;P&lt;/code&gt;) and its contradiction (&lt;code&gt;¬P&lt;/code&gt;) are both true, just in different senses. As one contrived examples, the proposition “Citi is a bank” and its contradiction “Citi is not a bank” would both be true if “bank” in the first case meant “a financial institution” and “bank” in the second case meant “the side of a river”. Likewise, if time is not an issue, we can certainly conceive of an example where some proposition is true and then later its contradiction is true. Taking the same contrived example, right now the proposition “Citi is a bank” is true, but if in the future they were to go out of business, the contradiction “Citi is not a bank” would then be true.&lt;/p&gt;

&lt;p&gt;What I would like to suggest is that while the Law of Non-Contradiction is strictly true, it is not practically all that helpful when confronting the question “What is truth?”. Specifically, I would argue (and hopefully I will at some point soon) that &lt;em&gt;in the everyday world&lt;/em&gt; one of those two caveats is very likely to be true. That is to say, I contend and my definition of Conjunctive Binarism states that a proposition (&lt;code&gt;P&lt;/code&gt;) and its contradiction (&lt;code&gt;¬P&lt;/code&gt;) are likely both true either in different senses or at different times. More simply, I argue that &lt;strong&gt;&lt;code&gt;(P &amp;amp; ¬P)&lt;/code&gt; will likely be true &lt;em&gt;in some way&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If I could create my own logical symbol, I would create the “fuzzy” symbol &lt;code&gt;~&lt;/code&gt;, which would denote the existence of one or more of these caveats. In my logical lexicon the “fuzzy” symbol &lt;code&gt;~&lt;/code&gt; generally maps to the English word “kinda”. So, in strictest form Conjunctive Binarism would be expressed symbolically as &lt;code&gt;~(P &amp;amp; ¬P)&lt;/code&gt;, or even more strictly as &lt;code&gt;(~P ~&amp;amp; ~¬P)&lt;/code&gt;. In plain English we might say “the proposition &lt;code&gt;P&lt;/code&gt; and its contradiction &lt;code&gt;¬P&lt;/code&gt; are kinda both true”.&lt;/p&gt;

&lt;h2 id="fin"&gt;Fin&lt;/h2&gt;

&lt;p&gt;I plan, in later posts, to explore this thesis from various angles, to consider some of its consequences, and to argue for its correctness. For now, however, I leave it at this: my answer to the question “What is truth?” would be, in a more rigorous and philosophic way than this sounds, “Kinda everything”.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;The term “alethiology” is fairly rare in academia; for example, the ten-volume &lt;a href="https://en.wikipedia.org/wiki/Routledge_Encyclopedia_of_Philosophy"&gt;Routledge Encyclopedia of Philosophy&lt;/a&gt; mentions it only once. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;For those readers of a more academic bent, &lt;a href="http://plato.stanford.edu/entries/knowledge-analysis/#KnoJusTruBel"&gt;this article&lt;/a&gt; from the Stanford Encyclopedia of Philosophy provides a robust explanation of this analysis of knowledge, and indeed of knowledge in general. &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:3"&gt;

      &lt;p&gt;There are, in fact, many other logical operators beside these two:&lt;/p&gt;

      &lt;table class="tables"&gt;
        &lt;thead&gt;
          &lt;tr&gt;
            &lt;th style="text-align: center"&gt;Sign&lt;/th&gt;
            &lt;th style="text-align: center"&gt;Operator&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“and”&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“or”&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;→&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“if… then…”&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;↔&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“if and only if”&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;¬&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“not”&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;

      &lt;p&gt;See &lt;a href="http://www.iep.utm.edu/prop-log/#SH3a"&gt;here&lt;/a&gt; for a more in-depth analysis of them all. &lt;a href="#fnref:3" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:4"&gt;
      &lt;p&gt;A Google search for the exact phrase “conjunctive binarism” returns &lt;a href="https://www.google.com/search?q=%22conjunctive+binarism%22"&gt;no results&lt;/a&gt;. &lt;a href="#fnref:4" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:BB"&gt;
      &lt;p&gt;This construction of the constructive binarism marks it as a close kin of &lt;a href="http://plato.stanford.edu/entries/dialetheism/"&gt;dialetheism&lt;/a&gt;, a newer philosophical position that holds that dialetheias do in fact exist, and a dialetheia is simply a sentence, &lt;code&gt;A&lt;/code&gt;, such that both it and its negation, &lt;code&gt;¬A&lt;/code&gt;, are true; that is, &lt;code&gt;A &amp;amp; ¬A&lt;/code&gt;. &lt;a href="#fnref:BB" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:AA"&gt;

      &lt;p&gt;This is in direct contrast with the disjunctive binary, which is always true.&lt;/p&gt;

      &lt;table class="tables"&gt;
        &lt;thead&gt;
          &lt;tr&gt;
            &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
            &lt;th style="text-align: center"&gt;&lt;code&gt;¬P&lt;/code&gt;&lt;/th&gt;
            &lt;th style="text-align: center"&gt;&lt;code&gt;(P v ¬P)&lt;/code&gt;&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;T&lt;/td&gt;
            &lt;td style="text-align: center"&gt;F&lt;/td&gt;
            &lt;td style="text-align: center"&gt;T&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;F&lt;/td&gt;
            &lt;td style="text-align: center"&gt;T&lt;/td&gt;
            &lt;td style="text-align: center"&gt;T&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;

      &lt;p&gt;In fact, the disjunctive binary, by definition, includes &lt;em&gt;all possible states&lt;/em&gt;, as any state would either be &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;¬P&lt;/code&gt;. Since &lt;code&gt;¬P&lt;/code&gt; is simply the negation of &lt;code&gt;P&lt;/code&gt;, the disjunction offers a logically exhaustive set of states. &lt;a href="#fnref:AA" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:5"&gt;
      &lt;p&gt;&lt;a href="http://plato.stanford.edu/entries/aristotle-noncontradiction/"&gt;This article&lt;/a&gt; from the Stanford Encyclopedia of Philosophy provides a rich analysis of Aristotle on the Law of Non-Contradiction. &lt;a href="#fnref:5" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>On Lent and Marriage</title>
    <link rel="alternate" href="http://blog.url.com/articles/on-lent-and-marriage/"/>
    <id>http://blog.url.com/articles/on-lent-and-marriage/</id>
    <published>2016-02-10T22:16:00-05:00</published>
    <updated>2016-02-12T10:52:34-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;Lent is a time of fasting. We deny ourselves an earthly good in order to, hopefully, receive a heavenly good. We fast to clear our minds and reset our hearts, to find balance with ourself and with God. Lent isn’t easy; it isn’t meant to be easy. It isn’t easy to say no, to turn your mind and heart toward God every time your flesh desires that earthly good you’ve denied yourself. It isn’t easy to enact your will–to make a commitment and stand by it– especially when you have committed yourself to a fasting.&lt;/p&gt;

&lt;p&gt;This Lenten season I am giving up my marriage. I am fasting from my spouse. Let me be clear, I am not ending my marriage; in fact, I pray that this season will deepen and strengthen my marriage. However, for these 40 days my wife and I will be separated, in the full sense of that word. Let me attempt to explain why and how I hope to use this time to better my life, my faith, and my marriage.&lt;/p&gt;

&lt;p&gt;Marriage is hard. I’d go so far as to say it is one of the hardest things a human person could endeavor to do. And I don’t just mean “marriage” in its simple everyday sense–two people who live together, are monogamous, and form a family unit. I mean &lt;em&gt;marriage&lt;/em&gt;; I mean the commitment and the act of grafting your soul to another soul; I mean the pursuit of unconditional love; I mean the coming together of two people to form &lt;em&gt;one&lt;/em&gt;. &lt;strong&gt;That&lt;/strong&gt; kind of marriage is &lt;em&gt;hard&lt;/em&gt;. But, I believe that kind of marriage is the most rewarding. That’s the kind of marriage worth fighting for.&lt;/p&gt;

&lt;p&gt;Marriage is hard, and for me, that means specifically that being a husband is hard. It’s hard in ways I cannot even fathom. It’s hard in ways I didn’t fathom when I made my vows. It’s hard in ways I could never hope to communicate to you. It is &lt;em&gt;hard&lt;/em&gt;. And, to be honest, I’ve failed at it time and time again. I would hope that in the simply everyday sense, I’ve been a pretty good husband. I would hope that the world would judge me at least a mediocre husband. But I’m not sure it would. That’s of little matter, however, because in the deep and true sense, I &lt;em&gt;know&lt;/em&gt; that I have failed as a husband. There is no point in listing out my failures here. First, because I do truly believe that all sins are equal, but our minds are built to rank things. I also won’t list out my particular failings because they are &lt;em&gt;mine&lt;/em&gt;. I own them. I am responsible for them. Nothing I say and nothing I do will change that. I confess them to God and make amends to man. I take steps to Pharisaism when I confess them to man and make amends to God.&lt;/p&gt;

&lt;p&gt;Marriage is hard and I am a failed husband. In my life, at this moment, those two facts have now generated a third fact: my wife doesn’t love me. Again, I don’t mean “love” in a trite sense; we’re talking about deep, meaningful love. And love like that isn’t easy. This form of deep and meaningful love comes when you meet another person, another soul, and you &lt;em&gt;see&lt;/em&gt; them. They grant you the ability to truly &lt;em&gt;see&lt;/em&gt; them. And when you see them, when you meet them, when you &lt;em&gt;know&lt;/em&gt; them, your soul changes. Your soul becomes a little bit more like them. You graft them into your soul and it changes you. Some part of them now &lt;em&gt;is&lt;/em&gt; you, is a part of you. This kind of love is hard. It is hard to open yourself up to another person to allow them to love you like this. It is hard to receive another person if they have opened themselves up to you. It is hard to allow yourself to change because of another person. This kind of love is hard. My wife still likes me, my wife is still fond of me, we are still friends; but my wife no longer &lt;em&gt;loves&lt;/em&gt; me.&lt;/p&gt;

&lt;p&gt;Now, let’s briefly set two things straight. First, I don’t say this to gain your sympathy. 7 billion people on this planet do not love me in this way, do not love you in this way. No one has a right to this kind of love. It is rare and it is given freely. It is never earned and never taken. Marriage is hard and I am failed husband; I have no right to this from her. Second, she is under no obligation to give it to me. She is not “wrong” for not loving me. She simply doesn’t. This is not a matter to be judged or adjudicated; this simply is. We are responsible for our thoughts and our actions, not for our state. Now, our state will factor strongly in our thoughts and actions, but that is beside the point. I am not responsible for being a male, but I am responsible for how I think and how I act &lt;em&gt;as&lt;/em&gt; a male. I am not responsible for being a husband, but I am responsible for how I think and how I act &lt;em&gt;as&lt;/em&gt; a husband. The kind of love we are talking about is so deep, so low, that it is a state. I am not responsible for being a male husband who loves his wife. I simply am that. What I am responsible for is how I live my life &lt;em&gt;as&lt;/em&gt; such a person. And as a male husband who loves his wife, I am responsible for my failings as well as for my successes. And as a female wife who does not love her husband, my wife is responsible for her failings and her successes. But in both cases, the state of our love stands outside of the arena of responsibility. And it stands outside this arena quite simply because we are not in control of it. I have no more control over whether or not I love my wife as she does of whether or not she doesn’t. Actions and thoughts affect our state, but they don’t control it. Certainly, my thoughts and my actions over the course of our marriage have some causal relationship to her current state, but I didn’t &lt;em&gt;cause&lt;/em&gt; her to not love me. And certainly her thoughts and actions have some relation to her current state, but again those things did not &lt;em&gt;cause&lt;/em&gt; them. There is no simple &lt;em&gt;cause&lt;/em&gt; to low-lying states of mind and heart.&lt;/p&gt;

&lt;p&gt;So, marriage is hard. I am a failed husband. My wife doesn’t love me. These are facts; these are states. This is the spilt milk not worth crying over (though I certainly have cried, about all three facts). The real question, the real challenge, the real point of this post is, what next? How do I respond? How do I think and act next? And my answers to this question are why I am giving up my marriage for Lent.&lt;/p&gt;

&lt;p&gt;I am a computer programmer; I often like to break down complex problems by trying to isolate the constants and the variables. Constants are things that simply &lt;em&gt;are&lt;/em&gt;, variables are things that can, have, and/or will change. So, we might say that “marriage is hard” is a constant. That is like a definition of marriage: it is hard. We could also say that “I am a failed husband” is a constant. It is a statement about the past, it cannot change. Likewise “my wife doesn’t love me” is a constant, insofar as it is simply a statement about the present moment. I would say that “my wife’s love” is a variable; that can and has changed. However, the statement “my wife doesn’t love me” is a constant; it simply is true right now. So, are there any other constants worth taking into consideration when thinking about what to do next. I believe so. First, I believe that I &lt;em&gt;ought&lt;/em&gt; to continue to love my wife; this is an ethical constant. I believe that full and deep love is unconditional; this is a definitional constant. I believe that all human beings have the authority and autonomy to exercise their own wills; this is an ontological constant. I also believe that God exists and loves &lt;em&gt;me&lt;/em&gt;; this is a faith constant. So, when I start to take all of these constants into consideration, it makes how I should respond to all of the variables a bit clearer. But before we get there, let’s take a moment to think through some of the things that are variables.&lt;/p&gt;

&lt;p&gt;My wife loving me is a variable; it could change in the future. My wife being my wife could change. Me loving my wife is variable; that could change. Me being a failed husband, that could change (not in a true ontological sense, but in a true practical sense). These are the key variables in this situation. However, in life, &lt;em&gt;most things are variables&lt;/em&gt;. Life is flux; things change. And few things are as dangerous to living life well as treating variables as constants (another danger: treating constants as variables). This is, to my mind, the main reason not to “cry over spilt milk”; milk being spilt is a variable. You can clean up the milk. You can buy new milk. You can take care not to spill the new milk. Cry about constants.&lt;/p&gt;

&lt;p&gt;So, I feel like I have some sense of what key things are constants and what things are variables. How does that affect my thinking and my action? If true and deep love is unconditional, and if I ought to continue to love my wife, then I ought to love my wife unconditionally. Now, how do I do that? As I hope you sense, this is far easier said than done. I have, in fact, thought this for years. I have believed that I &lt;em&gt;ought&lt;/em&gt; to love my wife unconditionally as long as we have been married. I can say without a shadow of a doubt that I have &lt;em&gt;never&lt;/em&gt; loved her unconditionally. My love always has conditions. I frequently don’t see them in the present, but they always come out, creep to the surface. One of the things I have been wrestling with lately is whether or not loving someone unconditionally was even &lt;em&gt;possible&lt;/em&gt;. Am I barking up the wrong tree here? Is this a fool’s errand? My answer today is, no. It &lt;em&gt;is&lt;/em&gt; possible to love someone unconditionally, and I really only have one piece of evidence to support that. I believe that we can love someone unconditionally because we love &lt;em&gt;ourselves&lt;/em&gt; unconditionally. The more I think about it, the clearer it becomes. I fully believe that I have failed in my role as a husband, yet I still love myself. In fact, it wasn’t that hard. I wasn’t always happy with myself, I wasn’t always satisfied, but I can’t remember ever not loving myself. And the reason seems pretty simple. If love, true love, is the other side of true empathy, then how could we ever not empathize with ourselves? I am me, therefore I understand what it is like to be me. I am in my own shoes, so to speak. And certainly it is harder to love another person unconditionally, but I do believe it is possible. I can’t imagine that it is possible to do all the time, to do perfectly, but what is? I’m not searching for perfection, I’m searching for deeply meaningful love.&lt;/p&gt;

&lt;p&gt;My goal in this Lenten season is to come to love my wife unconditionally. That is my true goal. “Giving up my marriage” for Lent is merely the means I am attempting to reach that end. And the reason I chose that means, that path, is simply because I have come to realize one of the deepest conditions of my love: returned love. I feel slighted, I feel wronged when I love and that love is not returned. “That is unfair”, I say to myself (maybe even to others at times); or even, “That’s just plain stupid”. Why give out love for nothing? I’m devaluing my love. I’m selling my stock short. If you want my love, you have to give me something back in return. And when it comes to my wife, what I want back is deep love. I want her to accept me, to see me as I truly am and to accept and love me. I want her to know me, I want her to join with me in living life. I want to become one. I want her to want me. I want it, I need it. And every time I act out of love and I don’t feel that her response is up to snuff, I feel victimized, hell, I feel dehumanized. I have reached out in love, I have tried to see you and to know you as you truly are, and &lt;em&gt;this&lt;/em&gt; is what I get in response? Like a petulant child, I cry foul. This isn’t right, this isn’t fair! Well, one of the constants I laid out earlier states that all human beings have the authority and autonomy to exercise their own wills. I also stated earlier that I have no right to my wife’s (or anyone’s) love. It is not owed to me, regardless of what I do or don’t do. Thus, I feel I must give up my marriage for Lent. I must spend 40 days in an emotional desert in the hopes of finding the grace to love without requiring love back. As long as I feel wronged by not being loved by someone, I am utterly incapable of loving that person unconditionally.&lt;/p&gt;

&lt;p&gt;This brings me, finally, back to the season of Lent. We Christians spend 40 days in fasting as we prepare for Easter, the day that signifies Jesus Christ’s rise from death. And while I do believe that the variables and constants outlined above, the behaviors and thoughts that I espouse, are true for anyone, regardless of religion or faith, these things make the most sense, contain the most truth, when viewed within the light of the Christian faith. Within that light, we see that there are in fact two instances of unconditional love. Not only do we, as humans, unconditionally love ourselves (“love your neighbor as yourself”), but God himself, incarnated, loved each and every one of us unconditionally. He did not require love in return, he simply loved. He loved fully and he loved deeply. He loved to the point of death. He loved in ways and to degrees that I cannot and probably will never fathom. And yet that is my desire. I want to love as Christ loved. But how? How can I ever possibly hope to love like that? I know for a fact that I will never love in that manner on my own. I’ve tried, and every time I have failed. It is beyond me. I am too selfish, too self-centered; I am too &lt;em&gt;me&lt;/em&gt;. I am ontologically, at the core of my being, incapable of giving out love without receiving love. I &lt;em&gt;must&lt;/em&gt; be loved. I, my self, my ego, is nothing, is undefined, until I am loved. There is no subject &lt;em&gt;I&lt;/em&gt; until there is the object &lt;em&gt;me&lt;/em&gt;. My identity, first and foremost, exists as an object in a sentence with some other subject. I can do nothing until He loved me; I am nothing until He loved me. You see (but do I?), I am already loved, I already have all that I need. I can give love to others because I have received love from God, from Christ. I &lt;em&gt;know&lt;/em&gt; this. This Lent, I pray that I will &lt;em&gt;feel&lt;/em&gt; this. I pray that I will feel God’s love so fully, so deeply, so truly that I can love others unconditionally as easily as I love myself. And so, this Lent, I am giving up my marriage in the hope and with the prayer that by giving God the space, finally, to be the source of my “belovedness” (and not my wife, or my family, or my peers, as it has been in the past), I will grow able to love others (my wife, my family, my peers) as Christ loves me.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Depressed Graduate Student</title>
    <link rel="alternate" href="http://blog.url.com/articles/a-depressed-graduate-student/"/>
    <id>http://blog.url.com/articles/a-depressed-graduate-student/</id>
    <published>2015-06-18T13:38:00-04:00</published>
    <updated>2015-06-19T23:38:16-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;In my &lt;a href="fractaledmind.com/a-failed-graduate-student"&gt;previous post&lt;/a&gt; on my time in graduate school, I discussed how I learned to handle failures better. Today, I’m going to talk about how I failed to handle the depression that these mounting failures produced.&lt;/p&gt;

&lt;p&gt;Let’s start where some people find it difficult to start: I have struggled with depression, and odds are that I will stuggle with depression again in my future. This isn’t a sign of weakness; this isn’t something shameful. This is just a fact of my life. I’m a self-critical perfectionist who tends toward absolutist perceptions of reality; of course I’m going to struggle with depression. Unfortunately, when I entered graduate school, I was generally unaware of this likelihood. As with Imposter’s Syndrome, I thought I knew what depression was and I thought I could spot it fairly early on. And, as with Imposter’s Syndrome, it snuck up on me slowly but fiercely.&lt;/p&gt;

&lt;p&gt;When you feel like you are failing frequently and regularly, when those failures build up on top of one another, it can start to have odd effects. The more I thought I failed, the more I wanted to succeed in my next task. Yet, the more I thought I failed, the less energy I had to put into that next task. “I’ve failed at these things; I’ll probably fail at this. Why even try so hard?” This is the internal thought-process I assume my mind had. I say “assume” because I never consciously thought anything like this. My conscious mind wanted to succeed, to return to my old form. My unconscious mind seems to have grown more and more weary, more and more gun-shy.&lt;/p&gt;

&lt;p&gt;For me, depression felt like I was loosing control of my intention. What my conscious mind wanted seemed to have very little effect over what I actually ended up doing. This is the vicious cycle that Imposter’s Syndrome and Depression can generate. The more I thought I was failing, the less energy I could muster to tackle the next task. Putting less energy in, I was more likely to see the result (whatever it might actually be) as a failure, a failure to perform with enough vim and vigor. Failure -&amp;gt; Waning energy -&amp;gt; Failure … on and on.&lt;/p&gt;

&lt;p&gt;I got caught in this cycle for probably two years without really noticing what was happening. This is one of the shittiest things about depression–once you’re in it, it is &lt;em&gt;so much harder&lt;/em&gt; to get out on your own. It’s like trying to run in mud: the more you try, the dirtier and more tired you get, without actually getting as far as you think you should.&lt;/p&gt;

&lt;p&gt;Depression is a spiraling-in on oneself. You are the center of gravity, so &lt;em&gt;you&lt;/em&gt; cannot generate the outside force to propel yourself out. However, others can. I wish I didn’t take so long to actually talk to someone about how I felt. I was so ashamed of my failures, so oblivious to my depression, so insecure in my position, that I kept everything hidden, consciously. There can be a quiet cloud that lingers over graduate school which says that weakness is death, progress is paramount. In many departments, this isn’t probably actually true, but the shadow remains, and a shadow can be enough. I lived in that shadow for far too long.&lt;/p&gt;

&lt;p&gt;But, after finally getting to a point where I simply was unable to keep moving forward with all of the stress internalized, I went and got help. I started going to a therapist. This was a wise decision. No practical effects came of it–I didn’t get any diagnoses, no prescriptions–but I did get better. Talking with someone, being honest about my feelings, emotions, fears, got those things outside of my head, put them in front of me, and thus allowed me to see them for the puny things they were. Fear and depression grow in the shadow; in the light, they shrink to their actual sizes.&lt;/p&gt;

&lt;p&gt;So, I’ve been depressed, I’ve been (and continue to go) to therapy. For anyone out there in anything at all similar to my situation, know that understood weakness is the foundation of wisdom, progress without wisdom is folly, and getting help really will help.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Failed Graduate Student</title>
    <link rel="alternate" href="http://blog.url.com/articles/a-failed-graduate-student/"/>
    <id>http://blog.url.com/articles/a-failed-graduate-student/</id>
    <published>2015-06-16T20:18:00-04:00</published>
    <updated>2015-08-10T10:55:37-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I’m no longer a graduate student. I’ve graduated; I’m out. It’s a somewhat odd feeling, made even odder because I haven’t felt like a graduate for the last year. I was in graduate school for 3 years and got my Masters, but for the final year I was a “lame-duck” graduate student–I knew I was leaving, my department knew I was leaving, but I was still there. This lame-duck year has been odd, but it has also been the year where I have grown most, matured more, learned truly important things, and started to better understand myself. Hopefully, I can capture some glimmer of those insights in the few words that follow.&lt;/p&gt;

&lt;p&gt;When I started graduate school, I was coming off the single most successful years of my life. I had set lofty goals as an undergraduate, and I had met all of them plus some. I literally thought I was the smartest student at a university of some 10,000 students, and I had enough evidence to convince myself and maybe even some others. I had reached summits I didn’t even know existed when I first started. To put it simply, I hadn’t really ever failed. Then, I started graduate school. I came down from the mountain and entered the valley, starting a new climb. It was odd&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, certainly, to go from being convinced I was the smartest to feeling deep down that I was one of the dumbest. Everyone knew more than me, everyone knew how to talk better than me, everyone looked calmer than me, everyone was ahead of me. I had heard of “Imposter’s Syndrome” before I came to graduate school, and I thought I knew what it was. I was wrong. You think you’ll be able to spot a “syndrome” when you’re inside of it–“I won’t foolishly think I’m dumb if in actuality I’m not”, I thought. The whole crux of Imposter’s Syndrome is that it is a false perception of reality. I’ll know when I’m perceiving reality incorrectly, won’t I? Well, not to fall too deeply into the Matrix metaphor, but how will you know if your perception of reality is true or not if you don’t have any other external guide? In graduate school, I failed to find such a guide. No one ever told me that I was dumb, that I was saying dumb things, that I was mucking things up; but, no one ever told me otherwise either. For me, this was one of the hardest things about graduate school–I got virtually no feedback, and when I did, it was either generic or negative. The negative feedback, however, was apparently institutional. “Don’t worry about your first year translation exams. Everyone fails and everyone gets bad emails.” This is what multiple upper-classmen in the department told me. Well, I took my first year translation exams; I failed; I got a bad email. Apparently, just like everyone else. But how can I know that my email was “just like” everyone else’s. Why would anyone say something that wasn’t at least based in truth? Why would someone say that it didn’t appear that I &lt;em&gt;truly&lt;/em&gt; knew Latin if that was false? Maybe everyone got somewhat negative emails, but I got the truth, and the truth was horrific. I failed, and I failed hard; a first, but not the last.&lt;/p&gt;

&lt;p&gt;Failure is hard. It’s harder still when you don’t really know how to deal with it. I spent most of graduate school feeling like I had failed in small ways time and time again. Turn in a paper, no response = failure. Turn in a paper late, good response = failure. Bumble a sight-reading in class = failure. Not get through all the assigned reading = failure. Not talk enough in class = failure. Talk too much in class = failure. I’ll let you in on a nasty secret–most of those things I saw as failures, my professors didn’t even notice. One of the most liberating things that came out of me talking to my professors about my desire to leave was learning how surprised they were. They thought I was a good student, added value to the department, did good work, was bright. I never would have thought that. Never. And this is the pernicious trouble with unhandled failure–it blinds you. I couldn’t handle my failures, real or perceived, and so they built up on top of one another. Each increasing the odds that I would see more failures in the future. The more you fail, you more you think of yourself as a failures. What do failures do, they fail, so you expect to fail more, so you see more failures, and the process spirals out of control. To anyone who may read this, &lt;strong&gt;don’t be stupid, learn to handle failure&lt;/strong&gt;. Well, you would ask, how the hell do I do that? To be honest, I’m not entirely sure still, but I think I’ve gotten better, so I’ll talk about those small advancements.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Not all failures are created equal.&lt;/em&gt; This may seem obvious, but it took me an unfortunately long time to realize this simple truth. True failures live on a spectrum, some more grievous than others. A typo in this essay is a failure. Missing a bill payment is a failure. Clearly, they are different failures with different weights. Don’t waste your energy lamenting the small ones. If the problem is fixable, fix it and move on. If not, add a mental note to not make that same mistake in the future and move on. Save your energy to lament the big ones.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lament big failures.&lt;/em&gt; Don’t try to bottle away emotion caused by failure.Don’t try to act like a robot who can rationally handle the failure and move on easily. If you failed, it will make you feel bad. Actually feel that. Allow yourself to sit in that emotion for a bit. Acknowledge its existence. I let way too many failures build up because I thought I had dealt with them simply by rationalizing them. “Failed in this way, by doing these things. Don’t do those things in these situations again. Dealt with.” I was dumb.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don’t wallow.&lt;/em&gt; Sit in emotion, but don’t swim in it. You do need to move on. While only rationalizing away a failure will probably cause you more grief further down the road, not actually rationally considering how you failed, what you did to directly cause the failure, and how best to avoid that failure in the future, you will probably just spiral into depression. Failing sucks, but it is a much better learning experience than success.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Talk with someone.&lt;/em&gt; This can work on a number of fronts. You should actually talk with people to ensure that your sense of the failure (its existence, weight, repercussions) are close to reality. If only I had sat down and had frank conversations with my professors early and often, I would have learned that I was grossly over-estimating the weight of my perceived failures. But, even if you did actually fail, talking to someone ensures that you don’t try to deal with it all on your own. We’re social animals; don’t fight that.&lt;/p&gt;

&lt;p&gt;OK. This little sermonette is over, but I wanted to go down that path because it’s intensely important to me. Learning to deal with failure was the primary benefit of graduate school for me. From what I gather talking to others, it’s an absolutely essential part of any successful individual, whether graduate student or not. More importantly, however, not handling failure well is what sent me into depression. This is a deeper topic for discussion and consideration in another post, but suffice it say that I would wish for no one to become depressed due to perceived failures. I would confidently assert, without knowing anything about you individually, that you almost certainly haven’t failed as badly as you think, the repercussions aren’t as dire as you think, and your worth is still much higher than you think. If you don’t take my word for it, talk to someone else and check; you might be surprised by what they think.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;There’s that word again. I will almost certainly return to it, as its monosyllabic gruffness is the closest I can come to capturing reality. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>A Complete PDF Annotation Workflow</title>
    <link rel="alternate" href="http://blog.url.com/articles/a-complete-pdf-annotation-workflow/"/>
    <id>http://blog.url.com/articles/a-complete-pdf-annotation-workflow/</id>
    <published>2015-05-26T14:36:00-04:00</published>
    <updated>2015-05-26T19:20:56-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;When I was in graduate school, I was inundated with PDFs. PDFs of all kinds, from all kinds of sources, with all kinds of needs. Suffice to say, over a few years my tinkering spirit and the sheer number of PDFs I needed to handle led to a collection of tools organized into a workflow that I believe works well, and is thus well worth sharing. In this post I want to outline how I (1) &lt;a href="#pdf-preparation"&gt;prepare PDFs&lt;/a&gt;, (2) &lt;a href="#pdf-annotation"&gt;annotate PDFs&lt;/a&gt;, and (3) &lt;a href="#pdf-storage"&gt;store PDFs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;{{read more}}&lt;/p&gt;

&lt;h2 id="pdf-preparation"&gt;PDF Preparation&lt;/h2&gt;

&lt;p&gt;When you recieve a high volume of PDFs, you come to realize the many various states in which PDFs can be created–books scanned on a flatbed, books scanned by an iPhone, articles downloaded from the internet, PDFs generated from other sources. PDFs truly do come in all shapes and sizes. I, however, want all of my PDFs in one consistent format. I want every page of content to correspond to one PDF page (in constrast to book scans, where two content pages are often scanned into one landscape PDF). I also want to OCR every PDF to ensure that the text content is machine readable (and thus selectable in any PDF reader). I finally want to keep a consistent naming scheme for all of my PDFs. So, how does one get from point A to point B?&lt;/p&gt;

&lt;p&gt;Let’s begin with normalizing PDF page layout. For anyone who has ever had to manually split scanned PDFs, you know how mind-numbly boring and tedious such work is. Yet, we do it because we must. If there is anything worse than maunally splitting PDF pages, it dealing with double page PDF scans. Well, I abhor tedium, so I set out to remove this particular tedium from my life. My solution, which I will get to below, however, relies on an application that will come up frequently in this post, so it’s worth discussing here now. I use, almost exclusively, the Mac application &lt;a href="http://skim-app.sourceforge.net/"&gt;Skim&lt;/a&gt; for my PDF-related tasks. This is primarily because Skim is &lt;a href="http://sourceforge.net/p/skim-app/wiki/Features/"&gt;incredibly powerful&lt;/a&gt;, but also because it grants access to much of this functionality via &lt;a href="http://sourceforge.net/p/skim-app/wiki/AppleScript/"&gt;robust AppleScript support&lt;/a&gt;. This allows tinkerers like myself to further extend it functionality. Many of the tools described in this post are uniquely built on top of Skim, so if you want to use the tool, you have to use the app. Luckily, the app is free to download, an open source project, and thoroughly stable. However, I understand if you already have your own preferred PDF application, so I will mark all Skim-dependent tools accordingly.&lt;/p&gt;

&lt;p&gt;Back to automagically splitting PDF pages. Using a handful of Skim’s awesome features, I have written an AppleScript which will split two-page scanned PDFs for you. The script itself is a part of my &lt;a href="http://fractaledmind.com/projects/skimmer/"&gt;Skimmer project&lt;/a&gt;, which is one of my many Alfred Workflows. For those who want the simplest access to this functionality, I would recommend getting &lt;a href="http://www.alfredapp.com/"&gt;Alfred&lt;/a&gt; and downloading the workflow. If, however, you simply want the AppleScript itself, you can find it &lt;a href="https://github.com/smargh/alfred_skimmer/blob/master/source/action_pdf-splitter.applescript"&gt;in the GitHub repo&lt;/a&gt;. In short, it asks you to determine the PDF orientation and then in the background splits the entire PDF. If you deal with many scanned PDFs, this will be a major time-saver.&lt;/p&gt;

&lt;p&gt;When it comes to &lt;a href="http://en.wikipedia.org/wiki/Optical_Character_Recognition"&gt;Optical Character Recognition&lt;/a&gt;, I use the open source &lt;a href="http://en.wikipedia.org/wiki/Tesseract_(software)"&gt;&lt;code&gt;tesseract&lt;/code&gt;&lt;/a&gt; utility. It can be a bit tricky to install, as it requires compilation and has a number of compiled dependencies. Building off of the work of &lt;a href="https://twitter.com/ryanfb"&gt;Ryan Baumann&lt;/a&gt;, I have created &lt;a href="https://gist.github.com/smargh/cd2fc4125bef57bcb3e2"&gt;a Gist&lt;/a&gt; to simplify installing &lt;code&gt;tesseract&lt;/code&gt; on a Mac&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="c"&gt;# Check for Homebrew,&lt;/span&gt;
&lt;span class="c"&gt;# Install if we don't have it&lt;/span&gt;
&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; ! &lt;span class="k"&gt;$(&lt;/span&gt;which brew&lt;span class="k"&gt;)&lt;/span&gt;; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing homebrew..."&lt;/span&gt;
  ruby -e &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="c"&gt;# Ensure `homebrew` is up-to-date and ready&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Updating homebrew..."&lt;/span&gt;
brew doctor

&lt;span class="c"&gt;# Ensure the Homebrew cache directory exists&lt;/span&gt;
mkdir ~/Library/Caches/Homebrew

&lt;span class="c"&gt;# Install leptonica with TIFF support (and every other format, just in case)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing leptonica..."&lt;/span&gt;
brew install --with-libtiff --with-openjpeg --with-giflib leptonica

&lt;span class="c"&gt;# Install Ghostscript&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing ghostscript..."&lt;/span&gt;
brew install gs

&lt;span class="c"&gt;# Install ImageMagick with TIFF and Ghostscript support&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing imagemagick..."&lt;/span&gt;
brew install --with-libtiff --with-ghostscript imagemagick

&lt;span class="c"&gt;# Install Tesseract devel with all languages&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing tesseract..."&lt;/span&gt;
brew install --devel --all-languages tesseract
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Once you have &lt;code&gt;tesseract&lt;/code&gt; installed, it can also be a bit complicated to run it from the Terminal. Again, I have &lt;a href="https://gist.github.com/smargh/0581e6199049ea7c51df"&gt;a Gist&lt;/a&gt; to simplify this process. It is a simple function that accepts a path to a PDF. It will convert the PDF to the appropriate format for &lt;code&gt;tesseract&lt;/code&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, split the PDF into one file per page, OCR that collection of files, and recombine everything into one OCR’d PDF:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="c"&gt;# courtesy of : &amp;lt;https://ryanfb.github.io/etc/2014/11/13/command_line_ocr_on_mac_os_x.html&amp;gt;&lt;/span&gt;

ocr&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;# get name of input pdf&lt;/span&gt;
  &lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; .pdf&lt;span class="k"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Prefix is: &lt;/span&gt;&lt;span class="nv"&gt;$PREFIX&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="c"&gt;# check for any `tesseract` flags&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -z &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$TESSERACT_FLAGS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Picked up TESSERACT_FLAGS: &lt;/span&gt;&lt;span class="nv"&gt;$TESSERACT_FLAGS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;

  &lt;span class="c"&gt;# use `imagemagick` to convert pdf to individual `.tif` files&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Converting to TIFF..."&lt;/span&gt;
  convert -density 300 &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; -type Grayscale -compress lzw -background white +matte -depth 32 &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_page_%05d.tif"&lt;/span&gt;

  &lt;span class="c"&gt;# use `tesseract` to OCR those individual `.tif` files&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Performing OCR..."&lt;/span&gt;
  &lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt; -v parallel &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c"&gt;# if you can, parallelize this process using GNU Parallel&lt;/span&gt;
    parallel --bar &lt;span class="s2"&gt;"tesseract &lt;/span&gt;&lt;span class="nv"&gt;$TESSERACT_FLAGS&lt;/span&gt;&lt;span class="s2"&gt; {} {.} pdf 2&amp;gt;/dev/null"&lt;/span&gt; ::: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.tif
  &lt;span class="k"&gt;else
    for &lt;/span&gt;i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.tif; &lt;span class="k"&gt;do
      &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"OCRing &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;..."&lt;/span&gt;
      tesseract &lt;span class="nv"&gt;$TESSERACT_FLAGS&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; .tif&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; pdf 2&amp;gt;/dev/null
    &lt;span class="k"&gt;done
  fi&lt;/span&gt;

  &lt;span class="c"&gt;# combine individual OCR'd pdf pages back into a single OCR'd pdf using `ghostscript`&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Combining output to &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-OCR.pdf..."&lt;/span&gt;
  gs -q -dNOPAUSE -dBATCH -sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite -sOutputFile&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;__OCR.pdf"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.pdf &amp;gt;/dev/null 2&amp;gt;&amp;amp;1

  &lt;span class="c"&gt;# delete all of the individual files (both `.tif` and `.pdf`)&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Cleaning up..."&lt;/span&gt;
  rm &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.tif &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.pdf
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This script makes OCRing a PDF as simple as &lt;code&gt;$ ocr ~/path/to/my.pdf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, when it comes to naming conventions, I try to be authoritarian and consistent. The real goal is consistency, and however you decide to name your files, be sure to stick with it. I want make any explicit recommendations, as it truly does depend on your particular situation, but I will recommend a few apps and utilities that will make it easier for your to enforce consistency once you have determined your naming schema. The first is &lt;a href="http://www.noodlesoft.com/hazel.php"&gt;Hazel&lt;/a&gt;, which is a Mac app that will watch certain folders for you, waiting for some criteria to be met and then perform certain actions. For example, you have it watch the folder where you stick all your PDFs, and then rename any PDFs which don’t follow your naming convention. &lt;a href="http://www.documentsnap.com/use-hazel-to-magically-process-downloaded-pdfs/"&gt;DocumentSnap&lt;/a&gt; has a good tutorial on one way you can achieve this functionality. Another app/utility is &lt;a href="http://manytricks.com/namemangler/"&gt;Name Mangler&lt;/a&gt;, which provides a number of features to make batch renaming a breeze. Whatever your choice, having a consistently, universally applied naming schema will greatly help you in the long run.&lt;/p&gt;

&lt;h2 id="pdf-annotation"&gt;PDF Annotation&lt;/h2&gt;

&lt;p&gt;PDF annotation has led me down a long and winding path, but in the end I believe I’ve reached something like my own personal PDF nirvana. Grant me your patience for a bit as I (speedily) recall some major points on this personal journey.&lt;/p&gt;

&lt;p&gt;For me, my fascination with PDF annotation started with two versions of an Applescript to extract PDF annotations from &lt;a href="http://skim-app.sourceforge.net/"&gt;Skim&lt;/a&gt;. The original was by John Sidiropolus over at &lt;a href="http://www.organognosi.com/export-skim-notes-according-to-their-highlight-colors/"&gt;OrganoGnosi.com&lt;/a&gt;, and then &lt;a href="http://drosophiliac.com/2012/09/creating-a-custom-url-scheme-via-applescript-and-python.html"&gt;Walton Jones at drosophiliac.com&lt;/a&gt; worked up his own version of the script. Building on their great work, I wrote a script that would export all of your Skim annotations (not just highlights) and could handle a 300+ page book in seconds (the original scripts really lagged on any PDFs with triple-digit page numbers). In &lt;a href="https://gist.github.com/smargh/63d8c8ff251068a275b8"&gt;my latest version of the script&lt;/a&gt;, I had an Applescript application that would extract all of my Skim annotations, format them into beautiful HTML, and create a new Evernote note where I had hyperlinks that would open the PDF in Skim to the exact page referenced. This script has served me well for months.&lt;/p&gt;

&lt;p&gt;This mini-history skips, however, the &lt;em&gt;coolest&lt;/em&gt; feature of this script. In &lt;a href="http://drosophiliac.com/2012/09/creating-a-custom-url-scheme-via-applescript-and-python.html"&gt;a companion piece&lt;/a&gt; to his post on his own export script, Walton Jones describes how he created a custom URL scheme to allow him to generate hyperlinks for his notes. His method relied on a combination of Applescript and Python, as well as his own rigid PDF naming conventions. This is truly amazing in my book. This allows me to engage in information extraction while retaining the ability to return information to its context. When I annotate an OCR’d PDF, I can extract what I believe to be the essential information&lt;sup id="fnref:xx"&gt;&lt;a href="#fn:xx" class="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;, then view only that information (in an Evernote note in this instance) or view that information in its original context (the PDF) by clicking a link that opens the PDF to the exact page with that content.&lt;/p&gt;

&lt;p&gt;When I got my iPad, however, I immediately came across an annoyance. One of the best features of &lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt; is its cross-platform capabilities. So I could read my annotation summaries on my iPad, but the hyperlinks were totally useless. Since they were custom URLs that required a custom handler on the Mac, iOS doesn’t recognize them. I spent some time thinking about how I could have my hyperlinks work on iOS when I came to discover the Wild West of iOS–url schemes. While there are a crazy number of interesting things one can accomplish with URL schemes on iOS,&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" class="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; in their simplest form they function just like internet urls; they let you jump directly to a specific location.&lt;/p&gt;

&lt;p&gt;Each iOS app has to register their own URL scheme (if they do at all), which is one of the main reasons I describe this realm as the Wild West of iOS. There is often very little documentation of an app’s URL scheme (since its really primarily a “power user feature”) and there isn’t really any standardization.&lt;sup id="fnref:4"&gt;&lt;a href="#fn:4" class="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; Well, I jumped into this jungle searching for a PDF app that had a URL scheme that would allow me to jump to a specific PDF and a specific page. This was 4 months ago. Unfortunately, no such PDF application had a robust enough URL scheme. The top tier applications would allow you to open a specific PDF, but none of them would let you specify a page.&lt;sup id="fnref:5"&gt;&lt;a href="#fn:5" class="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt; So, I put in a number of feature requests and waited.&lt;/p&gt;

&lt;p&gt;Finally, the folks at &lt;a href="http://smilesoftware.com/"&gt;Smile Software&lt;/a&gt; upgraded &lt;a href="https://itunes.apple.com/us/app/pdfpen-for-ipad/id490774625?mt=8"&gt;PDFPen for iPad&lt;/a&gt; as well as &lt;a href="https://itunes.apple.com/us/app/pdfpen-for-iphone/id557705455?mt=8"&gt;PDFPen for iPhone&lt;/a&gt; to include a page specific URL scheme. This has finally opened the door to a cross-platform, wiki-style PDF workflow. In order for this workflow to, well, flow, we need two components: (1) a custom URL handler for the Mac and (2) a script to export PDF annotations with this custom URL embedded in the links. Luckily for you :) I have two such things.&lt;/p&gt;

&lt;h3 id="the-url-handler"&gt;The URL Handler&lt;/h3&gt;

&lt;p&gt;The PDFPen for iPad app handles a URL scheme like this: &lt;code&gt;pdfpen:///filename.pdf?pg=2&lt;/code&gt;. There are a few things to note here. First, PDFPen does not currently have any folder system, so you will never have to deal with any other elements besides filename and page number. Second, the identifier (&lt;code&gt;pdfpen&lt;/code&gt;) is followed by a colon and then &lt;strong&gt;three&lt;/strong&gt; backslashes (&lt;code&gt;///&lt;/code&gt;), not two. In order to have these urls function on the Mac, I needed to write an Applescript URL handler. Luckily, Applescript has built into it the &lt;code&gt;on open location&lt;/code&gt; function. This allows you to script responses to clicks of URL types, essentially letting you register your own custom URL schemes with OS X.&lt;/p&gt;

&lt;p&gt;My URL handler for the PDFPen URL scheme faced one major hurdle. Since the PDFPen URL scheme only has the file name, the URL handler on the Mac needs to determine the file path of a PDF from only its filename. My solution relies on&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;saving my PDFs to a cloud folder, like Dropbox&lt;/li&gt;
  &lt;li&gt;using a shell script to get the file path of every file in that folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In short, the URL handler searches my synced folder, where I know the PDF resides and generates a list of all of the files in that folder (including all sub-folders). It then searches that list for the item with the filename, and thus grabs the file path of the PDF on your Mac. This works well for me, but if anyone has another suggestion, drop me a line in the comments.&lt;/p&gt;

&lt;p&gt;If you want to view my URL handler script, visit my GitHub page &lt;a href="https://gist.github.com/smargh/7064788"&gt;here&lt;/a&gt;. If you simply want to download the application, so that the .plist file is correct, and everything &lt;em&gt;just works&lt;/em&gt;, then you can &lt;a href="https://dl.dropboxusercontent.com/u/98731674/PDFPen%20URL%20Handler%20copy.zip"&gt;download it&lt;/a&gt;. Please note, however, that for the application to work “out of the box”, you need to save all of your cross-platform PDFs to your Dropbox folder on the Mac. Otherwise, the handler won’t be able to find the file path of your PDF.&lt;/p&gt;

&lt;h3 id="exporting-skim-annotations-with-the-pdfpen-url-scheme"&gt;Exporting Skim Annotations with the PDFPen URL scheme&lt;/h3&gt;

&lt;p&gt;This is the central script for the workflow. This script extracts and exports all of your Skim annotations directly to Evernote with the proper PDFPen urls embedded in the annotations. This script is all-in-one. It begins by displaying three prompts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Where you want to save the PDF, you need to ensure that it is saved in the Folder that your url handler scours.&lt;/li&gt;
  &lt;li&gt;Input a number that relates the printed page number of the PDF to the indexed page number.&lt;sup id="fnref:6"&gt;&lt;a href="#fn:6" class="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt; As the prompt directs, all you need to do is subtract the printed page number from the indexed page number. If this means that you have a negative number, simply use a &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Whether the current PDF is a primary text or a secondary text. Depending on your answer, the script translates your highlight colors differently.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you respond to these prompts, the script generally runs in about 3-5 seconds. Whenever the new Evernote note is created, the script displays a &lt;a href="http://growl.info/"&gt;Growl notification&lt;/a&gt; (if you have Growl installed).&lt;/p&gt;

&lt;p&gt;The script will export all of your Skim annotations to an Evernote notebook entitled “PDF Notes”. If such a notebook doesn’t exist, the script will create it. It will also assign two tags to the note: a “notes” tag and a “pdfpen”, both of which, if they don’t exist, will be created. As always, the script generates beautifully formatted html notes in Evernote, with clear section divisions and key information at the top. I use Skim’s text notes only for section headers, so the script will take all text notes and generate a Table of Contents at the top of the note. It also treats all yellow highlights as Summary text, and puts the Text Summary right after the ToC. All of the other annotations are grouped by type in the rest of the note. Here’s an example of an annotation summary note in Evernote:&lt;/p&gt;

&lt;p&gt;Finally, of course, the script automatically embeds the PDFPen urls into the individual annotations. Since we input the relation of the printed page number to the indexed page number, the actual Evernote note displays the printed page number, while the url will take you to the proper indexed page number.&lt;/p&gt;

&lt;p&gt;If you want to grab this script, head over to my &lt;a href="https://gist.github.com/smargh/7065110"&gt;Gist&lt;/a&gt; and save the script as an application, so you can launch it from &lt;a href="http://www.alfredapp.com/"&gt;Alfred&lt;/a&gt;, &lt;a href="http://obdev.at/products/launchbar/index.html"&gt;LaunchBar&lt;/a&gt;, or &lt;a href="http://www.apptivateapp.com/"&gt;Apptivate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For those of you who don’t have an iPad or simply prefer to have your PDFs spread about your file system, I have another version of the script that uses my own custom URL scheme which will encode the full path to the PDF&lt;sup id="fnref:zz"&gt;&lt;a href="#fn:zz" class="footnote"&gt;8&lt;/a&gt;&lt;/sup&gt;. This is actually the script that I use in my Alfred Workflow &lt;a href="http://fractaledmind.com/projects/skimmer"&gt;Skimmer&lt;/a&gt;, which is by far the simplest way to use this functionality.&lt;/p&gt;

&lt;h2 id="pdf-storage"&gt;PDF Storage&lt;/h2&gt;

&lt;p&gt;As some of my previous comments will no doubt suggest, I highly recommend that your have a clear plan for where you will store your (consistently named) PDFs. Chaos in any part of your PDF workflow will breed chaos in other places as well. Moreover, both of the versions of the annotation exporting scripts require the PDFs to be sedentary. Again, I won’t recommend where or how to store your PDFs, but I can make some suggestions on tools.&lt;/p&gt;

&lt;p&gt;Once again, &lt;a href="http://www.noodlesoft.com/hazel.php"&gt;Hazel&lt;/a&gt; will prove adept at this sort of task. You can tell it to watch certain folders (like your &lt;code&gt;/Downloads&lt;/code&gt;, &lt;code&gt;/Documents&lt;/code&gt;, and/or &lt;code&gt;/Desktop&lt;/code&gt;) for PDF files, and then have it move any PDFs put there to another location (maybe even changing the file name as it does so). Alternatively, you could opt for the big guns and use &lt;a href="http://www.devontechnologies.com/products/devonthink/overview.html"&gt;DEVONthink&lt;/a&gt;, which offers an entire app dedicated to file management, with AI, sorting, searcing, indexing, and all sorts of whiz-bang features. It’s not a cheap app, but many people&lt;sup id="fnref:yy"&gt;&lt;a href="#fn:yy" class="footnote"&gt;9&lt;/a&gt;&lt;/sup&gt; swear by its power and capabilities.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;PDFs can be a pain in the butt, but they are also vitally important in today’s world. So much information is still transferred via PDF. I hope that some of these tools, some of these ideas at least, can help you handle your PDFs better and with less stress.&lt;/p&gt;

&lt;p&gt;As always, if you have thoughts, questions, or suggestions, drop me a line.&lt;/p&gt;

&lt;p&gt;stephen&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;The installation script has been tested on 10.9 and 10.10. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;&lt;code&gt;tesseract&lt;/code&gt; prefers files in &lt;code&gt;.tif&lt;/code&gt; format. &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:xx"&gt;
      &lt;p&gt;This uses highlight colors as a signal for various types of information. &lt;a href="#fnref:xx" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:3"&gt;
      &lt;p&gt;If you’re interested, check out &lt;a href="http://www.macstories.net/tag/url-scheme/"&gt;Frederico Viticci’s work&lt;/a&gt; or &lt;a href="http://www.geekswithjuniors.com/ios-url-schemes/"&gt;Eric Pramona&lt;/a&gt; &lt;a href="#fnref:3" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:4"&gt;
      &lt;p&gt;There is beginning to be some standardization thanks to the work of Greg Pierce and Marco Arment’s &lt;a href="http://x-callback-url.com/"&gt;x-callback-url specificiation&lt;/a&gt;. &lt;a href="#fnref:4" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:5"&gt;
      &lt;p&gt;&lt;a href="http://www.branchfire.com/iannotate/"&gt;iAnnotate&lt;/a&gt; uses the &lt;code&gt;iannotate://open//&lt;/code&gt; scheme. &lt;a href="https://itunes.apple.com/us/app/goodreader-for-ipad/id363448914?mt=8"&gt;GoodReader&lt;/a&gt; uses the &lt;code&gt;gropen://&lt;/code&gt; scheme. &lt;a href="https://itunes.apple.com/us/app/pdf-expert-fill-forms-annotate/id393316844?mt=8"&gt;PDF Expert&lt;/a&gt; uses the &lt;code&gt;pdfefile:///folder1/filename.pdf?cc=1&lt;/code&gt; scheme. &lt;a href="#fnref:5" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:6"&gt;
      &lt;p&gt;John Sidiropolus has a great explanation of the various ways in which printed page numbers can relate to indexed page numbers in &lt;a href="http://www.organognosi.com/latin-page-numbers-arabic-page-numbers-and-the-fifth-skim-note/"&gt;this post&lt;/a&gt;. &lt;a href="#fnref:6" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:zz"&gt;
      &lt;p&gt;Naturally, this still requires you to not move the PDF once you export the annotations. Again, having a consistent naming schema and a consistent storage plan will only help you in the long run. &lt;a href="#fnref:zz" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:yy"&gt;
      &lt;p&gt;Check out &lt;a href="http://nerdquery.com/search.php?query=devonthink&amp;amp;search=1&amp;amp;category=24&amp;amp;catid=24&amp;amp;type=and&amp;amp;results=50&amp;amp;db=0&amp;amp;prefix=0&amp;amp;media_only=0"&gt;Gabe Weatherhead’s posts&lt;/a&gt; on macdrifter.com as well as his appearance on &lt;a href="http://www.relay.fm/mpu/251"&gt;Mac Power Users&lt;/a&gt; for a clear guide and why and how DEVONthink could work within a larger workflow. &lt;a href="#fnref:yy" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Example Article</title>
    <link rel="alternate" href="http://blog.url.com/articles/example-article/"/>
    <id>http://blog.url.com/articles/example-article/</id>
    <published>2011-12-31T19:00:00-05:00</published>
    <updated>2015-07-16T09:56:02-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;This is an example article. It contains a wide range of various content to demonstrate how this blog styles such content. For example, this is some text with a footnote.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;{{read more}}&lt;/p&gt;

&lt;p&gt;This is a way to determine the number of characters per line in the various layouts:&lt;/p&gt;

&lt;p&gt;0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789&lt;/p&gt;

&lt;p&gt;This text is &lt;em&gt;italic&lt;/em&gt;, while this is &lt;strong&gt;bold&lt;/strong&gt;, and this is a &lt;a href="smargh.github.io"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For code, you have two types:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;inline code&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;list_comp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is an example block quote. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id="h1"&gt;H1&lt;/h1&gt;

&lt;h2 id="h2"&gt;H2&lt;/h2&gt;

&lt;h3 id="h3"&gt;H3&lt;/h3&gt;

&lt;h4 id="h4"&gt;H4&lt;/h4&gt;

&lt;h5 id="h5"&gt;H5&lt;/h5&gt;

&lt;p&gt;&lt;img alt="fractal" src="images/dragon_curve.png" /&gt;&lt;/p&gt;

&lt;p&gt;For example, a list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Item number one&lt;/li&gt;
  &lt;li&gt;Item number two
    &lt;ul&gt;
      &lt;li&gt;A nested item&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A final item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or with numbers!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Remember to buy some milk&lt;/li&gt;
  &lt;li&gt;Drink the milk&lt;/li&gt;
  &lt;li&gt;Tweet that I remembered to buy the milk, and drank it&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;This is a sample table:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;Operator&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;equal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;not equal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;less than (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;greater than (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;less than or equal (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;greater than or equal (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;in_range(attribute, min_value, max_value)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;numeric values within the range of min_value through max_value in the specified attribute&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;fin.&lt;/p&gt;
&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;This is a footnote for my &lt;code&gt;Example Article&lt;/code&gt;. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
