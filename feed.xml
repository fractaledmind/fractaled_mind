<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fractaled Mind</title>
  <subtitle>Disparate thoughts, connected</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2016-09-19T20:00:00-04:00</updated>
  <author>
    <name>Stephen Margheim</name>
  </author>
  <entry>
    <title>Ruminations on a Credal Logic</title>
    <link rel="alternate" href="http://blog.url.com/articles/ruminations-on-a-credal-logic/"/>
    <id>http://blog.url.com/articles/ruminations-on-a-credal-logic/</id>
    <published>2016-09-19T20:00:00-04:00</published>
    <updated>2016-09-20T16:57:59-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;How do we understand our faith? More precisely, how do we reason deeply and precisely as faith-adherents? Or, perhaps most precisely, how might our faith shape our reason? Do we have a faith seeking the light of understanding, or a faith seeking out understanding with its light?&lt;/p&gt;

&lt;h2 id="a-logical-primer"&gt;0: A Logical Primer&lt;/h2&gt;

&lt;h3 id="on-the-law-of-non-contradiction"&gt;0.1: On the Law of Non-Contradiction&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The most certain of all basic principles is that contradictory propositions are not true simultaneously. (Aristotle, &lt;em&gt;Metaphysics&lt;/em&gt; 1011b13-14)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the bedrocks of modern rationality, of contemporary logic, is the so-called &lt;a href="https://en.wikipedia.org/wiki/Law_of_noncontradiction"&gt;Law of Non-Contradiction&lt;/a&gt; (LNC), quoted above. A contradiction, expressed symbolically, is simply &lt;code&gt;P &amp;amp; ~P&lt;/code&gt;; or, expressed logically, “the proposition &lt;code&gt;P&lt;/code&gt; and its contradiction &lt;code&gt;not-P&lt;/code&gt;”. This law of rationality states that no such contradictions can or do exist; that is, symbolically, &lt;code&gt;~(P &amp;amp; ~P)&lt;/code&gt;, or logically, “it is not the case that both the proposition &lt;code&gt;P&lt;/code&gt; and its contradiction &lt;code&gt;not-P&lt;/code&gt; are both true (at the same time in the same way)”. The reason that this proposition &lt;em&gt;must be&lt;/em&gt; true, for the system of logic, is that &lt;em&gt;any&lt;/em&gt; contradiction allows for &lt;em&gt;any&lt;/em&gt; proposition to be logically deduced. Let’s quickly run through a logical argument that begins from a contradiction:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;1. All X is Y and not all X is Y            (P &amp;amp; ~P)
2. All X is Y                               (P)
    [by Conjunctive Elimination]
3. Not all X is Y                           (~P)
    [by Conjunctive Elimination]
4. All X is Y or {something impossible}     (P v Q)
    [by Disjunctive Introduction]
5. {something impossible}                   (Q)
    [by Disjunctive Syllogism]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Given the logical rules for conjunctions (“and”/&lt;code&gt;&amp;amp;&lt;/code&gt;) and disjunctions (“or”/&lt;code&gt;v&lt;/code&gt;), any proposition (&lt;code&gt;Q&lt;/code&gt;) can be logically deduced from a contradiction (&lt;code&gt;P &amp;amp; ~P&lt;/code&gt;). This is the so-called “&lt;a href="https://en.wikipedia.org/wiki/Principle_of_explosion"&gt;Principle of Explosion&lt;/a&gt;” (or “ECQ”, from its early Latin form &lt;em&gt;ex contradictione (sequitur) quodlibet&lt;/em&gt;).&lt;/p&gt;

&lt;h3 id="on-the-law-of-the-excluded-middle"&gt;0.2: On the Law of the Excluded Middle&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is necessary for the affirmation or the negation to be true or false. (Aristotle, &lt;em&gt;On Interpretation&lt;/em&gt;, 9.18a28-29)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A corollary to the Law of Non-Contradiction is the so-called &lt;a href="https://en.wikipedia.org/wiki/Law_of_excluded_middle"&gt;Law of the Excluded Middle&lt;/a&gt; (LEM). Symbolically, it is represented as the disjunction &lt;code&gt;P v ~P&lt;/code&gt;, logically, we could express it as “it is the case that either the proposition &lt;code&gt;P&lt;/code&gt; is true or &lt;code&gt;not-P&lt;/code&gt; is true”. I call it a corollary of the LNC because we can actually deduce its truth from the LNC. Consider: if it is true that &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;not-P&lt;/code&gt; cannot both be true, then it is false that both &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;not-P&lt;/code&gt; are both true. In order for a conjunction to be false, one of its conjucts must be false. Thus, either &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;not-P&lt;/code&gt; must be false. Moreover, if &lt;code&gt;P&lt;/code&gt; is false, then &lt;code&gt;not-P&lt;/code&gt; is true; and, if &lt;code&gt;not-P&lt;/code&gt; is false, then &lt;code&gt;P&lt;/code&gt; is true. Thus, either &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;not-P&lt;/code&gt; must be true. Symbolically, we might express that deduction as:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;1. ~(P &amp;amp; ~P) =&amp;gt; true
2. P &amp;amp; ~P =&amp;gt; false
3. (P =&amp;gt; false) v (~P =&amp;gt; false)
4. (~P =&amp;gt; true) v (P =&amp;gt; true)
5. P v ~P
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This principle of rational thought is called the “excluded middle” because it means that there is no middle ground between truth and falsity.&lt;/p&gt;

&lt;h3 id="on-definite-descriptions"&gt;0.3: On Definite Descriptions&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Denoting phrases never have any meaning in themselves, but every proposition in whose verbal expression they occur has a meaning. (Russell, “On Denoting”)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The LNC and the LEM are two of the three so-called “&lt;a href="https://en.wikipedia.org/wiki/Law_of_thought"&gt;Laws of Thought&lt;/a&gt;” (the third (first really) is the &lt;a href="https://en.wikipedia.org/wiki/Law_of_identity"&gt;Law of Identity&lt;/a&gt; (&lt;code&gt;A = A&lt;/code&gt;)). Whether we know it or not, whether we think about it or not, these principles undergird all of our thought. Yet even these foundational principles of rational thought are not without complications. The LEM, for example, was often criticized for failing to properly or fully handle propositions about non-existent subjects. Consider the proposition “All unicorns have horns”. The LEM compels us to state that either “All unicorns have horns” is true &lt;em&gt;or&lt;/em&gt; “All unicorns do not have horns” is true; yet, to state that either of these propositions is true would seem to imply that “unicorns” exist. One of the most famous and influential solutions to this problem is Bertrand Russell’s theory of &lt;a href="https://en.wikipedia.org/wiki/Definite_description"&gt;Definite Descriptions&lt;/a&gt; (“On Denoting”, 1905). In simplified form, Russell suggests that propositions of this sort (e.g. denoting propositions) should be considered logically as containing an implicit existential proposition. We might restate our proposition as “There exists at least one thing such that it is called ‘unicorn’ and it has a horn”. This is what we are really logically implying, in Russell’s view, when we assert that “All unicorns have horns”; that is, we assume the existence of our subject and then define it by describing it.&lt;/p&gt;

&lt;h2 id="credal-propositions"&gt;1: Credal Propositions&lt;/h2&gt;

&lt;h3 id="faith-reason-and-truth-defined"&gt;1.1: Faith, Reason, and Truth Defined&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;What does Jerusalem have to do with Athens, the Church with the Academy, the Christian with the heretic? Our principles come from the Porch of Solomon. (Tertullian, &lt;em&gt;Prescriptions against Heretics&lt;/em&gt; 7)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The question “What does Jerusalem have to do with Athens” is often abstracted to the form “What does &lt;em&gt;faith&lt;/em&gt; have to do with &lt;em&gt;reason&lt;/em&gt;”? But what do we mean by these terms? I believe that for many reason concerns itself with the realm of justified (or justifiable) belief and faith that of non-justified (or non-justifiable) belief. Both are, however, concerned primarily with &lt;em&gt;belief&lt;/em&gt;, and thus with propositions. Moreover, for many, truth equates to &lt;a href="https://en.wikipedia.org/wiki/Justified_true_belief"&gt;justified true belief&lt;/a&gt;. However, insofar as truth is defined as justified true belief, faith is excluded from truth. And yet it is a foundational proposition of our faith that God is the source of all truth, is Truth itself. This is the first gap between a common understanding of faith, reason, and truth.&lt;/p&gt;

&lt;h3 id="on-paradoxical-propositions-of-our-faith"&gt;1.2: On Paradoxical Propositions of our Faith&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;No sooner do I conceive of the One than I am illumined by the splendour of the Three; no sooner do I distinguish Three than I am carried back into the One. When I think of any of the Three, I think of Him as the Whole, and my eyes are filled, and the greater part of what I am thinking escapes me. I cannot grasp the greatness of that One so as to attribute a greater greatness to the rest. When I contemplate the Three together, I see but one torch, and cannot divide or measure out the undivided light (Gregory of Nazianzus, &lt;em&gt;Orations&lt;/em&gt; 40.41)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the central propositions of our Christian faith is the Trinity; God is three and God is one. A central proposition concerning the nature of Jesus Christ is the Incarnation; Jesus is God and Jesus is man. These two foundations of the Christian faith are, in simplest form, paradoxes. Note, I call them “paradoxes” and not “contradictions”, for, where they “contradictions”, they would conflict with the LNC and stand in opposition to the foundations of human rationality. Indeed, there has been much effort of the thousands of years of Christian thought to show with clarity and adroitness that these and all articles of Christian faith are indeed rational. We need look no further than the work of the &lt;a href="https://en.wikipedia.org/wiki/Cappadocian_Fathers"&gt;Cappadocian Fathers&lt;/a&gt; in articulating the Trinity with respect to “substance” (&lt;em&gt;ousia&lt;/em&gt;) and “persons” (&lt;em&gt;hypostaseis&lt;/em&gt;). Propositions of the Christian faith of this sort may &lt;em&gt;appear&lt;/em&gt; to be contradictions, but they are not; they are merely paradoxes, mysteries of the faith (&lt;em&gt;mysteria fidei&lt;/em&gt;).&lt;/p&gt;

&lt;h3 id="a-cartesian-re-assessment"&gt;1.3: A Cartesian Re-Assessment&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Faith seeking understanding (St. Anselm)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In René Descartes’ &lt;em&gt;Meditations on First Philosophy&lt;/em&gt;, the philosopher begins by discarding all beliefs, all propositions, that he does not know for certain, and then attempts to build back up a system of beliefs by working systematically from what he can know for certain (&lt;em&gt;cogito ergo sum&lt;/em&gt;). One consequence of this methodical skepticism is that it immediately highlights the hierarchy of our beliefs. It separates the axioms from the theorems.&lt;/p&gt;

&lt;p&gt;It seems to me that with respect to articles of the Christian faith, the principles of reason are treated as axiomatic. We take pains to demonstrate how the mysteries of our faith adhere to the LNC, we struggle to articulate our terms and clarify our meaning, we shine the light of logic on these dark mysteries. And indeed, why should we not? The system of logic reflects the ordered, rational nature of God, does it not? Our minds are made in the image of God, are they not? Our faith should seek understanding in the light of logic, should it not?&lt;/p&gt;

&lt;h2 id="a-christian-aetiology-of-epistemology"&gt;2: A Christian Aetiology of Epistemology&lt;/h2&gt;

&lt;h3 id="on-the-tree-of-the-knowledge-of-good-and-evil"&gt;2.1: On the Tree of the Knowledge of Good and Evil&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Behold, the man has become like one of us in knowing good and evil. Now, lest he reach out his hand and take also of the tree of life and eat, and live forever. (&lt;em&gt;Genesis&lt;/em&gt; 3:22)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Epistemology is at the center of the biblical narrative of the Fall. At the heart of Eden lie two trees: the Tree of Life and the Tree of the Knowledge of Good and Evil (Gen. 2:9). The first command God gives his human creation is “You may surely eat of every tree of the garden, but of the tree of the knowledge of good and evil you shall not eat, for in the day that you eat of it you shall surely die” (Gen. 2:16b-17). And it is, of course, this Tree of the Knowledge of Good and Evil that Eve and Adam eat from, and “[their] eyes were both opened” (Gen. 3:7a).&lt;/p&gt;

&lt;p&gt;Now, the story of the Fall is rich with meaning, and there is much to be said and learned from it; however, I fear that the epistemic implications of this narrative are too often underconsidered. Whatever “knowledge of good and evil” might mean–experiential knowledge, a merism for knowledge generically, moral knowledge, etc–it is epistemic definitionally. Before the Fall the nature of knowledge, of reason, was in one state; and, after the Fall, it was in another. I believe this simply must be true, even if the delta is as simple as pre-Fall humanity did not have propositional knowledge of the concepts “good” and “evil”, and post-Fall they did. The Fall, among its many consequences, represents a state change in human knowing.&lt;/p&gt;

&lt;p&gt;Though we cannot know with any confidence what the epistemic state change was, I offer the following as my interpretation.&lt;/p&gt;

&lt;h3 id="on-binary-thinking"&gt;2.2: On Binary Thinking&lt;/h3&gt;

&lt;p&gt;I have always been fascinated by the fact that two of the most foundational axioms of logic concern contradictions. While the LNC and the LEM certainly strike the mind as intuitive, it is difficult to articulate a reason why these two propositions &lt;em&gt;must be&lt;/em&gt; foundational for thought. What is it about contradictions that proves so intuitively foundational to us? Well, for one, contradictions are logically-exhaustive binaries. If we think in terms of sets, &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;not-S&lt;/code&gt;, regardless of the definition of &lt;code&gt;S&lt;/code&gt;, would account for any and all &lt;code&gt;x&lt;/code&gt;. Building a logical system atop logically-exhaustive entities must be more effective and efficient than the alternative (behold! another logically-exhaustive binary). In addition, contradictions make use of nothing but negation, a primitive logical operator in basically all propositional logical systems. Few movements of the mind would appear to come as naturally to the human person as negation. Yet again, however, we might ask, why? Why is negation a movement of the mind at all? Why is it so basic? Why are we seemingly drawn to the contradictions negation so easily creates?&lt;/p&gt;

&lt;p&gt;Well, I’m inclined to think that some part of the answer lies in the Genesis account of the Fall. To have eaten of the Tree of the Knowledge of Good and Evil was to ground “knowledge” upon binaries, of the sort “good and evil”. To have eaten of the Tree of the Knowledge of Good and Evil was to have introduced analytical thinking (in the etymological sense, “thinking that separates”). To have eaten of the Tree of the Knowledge of Good and Evil was to have made negation a primitive logical operation (“good and evil” logically equaling “good and not-good”).&lt;/p&gt;

&lt;h2 id="a-credal-logic"&gt;3: A Credal Logic&lt;/h2&gt;

&lt;p&gt;Now, none of this is to suggest that analytical thinking, negation, or binaries are “bad” or “wrong” or even “inferior” to anything. They are a necessary aspect of epistemology, of logic. However, this particular aetiology of epistemology, for me at least, opens up another gap between faith and reason. Faith is built on top of propositions of the (simplified) sort: &lt;code&gt;3 = 1&lt;/code&gt; or &lt;code&gt;100 + 100 = 100&lt;/code&gt;; reason is built on top of propositions of the sort: &lt;code&gt;(3 = 3)&lt;/code&gt;, and &lt;code&gt;(1 = 1)&lt;/code&gt;, and &lt;code&gt;(3 ~= 1)&lt;/code&gt;. No matter what we do, there will always between tension between faith and reason; certain credal propositions of faith will always &lt;em&gt;at best&lt;/em&gt; be paradoxes in the light of reason. The question, to my mind, then becomes: in which direction is that tension resolved? Put another way, what does it mean for faith to seek understanding? Do we seek to understand our faith in the light of logical reason, or do we seek to understand our logical reason in light of our faith? I believe there is great value to be found in the latter, but what does that even look like?&lt;/p&gt;

&lt;p&gt;First, let our credal logic begin from paradox and end in paradox. Instead of looking to resolve the paradoxes in the mysteries of our faith, to find refuge by demonstrating the ways, means, and degrees to which they are not contradictions, let us instead look to explore the paradoxes, their shape, nature, and edges.&lt;/p&gt;

&lt;h3 id="and-the-trinity"&gt;3.1: 1 = 0.9999… and the Trinity&lt;/h3&gt;

&lt;p&gt;In an overly-simplified mathematical form, we might represent the propositional content of the Trinity as the paradoxical &lt;code&gt;3 = 1&lt;/code&gt;. This is a paradox of identity. In looking to explore this paradox, we might turn to a particular mathematical paradox of identity: &lt;code&gt;1 = 0.9999...&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id="section"&gt;3.1.1: 1 = 0.9999…&lt;/h4&gt;

&lt;p&gt;To begin, let me prove this identity statement:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Define the infinitely-repeating decimal as a variable&lt;/span&gt;
k &lt;span class="o"&gt;=&lt;/span&gt; 0.9999...
&lt;span class="c"&gt;# Multiply both sides of the equation by 10&lt;/span&gt;
10k &lt;span class="o"&gt;=&lt;/span&gt; 9.9999...
&lt;span class="c"&gt;# Subtract the larger portions by the smaller portions&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;10k - k&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;9.9999... - 0.9999...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Since the infinitely-repeating decimals are both infinitely long,&lt;/span&gt;
&lt;span class="c"&gt;# subtraction cancels them out&lt;/span&gt;
9k &lt;span class="o"&gt;=&lt;/span&gt; 9
&lt;span class="c"&gt;# Divide both sides of the equation by 9&lt;/span&gt;
k &lt;span class="o"&gt;=&lt;/span&gt; 1
&lt;span class="c"&gt;# Replace k with our original identity&lt;/span&gt;
1 &lt;span class="o"&gt;=&lt;/span&gt; 0.9999...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, this proof may perhaps feel a bit fishy to you; you may think that we are mathematically cheating somewhere, but I can promise you that every single step is totally valid. And if every step is totally valid, then the conclusion is valid. But how can this be and what does this mean?&lt;/p&gt;

&lt;p&gt;This “problem”, this seeming incongruity, arises because we have a hard time grappling with infinity. To put it another way, we underestimate the weight of that ellipsis. So let’s dig into that ellipsis a bit. What does &lt;code&gt;0.9999...&lt;/code&gt; really mean, really represent? Well, we all remember from elementary school that decimals can also be represented by fractions, so let’s try to represent this decimal by a fraction. Unfortunately, there is no simple fraction to represent this number (like &lt;code&gt;0.3333...&lt;/code&gt; being representable by \(\frac{1}{3}\)). However, we can break this decimal down. We know that &lt;code&gt;0.9&lt;/code&gt; is simply \(\frac{9}{10}\), and &lt;code&gt;0.09&lt;/code&gt; is \(\frac{9}{100}\), and &lt;code&gt;0.009&lt;/code&gt; is \(\frac{9}{1000}\) and so on. We also know that &lt;code&gt;0.9 + 0.09 + 0.009 = 0.999&lt;/code&gt;. So, we could represent &lt;code&gt;0.9999...&lt;/code&gt; fractionally as:&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\frac{9}{10} + \frac{9}{100} + \frac{9}{1000} + \frac{9}{10000} + \ldots&lt;/script&gt;

&lt;p&gt;In mathematics, this is called an &lt;a href="http://www.waldron-math.com/BCCalculus/ClassNotes/Ch9/9.1_Infinite%20Series.pdf"&gt;&lt;em&gt;infinite sum&lt;/em&gt;&lt;/a&gt; or an &lt;em&gt;infinite series&lt;/em&gt;; we are adding terms together to infinity. If you recall from your high school math class, you can represent an infinite sum with what is called &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Summation#Capital-sigma_notation"&gt;sigma notation&lt;/a&gt;&lt;/strong&gt;, and our infinite sum above can be represented as:&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\sum_{n=1}^{\infty} \frac{9}{10^n}&lt;/script&gt;

&lt;p&gt;This is simply a more concise way of writing the larger sum of the fractions above.&lt;/p&gt;

&lt;p&gt;Infinite sums are truly fascinating, and I hope to write more about them in the future, but for now I want to focus on one characteristic in particular. All infinite sums fit into one of two categories: &lt;em&gt;convergent&lt;/em&gt; or &lt;em&gt;divergent&lt;/em&gt;. Now, these are math-jargon terms that mean relatively simple things. An infinite sum is &lt;em&gt;convergent&lt;/em&gt; if it converges on a finite number. The language you might remember from your calculus class is that the &lt;em&gt;limit&lt;/em&gt; of the infinite sum &lt;em&gt;approaches&lt;/em&gt; a finite number. So, a &lt;em&gt;convergent infinite sum&lt;/em&gt; is an infinity that touches the finite. In contrast, a &lt;em&gt;divergent infinite sum&lt;/em&gt; is one that has no limit, one that grows to infinity. A stock example is&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\sum_{n=1}^{\infty} \frac{1}{n}&lt;/script&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;1 + \frac{1}{2} + \frac{1}{3} + \frac{1}{4} + \ldots&lt;/script&gt;

&lt;p&gt;This is an infinite sum that approaches infinity, that is, it &lt;em&gt;diverges&lt;/em&gt;, it does not have a finite limit, it is unbounded.&lt;/p&gt;

&lt;p&gt;Returning to our infinite sum, we have enough context now to see that saying &lt;code&gt;1 = 0.9999...&lt;/code&gt; is really just one way of saying that the summation of \(\frac{9}{10^n}\) as &lt;code&gt;n&lt;/code&gt; goes from 1 to infinity is a convergent infinite sum that converges on 1.&lt;/p&gt;

&lt;h4 id="on-infinity-touching-the-finite"&gt;3.1.2: On Infinity touching the Finite&lt;/h4&gt;

&lt;p&gt;Paradoxes abound when the infinite collides with the finite. On the one hand, it is quite clear that &lt;code&gt;1&lt;/code&gt; &lt;em&gt;does not equal&lt;/em&gt; &lt;code&gt;0.9999...&lt;/code&gt; for the simple reason that &lt;code&gt;1&lt;/code&gt; is a finite integer and &lt;code&gt;0.9999...&lt;/code&gt; is an infinite series. If &lt;em&gt;equality&lt;/em&gt; is &lt;em&gt;categorical identity&lt;/em&gt;, then &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0.9999...&lt;/code&gt; are not equal. On the other hand, this whole post has shown that &lt;code&gt;1&lt;/code&gt; &lt;em&gt;does equal&lt;/em&gt; &lt;code&gt;0.9999...&lt;/code&gt;. If &lt;em&gt;equality&lt;/em&gt; is &lt;em&gt;referrential identity&lt;/em&gt;, then &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0.9999...&lt;/code&gt; are equal. Now, note that I call this a paradox and not an antinomy. I want to define these two terms clearly and distinguish them.&lt;/p&gt;

&lt;p&gt;In my parlance, a &lt;strong&gt;paradox&lt;/strong&gt; is a &lt;em&gt;seeming&lt;/em&gt; contradiction, while an &lt;strong&gt;antinomy&lt;/strong&gt; is an &lt;em&gt;actual&lt;/em&gt; contradiction; that is, a paradox is resolvable and an antinomy is not. It is important, however, to note that resolving a paradox &lt;em&gt;does not&lt;/em&gt; mean that one side “wins” and the other “loses”, that one proposition is “right” and the other is “wrong”; instead, it means that we can rationally make sense of the difference between the two propositions. This is why I used the if-then statements above. It is not that one of the propositions is “right” or “wrong”, it is that we can enumerate the conditions under which each one would be “right” and the other “wrong”. An antinomy does not submit itself to such enumeration; we cannot articulate the conditions under which one side is “right” and the other is “wrong”. So, if I were to abstract out my definitions of &lt;em&gt;paradoxes&lt;/em&gt; and &lt;em&gt;antinomies&lt;/em&gt;, I would describe them thusly:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A paradox is composed of a proposition (&lt;code&gt;P&lt;/code&gt;) and its negation (&lt;code&gt;not-P&lt;/code&gt;) such that the conditionals “if &lt;code&gt;conditions for P&lt;/code&gt;, then &lt;code&gt;P&lt;/code&gt;” and “if &lt;code&gt;conditions for not-P&lt;/code&gt;, then &lt;code&gt;not-P&lt;/code&gt;” are both true, and thus the conjunction “if &lt;code&gt;conditions for P&lt;/code&gt;, then &lt;code&gt;P&lt;/code&gt; and if &lt;code&gt;conditions for not-P&lt;/code&gt;, then &lt;code&gt;not-P&lt;/code&gt;” is also true.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;An antinomy is composed of a proposition (&lt;code&gt;P&lt;/code&gt;) and its negation (&lt;code&gt;not-P&lt;/code&gt;) such that there are no conditions for &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;not-P&lt;/code&gt; and the conjunction “&lt;code&gt;P&lt;/code&gt; and &lt;code&gt;not-P&lt;/code&gt;” is true.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After exploring a convergent infinite sums, we have a clearer understanding of identity paradoxes like &lt;code&gt;1 = 0.9999... and 1 != 0.9999...&lt;/code&gt;. If we express that proposition in the form of the paradox explained above, we would express that proposition as “if equality means referential indentiy, then 1 = 0.9999… and if equality means categorical identity, then 1 != 0.9999…”.&lt;/p&gt;

&lt;h4 id="section-1"&gt;3.1.3: 3 = 1&lt;/h4&gt;

&lt;p&gt;We could now return to the Trinity and see that the orthodox articulation of this article of faith maps well onto this understanding of the shape of an identity paradox. We might recast the Cappadocian Fathers’ articulation of the Trinity as a proposition in the form: “if identity is defined by essence, then God is one and if identity is defined by person, then God is three”.&lt;/p&gt;

&lt;h4 id="on-denotation"&gt;3.1.4: On Denotation&lt;/h4&gt;

&lt;p&gt;One consequence of this approach to paradoxical identity statements is an analytical approach similar to Russell’s definite descriptions. Where definite descriptions analyze the subject of a proposition into an existential proposition, this method analyzes the verb of a proposition into a meaning-centric conditional.&lt;/p&gt;

&lt;h3 id="wave-particle-duality-and-the-incarnation"&gt;3.2: Wave-Particle Duality and the Incarnation&lt;/h3&gt;

&lt;p&gt;For now, how about we leave this as an exercise for the reader? ;)&lt;/p&gt;

&lt;h2 id="ruminating"&gt;4: Ruminating&lt;/h2&gt;

&lt;p&gt;I cannot help but to feel that there is a value in pursuing a “credal logic”, in exploring the myriad ways that the propositions undergirding our faith illuminate ways of thinking that deepen “standard logic”. Moreover, it seems to me to be the case that these ways of thinking found in and through credal propositions align profoundly with various “secular” rationalities. All truth is indeed God’s truth. Finally, I am convinced that pushing against the boundaries of binary thinking is healthy, not only for the Christian, but for the human.&lt;/p&gt;

&lt;p&gt;However, I believe that in one respect the Christian has an opportunity the non-Christian does not. The non-Christian, it seems to me, can never move beyond the boundaries of binary thinking and retain “rational” thinking; they can push but never break. The Christian, however, may very well be able to be “rational” without binary thinking. Or, to put it more concretely, it might simply be the case that God is three and one, that God is a contradiction, that Christ is a contradiction. It might be the case that when the infinity that is the divine intersects the finite that is this reality, contradictions arise (and not mere paradoxes). And, it might be the case that through faith, through revelation, we have the ability to think “rationally” with a credal logic grounded on contradictions. It might be the case…&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>1 = 0.9999...</title>
    <link rel="alternate" href="http://blog.url.com/articles/1-0-9999/"/>
    <id>http://blog.url.com/articles/1-0-9999/</id>
    <published>2016-08-31T20:32:00-04:00</published>
    <updated>2016-09-01T00:12:18-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I saw a wonderful video recently on an odd fact in mathematics:&lt;/p&gt;

&lt;p&gt;&lt;a title="9.999... really is equal to 10" href="http://www.youtube.com/watch?v=SDtFBSjNmm0"&gt;&lt;img alt="9.999... really is equal to 10 -- Mathologer" src="http://img.youtube.com/vi/SDtFBSjNmm0/0.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the video (from a channel I would heartily recommend), the presenter offers a proof that &lt;code&gt;10 = 9.9999...&lt;/code&gt;. Here the ellipsis is quite important, as it communicates that the &lt;code&gt;9&lt;/code&gt;s continue on &lt;em&gt;forever&lt;/em&gt;, that is, to infinity. So, &lt;code&gt;9.9&lt;/code&gt; followed by an infinite number of &lt;code&gt;9&lt;/code&gt;s fully and simply equals &lt;code&gt;10&lt;/code&gt;. I want to explore the proof for this fact and then move on to explore how this example of an infinity touching the finite might elucidate our understanding of paradoxes.&lt;/p&gt;

&lt;p&gt;So, the video is concerned with &lt;code&gt;10 = 9.9999...&lt;/code&gt;, but I want to take it down a notch and think about &lt;code&gt;1 = 0.9999...&lt;/code&gt;. Borrowing the proof from the video, we can show that this identity statement is true relatively simply:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Define the infinitely-repeating decimal as a variable&lt;/span&gt;
k &lt;span class="o"&gt;=&lt;/span&gt; 0.9999...
&lt;span class="c"&gt;# Multiply both sides of the equation by 10&lt;/span&gt;
10k &lt;span class="o"&gt;=&lt;/span&gt; 9.9999...
&lt;span class="c"&gt;# Subtract the larger portions by the smaller portions&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;10k - k&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;9.9999... - 0.9999...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Since the infinitely-repeating decimals are both infinitely long,&lt;/span&gt;
&lt;span class="c"&gt;# subtraction cancels them out&lt;/span&gt;
9k &lt;span class="o"&gt;=&lt;/span&gt; 9
&lt;span class="c"&gt;# Divide both sides of the equation by 9&lt;/span&gt;
k &lt;span class="o"&gt;=&lt;/span&gt; 1
&lt;span class="c"&gt;# Replace k with our original identity&lt;/span&gt;
1 &lt;span class="o"&gt;=&lt;/span&gt; 0.9999...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, this proof may perhaps feel a bit fishy to you; you may think that we are mathematically cheating somewhere, but I can promise you that every single step is totally valid. And if every step is totally valid, then the conclusion is valid. But how can this be and what does this mean?&lt;/p&gt;

&lt;p&gt;This “problem”, this seeming incongruity, arises because we have a hard time grappling with infinity. To put it another way, we underestimate the weight of that ellipsis. So let’s dig into that ellipsis a bit. What does &lt;code&gt;0.9999...&lt;/code&gt; really mean, really represent? Well, we all remember from elementary school that decimals can also be represented by fractions, so let’s try to represent this decimal by a fraction. Unfortunately, there is no simple fraction to represent this number (like &lt;code&gt;0.3333...&lt;/code&gt; being representable by \(\frac{1}{3}\)). However, we can break this decimal down. We know that &lt;code&gt;0.9&lt;/code&gt; is simply \(\frac{9}{10}\), and &lt;code&gt;0.09&lt;/code&gt; is \(\frac{9}{100}\), and &lt;code&gt;0.009&lt;/code&gt; is \(\frac{9}{1000}\) and so on. We also know that &lt;code&gt;0.9 + 0.09 + 0.009 = 0.999&lt;/code&gt;. So, we could represent &lt;code&gt;0.9999...&lt;/code&gt; fractionally as:&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\frac{9}{10} + \frac{9}{100} + \frac{9}{1000} + \frac{9}{10000} + \ldots&lt;/script&gt;

&lt;p&gt;In mathematics, this is called an &lt;em&gt;infinite sum&lt;/em&gt; or an &lt;em&gt;infinite series&lt;/em&gt;; we are adding terms together to infinity. If you recall from your high school math class, you can represent an infinite sum with what is called &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Summation#Capital-sigma_notation"&gt;sigma notation&lt;/a&gt;&lt;/strong&gt;, and our infinite sum above can be represented as:&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\sum_{n=1}^{\infty} \frac{9}{10^n}&lt;/script&gt;

&lt;p&gt;This is simply a more concise way of writing the larger sum of the fractions above.&lt;/p&gt;

&lt;p&gt;Infinite sums are truly fascinating, and I hope to write more about them in the future, but for now I want to focus on one characteristic in particular. All infinite sums fit into one of two categories: &lt;em&gt;convergent&lt;/em&gt; or &lt;em&gt;divergent&lt;/em&gt;. Now, these are math-jargon terms that mean relatively simple things. An infinite sum is &lt;em&gt;convergent&lt;/em&gt; if it converges on a finite number. The language you might remember from your calculus class is that the &lt;em&gt;limit&lt;/em&gt; of the infinite sum &lt;em&gt;approaches&lt;/em&gt; a finite number. So, a &lt;em&gt;convergent infinite sum&lt;/em&gt; is an infinity that touches the finite. In contrast, a &lt;em&gt;divergent infinite sum&lt;/em&gt; is one that has no limit, one that grows to infinity.&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; A stock example is&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\sum_{n=1}^{\infty} \frac{1}{n}&lt;/script&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;1 + \frac{1}{2} + \frac{1}{3} + \frac{1}{4} + \ldots&lt;/script&gt;

&lt;p&gt;This is an infinite sum that approaches infinity, that is, it &lt;em&gt;diverges&lt;/em&gt;, it does not have a finite limit, it is unbounded.&lt;/p&gt;

&lt;p&gt;Returning to our infinite sum, we have enough context now to see that saying &lt;code&gt;1 = 0.9999...&lt;/code&gt; is really just one way of saying that the summation of \(\frac{9}{10^n}\) as &lt;code&gt;n&lt;/code&gt; goes from 1 to infinity is a convergent infinite sum that converges on 1.&lt;/p&gt;

&lt;p&gt;Ok, so that was a fun romp through one fascinating branch of mathematics, but all we really did was gain enough context to state the “odd fact” in more precise mathematical language. What’s the point? I stated at the beginning that I was fascinated by some of the general ramifications of infinity touching the finite. What we have with convergent infinite sums are well-studied mathematical examples of precisely this phenomenon. And I find them so fascinating because they offer glimpses at some of the issues we face when thinking about infinity. However, they also show us that we &lt;em&gt;can&lt;/em&gt; think well about infinity.&lt;/p&gt;

&lt;p&gt;The implication I’d like to explore a bit now is that paradoxes abound when the infinite colliding with the finite. On the one hand, it is quite clear that &lt;code&gt;1&lt;/code&gt; &lt;em&gt;does not equal&lt;/em&gt; &lt;code&gt;0.9999...&lt;/code&gt; for the simple reason that &lt;code&gt;1&lt;/code&gt; is a finite integer and &lt;code&gt;0.9999...&lt;/code&gt; is an infinite series. If &lt;em&gt;equality&lt;/em&gt; is &lt;em&gt;categorical identity&lt;/em&gt;, then &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0.9999...&lt;/code&gt; are not equal. On the other hand, this whole post has shown that &lt;code&gt;1&lt;/code&gt; &lt;em&gt;does equal&lt;/em&gt; &lt;code&gt;0.9999...&lt;/code&gt;. If &lt;em&gt;equality&lt;/em&gt; is &lt;em&gt;referrential identity&lt;/em&gt;, then &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0.9999...&lt;/code&gt; are equal. Now, note that I call this a paradox and not an antinomy. I want to define these two terms clearly and distinguish them. In my parlance, a &lt;strong&gt;paradox&lt;/strong&gt; is a &lt;em&gt;seeming&lt;/em&gt; contradiction, while an &lt;strong&gt;antinomy&lt;/strong&gt; is an &lt;em&gt;actual&lt;/em&gt; contradiction; that is, a paradox is resolvable and an antinomy is not.&lt;/p&gt;

&lt;p&gt;It is important, however, to note that resolving a paradox &lt;em&gt;does not&lt;/em&gt; mean that one side “wins” and the other “loses”, that one proposition is “right” and the other is “wrong”; instead, it means that we can rationally make sense of the difference between the two propositions. This is why I used the if-then statements above. It is not that one of the propositions is “right” or “wrong”, it is that we can enumerate the conditions under which each one would be “right” and the other “wrong”. An antinomy does not submit itself to such enumeration; we cannot articulate the conditions under which one side is “right” and the other is “wrong”. So, if I were to abstract out my definitions of &lt;em&gt;paradoxes&lt;/em&gt; and &lt;em&gt;antinomies&lt;/em&gt;, I would describe them thusly:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A paradox is composed of a proposition (&lt;code&gt;P&lt;/code&gt;) and its negation (&lt;code&gt;not-P&lt;/code&gt;) such that the conditionals “if &lt;code&gt;conditions for P&lt;/code&gt;, then &lt;code&gt;P&lt;/code&gt;” and “if &lt;code&gt;conditions for not-P&lt;/code&gt;, then &lt;code&gt;not-P&lt;/code&gt;” are both true, and thus the conjunction “if &lt;code&gt;conditions for P&lt;/code&gt;, then &lt;code&gt;P&lt;/code&gt; and if &lt;code&gt;conditions for not-P&lt;/code&gt;, then &lt;code&gt;not-P&lt;/code&gt;” is also true.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;An antinomy is composed of a proposition (&lt;code&gt;P&lt;/code&gt;) and its negation (&lt;code&gt;not-P&lt;/code&gt;) such that there are no conditions for &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;not-P&lt;/code&gt; and the conjunction “&lt;code&gt;P&lt;/code&gt; and &lt;code&gt;not-P&lt;/code&gt;” is true.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I believe that paradoxes run deep in our world. I have written earlier on my neologism &lt;a href="http://fractaledmind.com/articles/conjunctive-binarism"&gt;“conjunctive binarism”&lt;/a&gt;, a view that truth is probably most closely articulated as “the proposition &lt;code&gt;P&lt;/code&gt; and its contradiction &lt;code&gt;¬P&lt;/code&gt; are &lt;em&gt;kinda&lt;/em&gt; both true”. After exploring a convergent infinite sums, I feel that this definition of paradoxes more properly expresses my view of what this “kinda” maps to. So, &lt;code&gt;1 = 0.9999... and 1 != 0.9999...&lt;/code&gt; is a “conjunctive binary”. If we express it in the form of the paradox explained above, we would express that proposition as “if equality means referential indentiy, then 1 = 0.9999… and if equality means categorical identity, then 1 != 0.9999…”. Going one step further, I would now define a conjunctive binary as a compound proposition of that form (“if &lt;code&gt;conditions for P&lt;/code&gt;, then &lt;code&gt;P&lt;/code&gt; and if &lt;code&gt;conditions for not-P&lt;/code&gt;, then &lt;code&gt;not-P&lt;/code&gt;”).&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:2"&gt;

      &lt;p&gt;Well, that is not properly technically true, as there are some divergent series that do not tend to infinity, but are also clearly not convergent. Take &lt;code&gt;1 − 1 + 1 − 1 + ⋯&lt;/code&gt;. This is the so-called &lt;a href="https://en.wikipedia.org/wiki/Grandi%27s_series"&gt;Grandi’s series&lt;/a&gt;, and if you attempt to resolve it using partial sums, you will quickly see that the value ocillates between &lt;code&gt;1&lt;/code&gt; (when the number of terms in the partial sum is odd) and &lt;code&gt;0&lt;/code&gt; (when the number of terms in the partial sum is even). However, modern mathematics defines its sum as \(\frac{1}{2}\), which is a finite term (thus it would appear to “converge” on \(\frac{1}{2}\)). Thus, this series would appear to have two conclusions:&lt;/p&gt;

      &lt;ol&gt;
        &lt;li&gt;The series 1 − 1 + 1 − 1 + ⋯ has no sum.&lt;/li&gt;
        &lt;li&gt;Its sum should be \(\frac{1}{2}\).&lt;/li&gt;
      &lt;/ol&gt;

      &lt;p&gt;I find this infinite series fascinating, and may very well write it about at some point as well. &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;There is a branch of epistemology that believes such conjections do exist and calls them “dialetheias”. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Portrait of Pain</title>
    <link rel="alternate" href="http://blog.url.com/articles/portrait-of-pain/"/>
    <id>http://blog.url.com/articles/portrait-of-pain/</id>
    <published>2016-08-18T20:00:00-04:00</published>
    <updated>2016-08-18T23:06:16-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;She swipes from right to left, the red square appearing and then disappearing, along with the words. Five minutes later, caught initially in my peripheral vision, the red square again.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why did you delete those message tonight?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;What do you mean?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;You got a couple messages, and after reading them, you deleted the thread. I’m just curious why.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don’t know what you’re talking about.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I wasn’t paying close attention, but I swear I saw the read delete and you delete the thread.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It must have been something else. I didn’t delete any message threads.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the first time she lies to my face and I know it. I learn she lies frequently. Past, present, and future are littered. But today is the one time I know she is lying. It’s confusing more than painful. The pain comes later.&lt;/p&gt;

&lt;p&gt;It’s a double-sided pain. First, the sting; she … lies … to me. Subject, verb, object. She’s an active force, I’m an object. And I feel like an object. Do I not warrant the truth? Am I not person enough that she can look into my eyes and tell me the lie? I am less then–I am inanimate, I am the object of her verb. After the sting comes the ache. A second pain and a different pain. Here I am the subject. I believed. Not this one time, but every other time. And even this one time, I almost believed. She doesn’t lie; people don’t lie. Not to your face, not to your eyes. Do eyes lie? Did the red square lie? The pain of foolishness, of naivete. It is a deep, aching pain. It hurts so deeply because it ought not to be true. I want to be that fool; I want the world to allow it. Look me in the eye and tell me the truth. Let me believe you; let me see you.&lt;/p&gt;

&lt;p&gt;She lies. Then the sting. Now the ache.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>"Oft evil will shall evil mar" - J.R.R. Tolkien (via Theoden)</title>
    <link rel="alternate" href="http://blog.url.com/jots/201604051529/"/>
    <id>http://blog.url.com/jots/201604051529/</id>
    <published>2016-04-05T11:29:00-04:00</published>
    <updated>2016-12-17T22:50:41-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Elevator</title>
    <link rel="alternate" href="http://blog.url.com/articles/elevator/"/>
    <id>http://blog.url.com/articles/elevator/</id>
    <published>2016-04-03T20:00:00-04:00</published>
    <updated>2016-08-18T22:46:41-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;You step forward, press the button, and begin to wait. Dingy carpet in a worn-down lobby, a space almost asking you to leave it. Elevator crawls down the walls; is it fighting back? Even so, button pressed, future sealed.&lt;/p&gt;

&lt;p&gt;Ding. It arrives. Future becomes present. Doors open. Gold and chrome and shining things. You enter. Perhaps slow at first, perhaps not. Doors close. Buttons arrayed in simple lines belie the complexity of choice. Each button a world. Present becomes future. You hesitate; or do you? Button pressed, future sealed. The elevator flies–a new floor, a better world.&lt;/p&gt;

&lt;p&gt;Ding. Doors open. Clean carpet and soft lights, inviting. You step out. Elevator closes and returns, it’s task complete.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cleaning up Git repos</title>
    <link rel="alternate" href="http://blog.url.com/articles/cleaning-up-git-repos/"/>
    <id>http://blog.url.com/articles/cleaning-up-git-repos/</id>
    <published>2016-03-14T20:00:00-04:00</published>
    <updated>2016-03-14T23:17:31-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h3 id="deleting-old-remote-branches"&gt;Deleting old remote branches&lt;/h3&gt;

&lt;p&gt;If you have a repository that’s been around for long enough, you probably have a fair number of “stray branches”: deadends, false starts, orphans, etc. Let’s clean up all of the remote branches that haven’t been touched in the last 6 months:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;for &lt;/span&gt;k &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;git branch -r | grep -E -v &lt;span class="s1"&gt;'&amp;gt;|master|prod'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;; &lt;span class="k"&gt;do
  if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git log -1 --since&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'6 months ago'&lt;/span&gt; -s &lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;git push origin --delete &lt;span class="k"&gt;$(&lt;/span&gt;cut -d&lt;span class="s2"&gt;"/"&lt;/span&gt; -f2- &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;;
  &lt;span class="k"&gt;fi
done&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Walking through the various steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;git branch -r&lt;/code&gt; lists all remote branches&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;grep -E -v '&amp;gt;|master|prod'&lt;/code&gt; filters that list of branches, removing any that have &lt;code&gt;&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;origin/HEAD -&amp;gt; origin/master&lt;/code&gt;), &lt;code&gt;master&lt;/code&gt; (e.g. &lt;code&gt;origin/master&lt;/code&gt;), or &lt;code&gt;prod&lt;/code&gt; (e.g. &lt;code&gt;origin/prod&lt;/code&gt;) in their names.&lt;/li&gt;
  &lt;li&gt;Iterating over each of these branches (as &lt;code&gt;$k&lt;/code&gt;), &lt;code&gt;git log -1 --since='6 months ago' -s $k&lt;/code&gt; checks if the branch has been commited to in the last 6 months (you could obviously set the timeframe to whatever suited your needs).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;cut -d"/" -f2- &amp;lt;&amp;lt;&amp;lt; "$k")&lt;/code&gt; trims a branch string like &lt;code&gt;origin/feature/some_branch&lt;/code&gt; to a string like &lt;code&gt;feature/some_branch&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Finally &lt;code&gt;git push origin --delete $(...)&lt;/code&gt; removes that branch from the remote repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="deleting-already-merged-remote-branches"&gt;Deleting already-merged remote branches&lt;/h3&gt;

&lt;p&gt;You may also find yourself needing to remove remote branches that have also already been merged to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;git branch -r --merged origin/master
| grep -E -v &lt;span class="s1"&gt;'&amp;gt;|master|prod'&lt;/span&gt;
| cut -d&lt;span class="s2"&gt;"/"&lt;/span&gt; -f2-
| xargs git push origin --delete
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Here we see many of the same basic sub-commands we used before. There is, however, one note-worthy difference. We specify the specific branch we want to check whether the remote branches have been merged into by specifying &lt;code&gt;origin/master&lt;/code&gt;. This ensures that only remote branches that have been merged into remote &lt;code&gt;master&lt;/code&gt; are passed to the next sub-command.&lt;/p&gt;

&lt;h3 id="deleting-already-merged-local-branches"&gt;Deleting already-merged local branches&lt;/h3&gt;

&lt;p&gt;Finally, if you need to clean up your local repository, you can prune the local branches that have already been merged into &lt;code&gt;master&lt;/code&gt; in a similar way:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;git branch -d &lt;span class="k"&gt;$(&lt;/span&gt;git branch --merged master | grep -E -v &lt;span class="s1"&gt;'\*|master|prod'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;A word of warning though: have local copies of these branches somewhere, just in case you delete a branch you want back at some point ;)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The best cure for the past is the present</title>
    <link rel="alternate" href="http://blog.url.com/jots/201603111233/"/>
    <id>http://blog.url.com/jots/201603111233/</id>
    <published>2016-03-11T07:33:00-05:00</published>
    <updated>2016-12-17T22:42:11-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Everything a word, not everything a meaning</title>
    <link rel="alternate" href="http://blog.url.com/jots/201603111232/"/>
    <id>http://blog.url.com/jots/201603111232/</id>
    <published>2016-03-11T07:32:00-05:00</published>
    <updated>2016-12-17T22:42:24-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>I, who wear the horns</title>
    <link rel="alternate" href="http://blog.url.com/jots/201603072312/"/>
    <id>http://blog.url.com/jots/201603072312/</id>
    <published>2016-03-07T18:12:00-05:00</published>
    <updated>2016-12-17T22:42:39-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Who am I that You are mindful of me?</title>
    <link rel="alternate" href="http://blog.url.com/jots/201603061800/"/>
    <id>http://blog.url.com/jots/201603061800/</id>
    <published>2016-03-06T13:00:00-05:00</published>
    <updated>2016-12-17T22:42:56-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Forever the mind races; forever the body reacts. And life keeps spinning all around me.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201603052310/"/>
    <id>http://blog.url.com/jots/201603052310/</id>
    <published>2016-03-05T18:10:00-05:00</published>
    <updated>2016-12-17T22:43:11-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>In brokenness we find a chaotic refracted beauty that immediately reveals itself to be _real_ and all other beauty to be some mathematical abstraction, some too clean facsimile.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602231006/"/>
    <id>http://blog.url.com/jots/201602231006/</id>
    <published>2016-02-23T05:06:00-05:00</published>
    <updated>2016-12-17T22:43:27-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>You, Made and Unmade</title>
    <link rel="alternate" href="http://blog.url.com/articles/you-made-and-unmade/"/>
    <id>http://blog.url.com/articles/you-made-and-unmade/</id>
    <published>2016-02-21T19:00:00-05:00</published>
    <updated>2016-08-18T22:42:53-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;What is time? Time is commonly dissected into three parts: past, present, and future. The past is done, it is set; the future is yet to be done, it is possibility. But what of the present? The present is, in simplest form, the future being made the past. Yet if the present is nothing more than the future being made the past, why is it “the present”, this thing on the same level as the past and future? Well, I think the answer is masked by the passive voice, “being made” by whom? By you. The present is the future being made the past by you.&lt;/p&gt;

&lt;p&gt;How do you convert the future into the past? What is involved? Again, in simple form, there is you and there are outside stimuli, outside signals. There is you and not-you, which is outside of you. But the two spheres are not totally separate, as you receive many of these external signs and signals; you, via your five senses, have some connection to the not-you. And, in response to those outside signs and signals, you either act or don’t act, you think, you respond. You convert the future into the past by reacting to signals from the not-you.&lt;/p&gt;

&lt;p&gt;So, what is time? Time is the combination of the not-you things you have done, the not-you things you have yet to do, and the not-you things you are doing. Time is not-you, made and unmade, and you, making. But what is not-you without you? Nothing. Time is you, becoming; time is you, made and unmade.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Conjunctive Binarism</title>
    <link rel="alternate" href="http://blog.url.com/articles/conjunctive-binarism/"/>
    <id>http://blog.url.com/articles/conjunctive-binarism/</id>
    <published>2016-02-20T19:00:00-05:00</published>
    <updated>2016-12-02T23:08:27-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;Epistemology has fascinated me far longer than I have known what that word means. Built upon the Greek words for “knowledge” (ἐπιστήμη) and “study” (λόγος), epistemology means the study of knowledge. This can (and does) encompass a wide variety of specific ideas: the nature of knowledge, the acquisition of knowledge, the difference between knowledge and opinion, etc. It is a field of inquiry that aims to help us answer questions like “How do I know something?”, “What does it mean to know something?”, “Are some things unknowable?”, etc. Now, before we go too far down this (admittedly intriguing) rabbit-hole, I had said that I wanted to consider alethiology, not epistemology. While epistemology is the study of knowledge, alethiology is the study of truth. The two inquiries are cousins; indeed, one can barely call alethiology a field of inquiry &lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; and is often considered a sub-field of epistemology. The standard definition of knowledge holds that knowledge equals justified true belief &lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. In debating the finer points of that definition, academics must then define their terms. What does it mean for a belief to be justified? What does it mean for a belief to be true? What is truth? This context is, I believe, important as it helps to situate the kinds of questions I am interested in pursuing within their general philosophical context. I want to probe around the edges of the question “What is truth?”, which, as we see, has strong implications on the nature of knowledge.&lt;/p&gt;

&lt;h2 id="a-primer-on-propositional-logic"&gt;A Primer on Propositional Logic&lt;/h2&gt;

&lt;p&gt;When considering the nature of truth, it is common to think about &lt;a href="http://www.iep.utm.edu/prop-log/#H1"&gt;propositions&lt;/a&gt;. Propositions are simply declarative sentences; they are statements. In most high school English courses we learn that sentences that end with a period (&lt;code&gt;.&lt;/code&gt;) are declarative sentences (&lt;code&gt;?&lt;/code&gt; = interrogatives, &lt;code&gt;!&lt;/code&gt; = interjections). So, that previous sentence was a declarative sentence. So was that one! Ah, now we have an interjection. Well, I could play this game all night (really, I’m easily amused), but the point ought to be clear: propositions == statements == declarative sentences. They are forms of communication that say something is the case. A key characteristic of propositions is that they are either true or false. When I state that something is the case, it either is the case or it isn’t. Either most high school English classes &lt;em&gt;do&lt;/em&gt; teach that sentences ending in a period are declarative sentences, or they don’t. Either that previous sentence is a declarative sentence, or it isn’t. Now, one important thing to note immediately is that we need not be able to determine whether a proposition is true or false; this has no bearing on its “propositionness”. The statement “God exists” is a proposition, it is either true or false; however, we have no way of determining whether it is true or false (regardless of what anyone has ever told you). So, propositions are statements that something is the case that are either true or false, but we need not determine whether they are actually true or actually false for them to be propositions.&lt;/p&gt;

&lt;p&gt;In academic logic, propositions are generally referred to using the symbolic shorthand &lt;code&gt;P&lt;/code&gt;. This is the generic proposition, the Ur-proposition, in computer programming terms we might say it is the proposition type. Like algebraic variables, we can use any uppercase letter to designate other propositions. So, for example, if I needed to talk about three propositions, I could use &lt;code&gt;P&lt;/code&gt;, &lt;code&gt;Q&lt;/code&gt;, and &lt;code&gt;R&lt;/code&gt; (these are the common letters used in academic circles, for whatever the reasons). Now, when dealing with multiple propositions there are two key operators that we will use&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" class="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;: &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt;. Perhaps these symbols seem a bit foreign, but I promise that their concepts are utterly simple. &lt;code&gt;&amp;amp;&lt;/code&gt; is the “and” operator; it combines two propositions to make one new proposition, called the “conjunction” of the two propositions. &lt;code&gt;v&lt;/code&gt; is the “or” operator; it also combines two propositions to make one new proposition, called the “disjunction” of the two propositions. In high school English we would say that “and” and “or” are conjunctions, and just like in English class we can take two declarative sentences and combine them with a conjunction to make a new sentence. Ah, that sentence was a perfect example (almost as if I planned it ;)). So, symbolically we could write &lt;code&gt;P &amp;amp; Q =&amp;gt; R&lt;/code&gt; and &lt;code&gt;P v Q =&amp;gt; S&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ok, so propositions can be combined to make new propositions in two different ways, but what precisely is the difference? Well, I’m interested in truth, so you might have already guessed the difference. The difference between &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;S&lt;/code&gt; from above is what is required for them to be true. When using the &lt;code&gt;&amp;amp;&lt;/code&gt; operator to combine &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;Q&lt;/code&gt;, the conjunction &lt;code&gt;R&lt;/code&gt; is only true when &lt;strong&gt;both&lt;/strong&gt; &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;Q&lt;/code&gt; are themselves true. If either &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;Q&lt;/code&gt; is false, then &lt;code&gt;R&lt;/code&gt; is also false. When using the &lt;code&gt;v&lt;/code&gt; operator, the disjunction &lt;code&gt;S&lt;/code&gt; is true if either &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;Q&lt;/code&gt; is true. These relationships are most often considered using a “truth table”. Consider the following, which lays out all of the possible scenarios for the &lt;code&gt;&amp;amp;&lt;/code&gt; operator:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;(P &amp;amp; Q)&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here we can clearly see that the expression &lt;code&gt;(P &amp;amp; Q)&lt;/code&gt; is only true whenever both the proposition &lt;code&gt;P&lt;/code&gt; and the proposition &lt;code&gt;Q&lt;/code&gt; are true. This is contrasted with the &lt;code&gt;v&lt;/code&gt; operator:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;(P v Q)&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here the relationship is almost the exact opposite. The expression &lt;code&gt;(P v Q)&lt;/code&gt; is only &lt;em&gt;false&lt;/em&gt; whenever both the proposition &lt;code&gt;P&lt;/code&gt; and the proposition &lt;code&gt;Q&lt;/code&gt; are false. In every other instance the expression &lt;code&gt;(P v Q)&lt;/code&gt; is true, as one of the two constituent propositions is true.&lt;/p&gt;

&lt;p&gt;These two operators handle how the truth values relate when combining two or more propositions, but there is one last operator we need to discuss, which is used on single propositions. The “negation” operator &lt;code&gt;¬&lt;/code&gt; is used, you guessed it, to negate propositions. The truth table for this operator is pretty straight forward:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;¬P&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The negation operator basically just “flips” the truth value of the proposition.&lt;/p&gt;

&lt;p&gt;With all of that now settled, we can finally turn to the heart of this excursion.&lt;/p&gt;

&lt;h2 id="p--p"&gt;&lt;code&gt;P &amp;amp; ¬P&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Now, I will readily admit that “conjunctive binarism” is a phrase that I totally made up &lt;sup id="fnref:4"&gt;&lt;a href="#fn:4" class="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;, but I was trying to find a phrase that accurately captured the idea I had in my head, which I was initially conceiving of in purely symbolic terms: &lt;code&gt;P &amp;amp; ¬P&lt;/code&gt; &lt;sup id="fnref:BB"&gt;&lt;a href="#fn:BB" class="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;. In many ways I find the symbolic phrase far clearer than the English phrase “conjunctive binarism”, but hopefully my English phrase at least accurately describes precisely what I’m interested in.&lt;/p&gt;

&lt;p&gt;I said at the beginning that I was interested in the question “What is truth?”, yet now that we have a firmer grasp on what precisely “conjunctive binarism” means, I’m sure that you, my reader, are a bit worried. And, I would say, rightfully so. Here is the truth table for the conjunctive binary:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;¬P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;(P &amp;amp; ¬P)&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Well there you have it, the conjunctive binary &lt;code&gt;(P &amp;amp; ¬P)&lt;/code&gt; &lt;em&gt;can never be true&lt;/em&gt; &lt;sup id="fnref:AA"&gt;&lt;a href="#fn:AA" class="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;. In many ways the the simplest, most intuitive answer to the question of “What is truth?” is “I don’t know, but it certainly isn’t &lt;code&gt;(P &amp;amp; ¬P)&lt;/code&gt;”. In fact, Aristotle himself states this directly in his &lt;em&gt;Metaphysics&lt;/em&gt;&lt;sup id="fnref:5"&gt;&lt;a href="#fn:5" class="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The most certain of all basic principles is that contradictory propositions are not true simultaneously. (1011b13-14)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This idea, that a proposition (&lt;code&gt;P&lt;/code&gt;) and its contradiction (&lt;code&gt;¬P&lt;/code&gt;) cannot both be true in the same sense at the same time, is so fundamental to human logical thought that it is a &lt;em&gt;law&lt;/em&gt;, the Law of Non-Contradiction.&lt;/p&gt;

&lt;p&gt;Now, I am not quite so bold as to suggest that the Law of Non-Contradiction is wrong; however, I would like to press it a bit. The caveats in the definition of the LNC are clearly important. I’m sure we can all think of examples where a proposition (&lt;code&gt;P&lt;/code&gt;) and its contradiction (&lt;code&gt;¬P&lt;/code&gt;) are both true, just in different senses. As one contrived examples, the proposition “Citi is a bank” and its contradiction “Citi is not a bank” would both be true if “bank” in the first case meant “a financial institution” and “bank” in the second case meant “the side of a river”. Likewise, if time is not an issue, we can certainly conceive of an example where some proposition is true and then later its contradiction is true. Taking the same contrived example, right now the proposition “Citi is a bank” is true, but if in the future they were to go out of business, the contradiction “Citi is not a bank” would then be true.&lt;/p&gt;

&lt;p&gt;What I would like to suggest is that while the Law of Non-Contradiction is strictly true, it is not practically all that helpful when confronting the question “What is truth?”. Specifically, I would argue (and hopefully I will at some point soon) that &lt;em&gt;in the everyday world&lt;/em&gt; one of those two caveats is very likely to be true. That is to say, I contend and my definition of Conjunctive Binarism states that a proposition (&lt;code&gt;P&lt;/code&gt;) and its contradiction (&lt;code&gt;¬P&lt;/code&gt;) are likely both true either in different senses or at different times. More simply, I argue that &lt;strong&gt;&lt;code&gt;(P &amp;amp; ¬P)&lt;/code&gt; will likely be true &lt;em&gt;in some way&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If I could create my own logical symbol, I would create the “fuzzy” symbol &lt;code&gt;~&lt;/code&gt;, which would denote the existence of one or more of these caveats. In my logical lexicon the “fuzzy” symbol &lt;code&gt;~&lt;/code&gt; generally maps to the English word “kinda”. So, in strictest form Conjunctive Binarism would be expressed symbolically as &lt;code&gt;~(P &amp;amp; ¬P)&lt;/code&gt;, or even more strictly as &lt;code&gt;(~P ~&amp;amp; ~¬P)&lt;/code&gt;. In plain English we might say “the proposition &lt;code&gt;P&lt;/code&gt; and its contradiction &lt;code&gt;¬P&lt;/code&gt; are kinda both true”.&lt;/p&gt;

&lt;h2 id="fin"&gt;Fin&lt;/h2&gt;

&lt;p&gt;I plan, in later posts, to explore this thesis from various angles, to consider some of its consequences, and to argue for its correctness. For now, however, I leave it at this: my answer to the question “What is truth?” would be, in a more rigorous and philosophic way than this sounds, “Kinda everything”.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;The term “alethiology” is fairly rare in academia; for example, the ten-volume &lt;a href="https://en.wikipedia.org/wiki/Routledge_Encyclopedia_of_Philosophy"&gt;Routledge Encyclopedia of Philosophy&lt;/a&gt; mentions it only once. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;For those readers of a more academic bent, &lt;a href="http://plato.stanford.edu/entries/knowledge-analysis/#KnoJusTruBel"&gt;this article&lt;/a&gt; from the Stanford Encyclopedia of Philosophy provides a robust explanation of this analysis of knowledge, and indeed of knowledge in general. &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:3"&gt;

      &lt;p&gt;There are, in fact, many other logical operators beside these two:&lt;/p&gt;

      &lt;table class="tables"&gt;
        &lt;thead&gt;
          &lt;tr&gt;
            &lt;th style="text-align: center"&gt;Sign&lt;/th&gt;
            &lt;th style="text-align: center"&gt;Operator&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“and”&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“or”&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;→&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“if… then…”&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;↔&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“if and only if”&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;¬&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“not”&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;

      &lt;p&gt;See &lt;a href="http://www.iep.utm.edu/prop-log/#SH3a"&gt;here&lt;/a&gt; for a more in-depth analysis of them all. &lt;a href="#fnref:3" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:4"&gt;
      &lt;p&gt;A Google search for the exact phrase “conjunctive binarism” returns &lt;a href="https://www.google.com/search?q=%22conjunctive+binarism%22"&gt;no results&lt;/a&gt;. &lt;a href="#fnref:4" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:BB"&gt;
      &lt;p&gt;This construction of the constructive binarism marks it as a close kin of &lt;a href="http://plato.stanford.edu/entries/dialetheism/"&gt;dialetheism&lt;/a&gt;, a newer philosophical position that holds that dialetheias do in fact exist, and a dialetheia is simply a sentence, &lt;code&gt;A&lt;/code&gt;, such that both it and its negation, &lt;code&gt;¬A&lt;/code&gt;, are true; that is, &lt;code&gt;A &amp;amp; ¬A&lt;/code&gt;. &lt;a href="#fnref:BB" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:AA"&gt;

      &lt;p&gt;This is in direct contrast with the disjunctive binary, which is always true.&lt;/p&gt;

      &lt;table class="tables"&gt;
        &lt;thead&gt;
          &lt;tr&gt;
            &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
            &lt;th style="text-align: center"&gt;&lt;code&gt;¬P&lt;/code&gt;&lt;/th&gt;
            &lt;th style="text-align: center"&gt;&lt;code&gt;(P v ¬P)&lt;/code&gt;&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;T&lt;/td&gt;
            &lt;td style="text-align: center"&gt;F&lt;/td&gt;
            &lt;td style="text-align: center"&gt;T&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;F&lt;/td&gt;
            &lt;td style="text-align: center"&gt;T&lt;/td&gt;
            &lt;td style="text-align: center"&gt;T&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;

      &lt;p&gt;In fact, the disjunctive binary, by definition, includes &lt;em&gt;all possible states&lt;/em&gt;, as any state would either be &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;¬P&lt;/code&gt;. Since &lt;code&gt;¬P&lt;/code&gt; is simply the negation of &lt;code&gt;P&lt;/code&gt;, the disjunction offers a logically exhaustive set of states. &lt;a href="#fnref:AA" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:5"&gt;
      &lt;p&gt;&lt;a href="http://plato.stanford.edu/entries/aristotle-noncontradiction/"&gt;This article&lt;/a&gt; from the Stanford Encyclopedia of Philosophy provides a rich analysis of Aristotle on the Law of Non-Contradiction. &lt;a href="#fnref:5" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>I am now swimming against the grain.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602201430/"/>
    <id>http://blog.url.com/jots/201602201430/</id>
    <published>2016-02-20T09:30:00-05:00</published>
    <updated>2016-12-17T22:43:44-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>The greatest lie the world ever told was that _you_ deserve to be loved.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602201248/"/>
    <id>http://blog.url.com/jots/201602201248/</id>
    <published>2016-02-20T07:48:00-05:00</published>
    <updated>2016-12-17T22:44:03-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>"You are more powerful than you think you are, act accordingly." - Seth Godin</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602131253/"/>
    <id>http://blog.url.com/jots/201602131253/</id>
    <published>2016-02-13T07:53:00-05:00</published>
    <updated>2016-12-17T22:50:47-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>On Lent and Marriage</title>
    <link rel="alternate" href="http://blog.url.com/articles/on-lent-and-marriage/"/>
    <id>http://blog.url.com/articles/on-lent-and-marriage/</id>
    <published>2016-02-10T22:16:00-05:00</published>
    <updated>2016-02-12T10:52:34-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;Lent is a time of fasting. We deny ourselves an earthly good in order to, hopefully, receive a heavenly good. We fast to clear our minds and reset our hearts, to find balance with ourself and with God. Lent isn’t easy; it isn’t meant to be easy. It isn’t easy to say no, to turn your mind and heart toward God every time your flesh desires that earthly good you’ve denied yourself. It isn’t easy to enact your will–to make a commitment and stand by it– especially when you have committed yourself to a fasting.&lt;/p&gt;

&lt;p&gt;This Lenten season I am giving up my marriage. I am fasting from my spouse. Let me be clear, I am not ending my marriage; in fact, I pray that this season will deepen and strengthen my marriage. However, for these 40 days my wife and I will be separated, in the full sense of that word. Let me attempt to explain why and how I hope to use this time to better my life, my faith, and my marriage.&lt;/p&gt;

&lt;p&gt;Marriage is hard. I’d go so far as to say it is one of the hardest things a human person could endeavor to do. And I don’t just mean “marriage” in its simple everyday sense–two people who live together, are monogamous, and form a family unit. I mean &lt;em&gt;marriage&lt;/em&gt;; I mean the commitment and the act of grafting your soul to another soul; I mean the pursuit of unconditional love; I mean the coming together of two people to form &lt;em&gt;one&lt;/em&gt;. &lt;strong&gt;That&lt;/strong&gt; kind of marriage is &lt;em&gt;hard&lt;/em&gt;. But, I believe that kind of marriage is the most rewarding. That’s the kind of marriage worth fighting for.&lt;/p&gt;

&lt;p&gt;Marriage is hard, and for me, that means specifically that being a husband is hard. It’s hard in ways I cannot even fathom. It’s hard in ways I didn’t fathom when I made my vows. It’s hard in ways I could never hope to communicate to you. It is &lt;em&gt;hard&lt;/em&gt;. And, to be honest, I’ve failed at it time and time again. I would hope that in the simply everyday sense, I’ve been a pretty good husband. I would hope that the world would judge me at least a mediocre husband. But I’m not sure it would. That’s of little matter, however, because in the deep and true sense, I &lt;em&gt;know&lt;/em&gt; that I have failed as a husband. There is no point in listing out my failures here. First, because I do truly believe that all sins are equal, but our minds are built to rank things. I also won’t list out my particular failings because they are &lt;em&gt;mine&lt;/em&gt;. I own them. I am responsible for them. Nothing I say and nothing I do will change that. I confess them to God and make amends to man. I take steps to Pharisaism when I confess them to man and make amends to God.&lt;/p&gt;

&lt;p&gt;Marriage is hard and I am a failed husband. In my life, at this moment, those two facts have now generated a third fact: my wife doesn’t love me. Again, I don’t mean “love” in a trite sense; we’re talking about deep, meaningful love. And love like that isn’t easy. This form of deep and meaningful love comes when you meet another person, another soul, and you &lt;em&gt;see&lt;/em&gt; them. They grant you the ability to truly &lt;em&gt;see&lt;/em&gt; them. And when you see them, when you meet them, when you &lt;em&gt;know&lt;/em&gt; them, your soul changes. Your soul becomes a little bit more like them. You graft them into your soul and it changes you. Some part of them now &lt;em&gt;is&lt;/em&gt; you, is a part of you. This kind of love is hard. It is hard to open yourself up to another person to allow them to love you like this. It is hard to receive another person if they have opened themselves up to you. It is hard to allow yourself to change because of another person. This kind of love is hard. My wife still likes me, my wife is still fond of me, we are still friends; but my wife no longer &lt;em&gt;loves&lt;/em&gt; me.&lt;/p&gt;

&lt;p&gt;Now, let’s briefly set two things straight. First, I don’t say this to gain your sympathy. 7 billion people on this planet do not love me in this way, do not love you in this way. No one has a right to this kind of love. It is rare and it is given freely. It is never earned and never taken. Marriage is hard and I am failed husband; I have no right to this from her. Second, she is under no obligation to give it to me. She is not “wrong” for not loving me. She simply doesn’t. This is not a matter to be judged or adjudicated; this simply is. We are responsible for our thoughts and our actions, not for our state. Now, our state will factor strongly in our thoughts and actions, but that is beside the point. I am not responsible for being a male, but I am responsible for how I think and how I act &lt;em&gt;as&lt;/em&gt; a male. I am not responsible for being a husband, but I am responsible for how I think and how I act &lt;em&gt;as&lt;/em&gt; a husband. The kind of love we are talking about is so deep, so low, that it is a state. I am not responsible for being a male husband who loves his wife. I simply am that. What I am responsible for is how I live my life &lt;em&gt;as&lt;/em&gt; such a person. And as a male husband who loves his wife, I am responsible for my failings as well as for my successes. And as a female wife who does not love her husband, my wife is responsible for her failings and her successes. But in both cases, the state of our love stands outside of the arena of responsibility. And it stands outside this arena quite simply because we are not in control of it. I have no more control over whether or not I love my wife as she does of whether or not she doesn’t. Actions and thoughts affect our state, but they don’t control it. Certainly, my thoughts and my actions over the course of our marriage have some causal relationship to her current state, but I didn’t &lt;em&gt;cause&lt;/em&gt; her to not love me. And certainly her thoughts and actions have some relation to her current state, but again those things did not &lt;em&gt;cause&lt;/em&gt; them. There is no simple &lt;em&gt;cause&lt;/em&gt; to low-lying states of mind and heart.&lt;/p&gt;

&lt;p&gt;So, marriage is hard. I am a failed husband. My wife doesn’t love me. These are facts; these are states. This is the spilt milk not worth crying over (though I certainly have cried, about all three facts). The real question, the real challenge, the real point of this post is, what next? How do I respond? How do I think and act next? And my answers to this question are why I am giving up my marriage for Lent.&lt;/p&gt;

&lt;p&gt;I am a computer programmer; I often like to break down complex problems by trying to isolate the constants and the variables. Constants are things that simply &lt;em&gt;are&lt;/em&gt;, variables are things that can, have, and/or will change. So, we might say that “marriage is hard” is a constant. That is like a definition of marriage: it is hard. We could also say that “I am a failed husband” is a constant. It is a statement about the past, it cannot change. Likewise “my wife doesn’t love me” is a constant, insofar as it is simply a statement about the present moment. I would say that “my wife’s love” is a variable; that can and has changed. However, the statement “my wife doesn’t love me” is a constant; it simply is true right now. So, are there any other constants worth taking into consideration when thinking about what to do next. I believe so. First, I believe that I &lt;em&gt;ought&lt;/em&gt; to continue to love my wife; this is an ethical constant. I believe that full and deep love is unconditional; this is a definitional constant. I believe that all human beings have the authority and autonomy to exercise their own wills; this is an ontological constant. I also believe that God exists and loves &lt;em&gt;me&lt;/em&gt;; this is a faith constant. So, when I start to take all of these constants into consideration, it makes how I should respond to all of the variables a bit clearer. But before we get there, let’s take a moment to think through some of the things that are variables.&lt;/p&gt;

&lt;p&gt;My wife loving me is a variable; it could change in the future. My wife being my wife could change. Me loving my wife is variable; that could change. Me being a failed husband, that could change (not in a true ontological sense, but in a true practical sense). These are the key variables in this situation. However, in life, &lt;em&gt;most things are variables&lt;/em&gt;. Life is flux; things change. And few things are as dangerous to living life well as treating variables as constants (another danger: treating constants as variables). This is, to my mind, the main reason not to “cry over spilt milk”; milk being spilt is a variable. You can clean up the milk. You can buy new milk. You can take care not to spill the new milk. Cry about constants.&lt;/p&gt;

&lt;p&gt;So, I feel like I have some sense of what key things are constants and what things are variables. How does that affect my thinking and my action? If true and deep love is unconditional, and if I ought to continue to love my wife, then I ought to love my wife unconditionally. Now, how do I do that? As I hope you sense, this is far easier said than done. I have, in fact, thought this for years. I have believed that I &lt;em&gt;ought&lt;/em&gt; to love my wife unconditionally as long as we have been married. I can say without a shadow of a doubt that I have &lt;em&gt;never&lt;/em&gt; loved her unconditionally. My love always has conditions. I frequently don’t see them in the present, but they always come out, creep to the surface. One of the things I have been wrestling with lately is whether or not loving someone unconditionally was even &lt;em&gt;possible&lt;/em&gt;. Am I barking up the wrong tree here? Is this a fool’s errand? My answer today is, no. It &lt;em&gt;is&lt;/em&gt; possible to love someone unconditionally, and I really only have one piece of evidence to support that. I believe that we can love someone unconditionally because we love &lt;em&gt;ourselves&lt;/em&gt; unconditionally. The more I think about it, the clearer it becomes. I fully believe that I have failed in my role as a husband, yet I still love myself. In fact, it wasn’t that hard. I wasn’t always happy with myself, I wasn’t always satisfied, but I can’t remember ever not loving myself. And the reason seems pretty simple. If love, true love, is the other side of true empathy, then how could we ever not empathize with ourselves? I am me, therefore I understand what it is like to be me. I am in my own shoes, so to speak. And certainly it is harder to love another person unconditionally, but I do believe it is possible. I can’t imagine that it is possible to do all the time, to do perfectly, but what is? I’m not searching for perfection, I’m searching for deeply meaningful love.&lt;/p&gt;

&lt;p&gt;My goal in this Lenten season is to come to love my wife unconditionally. That is my true goal. “Giving up my marriage” for Lent is merely the means I am attempting to reach that end. And the reason I chose that means, that path, is simply because I have come to realize one of the deepest conditions of my love: returned love. I feel slighted, I feel wronged when I love and that love is not returned. “That is unfair”, I say to myself (maybe even to others at times); or even, “That’s just plain stupid”. Why give out love for nothing? I’m devaluing my love. I’m selling my stock short. If you want my love, you have to give me something back in return. And when it comes to my wife, what I want back is deep love. I want her to accept me, to see me as I truly am and to accept and love me. I want her to know me, I want her to join with me in living life. I want to become one. I want her to want me. I want it, I need it. And every time I act out of love and I don’t feel that her response is up to snuff, I feel victimized, hell, I feel dehumanized. I have reached out in love, I have tried to see you and to know you as you truly are, and &lt;em&gt;this&lt;/em&gt; is what I get in response? Like a petulant child, I cry foul. This isn’t right, this isn’t fair! Well, one of the constants I laid out earlier states that all human beings have the authority and autonomy to exercise their own wills. I also stated earlier that I have no right to my wife’s (or anyone’s) love. It is not owed to me, regardless of what I do or don’t do. Thus, I feel I must give up my marriage for Lent. I must spend 40 days in an emotional desert in the hopes of finding the grace to love without requiring love back. As long as I feel wronged by not being loved by someone, I am utterly incapable of loving that person unconditionally.&lt;/p&gt;

&lt;p&gt;This brings me, finally, back to the season of Lent. We Christians spend 40 days in fasting as we prepare for Easter, the day that signifies Jesus Christ’s rise from death. And while I do believe that the variables and constants outlined above, the behaviors and thoughts that I espouse, are true for anyone, regardless of religion or faith, these things make the most sense, contain the most truth, when viewed within the light of the Christian faith. Within that light, we see that there are in fact two instances of unconditional love. Not only do we, as humans, unconditionally love ourselves (“love your neighbor as yourself”), but God himself, incarnated, loved each and every one of us unconditionally. He did not require love in return, he simply loved. He loved fully and he loved deeply. He loved to the point of death. He loved in ways and to degrees that I cannot and probably will never fathom. And yet that is my desire. I want to love as Christ loved. But how? How can I ever possibly hope to love like that? I know for a fact that I will never love in that manner on my own. I’ve tried, and every time I have failed. It is beyond me. I am too selfish, too self-centered; I am too &lt;em&gt;me&lt;/em&gt;. I am ontologically, at the core of my being, incapable of giving out love without receiving love. I &lt;em&gt;must&lt;/em&gt; be loved. I, my self, my ego, is nothing, is undefined, until I am loved. There is no subject &lt;em&gt;I&lt;/em&gt; until there is the object &lt;em&gt;me&lt;/em&gt;. My identity, first and foremost, exists as an object in a sentence with some other subject. I can do nothing until He loved me; I am nothing until He loved me. You see (but do I?), I am already loved, I already have all that I need. I can give love to others because I have received love from God, from Christ. I &lt;em&gt;know&lt;/em&gt; this. This Lent, I pray that I will &lt;em&gt;feel&lt;/em&gt; this. I pray that I will feel God’s love so fully, so deeply, so truly that I can love others unconditionally as easily as I love myself. And so, this Lent, I am giving up my marriage in the hope and with the prayer that by giving God the space, finally, to be the source of my “belovedness” (and not my wife, or my family, or my peers, as it has been in the past), I will grow able to love others (my wife, my family, my peers) as Christ loves me.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Patience ...</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602101939/"/>
    <id>http://blog.url.com/jots/201602101939/</id>
    <published>2016-02-10T14:39:00-05:00</published>
    <updated>2016-12-17T22:44:56-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Sometimes the most loving action is inaction.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602091517/"/>
    <id>http://blog.url.com/jots/201602091517/</id>
    <published>2016-02-09T10:17:00-05:00</published>
    <updated>2016-12-17T22:45:13-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>To love is nothing more than to see another as fully human.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602041409/"/>
    <id>http://blog.url.com/jots/201602041409/</id>
    <published>2016-02-04T09:09:00-05:00</published>
    <updated>2016-12-17T22:45:29-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Pain is a yoke requiring another.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201601192153/"/>
    <id>http://blog.url.com/jots/201601192153/</id>
    <published>2016-01-19T16:53:00-05:00</published>
    <updated>2016-12-17T22:48:05-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>A man’s greatest threats are often the barely bearable burden and the barely there burden.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201601152317/"/>
    <id>http://blog.url.com/jots/201601152317/</id>
    <published>2016-01-15T18:17:00-05:00</published>
    <updated>2016-12-17T22:46:12-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>The discrete is nothing but an accident of the infinite.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201601011324/"/>
    <id>http://blog.url.com/jots/201601011324/</id>
    <published>2016-01-01T08:24:00-05:00</published>
    <updated>2016-12-17T22:46:28-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Analogies are broken fractals.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201510212018/"/>
    <id>http://blog.url.com/jots/201510212018/</id>
    <published>2015-10-21T16:18:00-04:00</published>
    <updated>2016-12-17T22:46:47-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Full communication is actually impossible, and the degree of communication we do have is a total miracle.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201509221446/"/>
    <id>http://blog.url.com/jots/201509221446/</id>
    <published>2015-09-22T10:46:00-04:00</published>
    <updated>2016-12-17T22:41:28-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>To understand and be understood, that is the quest.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201509221444/"/>
    <id>http://blog.url.com/jots/201509221444/</id>
    <published>2015-09-22T10:44:00-04:00</published>
    <updated>2016-12-17T22:38:58-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>git-do</title>
    <link rel="alternate" href="http://blog.url.com/projects/git-do/"/>
    <id>http://blog.url.com/projects/git-do/</id>
    <published>2015-07-24T20:00:00-04:00</published>
    <updated>2016-12-02T22:18:20-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-01"&gt;Version 0.1&lt;/h4&gt;

&lt;h4 id="download-on-githubhttpsgithubcomsmarghgit-do"&gt;Download on &lt;a href="https://github.com/smargh/git-do"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; is a &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; extension that adds a new perspective to the standard Git workflow. I conceive of it as a promises-based workflow.&lt;/p&gt;

&lt;p&gt;To better explain, let me begin by laying out the default Git workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You start working on a new feature/fix/item&lt;/li&gt;
  &lt;li&gt;Maybe you create a new branch for this feature to live in&lt;/li&gt;
  &lt;li&gt;You get in the flow and knockout the feature in 1 hour&lt;/li&gt;
  &lt;li&gt;You realize you should commit some of this great workflow&lt;/li&gt;
  &lt;li&gt;You want your commit history to be clean and readable, so you want to chunk your work into logical commits&lt;/li&gt;
  &lt;li&gt;So, you use &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git diff&lt;/code&gt; to figure out which changes/additions/deletions should live together in a single commit&lt;/li&gt;
  &lt;li&gt;This whole time, your mind is running forward, thinking of the next thing you &lt;em&gt;actually want to code&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This general flow happens to me almost every time I code. I’m future oriented, always thinking about what’s next. So, few things bog me down quite like having to stop after writing code only to retroactively document what I’ve done. This is Git’s default point-of-view: backwards-facing, past-oriented. You can only commit &lt;em&gt;after&lt;/em&gt; you’ve done some work.&lt;/p&gt;

&lt;p&gt;Now, of course, this makes good sense. How could you commit nothing? You need to have done something in order to commit it. Yes, but committing is more than simply adding your work to the Git history; committing is also directly tied to documenting, describing, and summarizing your work. As many developers have argued, commit messages explain &lt;em&gt;why&lt;/em&gt; the changes are there (diffs explain &lt;em&gt;what&lt;/em&gt; changed).&lt;/p&gt;

&lt;p&gt;In an intriguing and well-written &lt;a href="https://arialdomartini.wordpress.com/2012/09/03/pre-emptive-commit-comments/"&gt;blog post&lt;/a&gt;, Arialdo Martini suggests that pre-emptive commit messages confer a number of benefits:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;More focus while developing&lt;/li&gt;
  &lt;li&gt;Commit review is easier&lt;/li&gt;
  &lt;li&gt;Less cognitive load&lt;/li&gt;
  &lt;li&gt;More precise comments&lt;/li&gt;
  &lt;li&gt;Declaration of intent&lt;/li&gt;
  &lt;li&gt;Triggers micro design session&lt;/li&gt;
  &lt;li&gt;Sets a micro goal&lt;/li&gt;
  &lt;li&gt;Creates a little timebox&lt;/li&gt;
  &lt;li&gt;Commit history gains balanced granularity&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I heartily recommend that you read the entire post and wrestle with Arialdo’s points yourselves; I, for one, think he’s on to something. Pre-emptive commit messages have become, for me, something akin to micro &lt;a href=""&gt;feature branches&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When using feature branches, you necessarily are pre-planning what all the feature entails, how best to describe/name it, and what it looks like to complete said feature. Pre-emptive commit messages are conceptually the same thing, just on a smaller scale. In addition to considering what an entire feature entails, you consider what your next commit will entail &lt;em&gt;before you start writing any code&lt;/em&gt; for that commit. This method of working forces you to &lt;a href="http://programmer.97things.oreilly.com/wiki/index.php/Know_Your_Next_Commit"&gt;know your next commit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a co-developer pointed out, this is really just taking the philosophy of Test-Driven Development (TDD) and enforcing it’s mental model even at the commit level (conceptually, the commit is the atomic unit of Git). Everything you do, you do with purpose. You declare your intention before you begin. You know exactly what the code needs to do for this commit to be ready. You make a promise with yourself.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The actual api for &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; is utterly simple. Before you start your next task (by “task” here I mean whatever you conceive of as your smallest unit of work), you run &lt;code&gt;git do "&amp;lt;message&amp;gt;"&lt;/code&gt;. As soon as you have completed your task, you run &lt;code&gt;git done&lt;/code&gt;. That’s it!&lt;/p&gt;

&lt;p&gt;Under the hood &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; is doing a few things. First, it will save your commit message to a temporary file (in a created &lt;code&gt;.git/.git-do/&lt;/code&gt; directory) as well as the name of whatever branch you are on when you run the &lt;code&gt;git do&lt;/code&gt; command. It will then create and checkout a new branch (using the naming schema &lt;code&gt;do/&amp;lt;slugify(message)&amp;gt;&lt;/code&gt;). &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; checkouts out a new branch so that you have a safe “sand-box” to do your work, allowing you to leave if something urgent comes up (e.g. you need to create a hotfix branch from master and solve a critical problem). This branch, however, will be deleted as soon as you run &lt;code&gt;git done&lt;/code&gt;, so you should always think of it and treat it as a temporary branch.&lt;/p&gt;

&lt;p&gt;As you do your work in the &lt;code&gt;do/&lt;/code&gt; branch, you need not commit anything. Remember, &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; exists at the level of the individual commit. If you think you want to use &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt;, but think you will probably have multiple commits, create a feature branch instead. Once you have finished whatever constitutes your commit, you run &lt;code&gt;git done&lt;/code&gt;. This will stage and commit all of the changes made in the &lt;code&gt;do/&lt;/code&gt; branch. It will use the message your wrote for &lt;code&gt;git do&lt;/code&gt; as the actual commit message. It will then checkout the &lt;code&gt;do/&lt;/code&gt; branch’s parent branch and merge that one commit. This merge must be a &lt;a href=""&gt;fast forward merge&lt;/a&gt;, which means you can’t have changed or done anything in the parent branch after running &lt;code&gt;git do&lt;/code&gt; but before running &lt;code&gt;git done&lt;/code&gt; (Again, anything you do using &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; should fit in one commit and should be your branch’s next commit. Don’t let the fact that &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; creates a temporary branch lull you into thinking you should treat your work there as anything but a single, simple commit).&lt;/p&gt;

&lt;p&gt;After merging your commit into the original parent branch, &lt;code&gt;git done&lt;/code&gt; will delete the &lt;code&gt;do/&lt;/code&gt; branch. So, if you have a terminal prompt that doesn’t specify the current branch, you would never know the &lt;code&gt;do/&lt;/code&gt; branch ever existed. Your commit history would look exactly as it would had you done the work and written the commit message at the end.&lt;/p&gt;

&lt;p&gt;Below is a (contrived) example to demonstrate how simple and short I believe the workflow ought to be:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="s2"&gt;"Demonstrate how git-do works for my project page"&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;touch demonstration.txt
&lt;span class="gp"&gt;$ &lt;/span&gt;vi demonstration.txt
&lt;span class="gp"&gt;$ &lt;/span&gt;git &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>A Depressed Graduate Student</title>
    <link rel="alternate" href="http://blog.url.com/articles/a-depressed-graduate-student/"/>
    <id>http://blog.url.com/articles/a-depressed-graduate-student/</id>
    <published>2015-06-18T13:38:00-04:00</published>
    <updated>2016-08-31T20:46:19-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;In my &lt;a href="http://fractaledmind.com/articles/a-failed-graduate-student"&gt;previous post&lt;/a&gt; on my time in graduate school, I discussed how I learned to handle failures better. Today, I’m going to talk about how I failed to handle the depression that these mounting failures produced.&lt;/p&gt;

&lt;p&gt;Let’s start where some people find it difficult to start: I have struggled with depression, and odds are that I will stuggle with depression again in my future. This isn’t a sign of weakness; this isn’t something shameful. This is just a fact of my life. I’m a self-critical perfectionist who tends toward absolutist perceptions of reality; of course I’m going to struggle with depression. Unfortunately, when I entered graduate school, I was generally unaware of this likelihood. As with Imposter’s Syndrome, I thought I knew what depression was and I thought I could spot it fairly early on. And, as with Imposter’s Syndrome, it snuck up on me slowly but fiercely.&lt;/p&gt;

&lt;p&gt;When you feel like you are failing frequently and regularly, when those failures build up on top of one another, it can start to have odd effects. The more I thought I failed, the more I wanted to succeed in my next task. Yet, the more I thought I failed, the less energy I had to put into that next task. “I’ve failed at these things; I’ll probably fail at this. Why even try so hard?” This is the internal thought-process I assume my mind had. I say “assume” because I never consciously thought anything like this. My conscious mind wanted to succeed, to return to my old form. My unconscious mind seems to have grown more and more weary, more and more gun-shy.&lt;/p&gt;

&lt;p&gt;For me, depression felt like I was loosing control of my intention. What my conscious mind wanted seemed to have very little effect over what I actually ended up doing. This is the vicious cycle that Imposter’s Syndrome and Depression can generate. The more I thought I was failing, the less energy I could muster to tackle the next task. Putting less energy in, I was more likely to see the result (whatever it might actually be) as a failure, a failure to perform with enough vim and vigor. Failure -&amp;gt; Waning energy -&amp;gt; Failure … on and on.&lt;/p&gt;

&lt;p&gt;I got caught in this cycle for probably two years without really noticing what was happening. This is one of the shittiest things about depression–once you’re in it, it is &lt;em&gt;so much harder&lt;/em&gt; to get out on your own. It’s like trying to run in mud: the more you try, the dirtier and more tired you get, without actually getting as far as you think you should.&lt;/p&gt;

&lt;p&gt;Depression is a spiraling-in on oneself. You are the center of gravity, so &lt;em&gt;you&lt;/em&gt; cannot generate the outside force to propel yourself out. However, others can. I wish I didn’t take so long to actually talk to someone about how I felt. I was so ashamed of my failures, so oblivious to my depression, so insecure in my position, that I kept everything hidden, consciously. There can be a quiet cloud that lingers over graduate school which says that weakness is death, progress is paramount. In many departments, this isn’t probably actually true, but the shadow remains, and a shadow can be enough. I lived in that shadow for far too long.&lt;/p&gt;

&lt;p&gt;But, after finally getting to a point where I simply was unable to keep moving forward with all of the stress internalized, I went and got help. I started going to a therapist. This was a wise decision. No practical effects came of it–I didn’t get any diagnoses, no prescriptions–but I did get better. Talking with someone, being honest about my feelings, emotions, fears, got those things outside of my head, put them in front of me, and thus allowed me to see them for the puny things they were. Fear and depression grow in the shadow; in the light, they shrink to their actual sizes.&lt;/p&gt;

&lt;p&gt;So, I’ve been depressed, I’ve been (and continue to go) to therapy. For anyone out there in anything at all similar to my situation, know that understood weakness is the foundation of wisdom, progress without wisdom is folly, and getting help really will help.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Consolation and Commemoration in Horace *Odes* 1.24 and 4.12</title>
    <link rel="alternate" href="http://blog.url.com/essays/consolation/"/>
    <id>http://blog.url.com/essays/consolation/</id>
    <published>2015-06-18T13:38:00-04:00</published>
    <updated>2016-12-18T14:55:08-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;For it shall be my dirge and chant me down&lt;br /&gt;
Over the mournful flood to the dim shore,&lt;br /&gt;
Where I shall find Quintilius and our tears.&lt;br /&gt;
Yes, farewell, Horace! Unto you I leave&lt;br /&gt;
The laurel and the letters that we loved;&lt;br /&gt;
Till we shall meet again. I cannot hold&lt;br /&gt;
Your light yet heavy Epicurean creed;&lt;br /&gt;
Your lays &lt;em&gt;“shall outlive brass and pyramid”&lt;/em&gt;,&lt;br /&gt;
But he that made them shall outlive the lays,&lt;br /&gt;
Though how or where we know not.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;– 328-37, from &lt;em&gt;The Death of Virgil, A Dramatic Narrative&lt;/em&gt; (1907) by Sir
Thomas H. Warren&lt;/p&gt;

&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Horace confronts grief and death directly in &lt;em&gt;Odes&lt;/em&gt; 1.24 and 4.12, both of which address the poet Vergil.[^57.53] In 1.24, Vergil receives frank criticism for his excessive mourning following the death of their mutual friend Quintilius Varus.&lt;sup id="fnref:3406"&gt;&lt;a href="#fn:3406" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; In 4.12, Vergil is invited to join Horace at a symposium, although the poem was published six years after Vergil’s death in 19 BC. Taken together, these two post-mortem poems to Vergil form an odd pair.[^18.38] While in 1.24 Horace consoles the aggrieved Vergil, in 4.12 Horace finds himself in Vergil’s position– grieving the death of a friend. Both also end with generalizing &lt;em&gt;sententia&lt;/em&gt;, yet their import would appear contradictory. On the one hand, &lt;em&gt;Odes&lt;/em&gt; 1.24 recommends the consolatory power of patience:&lt;/p&gt;

&lt;blockquote style="text-indent: 0;"&gt;
Durum; sed levius fit patientia&lt;br /&gt;
&amp;nbsp;&amp;nbsp;quicquid corrigere est nefas&lt;br /&gt;
&lt;span style="float:right;"&gt;--*Odes* 1.24.19-20&lt;/span&gt;&lt;br /&gt;
It is hard; but whatever is forbidden to correct becomes easier to bear with patience.[^31.11]
&lt;/blockquote&gt;

&lt;p&gt;On the other hand, &lt;em&gt;Odes&lt;/em&gt; 4.12 turns to the sweetness of folly:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;misce stultitiam consiliis brevem:
  dulce est desipere in loco.
–&lt;em&gt;Odes&lt;/em&gt; 4.12.25-28&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Mix brief folly into your plans: it is sweet to act the fool in the proper place.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How ought one to understand &lt;em&gt;Odes&lt;/em&gt; 4.12 given its relation to 1.24?&lt;/p&gt;

&lt;h2 id="methodology"&gt;Methodology&lt;/h2&gt;

&lt;p&gt;In order to make sense of this enigmatic ode, one must read it against &lt;em&gt;Odes&lt;/em&gt; 1.24. Taken together, these two post-mortem poems addressed to Vergil form a diptych of sorts, offering insight into how Horace believes one ought to or can mourn. In &lt;em&gt;Odes&lt;/em&gt; 1.24 Horace, in the persona of a philosophical teacher, advises that one &lt;em&gt;ought&lt;/em&gt; to mourn moderately and patiently. In 4.12 Horace the convivial poet suggests that the foolishness of mourning has its proper place.&lt;/p&gt;

&lt;p&gt;This paper begins with brief but thorough readings of the two odes, paying particular attention to their consolatory elements. Having considered each ode individually, I consider how the sentiments of 4.12 modify those of 1.24. This leads me to my final argument, that the “proper place” for foolish mourning is the poetic symposium as Horace constructs it in &lt;em&gt;Odes&lt;/em&gt; 4.12. I contend that the symposium of 4.12 represents a poetic memorial of Horace and Vergil’s friendship.&lt;/p&gt;

&lt;h2 id="odes-124"&gt;Odes 1.24&lt;/h2&gt;

&lt;h3 id="overview"&gt;Overview&lt;/h3&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Odes 1.24 was published in 23 B.C. as a part of the first book of Horace’s &lt;em&gt;Carmina&lt;/em&gt;.[^11.41] Horace likely wrote the poem in the mid-20s B.C., after the death of Quintilius Varus of Cremona, a friend to Vergil and Horace alike.{»@spm&lt;/td&gt;
      &lt;td&gt;Add citation?«} As Michael Putnam points out, the ode conflates the genres of &lt;em&gt;epicedium&lt;/em&gt; and &lt;em&gt;consolatio&lt;/em&gt;, simultaneously a lamentation for Quintilius and condolence for Vergil.[^09.21] These two genres roughly divide the poem in half–the first half is dirge, the second is consolation.[^09.57] Aside from generic elements, the poem has an “almost critical tone,” which Philip Thibodeau argues Epicurean &lt;em&gt;parrhesia&lt;/em&gt;, or frank criticism, underpins.[^10.37] In &lt;em&gt;Odes&lt;/em&gt; 1.24, Horace conflates eulogy, consolation, and therapy. As a result, Vergil occupies three roles: he is the addressee in a dirge, the recipient of consolation, and the patient undergoing therapy.[^11.01] It is this middle role that I wish to focus upon.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id="emotional-therapy"&gt;Emotional Therapy&lt;/h3&gt;

&lt;p&gt;Thibodeau argues convincingly that the poem functions as Epicurean emotional therapy. The central stanza is sufficient to demonstrate the manner and content of Horace’s criticism of Vergil’s mourning:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Multis ille bonis flebilis occidit, /
nulli flebilior quam tibi, Vergili. /
Tu frustra pius, heu, non ita creditum /
poscis Quintilium deos.
–&lt;em&gt;Odes&lt;/em&gt; 1.24.9-12&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;He died mourned by many good men, but mourned by none more than by you, Vergil. You, uselessly pious, ask the gods for Quintilius, alas! not entrusted on those terms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Horace is curt. The shift from &lt;em&gt;flebilis&lt;/em&gt; to &lt;em&gt;flebior&lt;/em&gt; points directly to the issue. The Epicureans taught &lt;em&gt;metriopatheia&lt;/em&gt;, emotional moderation,[^49.21] yet Vergil is pictured as the emotional outlier, the single friend mourning excessively. The folly of this excessive grief is immediately felt when Horace describes Vergil as “uselessly pious” (11). Of course, the deep resonances of &lt;em&gt;pius&lt;/em&gt; in Vergil’s own corpus speak for themselves and only ratchet up the force of the phrase. Vergil may be attempting to act correctly in his mourning, but his actions are useless and therefor not pious. Horace does not shy away for the central problem. Beyond merely grieving Quintilius, Vergil is apparently asking the gods to return him to life (11-2). The whole poem is focused on reminding Vergil of the foolishness of such thoughts and desires.&lt;/p&gt;

&lt;p&gt;Horace begins with the euphemistic description of Quintilius’ death: he is “eternally asleep” (&lt;em&gt;perpetuus sopor&lt;/em&gt;, 1.24.5). Near the middle of the poem, Horace becomes more explicit, reminding Vergil that blood, and therefore life, will not “return to the empty shade” (&lt;em&gt;vanae redeat sanguis imagini&lt;/em&gt;, 15). Finally, to close the poem Horace declares that such desires are more than merely useless, they are utterly forbidden (&lt;em&gt;durum; sed levius fit patentia / quicquid corrigere est nefas&lt;/em&gt;, 19-20). The poem as a whole answers the opening question, “What shame or limit should there be to the longing for one so loved?” (&lt;em&gt;Quis desiderio sit pudor aut modus / tam cari capitis?&lt;/em&gt;, 1-2). Death provides the limit; it is a threshold beyond which none can pass. These reminders, while tonally in line with the Epicurean practice of &lt;em&gt;parrhesia&lt;/em&gt;, also follow doctrinal Epicurean metaphysics and ethics.&lt;/p&gt;

&lt;h3 id="epicureanism"&gt;Epicureanism&lt;/h3&gt;

&lt;p&gt;One finds the foundation for all Epicurean thought on death and the proper response to it in &lt;em&gt;Key Doctrines&lt;/em&gt; 2: “death is nothing to us” (ὁ θάνατος οὐδὲν πρὸς ἡμᾶς). This simple statement produces two conclusions. First, it functions as an admonition to Epicureans not to fear death while alive.[^15.01] On the one hand, the dictum is thus a normative reminder of Epicurean ethics. On the other hand, however, the statement that “death is nothing to us” summarizes the argument behind this ethical position. In the &lt;em&gt;Letter to Menoeceus&lt;/em&gt;, Epicurus reminds his friend that death is annihilation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;συνέθιζε δὲ ἐν τῷ νομίζειν μηδὲν πρὸς ἡμᾶς εἶναι τὸν θάνατον ἐπεὶ πᾶν ἀγαθὸν καὶ κακὸν ἐν αἰσθήσει· στέρησις δέ ἐστιν αἰσθήσεως ὁ θάνατος.
–&lt;em&gt;LM&lt;/em&gt; 124&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Accustom yourself to hold that death is nothing to us, since all good and evil consist in sensation, and death is the privation of sensation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Death is thus nothing to us because as soon as we die, no “us” remains. This argument takes aim at the fear of death. For Epicurus, the fear of death was one of the largest impediments to &lt;em&gt;ataraxia&lt;/em&gt;, the state of tranquility all Epicureans seek.{»@spm&lt;/td&gt;
      &lt;td&gt;Citation?«} If death is annihilation of the self, one cannot experience his or her own death; if one cannot experience one’s own death, one cannot feel any pain when dead. Thus, one ought not to fear death.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Horace, throughout this poem, reminds Vergil of the latter point: death is annihilation. This is why Vergil’s supposed “piety” is useless; this is why the blood will not return to the shade. Yet the parrhesiatic therapy is only half completed by these philosophical reminders and sentiments. In order for the poem to be truly consolatory, Horace must not only tell Vergil what to turn away from (excessive and foolish grief) but also what to turn towards. The therapy states, “Quintilius is dead, nothing can change that”, but the consolation adds, “There is still much to live for and love here”. More specifically, the consolatory element of the ode attempts to demonstrate to Vergil that Horace himself is a friend of Quintilian caliber.&lt;/p&gt;

&lt;h3 id="consolation-of-friendship"&gt;Consolation of Friendship&lt;/h3&gt;

&lt;p&gt;If the therapy of the poem answer the opening question, the consolation answers stanza two’s question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ergo Quintilium perpetuus sopor /
urget, cui Pudor et Iustitiae soror /
incorrupta Fides nudaque Veritas /
quando ullum inveniet parem?
–&lt;em&gt;Odes&lt;/em&gt; 1.24.5-8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;So, everlasting slumber oppresses Quintilius. When will Shame and uncorrupted Faith, the sister of Justice, and naked Truth find anyone equal to him?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If frankness is the quintessential quality of Epicurean friendships,[^19.53] then Quintilius himself is the quintessential friend. For proof, one need not look beyond Horace’s corpus. First, the phrase &lt;em&gt;nuda Veritas&lt;/em&gt; (7) captures the meaning of the Greek term &lt;em&gt;parrhesia&lt;/em&gt;, as both terms denote blunt honesty.[^23.12] Along with shame, faith, and justice, frankness is one of Quintilius’ primary virtues. Second, Horace references Quintilius’ oft-used imperative &lt;em&gt;corrigere&lt;/em&gt; (“correct it!”) to conclude 1.24, reminding Vergil of Quintilius’ literary frankness.[^24.34] In his &lt;em&gt;Ars Poetica&lt;/em&gt;, Horace recalls how Quintilius would reduce lines of poetry to rubble with this single word, always willing to offer his critical, but desired opinion. Finally, at &lt;em&gt;Sat&lt;/em&gt;. 1.5.40-42, Quintilius, Vergil, and Plotius are described as &lt;em&gt;candidiores&lt;/em&gt;, which emphasizes their charm and frankness. By practicing the very art that defined so much of Quintilius’ character, Horace deftly reminds Vergil of the friend that still remains. In &lt;em&gt;Odes&lt;/em&gt; 1.24, Horace represents his bond with Vergil in its truest form: one friend openly correcting another in a spirit of good will.&lt;/p&gt;

&lt;h3 id="conclusionsummary"&gt;Conclusion/Summary&lt;/h3&gt;

&lt;p&gt;This correction is summed up in the closing &lt;em&gt;sententia&lt;/em&gt; of the poem:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Durum; sed levius fit patientia /
quicquid corrigere est nefas
–&lt;em&gt;Odes&lt;/em&gt; 1.24.19-20&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is hard; but whatever is forbidden to correct becomes easier to bear with patience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These two lines summarize the three essential points of the ode:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Death is annihilation.&lt;/li&gt;
  &lt;li&gt;Mourning that borders on desire for resurrection is useless.&lt;/li&gt;
  &lt;li&gt;But good friends remain.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We cannot “correct” death, as death is final annihilation. Desire for the laws of nature to be reversed is &lt;em&gt;nefas&lt;/em&gt;. Yet patience and good friends can ease the burden. These sentiments follow the trends of the consolatory tradition,[^59.46] as well as doctrinal Epicureanism, which makes &lt;em&gt;Odes&lt;/em&gt; 4.12 all the more odd.&lt;/p&gt;

&lt;h2 id="odes-412"&gt;Odes 4.12&lt;/h2&gt;

&lt;h3 id="introduction-1"&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Odes&lt;/em&gt; 4.12 is a perplexing poem. Scholars question its addressee, its genre, and its communicative purpose.[^06.56] Recent work by Richard Thomas and Jenny Strauss-Clay, however, has begun to make sense of this enigmatic ode.[^20.47] Thomas’ erudite commentary solidifies the scholarly opinion that the addressee must be Vergil the poet while also offering clear analysis of the ode’s rich intertextual relationships. On the interpretive side, Strauss-Clay has demonstrated that the post-mortem publication date is not a minor detail to be explained away, but rather an integral facet of Horace’s poetic purpose. Strauss-Clay discerns in the ode a grieving Horace seeking imaginative self-consolation. Regrettably, her analysis does not take into account the incongruities generated if &lt;em&gt;Odes&lt;/em&gt; 4.12 is indeed to read as a self-consolation, given the explicit consolatory advise offered in &lt;em&gt;Odes&lt;/em&gt; 1.24. Having enumerated how Horace tells Vergil one &lt;em&gt;ought&lt;/em&gt; to grieve in 1.24, I now turn to illuminate how Horace pictures himself &lt;em&gt;actually grieving&lt;/em&gt; in 4.12.&lt;/p&gt;

&lt;h3 id="a-poetic-evocation"&gt;A Poetic Evocation&lt;/h3&gt;

&lt;p&gt;The spring strophes initiate the evocation and the invitation strophes describe a literary convivium in which poets meet and share their poetic wares.[^45.25]  Each spring stanza prepares the reader for Vergil’s presence at the ode’s heart. The first stanza situates Odes 4.12 within Horace’s lyric triptych. The second stanza alludes to Vergil’s Procne myth. Finally, the third stanza explicitly recalls Vergil’s pastoral locale.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Odes&lt;/em&gt; 4.12 opens with a natural scene that sets the stage for the overarching themes of friendship and death. The first three words, &lt;em&gt;Iam veris comites&lt;/em&gt;, indicate both the ode’s springtime setting and its friendship-centered tone. First, the introduction references Catullus’s spring poem: &lt;em&gt;iam ver egelidos refert tepores&lt;/em&gt; (“Already spring brings tepid warmth,” 46.1), in which Catullus bids farewell to actual companions. Second, &lt;em&gt;comites&lt;/em&gt; may recall Horace’s companions on the road to Brundisium, of which Vergil was a member.[^48.02] Horace’s “comrades of spring” thus initially appear human.[^48.38] Horace elaborates on the “comrades of spring,” however, placing the Thracian winds in apposition:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Iam veris comites, quae mare temperant,
impellunt animae lintea Thraciae,
iam nec prata regent nec fluvii strepunt
hiberna nive turgidi.
–&lt;em&gt;Odes&lt;/em&gt; 4.12.1-4&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Already the comrades of spring, who soothe the sea, the Thracian winds, drive the sails. Already neither are fields stiff nor do streams groan, swollen with winter snow.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The use of &lt;em&gt;anima&lt;/em&gt; for &lt;em&gt;ventus&lt;/em&gt; is unique in Horace, and its uniqueness suggests its importance.[^49.37] This Greek cognate usage of &lt;em&gt;anima&lt;/em&gt;, following &lt;em&gt;comites&lt;/em&gt; so closely, may echo &lt;em&gt;Odes&lt;/em&gt; 1.3’s famous &lt;em&gt;animae dimidium meae&lt;/em&gt;. Furthermore, &lt;em&gt;animae&lt;/em&gt; could also recall Vergil, Plotius and Varius, described as &lt;em&gt;animae candidiores&lt;/em&gt; at &lt;em&gt;Satires&lt;/em&gt; 1.5.41.[^50.21] These two possible referents suggest the depth of Horace’s allusive engagement with Vergil and their friendship. In addition, the two verbs governed by “the Thracian winds,” &lt;em&gt;temperant&lt;/em&gt; and &lt;em&gt;impellunt&lt;/em&gt;, recall the nautical setting of &lt;em&gt;Odes&lt;/em&gt; 1.3. Finally, the adjective &lt;em&gt;Thraciae&lt;/em&gt; recalls Orpheus in &lt;em&gt;Odes&lt;/em&gt; 1.24 (&lt;em&gt;Threicio blandius Orpheo&lt;/em&gt;, 13). This reference adumbrates the theme of death and recalls Horace’s previous Vergil odes. This first stanza is a tour de force of self-reference, placing the ode squarely within the tapestry of the Vergil odes as a whole.&lt;/p&gt;

&lt;p&gt;The second stanza offers an extended allusion to the myth of Procne and Tereus. On the literal level, instinct drives a bird to prepare her nest; on the metaphorical level, however, Horace sees in this act resonances of Procne’s tale of death and revenge:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nidum ponit Ityn flebiliter gemens
infelix avis et Cecropiae domus
aeternum opprobrium, quod male barbaras
regum est ulta libidines.
–&lt;em&gt;Odes&lt;/em&gt; 4.12.5-8&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The unlucky bird builds her nest, moaning mournfully for Itys. She is an eternal disgrace to the house of Cecrops because she took foul revenge on the barbarous lusts of kings.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The central image of the second stanza points directly to Vergil. The &lt;em&gt;infelix avis&lt;/em&gt; is unparalleled in Horace’s corpus, though it recalls Vergil’s two abbreviated descriptions of the myth. First, consider the image of Philomela, Procne’s sister, in the sixth book of the &lt;em&gt;Eclogues&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;aut ut mutatos Terei narraverit artus,
quas illi Philomela dapes, quae dona pararit,
quo cursu deserta petiverit et quibus ante
infelix sua tecta super volitaverit alis?
–&lt;em&gt;Eclogues&lt;/em&gt; 6.78-81&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Or how he detailed Tereus’ morphed limbs, what banquets and what gifts Philomela prepared for him, by what route she sought the desert, and on what wings the unlucky woman earlier flitted about her rooftops?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The image is likewise influenced by Vergil’s description of Orpheus’ lament in the &lt;em&gt;Georgics&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;qualis populea maerens philomela sub umbra
amissos queritur fetus, quos durus arator
observans nido implumes detraxit; at illa
flet noctem ramoque sedens miserabile carmen
integrat et maestis late loca questibus implet.
–&lt;em&gt;Geo.&lt;/em&gt; 4.511-15&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;As Philomela, grieving beneath the poplar’s shade, laments her lost children, whom a rough ploughman snatched as she watched, featherless, from the nest; but she weeps all night and repeats her sad song perched on a branch and fills the place around with mournful cries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In this &lt;em&gt;Georgics&lt;/em&gt; section, Vergil describes Orpheus’ grief following the death of his wife, foreshadowing Horace’s foolish apostrophe in the fourth stanza.[^53.48] In both language and theme, Horace echoes Vergil’s treatments of this tragic tale.&lt;/p&gt;

&lt;p&gt;Strophe three engages Vergil’s pastoral &lt;em&gt;Eclogues&lt;/em&gt;. Moving from the mournful songs of the animal world, Horace now imagines man’s music in the form of shepherds’ singing:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dicunt in tenero gramine pinguium
custodes ovium carmina fistula
delectantque deum, cui pecus et nigri
colles Arcadiae placent.
–&lt;em&gt;Odes&lt;/em&gt; 4.12.9-12&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The custodians of fattened sheep sing songs in the soft grass with the pipe, and they delight the god whom the herd and black hills of Arcadia please.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Horace’s reference to Vergil’s pastoral text is layered. First, the &lt;em&gt;fistula&lt;/em&gt; pipe is the primary instrument used throughout the &lt;em&gt;Eclogues&lt;/em&gt;. Second, the &lt;em&gt;deus Arcadiae&lt;/em&gt; Pan appears at the climax of Vergil’s final eclogue.[^54.40] Finally, the reader senses Vergil’s pastoral presence most vividly in Horace’s only reference to the mythical land of Arcadia. Once again, Horace hints at Vergil’s poetic presence before his name actually appears.&lt;/p&gt;

&lt;h3 id="a-poetic-embrace"&gt;A Poetic Embrace&lt;/h3&gt;

&lt;p&gt;This allusive evocation of Vergil’s poetic persona initiates a poetic embrace. Alden Smith defines poetic embrace as the conversation between poets through allusion and intertextuality.[^57.07] Poets can revivify their predecessors and peers by perpetuating their poetic voice in and through their own text. If this understanding of allusion’s immortalizing potency appears anachronistic, one need not look beyond two excerpts from Augustan-age poets. One finds the first in Ovid:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;sed carmina maior imago /
sunt mea, quae mando qualiacumque legas.
–&lt;em&gt;Tristia&lt;/em&gt; 1.7.11-12&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;But my poetry is a better image, and whatever the quality, I entrust it to you so that you may read it.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The second comes from Horace’s fourth book of &lt;em&gt;Odes&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Vixere fortes ante Agamemnona /
multi; sed omnes inlacrimabiles /
urgentur ignotique longa /
nocte, carent quia uate sacro.
–&lt;em&gt;Odes&lt;/em&gt; 4.9.25-28&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Many brave men lived before Agamemnon, but all are unwept and unknown, pressed by the long night, because they lacked a sacred poet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Augustan-age poets recognized that poetry created a persona of the poet as well as anyone else the poet brings into the realm of the poem. These personae are eternal insofar as readers continue to read of them. As readers themselves, poets can knowingly sustain a predecessor or peer’s literary persona. As writers, they can also “revivify” another poet by incorporating some aspect of the predecessor’s poetry into his own text. The poem can thus function as a medium in which poets, dead or alive, forever interact. In &lt;em&gt;Odes&lt;/em&gt; 4.12, Horace cements this aspect of poetry’s power in the image of a symposium.&lt;/p&gt;

&lt;p&gt;Horace creates a wine-for-poetry analogy to suggest the literary aspect of the symposium. Wine and nard are to poetry as a drinking party is to intertextuality. Throughout Horace’s lyric poetry, wine functions as a metonym for poetry itself. In this ode, Horace’s wine “reflects the Dionysiac power of the symposium to renew all life.”[^01.35] Steele Commager details the multivalent function of wine in Horace’s Carmina, particularly with reference to temporality and poetry:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Immortality is the dimension of an eternal present. Wine represents a seizing of the present, a freedom from contingencies of past and future alike. Bacchus adumbrates the poet’s hold upon an eternal moment, and his apotheosis into the ultimate freedom of immortality.”[^00.42]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Inviting the now dead Vergil to a symposium mediated by a fine wine, Horace attempts to create “an eternal present” via poetic &lt;em&gt;convivium&lt;/em&gt;. As he begins to drink &lt;em&gt;Liber&lt;/em&gt;, Horace ingests Bacchus’ liberating power. It is to this liberating eternal present that Horace calls Vergil to hasten.&lt;/p&gt;

&lt;p&gt;Vergil’s swift arrival does not suffice, however. He must also brink a small jar of unguent (&lt;em&gt;nardi parvus onyx&lt;/em&gt;, 4.12.17). Horace insists that without Vergil’s gift, there can be no party.[^02.24] If wine serves as metonymy for poetry, what might Vergil’s required nard represent? In the Greek sympotic tradition, spikenard (νάρδος) occasionally flavors wine (ναρδίτης).[^02.49] Horace proposes a &lt;em&gt;quid pro quo&lt;/em&gt;: Vergil’s nard for Horace’s poetry. Vergil’s unguent likely functions on the same metonymic level as Horace’s wine. Timothy Johnson suggests that the nard represents poetry: “The metaphor, gift equals poetry, transforms Vergil’s nard into a poem that he must bring to share at the symposion.”[^03.19] The unguent is not merely aromatic; it compliments the wine. Vergil must hurry and bring his poetry to this literary symposium in order to flavor Horace’s poetic wares. Vergil’s nard represents his poetry, just as wine is a metonym for Horace’s poetry. Literal unguent-mixed wine does not soak Horace’s proposed &lt;em&gt;convivium&lt;/em&gt;, but literary wine—a simulacrum of poetry.&lt;/p&gt;

&lt;p&gt;Inviting a deceased Vergil to a poetic symposium appears no less guilty of the poetic &lt;em&gt;nefas&lt;/em&gt; that doomed Vergil’s mourning in &lt;em&gt;Odes&lt;/em&gt; 1.24. There Horace reminds Vergil of the Epicurean dictum that “death is nothing” and asserts that it is &lt;em&gt;nefas&lt;/em&gt; (1.24.20) to attempt the poetic resurrection of a dead friend, which Vergil supposedly did. Yet here in &lt;em&gt;Odes&lt;/em&gt; 4.12 Horace seems to seek a similar resurrection. Scholars’ metonymic reading of the symposium fails to resolve Horace’s seemingly disparate attitudes toward death and mourning in these two odes. Furthermore, Horace suggests that he is aware of his paradoxical position. At the ode’s conclusion, Horace states sententiously: “to be foolish in the proper place is sweet” (&lt;em&gt;dulce est desipere in loco&lt;/em&gt;, 28). Under the metaphorical reading of the symposium, the “proper place” resides within the realm of poetry. Poetry functions unencumbered by death because poets’ personae can meet in the intertextual space created by allusion to one another. Nonetheless, Horace ignores standard Epicurean doctrine on death and addresses a poem to a deceased friend, seemingly contradicting his own advice to Vergil in &lt;em&gt;Odes&lt;/em&gt; 1.24.[^04.28] This is his acknowledged foolishness, yet does Horace’s response to the death of a friend truly fall victim to his own previous criticism?
No, because Horace does not seek to resurrect Vergil, but to memorialize and immortalize a friend and a friendship. That Horace avoids 1.24’s &lt;em&gt;nefas&lt;/em&gt; may be seen in the ode’s climax.&lt;/p&gt;

&lt;p&gt;There Horace advised Vergil to allow this Epicurean principle to limit his grief; now, in &lt;em&gt;Odes&lt;/em&gt; 4.12 Horace finds himself in a similar position as Vergil in 1.24—grieving the death of a friend.[^05.12] Just as it was forbidden for Vergil to return the dead Quintilius, it is utter foolishness for Horace to ask a dead Vergil to join a symposium. Horace must face the hard reality that Vergil had forgotten in 1.24: &lt;em&gt;non ita creditum&lt;/em&gt;, that there is nothing and no one to invite post-mortem.[^06.12] Yet Horace is either unable or unwilling to let Vergil’s death enter the realm of the poem. The pathos is striking as Horace invites him to come and drink, though Vergil can never arrive nor enjoy Horace’s wares. He treats the affair euphemistically, exhorting Vergil to “come quickly with your wares” (&lt;em&gt;cum tua / velox merce veni&lt;/em&gt;, 4.1221-2), yet knowing that no amount of haste can return Vergil, that there is no “Vergil” to be returned. Nonetheless, Horace addresses his deceased friend and invites him to the small symposium. Under the Epicurean philosophy that informed his criticism in &lt;em&gt;Odes&lt;/em&gt; 1.24, Horace’s post mortem apostrophe is folly in the deepest sense—it knowingly ignores reality.&lt;/p&gt;

&lt;p&gt;Yet Horace does not fully endorse such foolish responses to death; he adds a caveat. It may be sweet to indulge in grief-induced folly, but only if practiced in the proper place. Where is this folly’s fit abode? I argue that Horace believes one may only ignore the reality of death within the realm of a poem. True to his craft, Horace fashions an image, rather than presents an argument to make this point. Horace does not invite an actual Vergilius to a drinking party; he invokes Vergil’s literary persona to share in a poetic dialogue.&lt;/p&gt;

&lt;p&gt;As Jenny Strauss-Clay points out, when these two poet’s textual personae meet at this literary symposium, “the dialogue of these two poet-friends, which informed their lives and  their work, is momentarily re-animated – through the imagination, through poetry.”[^06.45]&lt;/p&gt;

&lt;p&gt;Returning to the ode’s sententious conclusion, Horace mixes the somber tenor of the ode with levity. From desired haste, Horace quickly pivots to thoughts of wine’s effects. The imperative &lt;em&gt;misce&lt;/em&gt; leads the reader to expect an image of cutting pure wine with water. Instead, Horace urges Vergil to mix “folly with your plans” (&lt;em&gt;stultitiam consiliis&lt;/em&gt;, 27). This reversal of the expected wine motif flows into the ode’s conclusion—folly is sweet in the proper place. This conclusion recalls the likewise sententious clause that closes &lt;em&gt;Odes&lt;/em&gt; 1.24:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Durum; sed levius fit patientia
  quicquid corrigere est nefas
–Odes 1.24.19-20&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is hard; but whatever is forbidden to correct becomes easier to bear with patience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The reference is structural. The two conclusions share a common metrical position for their infinitives; both &lt;em&gt;desipere&lt;/em&gt; and &lt;em&gt;corrigere&lt;/em&gt; are found after the initial trochee of the final line. While patience eases the pain of some forbidden desire, Horace reminds that such patience need not be an emotional coldness; rather, it may be best to face the necessity of death with a little foolishness. Perhaps also the conclusion of &lt;em&gt;Odes&lt;/em&gt; 4.12 also refers to the practice of Epicurean commemoration:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ἡδὺ ἡ φίλου μνήμη τεθνηκότος.
–Fragment 213&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The memory of a deceased friend is sweet.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Horace’s &lt;em&gt;dulce&lt;/em&gt; translates ἡδὺ. Within Epicurus’ Garden, members would gather for feasts to remember esteemed members now deceased. The most important of these commemorative symposia was for Epicurus himself. The practice likely derives its legitimacy from this dictum, which curiously parallels Horace’s conclusion in &lt;em&gt;Odes&lt;/em&gt; 4.12. If the ode evokes Vergil’s poetic persona, it remembers the renowned poet. Horace therefore memorializes Vergil by remembering his poetry and their friendship. The imagined &lt;em&gt;convivium&lt;/em&gt; playing out an Epicurean practice aimed at commemoration.&lt;/p&gt;

&lt;h2 id="footnotes"&gt;Footnotes&lt;/h2&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[^59.46]:  {»@spm&lt;/td&gt;
      &lt;td&gt;Add footnote citation«}&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;one finds this opinion stated as early as the fifth century in the commentary of pseudo-Acro: “[Horace] writes to a Vergil who was a wholesale dealer” (&lt;em&gt;ad Vergilium negotiatorem scribit&lt;/em&gt;). In the tenth century, two manuscripts (Paris MSS 7974 and 7971) provide similar readings: “[an ode written] to a certain Vergil who was an ointments dealer” (&lt;em&gt;ad Vergilium quendam unguentarium&lt;/em&gt;). Even in modern scholarship, many notable scholars—-Fraenkel 1981 and Putnam 2006: 205-6 chief among them—-follow this line of reasoning. They argue that Horace’s language in this poem (&lt;em&gt;iuuenum nobilium cliens&lt;/em&gt;, 15, and &lt;em&gt;studium lucri&lt;/em&gt;, 25) clashes with an invitation to a dead friend, especially one of such stature as Vergil. Fraenkel (1957: 418) goes so far as to describe Horace as “a monster of callousness” for his language.
Pro Vergil, scholars point to the ode’s Vergilian language and themes.  Belmont 1980: 1-20 imagines a Roman reader attentive to the poem’s intertextuality and contends that this reader could not but identify the addressee as the poet Vergil. The thought experiment persuades many, and today the &lt;em&gt;opinio communis&lt;/em&gt; asserts the identification (See Quinn 1963: 11, Bowra 1928: 165-7, Putnam 2006: 93, Belmont 1980: 1-20, Moritz 1969: 174-93, Porter 1973: 71-87, and Strauss-Clay 2002: 129-45). Whatever incongruities in tone scholars sense, it is difficult to imagine an early reader finishing the ode and not thinking of Rome’s recently deceased national poet. In the most recent commentary on &lt;em&gt;Odes&lt;/em&gt; 4, Richard Thomas (2011: 227) summarizes the argument: “The addressee is indeed the poet [because] &lt;em&gt;C&lt;/em&gt;. 4.12 is replete with Vergilian diction, style, and rhetorical devices, and it seems perverse to take the addressee as being anyone but the poet Vergil, the Vergilius to whom H[orace] refers by the same name on nine other occasions.”&lt;/p&gt;

&lt;p&gt;[^57.07]:  Smith &lt;em&gt;__&lt;/em&gt;: passim. He defines “textual embrace” as “a relationship … in a synchronic continuum between reader and author” (20). Smith examines how Ovid reads, revivifies, and so immortalizes Vergil by alluding to Vergil.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:3406"&gt;
      &lt;p&gt;For readings of &lt;em&gt;Odes&lt;/em&gt; 1.24, see Commager 1995: 287-90, Khan 1999, Nisbet and Hubbard 1970: 279-89, Lowrie 1994: 377-394, Putnam 1993, and West 1995: 112-15. For the Epicurean, and specifically Philodeman, influence on the ode, see Thibodeau 2003: 243-56 and Armstrong 2008: 97-99. &lt;a href="#fnref:3406" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>A Failed Graduate Student</title>
    <link rel="alternate" href="http://blog.url.com/articles/a-failed-graduate-student/"/>
    <id>http://blog.url.com/articles/a-failed-graduate-student/</id>
    <published>2015-06-16T20:18:00-04:00</published>
    <updated>2015-08-10T10:55:37-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I’m no longer a graduate student. I’ve graduated; I’m out. It’s a somewhat odd feeling, made even odder because I haven’t felt like a graduate for the last year. I was in graduate school for 3 years and got my Masters, but for the final year I was a “lame-duck” graduate student–I knew I was leaving, my department knew I was leaving, but I was still there. This lame-duck year has been odd, but it has also been the year where I have grown most, matured more, learned truly important things, and started to better understand myself. Hopefully, I can capture some glimmer of those insights in the few words that follow.&lt;/p&gt;

&lt;p&gt;When I started graduate school, I was coming off the single most successful years of my life. I had set lofty goals as an undergraduate, and I had met all of them plus some. I literally thought I was the smartest student at a university of some 10,000 students, and I had enough evidence to convince myself and maybe even some others. I had reached summits I didn’t even know existed when I first started. To put it simply, I hadn’t really ever failed. Then, I started graduate school. I came down from the mountain and entered the valley, starting a new climb. It was odd&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, certainly, to go from being convinced I was the smartest to feeling deep down that I was one of the dumbest. Everyone knew more than me, everyone knew how to talk better than me, everyone looked calmer than me, everyone was ahead of me. I had heard of “Imposter’s Syndrome” before I came to graduate school, and I thought I knew what it was. I was wrong. You think you’ll be able to spot a “syndrome” when you’re inside of it–“I won’t foolishly think I’m dumb if in actuality I’m not”, I thought. The whole crux of Imposter’s Syndrome is that it is a false perception of reality. I’ll know when I’m perceiving reality incorrectly, won’t I? Well, not to fall too deeply into the Matrix metaphor, but how will you know if your perception of reality is true or not if you don’t have any other external guide? In graduate school, I failed to find such a guide. No one ever told me that I was dumb, that I was saying dumb things, that I was mucking things up; but, no one ever told me otherwise either. For me, this was one of the hardest things about graduate school–I got virtually no feedback, and when I did, it was either generic or negative. The negative feedback, however, was apparently institutional. “Don’t worry about your first year translation exams. Everyone fails and everyone gets bad emails.” This is what multiple upper-classmen in the department told me. Well, I took my first year translation exams; I failed; I got a bad email. Apparently, just like everyone else. But how can I know that my email was “just like” everyone else’s. Why would anyone say something that wasn’t at least based in truth? Why would someone say that it didn’t appear that I &lt;em&gt;truly&lt;/em&gt; knew Latin if that was false? Maybe everyone got somewhat negative emails, but I got the truth, and the truth was horrific. I failed, and I failed hard; a first, but not the last.&lt;/p&gt;

&lt;p&gt;Failure is hard. It’s harder still when you don’t really know how to deal with it. I spent most of graduate school feeling like I had failed in small ways time and time again. Turn in a paper, no response = failure. Turn in a paper late, good response = failure. Bumble a sight-reading in class = failure. Not get through all the assigned reading = failure. Not talk enough in class = failure. Talk too much in class = failure. I’ll let you in on a nasty secret–most of those things I saw as failures, my professors didn’t even notice. One of the most liberating things that came out of me talking to my professors about my desire to leave was learning how surprised they were. They thought I was a good student, added value to the department, did good work, was bright. I never would have thought that. Never. And this is the pernicious trouble with unhandled failure–it blinds you. I couldn’t handle my failures, real or perceived, and so they built up on top of one another. Each increasing the odds that I would see more failures in the future. The more you fail, you more you think of yourself as a failures. What do failures do, they fail, so you expect to fail more, so you see more failures, and the process spirals out of control. To anyone who may read this, &lt;strong&gt;don’t be stupid, learn to handle failure&lt;/strong&gt;. Well, you would ask, how the hell do I do that? To be honest, I’m not entirely sure still, but I think I’ve gotten better, so I’ll talk about those small advancements.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Not all failures are created equal.&lt;/em&gt; This may seem obvious, but it took me an unfortunately long time to realize this simple truth. True failures live on a spectrum, some more grievous than others. A typo in this essay is a failure. Missing a bill payment is a failure. Clearly, they are different failures with different weights. Don’t waste your energy lamenting the small ones. If the problem is fixable, fix it and move on. If not, add a mental note to not make that same mistake in the future and move on. Save your energy to lament the big ones.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lament big failures.&lt;/em&gt; Don’t try to bottle away emotion caused by failure.Don’t try to act like a robot who can rationally handle the failure and move on easily. If you failed, it will make you feel bad. Actually feel that. Allow yourself to sit in that emotion for a bit. Acknowledge its existence. I let way too many failures build up because I thought I had dealt with them simply by rationalizing them. “Failed in this way, by doing these things. Don’t do those things in these situations again. Dealt with.” I was dumb.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don’t wallow.&lt;/em&gt; Sit in emotion, but don’t swim in it. You do need to move on. While only rationalizing away a failure will probably cause you more grief further down the road, not actually rationally considering how you failed, what you did to directly cause the failure, and how best to avoid that failure in the future, you will probably just spiral into depression. Failing sucks, but it is a much better learning experience than success.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Talk with someone.&lt;/em&gt; This can work on a number of fronts. You should actually talk with people to ensure that your sense of the failure (its existence, weight, repercussions) are close to reality. If only I had sat down and had frank conversations with my professors early and often, I would have learned that I was grossly over-estimating the weight of my perceived failures. But, even if you did actually fail, talking to someone ensures that you don’t try to deal with it all on your own. We’re social animals; don’t fight that.&lt;/p&gt;

&lt;p&gt;OK. This little sermonette is over, but I wanted to go down that path because it’s intensely important to me. Learning to deal with failure was the primary benefit of graduate school for me. From what I gather talking to others, it’s an absolutely essential part of any successful individual, whether graduate student or not. More importantly, however, not handling failure well is what sent me into depression. This is a deeper topic for discussion and consideration in another post, but suffice it say that I would wish for no one to become depressed due to perceived failures. I would confidently assert, without knowing anything about you individually, that you almost certainly haven’t failed as badly as you think, the repercussions aren’t as dire as you think, and your worth is still much higher than you think. If you don’t take my word for it, talk to someone else and check; you might be surprised by what they think.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;There’s that word again. I will almost certainly return to it, as its monosyllabic gruffness is the closest I can come to capturing reality. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Snippets</title>
    <link rel="alternate" href="http://blog.url.com/projects/snippets/"/>
    <id>http://blog.url.com/projects/snippets/</id>
    <published>2015-05-26T20:00:00-04:00</published>
    <updated>2016-12-02T22:18:59-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-12"&gt;Version: 1.2&lt;/h4&gt;

&lt;h4 id="download-on-packalhttpwwwpackalorgworkflowsnippets"&gt;Download on &lt;a href="http://www.packal.org/workflow/snippets"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Have you ever been taking notes and realized that certain terms or phrases were going to be used repeatedly? You don’t have the time or really the desire to create all new TextExpander snippets for these terms or phrases, but you’d also really like to shorten your typing. That’s where &lt;strong&gt;&lt;code&gt;Snippets&lt;/code&gt;&lt;/strong&gt; comes in. &lt;strong&gt;&lt;code&gt;Snippets&lt;/code&gt;&lt;/strong&gt; is a dead simple Alfred workflow that allows you to use simple snippet syntax while writing, and then seamlessly convert your text to its full glory.&lt;/p&gt;

&lt;p&gt;The set-up is simple. As you’re typing, and you realize you want to make a snippet, simply prepend your snippet with &lt;code&gt;,,&lt;/code&gt; (comma comma). Then, when you get a free moment, create a “snippet dictionary” to tell Snippets what that snippet means. To create the dictionary, simply wrap it in &lt;code&gt;^^^&lt;/code&gt; (triple carets). Here’s an example:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;This is an example of ,,sn. ,,sn is a fantastic workflow for ,,a!

^^^
sn: **`Snippets`**
a: Alfred
^^^
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;That’s all there is to it. Once your dictionary is complete and you have finished typing, either copy the text to the clipboard and use the keyword &lt;code&gt;snip&lt;/code&gt;, or assign a keyboard shortcut for even quicker results. When you activate &lt;strong&gt;&lt;code&gt;Snippets&lt;/code&gt;&lt;/strong&gt;, the text above will instantly become:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;This is an example of **`Snippets`**. **`Snippets`** is a fantastic workflow for Alfred!
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;It’s so simple. Double-comma before the snippet; dictionary wrapped in triple-carets with snippet: expanded. Nothing more, nothing less.&lt;/p&gt;

&lt;p&gt;&lt;img alt="demo" src="https://raw.githubusercontent.com/smargh/alfred_snippets/master/snippets.gif" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Wikify</title>
    <link rel="alternate" href="http://blog.url.com/projects/wikify/"/>
    <id>http://blog.url.com/projects/wikify/</id>
    <published>2015-05-26T20:00:00-04:00</published>
    <updated>2016-12-02T22:19:06-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-26"&gt;Version 2.6&lt;/h4&gt;

&lt;h4 id="download-on-packalhttpwwwpackalorgworkflowwikify"&gt;Download on &lt;a href="http://www.packal.org/workflow/wikify"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; is a workflow to add some great &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; and wiki goodness to &lt;a href="https://www.evernote.com/"&gt;Evernote&lt;/a&gt;. In this post, I want to lay out all of the functionality and how to take advantage of it.&lt;/p&gt;

&lt;h3 id="markdown-functionality"&gt;Markdown Functionality&lt;/h3&gt;

&lt;p&gt;One half of &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt;’s functionality concerns integrating Markdown and Evernote. Essentially, this means being able to send Markdown text to Evernote as HTML &lt;em&gt;and&lt;/em&gt; being able to export an Evernote note to a Markdown text file.&lt;/p&gt;

&lt;p&gt;In order to export an Evernote note to a Markdown text file, you can use the &lt;code&gt;enmd&lt;/code&gt; keyword from Alfred. &lt;code&gt;enmd&lt;/code&gt; stands for “Evernote to Markdown”, and this command will take your currently selected Evernote note and create a Markdown formatted text file which will immediately be opened in your default text editor. In addition, &lt;code&gt;enmd&lt;/code&gt; will fill in the note’s title, notebook, and tags as metadata at the top of the file (this will make it a snap to edit the note and send it back to Evernote using the &lt;code&gt;mden&lt;/code&gt; command, which I will talk about next). The workflow also comes with the ability to bind a keyboard shortcut to this function (I use &lt;code&gt;cmd + shift + 9&lt;/code&gt;). No fuss, no hassle, no wait. Export your Evernote note into Markdown in a flash.&lt;/p&gt;

&lt;p&gt;But what about getting data &lt;em&gt;into&lt;/em&gt; Evernote? &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; will also allow you to write notes in Markdown in your text editor of choice and then send that text to Evernote, where it will be formatted and displayed in proper HTML. Now, this function has a bit of quirks to it, so let me elaborate. You can launch this function in one of two ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;code&gt;mden&lt;/code&gt; keyword in Alfred&lt;/li&gt;
  &lt;li&gt;setup a keyboard shortcut&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The keyboard shortcut will actually allow you simply to select your text (&lt;code&gt;cmd + a&lt;/code&gt; for “Select All”) and then press the shortcut to run the script. Alternatively, you can select the text, &lt;em&gt;copy it to the clipboard&lt;/em&gt;, and then pop up Alfred and use the &lt;code&gt;mden&lt;/code&gt; command (this is, obviously, short for “Markdown to Evernote”). It is important to note that if you use the &lt;code&gt;mden&lt;/code&gt; command from Alfred, your Markdown text &lt;em&gt;must&lt;/em&gt; be in the clipboard.&lt;/p&gt;

&lt;p&gt;Now, how do you tell &lt;code&gt;mden&lt;/code&gt; &lt;em&gt;where&lt;/em&gt; to send your note, or what tags it should have, or what it’s title is? In order to assign Note Title, Notebook, and Tags, you can use simple &lt;a href="http://fletcherpenney.net/multimarkdown/"&gt;MultiMarkdown Headers&lt;/a&gt;, or simple symbols which are placed at the top of the document:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Title:&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt; for the note’s title&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Notebook:&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt; for the note’s notebook destination&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Tags:&lt;/code&gt; or &lt;code&gt;@&lt;/code&gt; for the note’s tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, the top of your Markdown text note might look something like this:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;# Text Note Title
= My Default Notebook
@ tag1, tag2, tag3
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;But, that’s not all that &lt;code&gt;mden&lt;/code&gt; can do. I’ve added a few extras to its capabilities. In addition to converting Markdown to text to HTML and sending that to Evernote, &lt;code&gt;mden&lt;/code&gt; has three other pretty cool features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;document-specific text snippets (use &lt;code&gt;^^^snippet^^^&lt;/code&gt; syntax)&lt;/li&gt;
  &lt;li&gt;auto-linking to pre-existing Evernote notes (no special syntax)&lt;/li&gt;
  &lt;li&gt;auto-linking to new Evernote notes (use &lt;code&gt;[[double bracket]]&lt;/code&gt; syntax)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, let me explain document-specific text snippets. This feature was inspired recently as I was taking notes in class. In-class note-taking is a bit unique, since you won’t exactly know what words will be used repeatedly before the class begins. I’m all about &lt;a href="http://smilesoftware.com/TextExpander/"&gt;TextExpander&lt;/a&gt;, but I can’t set up snippets if I don’t know what will be the key words for that class. Plus, I don’t want to clutter my TextExpander library with these one-off snippets. So, document-specific text snippets was born. The idea is to use snippets in your notes as you type, and then define the &lt;code&gt;snippet:expanded text&lt;/code&gt; relationship before you use &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; to send the notes to Evernote. The syntax is dead-simple. Simply wrap your “snippet dictionary” in triple carets (&lt;code&gt;^^^snippet:expanded text^^^&lt;/code&gt;). You can have one-off “dictionaries” or you can make one long dictionary at the end of your document. The only things you need to remember are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ALWAYS use ,, as your in-text prefix (you &lt;em&gt;can&lt;/em&gt; change this in the code)&lt;/li&gt;
  &lt;li&gt;if its a one-off (only one snippet), the “dictionary” needs to exist on its own line&lt;/li&gt;
  &lt;li&gt;if its a multi-snippet “dictionary”, use the triple carets like fenced code blocks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To ensure these few easy syntax rules makes sense, here’s an example:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;,,p are separated by a blank line.
^^^p:Paragraphs^^^
New text.
2nd paragraph. *,,i*, **,,b**, `,,m`.
^^^
i:Italics
b:BOLD
m:monospace
^^^
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Thats all there is to it. Note how each snippet is prefixed by &lt;code&gt;,,&lt;/code&gt;. This ensures that both you and the processor know what text needs to be expanded, and you don’t need to have the commas in the snippet dictionary. You can mix and match single-line snippet dictionaries with multi-snippet dictionaries in the same document. You can even use non-ASCII characters in your snippets or in your expanded text. For me, this is a killer feature. I hope someone else finds it useful.&lt;/p&gt;

&lt;p&gt;Next, auto-linking to pre-existing Evernote notes. This is really the feature at the heart of &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt;, because this is what allows you to “wikify” your Evernote library. The idea is really quite simple: write your note as you normally would (in this case in Markdown, but I’ll discuss later how this can work within Evernote itself), and &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; will ensure that anytime you reference &lt;em&gt;any other Evernote note&lt;/em&gt; by title, your note will have a hyperlink to that other note. Let me offer a simple example. Say I began a new note like so:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;# Note Title
= Notebook
@ tag1, tag2

This is the first line of my new note on Alfred App!
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, if I had a note in my Evernote account entitled “Alfred App”, when I process this note to send it to Evernote, &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; will now catch that and hyperlink to that pre-existing note, so this new note would have the phrase “Alfred App” linked directly to that other Evernote note. No fuss, no hassle, no funky syntax. And (this is what was holding me back on this feature for while), this is SUPER-FAST!&lt;/p&gt;

&lt;p&gt;The final feature that “wikifies” Evernote when you are sending Markdown text to Evernote is smoothly creating new spaces to fill with data later, while simultaneously creating the inter-linking between notes. &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; has you covered here as well. Let’s say as you’re typing up a new Evernote note, you realize that you are discussing an idea, topic, or person that you want to research further, but at some later date. What to do? Well, you can use the standard wiki-syntax of the &lt;code&gt;[[double brackets]]&lt;/code&gt; to mark that idea, topic, or person as something you want to create a new note for, while also linking to that new note from within your current note. To return to our sample note above, let’s say you added this:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;# Note Title
= Notebook
@ tag1, tag2
This is the first line of my new note on Alfred App!
I want to talk more about [[AppleScript]].
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Whenever you have &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; process this Markdown text and send it to Evernote, it will first create a new note (in the same notebook as the one specified in the meta-data) entitled “AppleScript”, then embed the Evernote hyperlink to that new note within this current note. This means that your new Evernote note will have 2 links: one to the pre-existing note “Alfred App” and one to the newly created, blank note “AppleScript”. All of this without you having to do anything but type!&lt;/p&gt;

&lt;p&gt;For anyone who prefers to write in Markdown, but loves the always-there accessibility of Evernote, this can be a powerful addition to your workflow. But obviously, not everyone writes their Evernote notes in Markdown first. Most people just write their notes directly in Evernote. But what if you wanted to still “wikify” your Evernote library, to easily create these interlinked notes? Well, I’ve tried to solve that problem too.&lt;/p&gt;

&lt;h3 id="wiki-functionality"&gt;Wiki Functionality&lt;/h3&gt;

&lt;p&gt;While I’ve already discussed some of the wiki functionality that’s inherent in the &lt;code&gt;mden&lt;/code&gt; function, that isn’t the only way to ensure that all of your Evernote data is intelligently interlinked. I have versions of both the link to pre-existing note and link to new note capabilities detailed above that work purely within Evernote. Here’s how they work.&lt;/p&gt;

&lt;p&gt;In order to interlink any of your current Evernote notes with &lt;em&gt;pre-existing&lt;/em&gt; notes, you can use the &lt;code&gt;wfy&lt;/code&gt; command from Alfred. Simply open up Evernote and select the notes you want to “wikify” (the workflow does accept multiple selections, but you shouldn’t over tax it). Once your notes are selected, pull up Alfred and use the &lt;code&gt;wfy&lt;/code&gt; (short for “wikify”) keyword. The workflow will then process each of your notes individually, auto-linking to any pre-existing other notes which it references by name. &lt;strong&gt;NOTE:&lt;/strong&gt; In order to use this feature, you will need the &lt;a href="http://www.satimage.fr/software/en/downloads_osaxen.html"&gt;Satimage OSAX Scripting Addition&lt;/a&gt;. I’ve set it up such that this is remarkably easy to install. Simply use the keyword in Alfred &lt;code&gt;wfy:install&lt;/code&gt; and the Satimage installer will boot up and walk you through the process. It really is as simple as that. The script will search your note’s content for any references to other notes’ titles. If any are found, that text will be replaced with a hyperlink to that note. Here’s a gif that shows the process in action:&lt;/p&gt;

&lt;p&gt;&lt;img alt="wfy command" src="../../images/projects/wikify/wfy.gif" /&gt;&lt;/p&gt;

&lt;p&gt;Next, let’s say that you are in Evernote and see a phrase or term in one of your notes that you want to research more, while creating the wiki-environment that &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; is all about. I’ve added a companion feature which will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;take the currently selected text in the open Evernote note&lt;/li&gt;
  &lt;li&gt;create a new note in that notebook whose title is the selected text&lt;/li&gt;
  &lt;li&gt;embed a hyperlink back to the original note as the first line of this new note&lt;/li&gt;
  &lt;li&gt;and replace the selected text with a hyperlink to that newly created note&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means that you have two-way hyperlinking (which is impossible in the &lt;code&gt;mden&lt;/code&gt; version of this functionality) between your current note and your new note. Creating spaces for new thought, while retaining context and wiki-style hyperlinking has never been easier. To use this feature, you can either use a user-specified keyboard shortcut, or copy the selected text to the clipboard and run &lt;code&gt;ensel&lt;/code&gt;. Here’s another gif to illustrate:&lt;/p&gt;

&lt;p&gt;&lt;img alt="ensel command" src="../../images/projects/wikify/ensel.gif" /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To sum up, &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; has 4 main commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;mden&lt;/code&gt; to send Markdown text to Evernote&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;enmd&lt;/code&gt; to export an Evernote note to Markdown&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;wfy&lt;/code&gt; to “wikify” the selected Evernote note&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ensel&lt;/code&gt; to create and wikify a new Evernote note from selection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these features, and all of the “sub-features” elaborated above, I truly believe that &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; could be a great help to those others out there who love Evernote, Markdown, and Wiki goodness.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>ZotQuery</title>
    <link rel="alternate" href="http://blog.url.com/projects/zotquery/"/>
    <id>http://blog.url.com/projects/zotquery/</id>
    <published>2015-05-26T20:00:00-04:00</published>
    <updated>2016-12-02T22:19:11-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-85"&gt;Version 8.5&lt;/h4&gt;

&lt;h4 id="download-on-packalhttppackalorgworkflowzotquery"&gt;Download on &lt;a href="http://packal.org/workflow/zotquery"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; is an Alfred workflow that grants the user access to the data stored in their &lt;a href="https://www.zotero.org"&gt;Zotero&lt;/a&gt; application.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="requirements"&gt;REQUIREMENTS&lt;/h3&gt;

&lt;p&gt;To date, it has only been tested on a Mac with both Zotero Firefox and Standalone installed. &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; should work with only Zotero Firefox or Standalone installed, but that is currently untested. If you are using the workflow successfully with either one only installed, please let me know. It has also only been tested on Alfred 2.1+. Finally, it was tested on the standard Python distribution for Mac OS X Mavericks (10.9), which is 2.7.6, and not on Python 3. Once again, if anyone is using the workflow successfully on another distribution of Python, please let me know.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="configuration"&gt;CONFIGURATION&lt;/h3&gt;

&lt;p&gt;When you first download the workflow, you will need to run &lt;code&gt;z:config&lt;/code&gt; first to configure the necessary settings before you attempt any queries. In fact, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; will kick you to the &lt;code&gt;z:config&lt;/code&gt; command if you try any of the queries without having first configured your settings.&lt;/p&gt;

&lt;p&gt;&lt;img alt="configuration" src="../../images/projects/zotquery/zq_config_init.png" /&gt;&lt;/p&gt;

&lt;p&gt;On first run, the configurator will begin by searching for, and creating if necessary, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;’s workflow data folder, which can always be found at &lt;code&gt;/Users/$USER/Library/Application Support/Alfred 2/Workflow Data/com.hackademic.zotquery/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, in version 5.5 and on, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;no longer needs to install any Python dependencies.&lt;/strong&gt; The workflow ships with all necessary components baked in. This has already removed a vast majority of the support issues.&lt;/p&gt;

&lt;p&gt;The configurator next moves on to find all the necessary Zotero paths. &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; requires the full path to 3 things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;your Zotero sqlite database&lt;/li&gt;
  &lt;li&gt;your Zotero storage folder&lt;/li&gt;
  &lt;li&gt;the folder that holds your linked attachments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The configurator attempts to find all necessary paths automatically, but if it fails, it will ask you to select one manually. The title of the dialog box will alert you to what path the configurator requires:&lt;/p&gt;

&lt;p&gt;&lt;img alt="choosing the Zotero folder where linked attachments reside" src="../../images/projects/zotquery/zq_config_choose-folder.png" /&gt;&lt;/p&gt;

&lt;p&gt;Once all paths are stored, the configurator moves on to set up your &lt;a href="http://www.zotero.org/support/dev/server_api/v2/start"&gt;Zotero API&lt;/a&gt; information. This workflow utilizes the Zotero API to export citations of chosen items. In order for the user to utilize these functions, they must have and set up a Zotero private key. Step one requires your Zotero User ID:&lt;/p&gt;

&lt;p&gt;&lt;img alt="entering Zotero user ID" src="../../images/projects/zotquery/zq_config_userid.png" /&gt;&lt;/p&gt;

&lt;p&gt;If you do not have or do not know your Zotero User ID, click the &lt;code&gt;Where do I find my User ID?&lt;/code&gt; button. This will open Zotero’s “Feeds/API” tab, where you may need to login. Once logged in, you will see a page similar to this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="creatingnew Zotero private key" src="../../images/projects/zotquery/Zotero___Settings___Feeds_API-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;This shows a user who has two API keys set up, one for personal use and one for the iOS app &lt;a title="PaperShip - Manage, Annotate, and Share your Papers On The Go ..." href="http://www.papershipapp.com/"&gt;PaperShip&lt;/a&gt;. If you do not have a Personal API key, you can easily set one up by clicking the “Create new private key” link. Your User ID will be a number, probably less than 8 digits. Insert it into the text field and click &lt;code&gt;Set User ID&lt;/code&gt; (&lt;strong&gt;Note&lt;/strong&gt;: Applescript text input dialog boxes do not respond, typically, to the keyboard shortcut for paste, so you will likely need to right-click and manually paste in the ID).&lt;/p&gt;

&lt;p&gt;Second, you will need to input your API Key:&lt;/p&gt;

&lt;p&gt;&lt;img alt="entering Zotero API key" src="../../images/projects/zotquery/zq_config_apikey-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; reads this &lt;code&gt;settings.json&lt;/code&gt; file whenever it attempts to connect to the Zotero API, if you don’t insert the proper data here, the “Export Citation” and “Export Reference” (see below) functions &lt;strong&gt;will not work&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; (now in version 4.0) will also allow you to set your export style and format. Once you have entered your API information, the configurator will move to setting your export preferences:&lt;/p&gt;

&lt;p&gt;&lt;img alt="choosing export style and format" src="../../images/projects/zotquery/zq_prefs1.png" /&gt;&lt;/p&gt;

&lt;p&gt;First, you will select the &lt;a href="http://citationstyles.org/"&gt;CSL Style&lt;/a&gt; that you wish to use. Currently &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; can export data in 5 different styles: Chicago (author-date), APA, MLA, Zotero’s own RTF-Scan format, and BibTeX. Now, in &lt;strong&gt;version 6.2&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; will also allow users to export in the &lt;a href="http://zotero-odf-scan.github.io/zotero-odf-scan/"&gt;ODT-RTF Scannable Cites format&lt;/a&gt; (option not shown in image below). This will determine the format of exported citations and references.&lt;/p&gt;

&lt;p&gt;&lt;img alt="choosing CSL style" src="../../images/projects/zotquery/zq_prefs2-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;Next, you will select the text formatting for exported data. &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; (in version 4.0) can export in either &lt;a href="http://daringfireball.net/projects/markdown/basics"&gt;Markdown&lt;/a&gt; or &lt;a href="http://en.wikipedia.org/wiki/Rich_Text_Format"&gt;Rich Text&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="choosing export text format" src="../../images/projects/zotquery/zq_prefs3.png" /&gt;&lt;/p&gt;

&lt;p&gt;All exported text is put in your clipboard, so you can use it anywhere in any text editor. You can also alter your export preferences at any point, using the &lt;code&gt;z:settings&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:settings command" src="../../images/projects/zotquery/zq_export_settings.png" /&gt;&lt;/p&gt;

&lt;p&gt;Finally, you will need to select which Zotero client you use, either &lt;a href="https://www.zotero.org/download/"&gt;Zotero Standalone&lt;/a&gt; or &lt;a href="https://www.zotero.org/download/"&gt;Zotero for Firefox&lt;/a&gt;. This will determine which app will open any items that you select.&lt;/p&gt;

&lt;p&gt;&lt;img alt="choosing Zotero client" src="../../images/projects/zotquery/zq_client.png" /&gt;&lt;/p&gt;

&lt;p&gt;Once all settings and preferences are set, the configurator will finally build the JSON cache of your Zotero data. &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; will clone your Zotero database and also generate a JSON file with all pertinent information. Once cached, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; is configured.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="functions"&gt;FUNCTIONS&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; has 5 main functions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Search&lt;/li&gt;
  &lt;li&gt;Cite&lt;/li&gt;
  &lt;li&gt;Open&lt;/li&gt;
  &lt;li&gt;Cache&lt;/li&gt;
  &lt;li&gt;and Add&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In general, the order of operations would be: cache, search, open/cite. This means, in order to search, you need to have an up-to-date cache, and in order to cite or open an item, you will first need to search and select it.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;Search&lt;/code&gt; there are 8 options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;General search&lt;/li&gt;
  &lt;li&gt;Title-specific search&lt;/li&gt;
  &lt;li&gt;Author-specific search&lt;/li&gt;
  &lt;li&gt;Tag-specific search&lt;/li&gt;
  &lt;li&gt;Collection-specific search&lt;/li&gt;
  &lt;li&gt;Attachment-specific search&lt;/li&gt;
  &lt;li&gt;Notes-specific search&lt;/li&gt;
  &lt;li&gt;New items only&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that all searches coerce both the query and the data into lowercase, so you can search using lowercase queries and still get matches.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;General&lt;/strong&gt; search is launched by the keyword &lt;code&gt;zot&lt;/code&gt; or the short version &lt;code&gt;z&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot general search command" src="../../images/projects/zotquery/zq_gen_init-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;This will search your entire Zotero database for any use of the query provided. The search script is “loose,” that is, it searches for matches of the query “in” the data not matches that “equal” the data. This means you can search half words, words in the middle of titles, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; will not begin searching until you have entered at least 3 characters. This ensures faster, smarter results. Until you have typed at least 3 characters, you will see this result:&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot general search with too short query" src="../../images/projects/zotquery/Screen_Shot_2014-01-18_at_6_10_23_PM-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;Once you complete your query, and the script catches up with you, you will see a list of all of your Zotero items that match the query. If your query doesn’t have any matches, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; returns an error:&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot general search no results" src="../../images/projects/zotquery/zq_error_res-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;If, however, you have results, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; presents them in a ranked order:&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot general search ranked results" src="../../images/projects/zotquery/zq_gen_search-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;For ease of use, the workflow provides unique icons for the various item types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;article   &lt;img alt="article icon" src="../../images/projects/zotquery/n_article.png" /&gt;&lt;/li&gt;
  &lt;li&gt;book      &lt;img alt="book icon" src="../../images/projects/zotquery/n_book.png" /&gt;&lt;/li&gt;
  &lt;li&gt;chapter   &lt;img alt="chapter icon" src="../../images/projects/zotquery/n_book.png" /&gt;&lt;/li&gt;
  &lt;li&gt;conference paper &lt;img alt="conference icon" src="../../images/projects/zotquery/n_conference.png" /&gt;&lt;/li&gt;
  &lt;li&gt;other &lt;img alt="other icon" src="../../images/projects/zotquery/n_written.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your item has an attachment, the icon changes to signal the addition as will the subtitle field. The subtitle field will include &lt;code&gt;Attachments: n&lt;/code&gt;, where n is the number of attachments:&lt;/p&gt;

&lt;p&gt;&lt;img alt="item with attachments" src="../../images/projects/zotquery/zq_attachments-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;The altered icons each have a small plus sign in the top-right corner:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;article + attachment  &lt;img alt="article icon with attachment" src="../../images/projects/zotquery/att_article.png" /&gt;&lt;/li&gt;
  &lt;li&gt;book + attachment     &lt;img alt="book icon with attachment" src="../../images/projects/zotquery/att_book.png" /&gt;&lt;/li&gt;
  &lt;li&gt;chapter + attachment  &lt;img alt="chapter icon with attachment" src="../../images/projects/zotquery/att_chapter.png" /&gt;&lt;/li&gt;
  &lt;li&gt;conference paper + attachment   &lt;img alt="conference icon with attachment" src="../../images/projects/zotquery/att_conference.png" /&gt;&lt;/li&gt;
  &lt;li&gt;other + attachment    &lt;img alt="other icon with attachment" src="../../images/projects/zotquery/att_written.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;Author&lt;/strong&gt; search is launched by &lt;code&gt;zot:a&lt;/code&gt; or the short version &lt;code&gt;za&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot:a author search command" src="../../images/projects/zotquery/zq_a_init-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;This search only queries the last names of the authors of your Zotero data. For example: &lt;code&gt;zot:a thomas&lt;/code&gt; will return all the items that have an author (or editor, translator, etc.) with the last name “Thomas”.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot:a author search results" src="../../images/projects/zotquery/zq_a_search-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Title&lt;/strong&gt; search is launched by &lt;code&gt;zot:t&lt;/code&gt; or the short version &lt;code&gt;zt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot:t title search command" src="../../images/projects/zotquery/zq_t_init-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;This search only queries the title fields of your Zotero data. For example: &lt;code&gt;zot:t virgil&lt;/code&gt; will return all of the items whose title contains the word “Virgil”.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot:t title search results" src="../../images/projects/zotquery/zq_t_search.png" /&gt;&lt;/p&gt;

&lt;p&gt;The final two searches (Tag and Collection) are two-step searches. In step-one, you search &lt;em&gt;for&lt;/em&gt; a particular Tag or Collection; in step-two you search &lt;em&gt;within&lt;/em&gt; that particular Tag or Collection for your query.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Tag&lt;/strong&gt; search is launched by &lt;code&gt;z:tag&lt;/code&gt; or the short version &lt;code&gt;ztg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:tag tags search command" src="../../images/projects/zotquery/zq_tag_init.png" /&gt;&lt;/p&gt;

&lt;p&gt;This allows you to search through all of your Zotero tags.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:tag tags search results" src="../../images/projects/zotquery/zq_tag_search.png" /&gt;&lt;/p&gt;

&lt;p&gt;Once you select a tag, Alfred will automatically initiate the &lt;code&gt;zot:tag&lt;/code&gt; search, which will search within that tag for your query. The &lt;code&gt;zot:tag&lt;/code&gt; (or &lt;code&gt;znt&lt;/code&gt;) query functions just like the general &lt;code&gt;zot&lt;/code&gt; query, except that it is limited to those items with the previously chosen tag.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot:tag in-tag search results" src="../../images/projects/zotquery/zq_intag_seach.png" /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Collection&lt;/strong&gt; search is similar. It is launched by &lt;code&gt;z:col&lt;/code&gt;, or by &lt;code&gt;zc&lt;/code&gt;, which begins a search for all of your Zotero collections.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:col collections search command" src="../../images/projects/zotquery/zq_col_init.png" /&gt;&lt;/p&gt;

&lt;p&gt;As you type, it will filter any collections that contain the query.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:col collections search results" src="../../images/projects/zotquery/zq_col_search-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;Once you choose a particular collection, Alfred will initiate the &lt;code&gt;zot:c&lt;/code&gt; search (also &lt;code&gt;znc&lt;/code&gt;), which will search within that particular collection.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot:c in-collection search results" src="../../images/projects/zotquery/zq_incol_search.png" /&gt;&lt;/p&gt;

&lt;p&gt;As above, the &lt;code&gt;zot:c&lt;/code&gt; search functions just like the simple &lt;code&gt;zot&lt;/code&gt; search.&lt;/p&gt;

&lt;p&gt;Finally, you can now (after version 4.1) search only items with attachments using the &lt;code&gt;z:att&lt;/code&gt; query (short version = &lt;code&gt;zat&lt;/code&gt;). This query allows you to quickly find pdfs or epubs in your Zotero library and open them in your default application. As of now, &lt;code&gt;z:att&lt;/code&gt; only allows for you to open the attached files.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:att attachments search results" src="../../images/projects/zotquery/zq_attachment_search.png" /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, you can use &lt;code&gt;zot:n&lt;/code&gt; (or &lt;code&gt;zn&lt;/code&gt;) to search through the notes for any items. This can prove very helpful for people who use Zotero as their notes repository for all of their secondary sources.&lt;/p&gt;

&lt;p&gt;Finally, the &lt;code&gt;z:new&lt;/code&gt; search will bring all of the items added to Zotero since the last cache update. This feature is there to make it easier to find items if you do one long research run, adding lots of items to Zotero before re-using &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;. Using &lt;code&gt;z:new&lt;/code&gt; you can double check exactly what’s been added.&lt;/p&gt;

&lt;p&gt;Together these 8 search options provide you with various ways to find the exact item you need. Once you find that item, you have a few options with what you can do next.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Once you select an item (in all the searches except &lt;code&gt;z:att&lt;/code&gt;), there are 5 options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open Zotero to that item.&lt;/li&gt;
  &lt;li&gt;Export a short reference to that item.&lt;/li&gt;
  &lt;li&gt;Export a citation of that item.&lt;/li&gt;
  &lt;li&gt;Open the item’s attachment (if it has any).&lt;/li&gt;
  &lt;li&gt;Append a citation of the item to a temporary bibliography&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you merely hit &lt;code&gt;return&lt;/code&gt; on your chosen item, option 1 will occur and Zotero will open to that item.&lt;/p&gt;

&lt;p&gt;If you hit &lt;code&gt;option+return&lt;/code&gt; when you choose your item, you will export a short reference to that item.&lt;/p&gt;

&lt;p&gt;&lt;img alt="export reference" src="../../images/projects/zotquery/zq_gen_ref.png" /&gt;&lt;/p&gt;

&lt;p&gt;Depending on your style and format settings, your reference will be of various types.&lt;/p&gt;

&lt;p&gt;If you hit &lt;code&gt;control+return&lt;/code&gt;, you will export a full citation of the item in your chosen format.&lt;/p&gt;

&lt;p&gt;&lt;img alt="export markdown citation" src="../../images/projects/zotquery/zq_gen_cite.png" /&gt;&lt;/p&gt;

&lt;p&gt;Next, if you hit &lt;code&gt;shift+return&lt;/code&gt;, you will open the attachment of that item.&lt;/p&gt;

&lt;p&gt;&lt;img alt="open attachment" src="../../images/projects/zotquery/zq_gen_open.png" /&gt;&lt;/p&gt;

&lt;p&gt;Finally, if you hit &lt;code&gt;fn+return&lt;/code&gt;, you will append a citation of the item to a temporary bibliography file.&lt;/p&gt;

&lt;p&gt;&lt;img alt="append markdown citation to bibliography" src="../../images/zq_gen_append.png" /&gt;&lt;/p&gt;

&lt;p&gt;This bibliography file is stored in the workflow’s cache folder. You can add as many citations to it as you wish. This function allows you to dynamically build a Bibliography/Works Cited page. When you have put all the needed citations in the temporary file, you need only run the &lt;code&gt;z:bib&lt;/code&gt; command to export them.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:bib export command" src="../../images/projects/zotquery/zq_bib_init-5.png" /&gt;&lt;/p&gt;

&lt;p&gt;This will take all of the citations in the temporary bibliography file, organize them in alphabetical order, and copy the result to the clipboard. A result in Markdown format will resemble this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="exported markdown citations example" src="../../images/projects/zotquery/WORKS_CITED-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;The temporary bibliography file is not the only way, however, to automatically generate a full Bibliography/Works Cited page. Since many Zotero users, myself included, use either Tags or Collections to organize their library into writing projects, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; also allows the user to export a full formatted bibliography (in alphabetical order) for any Tag or Collection.&lt;/p&gt;

&lt;p&gt;When you are searching for a Tag or a Collection with &lt;code&gt;z:tag&lt;/code&gt; or &lt;code&gt;z:col&lt;/code&gt;, you can use &lt;code&gt;control+return&lt;/code&gt; to export a bibliography of that Tag or Collection, instead of simply searching within that Tag or Collection by hitting &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="export bibliography of collection" src="../../images/projects/zotquery/zq_col_bib.png" /&gt;&lt;/p&gt;

&lt;p&gt;Thus, if you organize the citations for particular project within a certain Collection or under a certain Tag, you can create full, formatted Works Cited pages on the fly from &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Taken together, these export options make &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; an academic’s best friend in the writing process. You can insert in-text references, full citations, or generate entire Works Cited all from &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;. These citations, references, and bibliographies can also now be Rich Text in addition to Markdown. This allows users who write in &lt;a href="http://office.microsoft.com/en-us/word/"&gt;Microsoft Word&lt;/a&gt;, &lt;a href="http://www.apple.com/mac/pages/"&gt;Pages&lt;/a&gt;, or &lt;a href="http://literatureandlatte.com/scrivener.php"&gt;Scrivener&lt;/a&gt; to utilize &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;. You can also open Zotero directly to an item (for quick meta-data editing) or even open an item’s attachment to double check a quote.&lt;/p&gt;

&lt;p&gt;There are, however, a few caveats and possible configurations. First, these final options (export reference, export citations, append citation, and generate works cited) all use Zotero’s web API, and so they require an internet connection. If you are not connected to the internet, all will fail (gracefully). Second, the workflow defaults to Chicago (author-date) style both for short references and full citations (examples above). If you wish to use another of Zotero’s CSL styles, you will need to change the style via the &lt;code&gt;z:settings&lt;/code&gt; command. Since &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; now exports BibTeX and RTF-Scan cite keys, even users who prefer to write in [MultiMarkdown](http://fletcherpenney.net/multimarkdown/ “MultiMarkdown - fletcherpenney.net”) and convert to [LaTeX](http://www.latex-project.org/ “LaTeX – A document preparation system”) can utilize &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: These features will also require that you have the proper Zotero API data in the &lt;code&gt;settings.json&lt;/code&gt; file. For instructions on setting this up, see above.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;There is also the Caching function. All of the query scripts are querying a JSON cache of your Zotero database. This file is created and then updated with the keyword &lt;code&gt;z:cache&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:cache caching command" src="../../images/projects/zotquery/zq_cache_init-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;This function will find your Zotero sqlite database, read its contents, and create a JSON cache of the pertinent information.&lt;/p&gt;

&lt;p&gt;When you first download the workflow, the configurator will run this command in order to create the cache that all of the query scripts will read. You will always be able to update the cache with this command as well, although the workflow is configured to auto-update the cache after every query execution; that is, after you do any action on an item (open, reference, citation, append). This means that after you perform an action on an item, the workflow will check if the cache needs updating and if so, the workflow will update it in the background.&lt;/p&gt;

&lt;p&gt;Note, however, that if you have altered your Zotero data and are about to use &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;, you will need to force an update using &lt;code&gt;z:cache&lt;/code&gt; before any of the queries have access to the new information. As a general rule of thumb, I will force update the cache each time I sit down to a lot of work with &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;, but will let it auto-update most of the time.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="additional-features"&gt;ADDITIONAL FEATURES&lt;/h3&gt;

&lt;p&gt;Aside from the core features, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; comes with some additional features. First, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; comes with the ability to set up a keyboard shortcut to launch the title-specific search. I use &lt;code&gt;command+shift+Z&lt;/code&gt; as my hotkey. If you setup the hotkey, you can launch immediately into the title search (with a snazzy interface):&lt;/p&gt;

&lt;p&gt;&lt;img alt="auto title search" src="../../images/projects/zotquery/zq_hotkey_search-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;You can also change this hotkey to launch whichever query you like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; also has the ability to be an option in your Alfred fallback searches. In order to setup &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; as a fallback search option, open Alfred’s preferences and go to the &lt;code&gt;Features&lt;/code&gt; tab. Near the bottom of the page you will see a button to &lt;code&gt;Setup fallback results&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img alt="add fallback search in preferences pt. 1" src="../../images/projects/zotquery/zq_fallback_setup-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;When you click that button a panel will slide out of top:&lt;/p&gt;

&lt;p&gt;&lt;img alt="add fallback search in preferences pt. 2" src="../../images/projects/zotquery/zq_fallback-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;code&gt;+&lt;/code&gt; button and select &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; from the &lt;code&gt;Workflow Trigger&lt;/code&gt; list. You can even re-order the fallback searches, and put &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; near the top. When setup, this will allow you to search in Alfred like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="add fallback search in preferences pt. 3" src="../../images/projects/zotquery/zq_fallback_search-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;And have it immediately become a &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; search.&lt;/p&gt;

&lt;p&gt;It’s also possible to manually determine what &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; will use to search for the various query types. &lt;strong&gt;NOTE:&lt;/strong&gt; This is probably a &lt;em&gt;power-user&lt;/em&gt; feature and not for those who don’t know their way around JSON.&lt;/p&gt;

&lt;p&gt;In order to alter the search scope for any query type, you will need to find and open the &lt;code&gt;zot_filters.json&lt;/code&gt; file in &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;’s storage folder (&lt;code&gt;z:bug&lt;/code&gt; -&amp;gt; &lt;code&gt;Storage&lt;/code&gt; to open that folder). If you edit this file, it changes what &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; looks at for the various filters. The file is (obviously) in JSON format. The keys are the various types of filters (&lt;code&gt;general&lt;/code&gt;, &lt;code&gt;titles&lt;/code&gt;, &lt;code&gt;in-collection&lt;/code&gt;, etc). For each key, there is a list of items that it will search. This items are themselves lists with two items (except for &lt;code&gt;notes&lt;/code&gt;, which is only one item). To remove an item, be sure to remove its entirety:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;[
"data",
"title"
],
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;You could also use a scripting language to read the JSON, manipulate the dictionary, then overwrite the file with new JSON.&lt;/p&gt;

&lt;p&gt;Another “power-user” feature allows users to limit the overall scope of &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; to only their personal library. Since &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; now indexes and caches any Group Libraries that you may be a part of, these items are searchable from &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;. However, it is occasionally the case that user’s don’t want to search these items, but only their own personal items. In order to restrict &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;’s scope to &lt;em&gt;only&lt;/em&gt; your personal library, you only need to change a few things.&lt;/p&gt;

&lt;p&gt;If you open Alfred and &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;, and you open the Run Script action connected to &lt;code&gt;z:cache&lt;/code&gt; you will find this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python zotquery.py --cache True False&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;These three arguments tell zotquery to use the caching object (&lt;code&gt;--cache&lt;/code&gt;), to force a cache update (&lt;code&gt;True&lt;/code&gt;) and to not limit the scope to only the user’s personal library (&lt;code&gt;False&lt;/code&gt;). As detailed in the description at the top of &lt;code&gt;zotquery.py&lt;/code&gt;, the last argument is a Boolean value for whether or not to limit the scope of the cache to the user’s personal library. By default, it is set to &lt;code&gt;False&lt;/code&gt;, which means that group libraries are included in &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;’s cache. If you change this to &lt;code&gt;True&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; will only cache your personal library, and thus will only search your personal library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; also has a cache updater that runs each time you perform an action. This is the Run Script action beneath the “Citation Copied!” notification for each filter type. If you open this Run Script action you will see:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python zotquery.py --cache False False&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will check to see if the cache needs updating (thus the &lt;code&gt;False&lt;/code&gt; force argument), and will include all libraries. To exclude group libraries, change each of these Run Script actions to:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python zotquery.py --cache False True&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So that’s how you use &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;. It’s a powerful tool. I hope you like it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pandoctor</title>
    <link rel="alternate" href="http://blog.url.com/projects/pandoctor/"/>
    <id>http://blog.url.com/projects/pandoctor/</id>
    <published>2015-05-26T20:00:00-04:00</published>
    <updated>2016-12-02T22:18:42-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-105"&gt;Version: 1.0.5&lt;/h4&gt;

&lt;h4 id="download-from-packalhttpwwwpackalorgworkflowpandoctor"&gt;Download from &lt;a href="http://www.packal.org/workflow/pandoctor"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;version 1.0.5: fixes a small bug in the template variables&lt;/li&gt;
  &lt;li&gt;version 1.0.2: fixes bug with user template commands&lt;/li&gt;
  &lt;li&gt;version 1.0.1: adds pdf as output in &lt;code&gt;dr:out&lt;/code&gt; filter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href="https://github.com/jgm/pandoc/releases/tag/1.13.0.1"&gt;Pandoc 1.13.0.1&lt;/a&gt; is now out. This is a major upgrade, which includes the &lt;code&gt;.docx&lt;/code&gt; files as input files. This means you can convert Word files to Markdown files! Anyways, once you update pandoc, you will need to run &lt;code&gt;dr:config&lt;/code&gt; again for &lt;code&gt;Pandoctor&lt;/code&gt; to update its internals for the new version of pandoc. This will then show &lt;code&gt;.docx&lt;/code&gt; in the inputs window, and will properly interface with Pandoc 1.13.&lt;/p&gt;

&lt;p&gt;So, enjoy the newest versions of Pandoc and Pandoctor!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="introduction"&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; is a relatively simple, easy-to-use way to bring the high-powered functionality of &lt;a href="http://johnmacfarlane.net/pandoc/"&gt;&lt;code&gt;pandoc&lt;/code&gt;&lt;/a&gt; to you. For those new to &lt;code&gt;pandoc&lt;/code&gt;, &lt;code&gt;pandoc&lt;/code&gt; is “the universal document converter”. It is an amazingly powerful utility that allows you to convert structured text from a ton of possible input formats to an even larger number of output formats.&lt;/p&gt;

&lt;p&gt;A potential downside to &lt;code&gt;pandoc&lt;/code&gt;, however, for many users is that it is entirely a command line utility. This means, on the Mac, you &lt;em&gt;have to&lt;/em&gt; open Terminal to use it. For many Mac/Alfred users, this is at least slightly daunting. Yet I believe that this should not be a deterrent to more people coming to use the power of &lt;code&gt;pandoc&lt;/code&gt;. This is the reason for &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt;. Now, Alfred users can enjoy the comfortability and familiarity of the Alfred interface to manage &lt;code&gt;pandoc&lt;/code&gt;. Here’s how:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; is accessed via &lt;a href="http://support.alfredapp.com/workflows:config:triggers-file-action"&gt;File Actions&lt;/a&gt;. The basic file action is “New Pandoc Conversion”, which will kick off a series of interactive Alfred menus to create your &lt;code&gt;pandoc&lt;/code&gt; conversion. Once you have chosen the file you want to convert and selected the file action, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; works in 4 stages:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;specify the text format of the chosen file&lt;/li&gt;
  &lt;li&gt;chose the output format you want for the converted file&lt;/li&gt;
  &lt;li&gt;chose any options you want for the conversion process&lt;/li&gt;
  &lt;li&gt;run &lt;code&gt;pandoc&lt;/code&gt; to convert the input file using your chosen options&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Luckily, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; is built to move you through these four steps seamlessly and without any interaction on your part aside from selecting and setting the formats and options you want. Let’s walk through the steps.&lt;/p&gt;

&lt;h2 id="configuration"&gt;Configuration&lt;/h2&gt;

&lt;p&gt;When you first download &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt;, you will need to configure a few settings. Luckily, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; takes care of this for you. All you need to do is use the &lt;code&gt;dr:config&lt;/code&gt; keyword to get everything set up. Once you see the completion notification, you can start using &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; for real.&lt;/p&gt;

&lt;h2 id="running-a-new-pandoc-conversion"&gt;Running a new &lt;code&gt;pandoc&lt;/code&gt; Conversion&lt;/h2&gt;

&lt;h3 id="using-the-file-action"&gt;Using the File Action&lt;/h3&gt;

&lt;p&gt;If you’ve configured, you begin &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; by using &lt;a href="http://support.alfredapp.com/features:file-search"&gt;Alfred’s file navigation abilities&lt;/a&gt; to find the file you want &lt;code&gt;pandoc&lt;/code&gt; to convert for you. Once you’ve found the file, enter Alfred’s File Actions pane for that file (by default this is &lt;code&gt;→&lt;/code&gt;). Then find &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt;’s “New Pandoc Conversion” file action:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Conversion File Action" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/file_action_new.png" /&gt;&lt;/p&gt;

&lt;h3 id="selecting-the-input-format"&gt;Selecting the Input Format&lt;/h3&gt;

&lt;p&gt;This tells &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; to begin a new conversion on that file. Once you select “New Pandoc Conversion”, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; will automatically ask you to choose the format of this input file:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`dr:in` Filter" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_in.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; tries to be smart about formatting, so it will pre-fill the search bar with what it believes to be the file’s formatting. However, if you need to, you can simply delete this and start searching yourself. You will see that &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; displays the full name of the input format as well as a short description to help you discern between similar formats (such as the 4 types of &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; &lt;code&gt;pandoc&lt;/code&gt; accepts).&lt;/p&gt;

&lt;h3 id="selecting-the-output-format"&gt;Selecting the Output Format&lt;/h3&gt;

&lt;p&gt;When you choose the input format, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; will then automatically ask you to select what format you want the outputted, converted file to be:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`dr:out` Filter" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_out.png" /&gt;&lt;/p&gt;

&lt;p&gt;You have access to the full range of possible output formats from this selection. You can use the arrow keys to navigate down, or start searching for your desired output format by name:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`dr:out` Searching" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_out_search.png" /&gt;&lt;/p&gt;

&lt;h3 id="selecting-any-options"&gt;Selecting any Options&lt;/h3&gt;

&lt;p&gt;As soon as you select the output format, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; will ask you what Options you want to add to this &lt;code&gt;pandoc&lt;/code&gt; conversion:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`dr:opt` Filter" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt.png" /&gt;&lt;/p&gt;

&lt;h4 id="pandoctor-ui"&gt;&lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; UI&lt;/h4&gt;

&lt;p&gt;There are a few elements to the UI that require more explanation. First, you see that some items have the inner rectangle filled, and others do not. This is your visual cue to determine which options are active for this conversion (filled) and which are not (empty).&lt;/p&gt;

&lt;h4 id="pandoctor-default-options"&gt;&lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; Default Options&lt;/h4&gt;

&lt;p&gt;When you first come to this “screen” or “window” (not sure what to call individual Alfred windows/pop-ups), you will see that some options are already filled, even though you didn’t select them. These are &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt;’s &lt;code&gt;Default Options&lt;/code&gt;. The file (&lt;code&gt;pandoc_defaults.json&lt;/code&gt;) specifying which options are by default always on (filled) can be found inside the workflow’s folder (if you need to open this folder, you can do so easily using the &lt;code&gt;dr:help&lt;/code&gt; keyword and selecting &lt;code&gt;Root&lt;/code&gt;). This file also has comments for most options, which gives some information about them (Obviously, for detailed information about &lt;code&gt;pandoc&lt;/code&gt;’s options, visit the &lt;a href="http://johnmacfarlane.net/pandoc/README.html"&gt;User Guide&lt;/a&gt;). When installed, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; has 4 default options on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;parse-raw&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Description: “Parse untranslatable HTML codes and LaTeX environments as raw HTML or LaTeX, instead of ignoring them.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;smart&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Description: “Produce typographically correct output, converting straight quotes to curly quotes, — to em-dashes, – to en-dashes, and … to ellipses.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;normalize&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Description: “Normalize the document after reading: merge adjacent Str or Emph elements, for example, and remove repeated Spaces.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;standalone&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Description: “Produce output with an appropriate header and footer (e.g. a standalone HTML, LaTeX, or RTF file, not a fragment).”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="user-default-options"&gt;User Default Options&lt;/h4&gt;

&lt;p&gt;If you want to set your own default options (overriding these), you can use the &lt;code&gt;dr:defs&lt;/code&gt; keyword. This will provide a “window” similar to the standard Options window, but without anything selected. Here select whatever items you want to be on by default for any new conversion.&lt;/p&gt;

&lt;h3 id="selecting-any-options-pt-2"&gt;Selecting any Options, pt. 2&lt;/h3&gt;

&lt;p&gt;Back to the &lt;code&gt;Options Selection&lt;/code&gt;, though. You will also see that that there are 2 basic types of options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Boolean&lt;/li&gt;
  &lt;li&gt;Argument&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="selecting-boolean-options"&gt;Selecting Boolean Options&lt;/h4&gt;

&lt;p&gt;If you select a Boolean option, it will simply “turn on” (the rectangle will be filled) and this screen will refresh. For example, here’s this screen right before I choose to “turn on” the &lt;code&gt;strict&lt;/code&gt; option:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`parse` Option off" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_parse_off.png" /&gt;&lt;/p&gt;

&lt;p&gt;and here’s what the screen looks like as soon as it refreshes after I selected that option:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`parse` Option on" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_parse_on.png" /&gt;&lt;/p&gt;

&lt;h4 id="selecting-argument-options"&gt;Selecting Argument Options&lt;/h4&gt;

&lt;p&gt;So, “turning on” Boolean options is simple. Argument options, however, require a bit more work. As the name suggests, this type of option requires more information (an “argument”). (Again, if any of this is confusing, I would highly recommend reading through &lt;code&gt;pandoc&lt;/code&gt;’s &lt;a href="http://johnmacfarlane.net/pandoc/README.html"&gt;User Guide&lt;/a&gt;). This means that you will need to tell &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; what you want the “argument”, the information, to be. So, whenever you select an &lt;code&gt;Argument&lt;/code&gt; option, you are taken to an intermediary “screen” where you can supply the needed information. For example, if I were to select the &lt;code&gt;toc-depth&lt;/code&gt; argument option, I would then see this screen:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Set Option Empty" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_set_pre.png" /&gt;&lt;/p&gt;

&lt;p&gt;I would then fill in the information (I want the Table of Contents in the converted  file to only go 4 levels deep):&lt;/p&gt;

&lt;p&gt;&lt;img alt="Set Option Filled" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_set_filled.png" /&gt;&lt;/p&gt;

&lt;p&gt;Once you fill in the information, press &lt;code&gt;return&lt;/code&gt; (i.e. “Set argument value of chosen option”) and return to the base Options “screen”.&lt;/p&gt;

&lt;h4 id="finalizing-options"&gt;Finalizing Options&lt;/h4&gt;

&lt;p&gt;Now, as soon as you have set all of the options you need, you only need to select the top item on this “screen”: &lt;code&gt;Done setting Options?&lt;/code&gt;. This will close this screen. As I’ve noted before, if you instead select an option, this screen will merely refresh.&lt;/p&gt;

&lt;h4 id="pandoctor-ui-pt-2"&gt;&lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; UI, pt. 2&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;A small UI note&lt;/em&gt;: there is always a “header” for every list that &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; displays. However, there are 2 different kinds of headers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;informational and non-selectable&lt;/li&gt;
  &lt;li&gt;interrogative and selectable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The purely informational headers have the little &lt;code&gt;i&lt;/code&gt; in the center. These headers are found when selecting input and output formats. They cannot be selected; they simply tell you what that “screen” is. The interrogative headers, however, can be selected. These have the &lt;code&gt;?&lt;/code&gt; in the center. You will use these to “close” the screen you are viewing.&lt;/p&gt;

&lt;h4 id="running-your-pandoc-conversion"&gt;Running your &lt;code&gt;pandoc&lt;/code&gt; Conversion&lt;/h4&gt;

&lt;p&gt;Returning to the flow of the conversion, you have just finished selecting all of the options for your &lt;code&gt;pandoc&lt;/code&gt; conversion. As soon as you hit &lt;code&gt;Done setting Options?&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; will begin processing the conversion. This process can take a bit of time (particularly when generating PDFs), but when it is complete, you will see a notification in the top right of your screen:&lt;/p&gt;

&lt;p&gt;&lt;img alt="notify" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_notification.png" /&gt;&lt;/p&gt;

&lt;p&gt;That’s all there is to it really. In 4 simple steps, you can convert just about anything. However, for those more inclined toward “power-use”, there are a few other abilities under &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt;’s hood.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="ignoring-options"&gt;Ignoring Options&lt;/h2&gt;

&lt;p&gt;First off, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; offers the ability to “hide” or “ignore” certain options in the Select Options screen. &lt;code&gt;pandoc&lt;/code&gt; itself offers &lt;em&gt;a lot&lt;/em&gt; of options, and always seeing them all is often unnecessary. If there are any options that you &lt;strong&gt;never&lt;/strong&gt; use, you can simply remove them. To do this, you need to use the &lt;code&gt;dr:ignore&lt;/code&gt; keyword:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`dr:ignore` Filter" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore.png" /&gt;&lt;/p&gt;

&lt;p&gt;This will bring up a “screen” almost identical to the Select Options screen, but here you are choosing what options are hidden from that other screen. Once again, the two icons are informative. If an item is filled in, this means that it is going to be ignored:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`data-dir` Ignored" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore_data_on.png" /&gt;&lt;/p&gt;

&lt;p&gt;Otherwise (not filled in), it will appear in the standard Select Options window:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`data-dir` Not Ignored" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore_data_off.png" /&gt;&lt;/p&gt;

&lt;p&gt;As with the basic window, you can search here or just use the arrow keys. Select all of the options you want to ignore, and when you are done, select &lt;code&gt;Done setting Ignore?&lt;/code&gt; to exit.&lt;/p&gt;

&lt;h2 id="template-commands"&gt;Template Commands&lt;/h2&gt;

&lt;p&gt;For those who use &lt;code&gt;pandoc&lt;/code&gt; frequently, you will likely use the same basic command over and over again. If that’s the case, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; has a “power-user” feature just for you. In addition to the “on-the-fly” conversion available via the “New Pandoc Conversion” file action, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; also hase a “Templated Pandoc Conversion” file action:&lt;/p&gt;

&lt;p&gt;&lt;img alt="template" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/file_action_template.png" /&gt;&lt;/p&gt;

&lt;p&gt;This action grants you access to any and all &lt;code&gt;pandoc&lt;/code&gt; template commands you have set up. Before I detail how to create a new template, let’s briefly discuss the elements of a template. &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; ships with a file in the workflow directory that has some sample templates. This file is titled &lt;code&gt;pandoc_templates.json&lt;/code&gt;. If you open this file in your text editor of choice, it will look just like this:&lt;/p&gt;

&lt;h3 id="sample-templates"&gt;Sample Templates&lt;/h3&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;/*
    PANDOC TEMPLATED COMMANDS

    The ``defaults``, at initiation the `parse-raw`, `smart`, `normalize`, and `standalone`
    options, are found at ``pandoc_defaults.json``.

    HOW TO CREATE TEMPLATE:
        + take your CLI pandoc command
            (e.g. "pandoc -s -S --toc -c pandoc.css -A footer.html README -o example3.html")
        + convert all "short option + space + argument" to "long option + '=' + argument"
            (e.g. "pandoc -s -S --toc --css=pandoc.css --include-after-body=footer.html README --output=example3.html")
        + split all options into list of individual options
            (e.g. [pandoc, -s, -S, --toc, --css=pandoc.css, --include-after-body=footer.html, README, --output=example3.html])
        + remove initial call to `pandoc` and replace input text path with ``{input}`` variable
            (e.g. [-s, -S, --toc, --css=pandoc.css, --include-after-body=footer.html, {input}, --output={input}.html])
        + make sure every option is a JSON string
            (e.g. ["-s", "-S", "--toc", "--css=pandoc.css", "--include-after-body=footer.html", "{input}", "--output={input}.html"])
        + give it a memorable name
        + determine if you want to automatically add your default options to the command or not.

    In order to make your templates more extensible, you can use any of 3 built-in
    variables that relate to the file chosen to convert:
        * {input_file} = The full path to the file, including file extension
        * {input_name} = The full path to the file, without file extension
        * {input_dir} = The full path to the parent directory of the file

    For example, this template would only work if you kept a project directory
    that contained both `biblio.bib` and `chicago-author-date.csl` alongside
    your input file.
        {
            "name": "Biblio Test",
            "use_defaults": false,
            "options": [
                "-s",
                "-S",
                "--biblio={input_dir}/biblio.bib",
                "--csl={input_dir}/chicago-author-date.csl",
                "{input_file}",
                "--output={input_name}.html"
            ]
        }
*/
[
    {
        "name": "XeLaTeX PDF",
        "use_defaults": true,
        "options": [
            "-N",
            "--variable=mainfont:Georgia",
            "--variable=sansfont:Arial",
            "--variable=monofont:\"Andale Mono\"",
            "--variable=fontsize:12pt",
            "{input_file}",
            "--latex-engine=xelatex",
            "--toc",
            "--output={input_name}.pdf"
        ]
    },
    {
        "name": "Pandoc MD -&amp;gt; HTML",
        "use_defaults": true,
        "options": [
            "--toc",
            "--css=pandoc.css",
            "{input_file}",
            "--output={input_name}.html"
        ]
    }
]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h3 id="template-elements"&gt;Template Elements&lt;/h3&gt;

&lt;p&gt;As you can see, it comes with two “default” templates, as well as one commented-out template. These are there to help you see the format of the JSON as well as &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt;’s unique features. As the default templates show, each template must have 3 keys:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;use_defaults&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;options&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The type of value for each of these is fixed. For &lt;code&gt;name&lt;/code&gt;, you must use a string; for &lt;code&gt;use_defaults&lt;/code&gt;, you use a Boolean (either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;); and for &lt;code&gt;options&lt;/code&gt;, you use a list/array of strings. The &lt;code&gt;name&lt;/code&gt; parameter is simple; this is the name of your template (what will be displayed when you are asked to choose which template you want to use). The &lt;code&gt;use_defaults&lt;/code&gt; parameter is fairly self-explanatory as well; do you want to automatically add the default options to this command or not? It is the &lt;code&gt;options&lt;/code&gt; parameter where the magic happens, and this is the one that requires the most precision.&lt;/p&gt;

&lt;p&gt;As the comments in the file will tell you, you need to properly format your &lt;code&gt;pandoc&lt;/code&gt; command for use as a &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; template. This means, each option is its own item in the list and each option is without spaces (unless properly quoted). This will require you to use the “long” version of any option along with the an equals [&lt;code&gt;=&lt;/code&gt;]. The 3 given examples give thorough demonstration of what acceptable templates can look like.&lt;/p&gt;

&lt;h3 id="template-variables"&gt;Template Variables&lt;/h3&gt;

&lt;p&gt;In addition to these formatting requirements, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; also gives you the ability to abstract your template properly. For any template, you have access to 3 variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;{input_file}&lt;/code&gt; = The full path to the file, including file extension&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;{input_name}&lt;/code&gt; = The full path to the file, without file extension&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;{input_dir}&lt;/code&gt; = The full path to the parent directory of the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These variables will allow you to properly use your template with any conversion. You will see that every template should use &lt;code&gt;{input_file}&lt;/code&gt; and &lt;code&gt;{input_name}&lt;/code&gt; for the input and output options respectively. In addition, if you specify any outside resource files, you can then use &lt;code&gt;{input_dir}&lt;/code&gt; to ensure that the full path is properly constructed (see the “Biblio Test” example in the comments).&lt;/p&gt;

&lt;h3 id="running-a-template-command"&gt;Running a Template Command&lt;/h3&gt;

&lt;p&gt;Once you set up a template, it will make using &lt;code&gt;pandoc&lt;/code&gt; &lt;em&gt;so much easier&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;All you have to do is select the file in Alfred’s file navigator, choose the “Templated Pandoc Conversion” file action, and then choose which template you want to use. That’s it.&lt;/p&gt;

&lt;p&gt;&lt;img alt="**`Pandoctor`** Templates Filter" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_temps.png" /&gt;&lt;/p&gt;

&lt;p&gt;As with the New Conversion, the process takes a variable amount of time. Whenever the conversion does finish, however, you will see a notification in the top right of your screen:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Template Notification" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_notify.png" /&gt;&lt;/p&gt;

&lt;h3 id="creating-a-template"&gt;Creating a Template&lt;/h3&gt;

&lt;p&gt;So, how do you set up template commands? As the Template Elements section describes, each template requires 3 things. So, in order to create a new template, you will need to create each of these 3 elements. Hopefully, however, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; makes this dead-simple to do.&lt;/p&gt;

&lt;p&gt;To begin creating a new template, use the &lt;code&gt;dr:temp:set&lt;/code&gt; keyword:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Keyword to Create New Template" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_kw.png" /&gt;&lt;/p&gt;

&lt;h4 id="setting-template-name"&gt;Setting Template Name&lt;/h4&gt;

&lt;p&gt;Type the keyword and then press &lt;code&gt;return&lt;/code&gt;. This will immediately jump you to assigning a name for your new template. This will be the “screen” that you see:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Template Add Name" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_name_pre.png" /&gt;&lt;/p&gt;

&lt;p&gt;To assign a name, simply type the name of the template. As seen in the screenshot above, this name will be all that you will see in the Script Filter to choose which template you want to run. As an example, I created a new template called “Template Test”:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Template Set Name" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_name.png" /&gt;&lt;/p&gt;

&lt;h4 id="setting-template-defaults"&gt;Setting Template Defaults&lt;/h4&gt;

&lt;p&gt;Once you finish typing your template name, hit &lt;code&gt;return&lt;/code&gt; and &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; will then automatically ask you if you want your Default Options to always be added to the template command:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Template Add Defaults" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_defs.png" /&gt;&lt;/p&gt;

&lt;p&gt;If you select &lt;code&gt;True&lt;/code&gt;, this means that whatever options your template command has, your assigned Default Options will be added to the final &lt;code&gt;pandoc&lt;/code&gt; command. For example, if you have set &lt;code&gt;standalone&lt;/code&gt; to be a Default Option, regardless of whether or not you have that option in your template command, &lt;code&gt;pandoc&lt;/code&gt; will still create a standalong document. If, however, you select &lt;code&gt;False&lt;/code&gt;, only the options you have in the template will be run through &lt;code&gt;pandoc&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id="setting-template-command"&gt;Setting Template Command&lt;/h4&gt;

&lt;p&gt;The final element you need to add to create your new template is, of course, the actual &lt;code&gt;pandoc&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Template Add Command" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_cmd_pre.png" /&gt;&lt;/p&gt;

&lt;p&gt;As the section above described, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; requires your template command options to be in a very specific format. However, must &lt;code&gt;pandoc&lt;/code&gt; users don’t actually type commands into Terminal in this format. In order to make &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; as simple as possible, I have written a script that will convert the standard, short-form &lt;code&gt;pandoc&lt;/code&gt; command into the long-form &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; compliant format. This means that all you have to do is copy your command from Terminal and paste it into this field:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Template Set Command" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_cmd.png" /&gt;&lt;/p&gt;

&lt;p&gt;As it is currently implemented, there is the possibility of some bugs in the conversion process. This means it is in your best interest to double check the &lt;code&gt;user_templates.json&lt;/code&gt; file in your workflow storage folder (you can open this folder easily using the &lt;code&gt;dr:help&lt;/code&gt; keyword and selecting &lt;code&gt;Storage&lt;/code&gt;). Ensure that the variables are properly used. Also ensure that the all of the short-form options where correctly translated into their long-form version. Remember, you can use the &lt;code&gt;pandoc_templates.json&lt;/code&gt; file as a guide for the template JSON format.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Skimmer</title>
    <link rel="alternate" href="http://blog.url.com/projects/skimmer/"/>
    <id>http://blog.url.com/projects/skimmer/</id>
    <published>2015-05-26T20:00:00-04:00</published>
    <updated>2016-12-02T22:18:54-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h3 id="version-221"&gt;Version: 2.2.1&lt;/h3&gt;

&lt;h3 id="download-at-packalhttpwwwpackalorgworkflowskimmer"&gt;Download at &lt;a href="http://www.packal.org/workflow/skimmer"&gt;Packal&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id="description"&gt;Description&lt;/h2&gt;

&lt;p&gt;This workflow &lt;strong&gt;only&lt;/strong&gt; works with the free Mac PDF app &lt;a href="http://skim-app.sourceforge.net/"&gt;Skim&lt;/a&gt;. Skim is a fantastic app with great Applescript support (and its &lt;em&gt;free!&lt;/em&gt;). This workflow provides quick, easy access to a few custom Applescripts that I’ve written to deal with certain pesky problems I’ve come across when dealing with PDFs. There are currently four actions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Crop and Split PDF&lt;/li&gt;
  &lt;li&gt;Extract Data and Search Google Scholar&lt;/li&gt;
  &lt;li&gt;Export Annotations&lt;/li&gt;
  &lt;li&gt;Search your PDFs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this description I will explain how each of these works, and why you might want to use it.&lt;/p&gt;

&lt;h3 id="crop-and-split-pdf"&gt;Crop and Split PDF&lt;/h3&gt;

&lt;p&gt;First, &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; allows you to properly format those darned scanned PDFs. You know the ones I’m talking about, 2 books pages scanned into one, landscape-oriented PDF page. I want all of my PDFs in pretty, proper format with one PDF page corresponding to one portrait-oriented book/article page. In the past, it was quite the ordeal to crop the PDF so that the right- and left-hand margins were equal, and then to split each individual page and finally reconstruct the entire PDF. &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; makes this whole process as simple as π. You can use either a Hotkey or the Keyword &lt;code&gt;split&lt;/code&gt; to activate this feature.&lt;/p&gt;

&lt;p&gt;&lt;img alt="split" src="https://www.evernote.com/shard/s41/sh/83197405-2d1a-469e-a3ca-64cc4a481807/36b73f97006ac7fd5b650e22fb122769/deep/0/skimmer_split.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; then does 3 things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Crop the PDF using a user-inserted Line Annotation (if necessary) (see image below)&lt;/li&gt;
  &lt;li&gt;Split the two-page PDF into individual pages&lt;/li&gt;
  &lt;li&gt;Re-assemble everything and clean up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me walk you thru the process. To begin, you will need to &lt;em&gt;ensure that the two scanned book pages have equal margins&lt;/em&gt;. &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will split the PDF page right down the middle, so we want the middle of the PDF to be the middle of the two pages. If the margins are unequal, you only need to use Skim’s Line Annotation to create a border for &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt;. Here’s an example:&lt;/p&gt;

&lt;p&gt;&lt;img alt="cropping" src="https://www.evernote.com/shard/s41/sh/d34511a1-b571-4df0-a6df-5c7b370704a6/0759f2d2f21a614c9a39d72f8eab0d42/deep/0/skimmer_original.png" /&gt;&lt;/p&gt;

&lt;p&gt;Note the small, vertical line at the bottom of the page. &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will crop off everything to the left of this line. You could put the line anywhere on the page. If you the right-hand margin were too big, you could put it to the right, and &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; would automatically crop the excess stuff to the right of that line. If both margins are too big, you can put two lines on each side and &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will take care of the rest.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will crop &lt;em&gt;every page&lt;/em&gt; at this point, so find the farthest extremity on any page and use that as your guide. &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; can tell what page you are looking at, so it’ll make things work (note that in the image above, this is one of the middle pages being used as the cropping template). &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; does not crop Top or Bottom Margins, so you will need to manually crop PDFs with wacky top and/or bottom margins.&lt;/p&gt;

&lt;p&gt;Once &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; has cropped the PDF, it will go thru and split each page into two separate pages. Depending on the length of the PDF, this can take a bit (approximately 0.67 seconds per original PDF page). This is all done invisibly tho, so that’s a bonus.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; In order to ensure that &lt;code&gt;Skimer&lt;/code&gt; splits the PDF properly, regardless of orientation, the script will split the first page and ask you what portion of the page you are seeing (left-hand, right-hand, top-half, or bottom-half). Your choice will ensure that &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; does the splitting properly.&lt;/p&gt;

&lt;p&gt;After it splits all the pages, &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will save a copy of your original PDF and then close it as it opens the new, split PDF. This new PDF will be properly formatted and saved in the same folder as the original PDF. Here’s an example of the PDF above after it was automatically cropped and split:&lt;/p&gt;

&lt;p&gt;&lt;img alt="completed" src="https://www.evernote.com/shard/s41/sh/ac701fb0-3e1b-4ac6-ab6d-04dfdddae2f7/0cfdc3db448db7e430613b018a30f31e/deep/0/skimmer_final.png" /&gt;&lt;/p&gt;

&lt;p&gt;For anyone who deals with lots of scanned PDFs, I can promise you, this is a godsend.&lt;/p&gt;

&lt;h3 id="extract-data-and-search-google-scholar"&gt;Extract Data and Search Google Scholar&lt;/h3&gt;

&lt;p&gt;The second feature will take &lt;a href="http://en.wikipedia.org/wiki/Optical_character_recognition"&gt;OCR’d&lt;/a&gt; PDFs and try to extract relevant search information and then search &lt;a href="http://scholar.google.com/"&gt;Google Scholar&lt;/a&gt; (which will make it easy to then add citation information to your citation manager of choice. Users of &lt;a href="http://fractaledmind/projects/zotquery"&gt;ZotQuery&lt;/a&gt; will immediately see where I’m going with this…). This feature can be activated by a user-assigned Hotkey or by the Keyword &lt;code&gt;extract&lt;/code&gt; when the desired PDF is open in Skim.&lt;/p&gt;

&lt;p&gt;&lt;img alt="extract" src="https://www.evernote.com/shard/s41/sh/5bf09958-9d77-4a54-aaa2-b5fff51ef70a/7edaae34fc339aa9230a700703de218e/deep/0/skimmer_extract.png" /&gt;&lt;/p&gt;

&lt;p&gt;This feature will look for three possible things &lt;em&gt;in the currently viewed page&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a &lt;a href="http://www.doi.org/"&gt;DOI&lt;/a&gt; (Digital Object Identifier)&lt;/li&gt;
  &lt;li&gt;an ISBN (for books)&lt;/li&gt;
  &lt;li&gt;JSTOR title page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it cannot find any of these things, it will present the user with a list of Capitalized Words from the currently viewed page. You then select whichever words you want to be the Google Scholar query. Once the query is chosen (whether automatically as one of the 3 types above, or user-chosen keywords), &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will automatically launch your default browser to Google Scholar using the query. What you do from there is up to you.&lt;/p&gt;

&lt;h3 id="export-annotations"&gt;Export Annotations&lt;/h3&gt;

&lt;p&gt;In short, this feature allows you to export all of your PDF annotations from your Skim PDF to &lt;a href="https://www.evernote.com/"&gt;Evernote&lt;/a&gt; (or the clipboard) while giving you &lt;strong&gt;live hyperlinks&lt;/strong&gt; back to the exact PDF page for the annotation!! You heard me, your Evernote note will have all of your PDF annotations, and each annotation will have a hyperlink that will open up that PDF to the exact page where that annotation is. Trust me, it’s super cool, amazingly helpful, and downright near magical.&lt;/p&gt;

&lt;p&gt;Compatible annotations include Text notes, Anchor notes, Underlined text, Strike-Thru text, and Highlighted text. &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will take all of your annotations, format them into some pretty HTML and send that to Evernote. I have been working on this code for quite some time, so it is FAST! It can handle and 100+ page book in a jiffy. But, since we all work slightly differently, I’ve also worked hard to make it FLEXIBLE. In order to use this function, simply use the &lt;code&gt;export&lt;/code&gt; keyword. Alternatively, you can assign a keyboard shortcut to the command as well (I use &lt;em&gt;cmd + shift + -&lt;/em&gt; myself).&lt;/p&gt;

&lt;p&gt;Let me outline how you can make Annotation Export work exactly as you’d like.&lt;/p&gt;

&lt;p&gt;First and foremost, I’ve added the ability for you to assign your own custom palette of Highlight Colors. One of the nicer touches to this feature is the ability to translate certain highlight colors into text headers. This can come in quite handy for really breaking down your text and your thoughts about the text into certain groupings. Now, I have a default set of 6 colors and their 6 corresponding text values, but you can change both the colors and the text to fit exactly your needs. But how, you might ask? Well, version 2.0 comes with a new Help PDF. Simply use the &lt;code&gt;sk:help&lt;/code&gt; keyword and select &lt;code&gt;Open PDF&lt;/code&gt; to view this document. On the second page, you will see these annotations:&lt;/p&gt;

&lt;p&gt;&lt;img alt="helper pdf" src="https://www.evernote.com/shard/s41/sh/0e33ffc1-d931-4932-9949-a668c1554a0f/cb6e0abe1897462a15e5708cfffc4043/deep/0/skimmer_config1.pdf-(page-2-of-4).png" /&gt;&lt;/p&gt;

&lt;p&gt;The text of the PDF will lay this all out for you, but basically, you simply change the highlight colors and change the corresponding text to what ever you like. There are an (nearly) infinite number of possibilities. The only things to remember are &lt;strong&gt;don’t mess with the actual highlights, merely change their colors&lt;/strong&gt; and &lt;strong&gt;don’t delete prefixed numbers in the text notes, only the text&lt;/strong&gt;. Otherwise, you can fiddle to your hearts content. Just so you can get a feel for how the process will work, here’s what the Evernote note would look like if you ran the Annotation Export script on the Help PDF (well, this is only the highlights section; run the script to see how text notes are handled):&lt;/p&gt;

&lt;p&gt;&lt;img alt="exported note" src="https://www.evernote.com/shard/s41/sh/4fadbe0b-e763-4d0c-b100-d82048ad378a/6b115224808df230224e325e710abeb0/deep/0/skimmer_config.pdf---Evernote-Premium.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you change the highlight colors and/or the text meanings, you will have to run &lt;code&gt;sk:help&lt;/code&gt; -&amp;gt; &lt;code&gt;Set Highlights&lt;/code&gt; before &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will apply your changes. So, to change the Highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open the Help PDF (&lt;code&gt;sk:help&lt;/code&gt; -&amp;gt; &lt;code&gt;Open PDF&lt;/code&gt;) and alter the highlights and text on the second page.&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;sk:help&lt;/code&gt; -&amp;gt; &lt;code&gt;Set Highlights&lt;/code&gt; to save your changes.&lt;/li&gt;
  &lt;li&gt;Then, you can use &lt;code&gt;export&lt;/code&gt; to actually send your Skim annotations to Evernote.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, the ability to alter your highlights palette goes a long way in making this script personalizable (is that even a word?), but I went a step further. You can also tweak the HTML formatting used to create the Evernote note. Unfortunately, however, this will require opening up some Applescript and doing some code tweaking.&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; But I’ve tried to make it not so scary. Essentially, each annotation type has a general formatting template used to create the HTML. I’ve abstracted this format and placed each variable element under your control. You can find all of the templates and some basic examples in the Help PDF (page 3), but here is one example, for the Highlight Notes:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;--The alterable variables are wrapped in {curlies}, while the fixed elements are in &amp;lt;carets&amp;gt;.
{pre}{wrap}&amp;lt;title&amp;gt;{/wrap} {wrap}&amp;lt;note text&amp;gt;{/wrap} {wrap}&amp;lt;link&amp;gt;{p.} &amp;lt;#&amp;gt;{/wrap}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So, you can prefix anything you’d like to the front of a note type: a dash, a tab, a few tabs, a word, etc. You can then wrap the title of the highlight (this is the text given for whatever color that highlighted annotation was) in anything at all: make it bold, italics, wrap it in [brackets], whatever. You can also wrap the actual text highlighted: in “quotes”, make it italics, etc. Finally, you have what you wrap the hyperlink in: it could be (parentheses) or {braces}, etc. And you can specify what page abbreviation you want: p., page, #. Now, the script defaults to settings that I think work pretty well, and you can use those to get a feel for what’s possible. Just remember, &lt;em&gt;it needs to be valid HTML&lt;/em&gt;. All of these properties are near the top of the &lt;code&gt;action_export-notes.scpt&lt;/code&gt; found in the workflow directory (you can use &lt;code&gt;sk:bug&lt;/code&gt; -&amp;gt; &lt;code&gt;Root&lt;/code&gt; to open this folder easily). Feel free to ask me if you have something you’d like to format but can’t quite figure it out.&lt;/p&gt;

&lt;p&gt;Since I’ve added the PDF hyperlinking functionality, I’ve also added the ability to copy a PDF pages custom URL to the clipboard, if you want to hyperlink to that PDF page in any other context. Simply use the &lt;code&gt;sk:copy&lt;/code&gt; keyword. This whole URL hyperlinking works because I have written a custom URL handler which is bundled with the workflow that interprets the custom URLs that I’ve written to open PDFs in Skim to the appropriate page. It’s pretty cool, but &lt;em&gt;the URL uses the path to the PDF, so if you move the PDF the URL will &lt;strong&gt;break&lt;/strong&gt; until you alter all the old URLs to use your new path&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id="search-your-pdfs"&gt;Search your PDFs&lt;/h3&gt;

&lt;p&gt;Finally, you can also search through all of your PDFs and open any one of them right in Skim. Use either the keyword &lt;code&gt;skimmer&lt;/code&gt; or the shorter &lt;code&gt;sk&lt;/code&gt; to begin the query. Then enter your query term. The results will update as you type. You can hit &lt;code&gt;return&lt;/code&gt; to open any item directly in Skim, or you can &lt;code&gt;right-arrow&lt;/code&gt; to enter Alfred’s file browser for that item.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As I hope you can see, if you’re someone who deals with PDFs frequently, this workflow could be of help. Whether it’s splitting PDFs, searching through your PDF library, or exporting annotations, &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; can help you out.&lt;/p&gt;

&lt;p&gt;Plus, it’s fairly simple to add functionality by simply adding more Applescripts, so if you have a great script for working with Skim, let me know in the comments.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;My original script would have to pop up each individual page for a split second. It was almost stroke inducing. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;Reader DrLulz has given a great example of this by tweaking the workflow to work best for PDFs of outline-based powerpoints. His comment and link can be found &lt;a href="http://www.alfredforum.com/topic/4052-skimmer-pdf-actions-for-skim/?p=27270"&gt;here&lt;/a&gt;. &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Parsers</title>
    <link rel="alternate" href="http://blog.url.com/projects/parsers/"/>
    <id>http://blog.url.com/projects/parsers/</id>
    <published>2015-05-26T20:00:00-04:00</published>
    <updated>2016-12-02T22:18:46-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-20"&gt;Version: 2.0&lt;/h4&gt;

&lt;h4 id="download-at-packalhttpwwwpackalorgworkflowparsers"&gt;Download at &lt;a href="http://www.packal.org/workflow/parsers"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;h3 id="introduction"&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; is a relatively simple workflow for &lt;a href="http://www.alfredapp.com/"&gt;Alfred&lt;/a&gt;. It allows you to quickly and easily look up parsing information for Greek &lt;em&gt;or&lt;/em&gt; Latin words. It gets its parsing information from the powerful &lt;a href="http://www.perseus.tufts.edu/"&gt;Perseus project&lt;/a&gt;, but presents the results in the clean user-interface of Alfred. To use &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt;, simply open Alfred and type the keyword &lt;code&gt;parse&lt;/code&gt;. Follow the keyword with the Latin or Greek word you want to look up:&lt;/p&gt;

&lt;p&gt;&lt;img alt="alfred_parser" src="https://www.evernote.com/shard/s41/sh/2c444d67-b4ca-40b3-b914-c20dc5ebbfb6/9d54f19c489deda365c65f1e6b5232e6/deep/0/alfred_parser.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; will display the results for you as quickly as possible.&lt;/p&gt;

&lt;p&gt;As you can see, &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; displays the parsing information in the main title field for each item. Below that, in the sub-title field, it displays the lemma and a short definition separated by &lt;code&gt;::&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s say you are reading some Greek or Latin, however, and don’t want to have to open Alfred, type &lt;code&gt;parse&lt;/code&gt;, then type the word you’re interested in. Well, &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; has thought of that. From within Alfred’s Preferences, you can set up a keyboard shortcut to pass the currently selected text on your Mac to &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt;. I have mine set up as &lt;code&gt;cmd+fn+-&amp;gt;&lt;/code&gt;. This makes using &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; even easier.&lt;/p&gt;

&lt;p&gt;Once you have found the parsing information that you believe is correct in your reading context, &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; can do 2 things for you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;copy the parsing information to the clipboard in a nicely formatted way (&lt;code&gt;cmd+return&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;copy the dictionary entry for that lemma to the clipboard (&lt;code&gt;shift+return&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If, for instance, you were to choose the Nominative Singular Feminine form of &lt;code&gt;aura&lt;/code&gt; (with &lt;code&gt;cmd+return&lt;/code&gt;), &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; would copy this to the clipboard:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;Type: noun
Number: sg
Gender: fem
Case: voc

Definition: the air (in motion), a breeze, breath of air, wind, blast:
Lemma:  aura

Lexicon Links:
  + [Lewis &amp;amp; Short](http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3Atext%3A1999.04.0059%3Aentry%3Daura)
  + [Elem. Lewis](http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3Atext%3A1999.04.0060%3Aentry%3Daura)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Alternatively, you can use &lt;code&gt;shift+return&lt;/code&gt; to view a HUD of the lexicon entry for that parsing term, and this lexicon data will also be copied to the clipboard (&lt;em&gt;NOTE&lt;/em&gt;: Parsers will attempt to display the lexicon entry from the most concise lexicon available for the chosen term or allow you to choose out of the available dictionaries).&lt;/p&gt;

&lt;p&gt;All you should need to read your Greek and/or Latin with ease.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Complete PDF Annotation Workflow</title>
    <link rel="alternate" href="http://blog.url.com/articles/a-complete-pdf-annotation-workflow/"/>
    <id>http://blog.url.com/articles/a-complete-pdf-annotation-workflow/</id>
    <published>2015-05-26T14:36:00-04:00</published>
    <updated>2015-05-26T19:20:56-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;When I was in graduate school, I was inundated with PDFs. PDFs of all kinds, from all kinds of sources, with all kinds of needs. Suffice to say, over a few years my tinkering spirit and the sheer number of PDFs I needed to handle led to a collection of tools organized into a workflow that I believe works well, and is thus well worth sharing. In this post I want to outline how I (1) &lt;a href="#pdf-preparation"&gt;prepare PDFs&lt;/a&gt;, (2) &lt;a href="#pdf-annotation"&gt;annotate PDFs&lt;/a&gt;, and (3) &lt;a href="#pdf-storage"&gt;store PDFs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;{{read more}}&lt;/p&gt;

&lt;h2 id="pdf-preparation"&gt;PDF Preparation&lt;/h2&gt;

&lt;p&gt;When you recieve a high volume of PDFs, you come to realize the many various states in which PDFs can be created–books scanned on a flatbed, books scanned by an iPhone, articles downloaded from the internet, PDFs generated from other sources. PDFs truly do come in all shapes and sizes. I, however, want all of my PDFs in one consistent format. I want every page of content to correspond to one PDF page (in constrast to book scans, where two content pages are often scanned into one landscape PDF). I also want to OCR every PDF to ensure that the text content is machine readable (and thus selectable in any PDF reader). I finally want to keep a consistent naming scheme for all of my PDFs. So, how does one get from point A to point B?&lt;/p&gt;

&lt;p&gt;Let’s begin with normalizing PDF page layout. For anyone who has ever had to manually split scanned PDFs, you know how mind-numbly boring and tedious such work is. Yet, we do it because we must. If there is anything worse than maunally splitting PDF pages, it dealing with double page PDF scans. Well, I abhor tedium, so I set out to remove this particular tedium from my life. My solution, which I will get to below, however, relies on an application that will come up frequently in this post, so it’s worth discussing here now. I use, almost exclusively, the Mac application &lt;a href="http://skim-app.sourceforge.net/"&gt;Skim&lt;/a&gt; for my PDF-related tasks. This is primarily because Skim is &lt;a href="http://sourceforge.net/p/skim-app/wiki/Features/"&gt;incredibly powerful&lt;/a&gt;, but also because it grants access to much of this functionality via &lt;a href="http://sourceforge.net/p/skim-app/wiki/AppleScript/"&gt;robust AppleScript support&lt;/a&gt;. This allows tinkerers like myself to further extend it functionality. Many of the tools described in this post are uniquely built on top of Skim, so if you want to use the tool, you have to use the app. Luckily, the app is free to download, an open source project, and thoroughly stable. However, I understand if you already have your own preferred PDF application, so I will mark all Skim-dependent tools accordingly.&lt;/p&gt;

&lt;p&gt;Back to automagically splitting PDF pages. Using a handful of Skim’s awesome features, I have written an AppleScript which will split two-page scanned PDFs for you. The script itself is a part of my &lt;a href="http://fractaledmind.com/projects/skimmer/"&gt;Skimmer project&lt;/a&gt;, which is one of my many Alfred Workflows. For those who want the simplest access to this functionality, I would recommend getting &lt;a href="http://www.alfredapp.com/"&gt;Alfred&lt;/a&gt; and downloading the workflow. If, however, you simply want the AppleScript itself, you can find it &lt;a href="https://github.com/smargh/alfred_skimmer/blob/master/source/action_pdf-splitter.applescript"&gt;in the GitHub repo&lt;/a&gt;. In short, it asks you to determine the PDF orientation and then in the background splits the entire PDF. If you deal with many scanned PDFs, this will be a major time-saver.&lt;/p&gt;

&lt;p&gt;When it comes to &lt;a href="http://en.wikipedia.org/wiki/Optical_Character_Recognition"&gt;Optical Character Recognition&lt;/a&gt;, I use the open source &lt;a href="http://en.wikipedia.org/wiki/Tesseract_(software)"&gt;&lt;code&gt;tesseract&lt;/code&gt;&lt;/a&gt; utility. It can be a bit tricky to install, as it requires compilation and has a number of compiled dependencies. Building off of the work of &lt;a href="https://twitter.com/ryanfb"&gt;Ryan Baumann&lt;/a&gt;, I have created &lt;a href="https://gist.github.com/smargh/cd2fc4125bef57bcb3e2"&gt;a Gist&lt;/a&gt; to simplify installing &lt;code&gt;tesseract&lt;/code&gt; on a Mac&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="c"&gt;# Check for Homebrew,&lt;/span&gt;
&lt;span class="c"&gt;# Install if we don't have it&lt;/span&gt;
&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; ! &lt;span class="k"&gt;$(&lt;/span&gt;which brew&lt;span class="k"&gt;)&lt;/span&gt;; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing homebrew..."&lt;/span&gt;
  ruby -e &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="c"&gt;# Ensure `homebrew` is up-to-date and ready&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Updating homebrew..."&lt;/span&gt;
brew doctor

&lt;span class="c"&gt;# Ensure the Homebrew cache directory exists&lt;/span&gt;
mkdir ~/Library/Caches/Homebrew

&lt;span class="c"&gt;# Install leptonica with TIFF support (and every other format, just in case)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing leptonica..."&lt;/span&gt;
brew install --with-libtiff --with-openjpeg --with-giflib leptonica

&lt;span class="c"&gt;# Install Ghostscript&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing ghostscript..."&lt;/span&gt;
brew install gs

&lt;span class="c"&gt;# Install ImageMagick with TIFF and Ghostscript support&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing imagemagick..."&lt;/span&gt;
brew install --with-libtiff --with-ghostscript imagemagick

&lt;span class="c"&gt;# Install Tesseract devel with all languages&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing tesseract..."&lt;/span&gt;
brew install --devel --all-languages tesseract
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Once you have &lt;code&gt;tesseract&lt;/code&gt; installed, it can also be a bit complicated to run it from the Terminal. Again, I have &lt;a href="https://gist.github.com/smargh/0581e6199049ea7c51df"&gt;a Gist&lt;/a&gt; to simplify this process. It is a simple function that accepts a path to a PDF. It will convert the PDF to the appropriate format for &lt;code&gt;tesseract&lt;/code&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, split the PDF into one file per page, OCR that collection of files, and recombine everything into one OCR’d PDF:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="c"&gt;# courtesy of : &amp;lt;https://ryanfb.github.io/etc/2014/11/13/command_line_ocr_on_mac_os_x.html&amp;gt;&lt;/span&gt;

ocr&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;# get name of input pdf&lt;/span&gt;
  &lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; .pdf&lt;span class="k"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Prefix is: &lt;/span&gt;&lt;span class="nv"&gt;$PREFIX&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="c"&gt;# check for any `tesseract` flags&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -z &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$TESSERACT_FLAGS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Picked up TESSERACT_FLAGS: &lt;/span&gt;&lt;span class="nv"&gt;$TESSERACT_FLAGS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;

  &lt;span class="c"&gt;# use `imagemagick` to convert pdf to individual `.tif` files&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Converting to TIFF..."&lt;/span&gt;
  convert -density 300 &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; -type Grayscale -compress lzw -background white +matte -depth 32 &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_page_%05d.tif"&lt;/span&gt;

  &lt;span class="c"&gt;# use `tesseract` to OCR those individual `.tif` files&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Performing OCR..."&lt;/span&gt;
  &lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt; -v parallel &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c"&gt;# if you can, parallelize this process using GNU Parallel&lt;/span&gt;
    parallel --bar &lt;span class="s2"&gt;"tesseract &lt;/span&gt;&lt;span class="nv"&gt;$TESSERACT_FLAGS&lt;/span&gt;&lt;span class="s2"&gt; {} {.} pdf 2&amp;gt;/dev/null"&lt;/span&gt; ::: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.tif
  &lt;span class="k"&gt;else
    for &lt;/span&gt;i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.tif; &lt;span class="k"&gt;do
      &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"OCRing &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;..."&lt;/span&gt;
      tesseract &lt;span class="nv"&gt;$TESSERACT_FLAGS&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; .tif&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; pdf 2&amp;gt;/dev/null
    &lt;span class="k"&gt;done
  fi&lt;/span&gt;

  &lt;span class="c"&gt;# combine individual OCR'd pdf pages back into a single OCR'd pdf using `ghostscript`&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Combining output to &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-OCR.pdf..."&lt;/span&gt;
  gs -q -dNOPAUSE -dBATCH -sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite -sOutputFile&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;__OCR.pdf"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.pdf &amp;gt;/dev/null 2&amp;gt;&amp;amp;1

  &lt;span class="c"&gt;# delete all of the individual files (both `.tif` and `.pdf`)&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Cleaning up..."&lt;/span&gt;
  rm &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.tif &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.pdf
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This script makes OCRing a PDF as simple as &lt;code&gt;$ ocr ~/path/to/my.pdf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, when it comes to naming conventions, I try to be authoritarian and consistent. The real goal is consistency, and however you decide to name your files, be sure to stick with it. I want make any explicit recommendations, as it truly does depend on your particular situation, but I will recommend a few apps and utilities that will make it easier for your to enforce consistency once you have determined your naming schema. The first is &lt;a href="http://www.noodlesoft.com/hazel.php"&gt;Hazel&lt;/a&gt;, which is a Mac app that will watch certain folders for you, waiting for some criteria to be met and then perform certain actions. For example, you have it watch the folder where you stick all your PDFs, and then rename any PDFs which don’t follow your naming convention. &lt;a href="http://www.documentsnap.com/use-hazel-to-magically-process-downloaded-pdfs/"&gt;DocumentSnap&lt;/a&gt; has a good tutorial on one way you can achieve this functionality. Another app/utility is &lt;a href="http://manytricks.com/namemangler/"&gt;Name Mangler&lt;/a&gt;, which provides a number of features to make batch renaming a breeze. Whatever your choice, having a consistently, universally applied naming schema will greatly help you in the long run.&lt;/p&gt;

&lt;h2 id="pdf-annotation"&gt;PDF Annotation&lt;/h2&gt;

&lt;p&gt;PDF annotation has led me down a long and winding path, but in the end I believe I’ve reached something like my own personal PDF nirvana. Grant me your patience for a bit as I (speedily) recall some major points on this personal journey.&lt;/p&gt;

&lt;p&gt;For me, my fascination with PDF annotation started with two versions of an Applescript to extract PDF annotations from &lt;a href="http://skim-app.sourceforge.net/"&gt;Skim&lt;/a&gt;. The original was by John Sidiropolus over at &lt;a href="http://www.organognosi.com/export-skim-notes-according-to-their-highlight-colors/"&gt;OrganoGnosi.com&lt;/a&gt;, and then &lt;a href="http://drosophiliac.com/2012/09/creating-a-custom-url-scheme-via-applescript-and-python.html"&gt;Walton Jones at drosophiliac.com&lt;/a&gt; worked up his own version of the script. Building on their great work, I wrote a script that would export all of your Skim annotations (not just highlights) and could handle a 300+ page book in seconds (the original scripts really lagged on any PDFs with triple-digit page numbers). In &lt;a href="https://gist.github.com/smargh/63d8c8ff251068a275b8"&gt;my latest version of the script&lt;/a&gt;, I had an Applescript application that would extract all of my Skim annotations, format them into beautiful HTML, and create a new Evernote note where I had hyperlinks that would open the PDF in Skim to the exact page referenced. This script has served me well for months.&lt;/p&gt;

&lt;p&gt;This mini-history skips, however, the &lt;em&gt;coolest&lt;/em&gt; feature of this script. In &lt;a href="http://drosophiliac.com/2012/09/creating-a-custom-url-scheme-via-applescript-and-python.html"&gt;a companion piece&lt;/a&gt; to his post on his own export script, Walton Jones describes how he created a custom URL scheme to allow him to generate hyperlinks for his notes. His method relied on a combination of Applescript and Python, as well as his own rigid PDF naming conventions. This is truly amazing in my book. This allows me to engage in information extraction while retaining the ability to return information to its context. When I annotate an OCR’d PDF, I can extract what I believe to be the essential information&lt;sup id="fnref:xx"&gt;&lt;a href="#fn:xx" class="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;, then view only that information (in an Evernote note in this instance) or view that information in its original context (the PDF) by clicking a link that opens the PDF to the exact page with that content.&lt;/p&gt;

&lt;p&gt;When I got my iPad, however, I immediately came across an annoyance. One of the best features of &lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt; is its cross-platform capabilities. So I could read my annotation summaries on my iPad, but the hyperlinks were totally useless. Since they were custom URLs that required a custom handler on the Mac, iOS doesn’t recognize them. I spent some time thinking about how I could have my hyperlinks work on iOS when I came to discover the Wild West of iOS–url schemes. While there are a crazy number of interesting things one can accomplish with URL schemes on iOS,&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" class="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; in their simplest form they function just like internet urls; they let you jump directly to a specific location.&lt;/p&gt;

&lt;p&gt;Each iOS app has to register their own URL scheme (if they do at all), which is one of the main reasons I describe this realm as the Wild West of iOS. There is often very little documentation of an app’s URL scheme (since its really primarily a “power user feature”) and there isn’t really any standardization.&lt;sup id="fnref:4"&gt;&lt;a href="#fn:4" class="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; Well, I jumped into this jungle searching for a PDF app that had a URL scheme that would allow me to jump to a specific PDF and a specific page. This was 4 months ago. Unfortunately, no such PDF application had a robust enough URL scheme. The top tier applications would allow you to open a specific PDF, but none of them would let you specify a page.&lt;sup id="fnref:5"&gt;&lt;a href="#fn:5" class="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt; So, I put in a number of feature requests and waited.&lt;/p&gt;

&lt;p&gt;Finally, the folks at &lt;a href="http://smilesoftware.com/"&gt;Smile Software&lt;/a&gt; upgraded &lt;a href="https://itunes.apple.com/us/app/pdfpen-for-ipad/id490774625?mt=8"&gt;PDFPen for iPad&lt;/a&gt; as well as &lt;a href="https://itunes.apple.com/us/app/pdfpen-for-iphone/id557705455?mt=8"&gt;PDFPen for iPhone&lt;/a&gt; to include a page specific URL scheme. This has finally opened the door to a cross-platform, wiki-style PDF workflow. In order for this workflow to, well, flow, we need two components: (1) a custom URL handler for the Mac and (2) a script to export PDF annotations with this custom URL embedded in the links. Luckily for you :) I have two such things.&lt;/p&gt;

&lt;h3 id="the-url-handler"&gt;The URL Handler&lt;/h3&gt;

&lt;p&gt;The PDFPen for iPad app handles a URL scheme like this: &lt;code&gt;pdfpen:///filename.pdf?pg=2&lt;/code&gt;. There are a few things to note here. First, PDFPen does not currently have any folder system, so you will never have to deal with any other elements besides filename and page number. Second, the identifier (&lt;code&gt;pdfpen&lt;/code&gt;) is followed by a colon and then &lt;strong&gt;three&lt;/strong&gt; backslashes (&lt;code&gt;///&lt;/code&gt;), not two. In order to have these urls function on the Mac, I needed to write an Applescript URL handler. Luckily, Applescript has built into it the &lt;code&gt;on open location&lt;/code&gt; function. This allows you to script responses to clicks of URL types, essentially letting you register your own custom URL schemes with OS X.&lt;/p&gt;

&lt;p&gt;My URL handler for the PDFPen URL scheme faced one major hurdle. Since the PDFPen URL scheme only has the file name, the URL handler on the Mac needs to determine the file path of a PDF from only its filename. My solution relies on&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;saving my PDFs to a cloud folder, like Dropbox&lt;/li&gt;
  &lt;li&gt;using a shell script to get the file path of every file in that folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In short, the URL handler searches my synced folder, where I know the PDF resides and generates a list of all of the files in that folder (including all sub-folders). It then searches that list for the item with the filename, and thus grabs the file path of the PDF on your Mac. This works well for me, but if anyone has another suggestion, drop me a line in the comments.&lt;/p&gt;

&lt;p&gt;If you want to view my URL handler script, visit my GitHub page &lt;a href="https://gist.github.com/smargh/7064788"&gt;here&lt;/a&gt;. If you simply want to download the application, so that the .plist file is correct, and everything &lt;em&gt;just works&lt;/em&gt;, then you can &lt;a href="https://dl.dropboxusercontent.com/u/98731674/PDFPen%20URL%20Handler%20copy.zip"&gt;download it&lt;/a&gt;. Please note, however, that for the application to work “out of the box”, you need to save all of your cross-platform PDFs to your Dropbox folder on the Mac. Otherwise, the handler won’t be able to find the file path of your PDF.&lt;/p&gt;

&lt;h3 id="exporting-skim-annotations-with-the-pdfpen-url-scheme"&gt;Exporting Skim Annotations with the PDFPen URL scheme&lt;/h3&gt;

&lt;p&gt;This is the central script for the workflow. This script extracts and exports all of your Skim annotations directly to Evernote with the proper PDFPen urls embedded in the annotations. This script is all-in-one. It begins by displaying three prompts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Where you want to save the PDF, you need to ensure that it is saved in the Folder that your url handler scours.&lt;/li&gt;
  &lt;li&gt;Input a number that relates the printed page number of the PDF to the indexed page number.&lt;sup id="fnref:6"&gt;&lt;a href="#fn:6" class="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt; As the prompt directs, all you need to do is subtract the printed page number from the indexed page number. If this means that you have a negative number, simply use a &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Whether the current PDF is a primary text or a secondary text. Depending on your answer, the script translates your highlight colors differently.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you respond to these prompts, the script generally runs in about 3-5 seconds. Whenever the new Evernote note is created, the script displays a &lt;a href="http://growl.info/"&gt;Growl notification&lt;/a&gt; (if you have Growl installed).&lt;/p&gt;

&lt;p&gt;The script will export all of your Skim annotations to an Evernote notebook entitled “PDF Notes”. If such a notebook doesn’t exist, the script will create it. It will also assign two tags to the note: a “notes” tag and a “pdfpen”, both of which, if they don’t exist, will be created. As always, the script generates beautifully formatted html notes in Evernote, with clear section divisions and key information at the top. I use Skim’s text notes only for section headers, so the script will take all text notes and generate a Table of Contents at the top of the note. It also treats all yellow highlights as Summary text, and puts the Text Summary right after the ToC. All of the other annotations are grouped by type in the rest of the note. Here’s an example of an annotation summary note in Evernote:&lt;/p&gt;

&lt;p&gt;Finally, of course, the script automatically embeds the PDFPen urls into the individual annotations. Since we input the relation of the printed page number to the indexed page number, the actual Evernote note displays the printed page number, while the url will take you to the proper indexed page number.&lt;/p&gt;

&lt;p&gt;If you want to grab this script, head over to my &lt;a href="https://gist.github.com/smargh/7065110"&gt;Gist&lt;/a&gt; and save the script as an application, so you can launch it from &lt;a href="http://www.alfredapp.com/"&gt;Alfred&lt;/a&gt;, &lt;a href="http://obdev.at/products/launchbar/index.html"&gt;LaunchBar&lt;/a&gt;, or &lt;a href="http://www.apptivateapp.com/"&gt;Apptivate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For those of you who don’t have an iPad or simply prefer to have your PDFs spread about your file system, I have another version of the script that uses my own custom URL scheme which will encode the full path to the PDF&lt;sup id="fnref:zz"&gt;&lt;a href="#fn:zz" class="footnote"&gt;8&lt;/a&gt;&lt;/sup&gt;. This is actually the script that I use in my Alfred Workflow &lt;a href="http://fractaledmind.com/projects/skimmer"&gt;Skimmer&lt;/a&gt;, which is by far the simplest way to use this functionality.&lt;/p&gt;

&lt;h2 id="pdf-storage"&gt;PDF Storage&lt;/h2&gt;

&lt;p&gt;As some of my previous comments will no doubt suggest, I highly recommend that your have a clear plan for where you will store your (consistently named) PDFs. Chaos in any part of your PDF workflow will breed chaos in other places as well. Moreover, both of the versions of the annotation exporting scripts require the PDFs to be sedentary. Again, I won’t recommend where or how to store your PDFs, but I can make some suggestions on tools.&lt;/p&gt;

&lt;p&gt;Once again, &lt;a href="http://www.noodlesoft.com/hazel.php"&gt;Hazel&lt;/a&gt; will prove adept at this sort of task. You can tell it to watch certain folders (like your &lt;code&gt;/Downloads&lt;/code&gt;, &lt;code&gt;/Documents&lt;/code&gt;, and/or &lt;code&gt;/Desktop&lt;/code&gt;) for PDF files, and then have it move any PDFs put there to another location (maybe even changing the file name as it does so). Alternatively, you could opt for the big guns and use &lt;a href="http://www.devontechnologies.com/products/devonthink/overview.html"&gt;DEVONthink&lt;/a&gt;, which offers an entire app dedicated to file management, with AI, sorting, searcing, indexing, and all sorts of whiz-bang features. It’s not a cheap app, but many people&lt;sup id="fnref:yy"&gt;&lt;a href="#fn:yy" class="footnote"&gt;9&lt;/a&gt;&lt;/sup&gt; swear by its power and capabilities.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;PDFs can be a pain in the butt, but they are also vitally important in today’s world. So much information is still transferred via PDF. I hope that some of these tools, some of these ideas at least, can help you handle your PDFs better and with less stress.&lt;/p&gt;

&lt;p&gt;As always, if you have thoughts, questions, or suggestions, drop me a line.&lt;/p&gt;

&lt;p&gt;stephen&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;The installation script has been tested on 10.9 and 10.10. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;&lt;code&gt;tesseract&lt;/code&gt; prefers files in &lt;code&gt;.tif&lt;/code&gt; format. &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:xx"&gt;
      &lt;p&gt;This uses highlight colors as a signal for various types of information. &lt;a href="#fnref:xx" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:3"&gt;
      &lt;p&gt;If you’re interested, check out &lt;a href="http://www.macstories.net/tag/url-scheme/"&gt;Frederico Viticci’s work&lt;/a&gt; or &lt;a href="http://www.geekswithjuniors.com/ios-url-schemes/"&gt;Eric Pramona&lt;/a&gt; &lt;a href="#fnref:3" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:4"&gt;
      &lt;p&gt;There is beginning to be some standardization thanks to the work of Greg Pierce and Marco Arment’s &lt;a href="http://x-callback-url.com/"&gt;x-callback-url specificiation&lt;/a&gt;. &lt;a href="#fnref:4" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:5"&gt;
      &lt;p&gt;&lt;a href="http://www.branchfire.com/iannotate/"&gt;iAnnotate&lt;/a&gt; uses the &lt;code&gt;iannotate://open//&lt;/code&gt; scheme. &lt;a href="https://itunes.apple.com/us/app/goodreader-for-ipad/id363448914?mt=8"&gt;GoodReader&lt;/a&gt; uses the &lt;code&gt;gropen://&lt;/code&gt; scheme. &lt;a href="https://itunes.apple.com/us/app/pdf-expert-fill-forms-annotate/id393316844?mt=8"&gt;PDF Expert&lt;/a&gt; uses the &lt;code&gt;pdfefile:///folder1/filename.pdf?cc=1&lt;/code&gt; scheme. &lt;a href="#fnref:5" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:6"&gt;
      &lt;p&gt;John Sidiropolus has a great explanation of the various ways in which printed page numbers can relate to indexed page numbers in &lt;a href="http://www.organognosi.com/latin-page-numbers-arabic-page-numbers-and-the-fifth-skim-note/"&gt;this post&lt;/a&gt;. &lt;a href="#fnref:6" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:zz"&gt;
      &lt;p&gt;Naturally, this still requires you to not move the PDF once you export the annotations. Again, having a consistent naming schema and a consistent storage plan will only help you in the long run. &lt;a href="#fnref:zz" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:yy"&gt;
      &lt;p&gt;Check out &lt;a href="http://nerdquery.com/search.php?query=devonthink&amp;amp;search=1&amp;amp;category=24&amp;amp;catid=24&amp;amp;type=and&amp;amp;results=50&amp;amp;db=0&amp;amp;prefix=0&amp;amp;media_only=0"&gt;Gabe Weatherhead’s posts&lt;/a&gt; on macdrifter.com as well as his appearance on &lt;a href="http://www.relay.fm/mpu/251"&gt;Mac Power Users&lt;/a&gt; for a clear guide and why and how DEVONthink could work within a larger workflow. &lt;a href="#fnref:yy" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>BibQuery</title>
    <link rel="alternate" href="http://blog.url.com/projects/bibquery/"/>
    <id>http://blog.url.com/projects/bibquery/</id>
    <published>2015-05-22T20:00:00-04:00</published>
    <updated>2016-12-02T22:17:26-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-101"&gt;Version: 1.0.1&lt;/h4&gt;

&lt;h4 id="download-from-packalhttpwwwpackalorgworkflowbibquery"&gt;Download from &lt;a href="http://www.packal.org/workflow/bibquery"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BibQuery is essentially a visual clone of &lt;a href="http://fractaledmind.com/projects/zotquery/"&gt;ZotQuery&lt;/a&gt; for the Mac app &lt;a href="http://bibdesk.sourceforge.net/"&gt;BibDesk&lt;/a&gt;, which is a citation manager for &lt;a href="http://www.bibtex.org/"&gt;BibTeX&lt;/a&gt;. Users of BibDesk can now enjoy the clean search interface found in ZotQuery, with clear icons for publication type and clean presentation of publication data.&lt;/p&gt;

&lt;p&gt;&lt;img alt="bibquery.png" src="https://www.evernote.com/shard/s41/sh/e354f593-a127-47e9-8ec3-212124341231/39f92d48e93282af26881d5cc0e95e97/deep/0/bibquery.png" /&gt;&lt;/p&gt;

&lt;p&gt;Users can also search their &lt;code&gt;.bib&lt;/code&gt; databases with the same variety of queries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;general (keywords: &lt;code&gt;bib&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;titles (keywords: &lt;code&gt;bib:t&lt;/code&gt; or &lt;code&gt;bt&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;creators (keywords: &lt;code&gt;bib:a&lt;/code&gt; or &lt;code&gt;ba&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;in-keyword (keywords: &lt;code&gt;bib:nk&lt;/code&gt; or &lt;code&gt;bnk&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;in-group (keywords: &lt;code&gt;bib:ng&lt;/code&gt; or &lt;code&gt;bng&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;for keyword (keywords: &lt;code&gt;bib:k&lt;/code&gt; or &lt;code&gt;bk&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;for group (keywords: &lt;code&gt;bib:g&lt;/code&gt; or &lt;code&gt;bg&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also of note, BibQuery works &lt;em&gt;without&lt;/em&gt; BibDesk being open and even functions if you have multiple &lt;code&gt;.bib&lt;/code&gt; databases that BibDesk manages. In short, BibQuery brings all of your citations to you.&lt;/p&gt;

&lt;p&gt;Once you find the item you’re looking for, BibQuery currently has 3 possible actions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you can open up BibDesk to that item (simply press &lt;code&gt;return&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;you can copy a LaTeX cite command for that item (simply press &lt;code&gt;control+return&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;you can open that item’s PDF attachment, if it has one (simply press &lt;code&gt;shift+return&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>LibGen</title>
    <link rel="alternate" href="http://blog.url.com/projects/libgen/"/>
    <id>http://blog.url.com/projects/libgen/</id>
    <published>2015-05-22T20:00:00-04:00</published>
    <updated>2016-12-02T22:18:24-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;Seach the &lt;a href="http://libgen.in/"&gt;Library Genesis&lt;/a&gt; project's catalogue of books and download right from your keyboard, without ever launching a browser.&lt;/p&gt;

&lt;h4 id="version-11"&gt;Version 1.1&lt;/h4&gt;

&lt;h4 id="download-from-packalhttpwwwpackalorgworkflowlibgen"&gt;Download from &lt;a href="http://www.packal.org/workflow/libgen"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This is a relatively simple workflow that allows users to search the &lt;a href="http://gen.lib.rus.ec/"&gt;Library Genesis PDF repository&lt;/a&gt;. For those who do not know, the Library Genesis project is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;based in Russia, this is the largest currently openly available collection. They have several initiatives: i. +1 million files of mainly non-fiction ebooks, ii. +900k of mainly fiction ebooks, iii. +20 million papers from journals of science, history, art etc., iv. comics, magazines and paintings; totally amounting to at least 30 TB – easily the Library of Congress of the digital world. The Libgen movement mainly focusses on downloading whole collections that have already been posted in fora or as torrents, although a significant portion is also due to individual efforts. (per &lt;a href="https://sites.google.com/site/themetalibrary/library-genesis"&gt;Google Sites&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This workflow has only one keyword and one action. Use the keyword &lt;code&gt;libgen&lt;/code&gt; to begin a search. Select an item and press &lt;code&gt;Return&lt;/code&gt; to begin a download of the file in your browser of choice. The only real oddity of this workflow is that it requires the user to type a period (&lt;code&gt;.&lt;/code&gt;) after the query in order to initiate the search. This helps with performance.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Metadata</title>
    <link rel="alternate" href="http://blog.url.com/projects/metadata/"/>
    <id>http://blog.url.com/projects/metadata/</id>
    <published>2015-05-22T20:00:00-04:00</published>
    <updated>2016-12-02T22:18:27-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;Python wrapper for OS X &lt;code&gt;mdfind&lt;/code&gt; and &lt;code&gt;mdls&lt;/code&gt;&lt;/p&gt;

&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;

&lt;p&gt;Download the &lt;code&gt;.zip&lt;/code&gt; file from GitHub.&lt;/p&gt;

&lt;p&gt;I’m working on getting the library on &lt;a href="https://pypi.python.org/pypi"&gt;PyPi&lt;/a&gt; soon.&lt;/p&gt;

&lt;h3 id="file-metadata-query-expression-syntax"&gt;File Metadata Query Expression Syntax&lt;/h3&gt;

&lt;p&gt;I have modeled the Python syntax on &lt;a href="https://developer.apple.com/library/mac/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html"&gt;Apple’s original Spotlight query syntax&lt;/a&gt;. File metadata queries are constructed using a simple query language that takes advantage of Python’s flexible class construction. The syntax is relatively straightforward, including comparisons, language agnostic options, and time and date variables.&lt;/p&gt;

&lt;h4 id="comparison-syntax"&gt;Comparison Syntax&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;metadata&lt;/code&gt; library implements 3 custom classes (&lt;code&gt;MDAttribute&lt;/code&gt;, &lt;code&gt;MDComparison&lt;/code&gt;, and &lt;code&gt;MDExpression&lt;/code&gt;) to represent the various units of &lt;code&gt;mdfind&lt;/code&gt;’s &lt;a href="https://developer.apple.com/library/mac/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html"&gt;Query Expression Syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Query comparisons have the following basic format:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[attribute] [operator] [value]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The following sub-sections will describe these 3 elements more fully, but any such comparison will generate a &lt;code&gt;MDComparison&lt;/code&gt; object. If you ever want to see what a particular &lt;code&gt;MDComparison&lt;/code&gt; object will look like as an query string, you can coerce it into a unicode string using the &lt;code&gt;unicode()&lt;/code&gt; operation (or into a string using the &lt;code&gt;str()&lt;/code&gt; operation).&lt;/p&gt;

&lt;h4 id="attribute"&gt;Attribute&lt;/h4&gt;

&lt;p&gt;The first element of a query comparison is the &lt;em&gt;attribute&lt;/em&gt;, which is a &lt;code&gt;MDAttribute&lt;/code&gt; object in &lt;code&gt;metadata&lt;/code&gt;. &lt;code&gt;metadata&lt;/code&gt; automatically generates &lt;code&gt;MDAttribute&lt;/code&gt; objects for every Spotlight attribute on your system. You can view the names of all of these objects via &lt;code&gt;metadata.attributes&lt;/code&gt; variable. Attributes have a Pythonic naming scheme, so &lt;code&gt;kMDItemFSName&lt;/code&gt; becomes &lt;code&gt;metadata.name&lt;/code&gt; and &lt;code&gt;kMDItemContentType&lt;/code&gt; becomes &lt;code&gt;metadata.content_type&lt;/code&gt;. The &lt;code&gt;MDAttribute&lt;/code&gt; class is built on top of the metadata information retrieved from &lt;code&gt;mdimport -A&lt;/code&gt;. If you wish to see all of the information for a metadata attributes, you can use the &lt;code&gt;metadata.[attribute].info()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;As with all of the custom classes, you can coerce a &lt;code&gt;MDAttribute&lt;/code&gt; object into a unicode string using the &lt;code&gt;unicode()&lt;/code&gt; operation (i.e. &lt;code&gt;unicode(metadata.name)&lt;/code&gt; returns &lt;code&gt;u'kMDItemFSName'&lt;/code&gt;).&lt;/p&gt;

&lt;h4 id="operator"&gt;Operator&lt;/h4&gt;

&lt;p&gt;The &lt;em&gt;operator&lt;/em&gt; can be any one of the following:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;Operator&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;equal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;not equal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;less than (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;greater than (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;less than or equal (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;greater than or equal (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;in_range(attribute, min_value, max_value)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;numeric values within the range of min_value through max_value in the specified attribute&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; operators allow for modification. These modifiers specify how the comparison is made.&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Modifier&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;metadata.[object].ignore_case&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The comparison is case insensitive.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;metadata.[object].ignore_diacritics&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The comparison is insensitive to diacritical marks.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Both modifiers are on by default. In order to turn one off, you need to set the property to &lt;code&gt;False&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;metadata&lt;/span&gt;

&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ignore_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;comparison&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'com.adobe.pdf'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h4 id="value"&gt;Value&lt;/h4&gt;

&lt;p&gt;The &lt;em&gt;value&lt;/em&gt; element of a query comparison can be a string or integer. Strings can use wildcard characters (&lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;) to make the search fuzzy. The &lt;code&gt;*&lt;/code&gt; character matches multiple characters whereas the &lt;code&gt;?&lt;/code&gt; wildcard character matches a single character (&lt;em&gt;Note&lt;/em&gt;: Even in the Terminal, I cannot get wildcard searches with &lt;code&gt;?&lt;/code&gt; to function properly. I would recommend using &lt;code&gt;*&lt;/code&gt; as your ony wildcard character). Here are some examples demonstrating how the wildcards function:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Matches attribute values that begin with “paris”. For example, matches “paris”, but not “comparison”.&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_content&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"paris*"&lt;/span&gt;

&lt;span class="c"&gt;# Matches attribute values that end with “paris”.&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_content&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"*paris"&lt;/span&gt;

&lt;span class="c"&gt;# Matches attributes that contain "paris" anywhere within the value. For example, matches “paris” and “comparison”.&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_content&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"*paris*"&lt;/span&gt;

&lt;span class="c"&gt;# Matches attribute values that are exactly equal to “paris”.&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_content&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"paris"&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;In order to use any of the greater-than or less-than operators, your value needs either to be an integer (or float) or a date object. In order to make the API as intuitive as possible, &lt;code&gt;metadata&lt;/code&gt; allows for human-readable date statements. That is, you do not need to pass &lt;code&gt;datetime&lt;/code&gt; objects as the &lt;em&gt;value&lt;/em&gt; of a comparison with a date attribute (like &lt;code&gt;metadata.creation_date&lt;/code&gt;). &lt;code&gt;metadata&lt;/code&gt; uses the &lt;code&gt;parsedatetime&lt;/code&gt; library to convert human-readable dates into &lt;code&gt;datetime&lt;/code&gt; objects. The following are all acceptable date comparisons:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Created before today&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;creation_date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;'today'&lt;/span&gt;

&lt;span class="c"&gt;# Created after last month&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;creation_date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;'one month ago'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;If &lt;code&gt;metadata&lt;/code&gt; cannot parse your datetime string, it will raise an &lt;code&gt;Exception&lt;/code&gt;. The parsing engine is good, but not perfect and can seem capricious. For example, &lt;code&gt;one month ago&lt;/code&gt; is parsable, but &lt;code&gt;a month ago&lt;/code&gt; is not. Datetime strings that are parsed are converted into an ISO-8601-STR compliant string.&lt;/p&gt;

&lt;h3 id="expression-syntax"&gt;Expression syntax&lt;/h3&gt;

&lt;p&gt;You can combine &lt;code&gt;MDComparison&lt;/code&gt; objects to create a more complex expression, represented by the &lt;code&gt;MDExpression&lt;/code&gt; class. Comparison objects can be combined in one of two ways: using a conjuction (&lt;code&gt;&amp;amp;&lt;/code&gt;) or using a disjuction (&lt;code&gt;|&lt;/code&gt;). Not only can &lt;code&gt;MDComparison&lt;/code&gt; objects be combined, but you can nest and combine any combination of &lt;code&gt;MDComparison&lt;/code&gt; objects and &lt;code&gt;MDExpression&lt;/code&gt; objects. For example:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# query for audio files authored by “stephen” (ignoring case)&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"stephen"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.audio"&lt;/span&gt;

&lt;span class="c"&gt;# query for audio files authored by “stephen” or “daniel”&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"daniel"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"stephen"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.audio"&lt;/span&gt;

&lt;span class="c"&gt;# query for audio or video files authored by “stephen” or “daniel”&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"daniel"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"stephen"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.audio"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.video"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# you could also break the last expression into chunks&lt;/span&gt;
&lt;span class="n"&gt;author_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"daniel"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"stephen"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;type_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.audio"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.video"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;final_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author_exp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;type_exp&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Here’s a complex expression to find only audio or video files that have been changed in the last week authored by someone named either “Stephen” or “Daniel” (ignoring case and diacritics, so it would match a file authored by “danièl”):&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;author_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"daniel"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"stephen"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;type_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.audio"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.video"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time_comp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_change_date&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'one week ago'&lt;/span&gt;
&lt;span class="n"&gt;query_expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author_exp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;type_exp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;time_comp&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: parentheses are needed for the first two expressions. Without them, you would get a &lt;code&gt;TypeError&lt;/code&gt; as Python thinks you are trying to combine the string &lt;code&gt;"daniel"&lt;/code&gt; with the &lt;code&gt;MDAttribute&lt;/code&gt; object &lt;code&gt;authors&lt;/code&gt;, which is an obviously unsupported expression.&lt;/p&gt;

&lt;p&gt;Once you have created your query expression (or even a simple comarison), you will pass this to &lt;code&gt;metadata.find()&lt;/code&gt; in order to execute the file searching.&lt;/p&gt;

&lt;h2 id="functions"&gt;Functions&lt;/h2&gt;

&lt;h3 id="find"&gt;&lt;code&gt;find&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The main function is &lt;code&gt;metadata.find()&lt;/code&gt;. It takes one required argument, &lt;code&gt;query_expression&lt;/code&gt;, which can be either an &lt;code&gt;MDExpression&lt;/code&gt; object or an &lt;code&gt;MDComparison&lt;/code&gt; object. In addition to this one required argument, &lt;code&gt;metadata.find()&lt;/code&gt; also has the optional argument &lt;code&gt;only_in&lt;/code&gt; for you to focus the scope of your search to a particular directory tree. This simply needs to be a full (non-relative) path passed as a Unicode string. Other than that, there’s nothing else to it. Build you query expression, pass it to &lt;code&gt;find()&lt;/code&gt; and get your results as a Python list. Here’s an example of building the sample expression above and passing it to &lt;code&gt;metadata.find()&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;metadata&lt;/span&gt;

&lt;span class="n"&gt;author_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"daniel"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"stephen"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;type_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.audio"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.video"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time_comp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_change_date&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'one week ago'&lt;/span&gt;
&lt;span class="n"&gt;query_expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author_exp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;type_exp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;time_comp&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query_expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h3 id="list"&gt;&lt;code&gt;list&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In addition to &lt;code&gt;find()&lt;/code&gt;, the &lt;code&gt;metadata&lt;/code&gt; module has the &lt;code&gt;list&lt;/code&gt; function, which is a wrapper around the &lt;code&gt;mdls&lt;/code&gt; command. You simply pass it a file path and it returns a dictionary of metadata attributes and values. Once again, the attribute names (the dictionary keys) are simplified using the algorithm used to convert Spotlight attributes to Pythonic names.&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;metadata&lt;/span&gt;

&lt;span class="n"&gt;file_metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h3 id="write"&gt;&lt;code&gt;write&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Finally, there is an alpha version of a &lt;code&gt;write()&lt;/code&gt; function, which allows you to write metadata to a file. Right now, I have it defaulted to writing to the &lt;code&gt;kMDItemUserTags&lt;/code&gt; attribute, but a few others have worked. I need to test it more to make it more general.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Reboot</title>
    <link rel="alternate" href="http://blog.url.com/projects/reboot/"/>
    <id>http://blog.url.com/projects/reboot/</id>
    <published>2015-05-22T20:00:00-04:00</published>
    <updated>2016-12-02T22:18:50-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;This is my personal fork of &lt;a href="https://github.com/MatthewMueller/dots"&gt;Matthew Mueller’s &lt;code&gt;dots&lt;/code&gt; repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;

&lt;p&gt;One-liner:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;mkdir -p /tmp/dots &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/dots &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; curl -L https://github.com/smargh/reboot/archive/master.tar.gz | tar zx --strip 1 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sh ./install.sh&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h3 id="design"&gt;Design&lt;/h3&gt;

&lt;p&gt;The goal of reboot is to automate the process of getting your operating system from a stock build to a fully functional machine.&lt;/p&gt;

&lt;p&gt;Reboot should be the first thing you download and run to get your computer set up.&lt;/p&gt;

&lt;p&gt;This library tries to be organized like a &lt;code&gt;node&lt;/code&gt; application, while working within the constraints of &lt;code&gt;bash&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id="mac-os-x"&gt;Mac OS X&lt;/h4&gt;

&lt;p&gt;The OS X build does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;install &lt;code&gt;homebrew&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;installs binaries (&lt;code&gt;graphicsmagick&lt;/code&gt;, &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;sshfs&lt;/code&gt;, &lt;code&gt;ack&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, etc.)&lt;/li&gt;
  &lt;li&gt;sets OS X defaults&lt;/li&gt;
  &lt;li&gt;installs applications via &lt;code&gt;homebrew-cask&lt;/code&gt; (one-password, sublime-text, virtualbox, nv-alt, iterm2, etc.)&lt;/li&gt;
  &lt;li&gt;sets up the &lt;code&gt;~/.bash_profile&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;handle custom icons for applications&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="credits"&gt;Credits&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Original project by &lt;a href="https://github.com/MatthewMueller/"&gt;Matthew Mueller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Spritzr</title>
    <link rel="alternate" href="http://blog.url.com/projects/spritzr/"/>
    <id>http://blog.url.com/projects/spritzr/</id>
    <published>2015-05-22T20:00:00-04:00</published>
    <updated>2016-12-02T22:19:03-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-11"&gt;Version 1.1&lt;/h4&gt;

&lt;h4 id="download-on-packalhttpwwwpackalorgworkflowspritzr"&gt;Download on &lt;a href="http://www.packal.org/workflow/spritzr"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Spritzr is a relatively simple workflow that allows you to speed-read text on your Mac using &lt;a href="http://www.spritzinc.com/the-science/"&gt;Spritz-style&lt;/a&gt; techniques. The simple idea is that one word of your input text is displayed at a time in quick enough succession that you are no longer &lt;a href="http://en.wikipedia.org/wiki/Subvocalization"&gt;Sub-Vocalizing&lt;/a&gt;, which is the largest impediment to reading at a comfortable, yet swift pace. The added layer of nuance, however, is that each word is positioned around the so-called &lt;a href="http://www.spritzinc.com/blog/"&gt;Optimal Reading Position&lt;/a&gt;. To borrow an image from the Spritz website, the difference between most electronic speedreaders and Spritz-style speedreaders is the alignment of the words:&lt;/p&gt;

&lt;p&gt;&lt;img alt="word_positioning_blog3.png" src="http://www.spritzinc.com/wp-content/uploads/2014/02/word_positioning_blog3.png" /&gt;&lt;/p&gt;

&lt;p&gt;This workflow achieves a similar affect, thus making reading simpler and faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt;: I wrote all of this software from scratch and have no affiliation with the Spritz company. I was inspired by other open-source projects that attempt to mirror the Spritz functionality: &lt;a href="https://github.com/Miserlou/OpenSpritz"&gt;OpenSpritz&lt;/a&gt; and &lt;a href="https://github.com/littleq0903/spritz-cmd"&gt;spritz-cmd&lt;/a&gt;, but this software has no relation to Spritz aside from appearances.&lt;/p&gt;

&lt;p&gt;Spritzr currently only has one command: &lt;code&gt;spritz&lt;/code&gt;. This takes text input which will be parsed and displayed in the Spritzr window.&lt;/p&gt;

&lt;p&gt;&lt;img alt="spritzr.png" src="https://www.evernote.com/shard/s41/sh/288af1c4-bed2-4dfc-ab5f-391ee6c39b32/606b76b31d8c6fbbb4558f38d505cfe5/deep/0/spritzr.png" /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can pass text files (&lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.md&lt;/code&gt;, &lt;code&gt;.mmd&lt;/code&gt;) into Spritzr using the File Action &lt;code&gt;File Spritzr&lt;/code&gt;. This will parse and display the text content of that file in the Spritzr window.&lt;/p&gt;

&lt;p&gt;&lt;img alt="spritzr_file.png" src="https://www.evernote.com/shard/s41/sh/0da5e015-ca7c-461a-bdb4-675b69ae26ea/15682e931bf8c6daf2fcad14f9b200eb/deep/0/spritzr_file.png" /&gt;&lt;/p&gt;

&lt;p&gt;There are two settings, which can be changed using the &lt;code&gt;spritzr:set&lt;/code&gt; keyword:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Words per Minute&lt;/li&gt;
  &lt;li&gt;Reading Mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you which to change your wpm, simply invoke &lt;code&gt;spritzr:set&lt;/code&gt; and input an integer (the default is 250). If you which to change the reading mode, invoke &lt;code&gt;spritzr:set&lt;/code&gt; and input either &lt;code&gt;dark&lt;/code&gt; or &lt;code&gt;light&lt;/code&gt; (the default is &lt;code&gt;light&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Dark Mode: &lt;img alt="spritzr_dark.png" src="https://www.evernote.com/shard/s41/sh/a620b423-7a24-49b8-86e1-6a6088304b0b/5605e456e9e00a944a2d52609b360222/deep/0/spritzr_dark.png" /&gt;&lt;/p&gt;

&lt;p&gt;Light Mode: &lt;img alt="spritzr_light.png" src="https://www.evernote.com/shard/s41/sh/95a765b1-b622-4a27-911e-5b7d2e6b5a40/f3b77ee67f52cd3afa44dec5656ee4dc/deep/0/spritzr_light.png" /&gt;&lt;/p&gt;

&lt;p&gt;Other than that, you can just start spritzing!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Classical Studies Resources</title>
    <link rel="alternate" href="http://blog.url.com/projects/classical-studies-resources/"/>
    <id>http://blog.url.com/projects/classical-studies-resources/</id>
    <published>2015-05-22T20:00:00-04:00</published>
    <updated>2016-12-17T23:13:04-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;This is a work-in-progress collection of structured data and scripts for Classical Studies/Classics.&lt;/p&gt;

&lt;p&gt;The data has been compiled and organized from various online resources including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;a href="http://www.perseus.tufts.edu/"&gt;Perseus Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://dcc.dickinson.edu/"&gt;Dickenson College Commentaries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://dge.cchs.csic.es/index.en"&gt;The Diccionario Griego-Español Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.annee-philologique.com/"&gt;L’Année philologique&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a work-in-progress collection of structured data and scripts for Classical Studies/Classics. The data has been compiled and organized from various online resources including the Perseus Project, Dickenson College Commentaries, The Diccionario Griego-Español Project, and L’Année philologique.&lt;/p&gt;

&lt;p&gt;Currently, these are the JSON structured files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DCC Greek Core Vocabulary&lt;/li&gt;
  &lt;li&gt;DCC Latin Core Vocabulary&lt;/li&gt;
  &lt;li&gt;Greek Authors&lt;/li&gt;
  &lt;li&gt;Greek Texts&lt;/li&gt;
  &lt;li&gt;Latin Texts&lt;/li&gt;
  &lt;li&gt;L’Année philologique Journal Abbreviations (in two forms)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also plain text files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DGE Authors and Works&lt;/li&gt;
  &lt;li&gt;DGE Dictionary Abbreviations&lt;/li&gt;
  &lt;li&gt;Index to Smyth’s Greek Grammar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, there is a random collection of scripts (mostly compiled Applescripts) that I have made at various points for various uses. This section requires much cleaning up, refactoring, and organization at this stage. But I am putting them here for now nonetheless.&lt;/p&gt;

&lt;p&gt;Hopefully, these will find some use for others.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pandoc Templates</title>
    <link rel="alternate" href="http://blog.url.com/projects/pandoc-templates/"/>
    <id>http://blog.url.com/projects/pandoc-templates/</id>
    <published>2015-05-20T20:00:00-04:00</published>
    <updated>2016-12-02T22:18:33-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h2 id="description"&gt;Description&lt;/h2&gt;

&lt;p&gt;A collection of support files for use with &lt;a href="http://johnmacfarlane.net/pandoc/"&gt;Pandoc&lt;/a&gt;, and specifically for helping to turn pandoc markdown files
into nice HTML, LaTeX, PDF, and Microsoft Word Document output. These files go in your &lt;code&gt;~/.pandoc/&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;

&lt;p&gt;To install, simply run this command from your Terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python
git clone https://github.com/smargh/pandoc-templates.git ~/.pandoc
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will clone this repositorty into the appropriate Pandoc templates directory.&lt;/p&gt;

&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;

&lt;p&gt;What’s included?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Under &lt;code&gt;templates&lt;/code&gt;, some &lt;a href="http://johnmacfarlane.net/pandoc/"&gt;Pandoc&lt;/a&gt; templates for an article in PDF (via LaTeX) or HTML. These can be be pointed to directly with the &lt;code&gt;--template=&lt;/code&gt; switch as appropriate. The &lt;code&gt;html.template&lt;/code&gt;, &lt;code&gt;latex.template&lt;/code&gt;, and &lt;code&gt;xelatex.template&lt;/code&gt; files are all forked from KJ Healy’s &lt;a href="https://github.com/kjhealy/pandoc-templates"&gt;&lt;code&gt;pandoc-templates repo&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;reference.docx&lt;/code&gt; file, however, is of my own creation. It can be used via the &lt;code&gt;--reference-docx&lt;/code&gt; pandoc option. The &lt;code&gt;.docx&lt;/code&gt; template uses &lt;a href="http://www.typography.com/fonts/hoefler-text/overview/"&gt;Hoefler Text&lt;/a&gt; as its font. It is double spaced, with small caps headers and 1” indented, single-line block quotes. It works well for academic papers. The &lt;code&gt;latex.template&lt;/code&gt; and &lt;code&gt;xelatex.template&lt;/code&gt; depend on the style files in &lt;a href="http://kjhealy.github.com/latex-custom-kjh/"&gt;latex-custom-kjh&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Under &lt;code&gt;marked&lt;/code&gt;, a single CSS file for generating HTML previews of Markdown documents using &lt;a href="http://marked2app.com/"&gt;Marked&lt;/a&gt;, a very handy HTML live previewer for markdown files. The &lt;code&gt;css&lt;/code&gt; file in the &lt;code&gt;marked/&lt;/code&gt; folder is meant to be used together with pandoc and &lt;a href="http://markedapp.com/"&gt;Marked&lt;/a&gt;. To have &lt;a href="http://marked2app.com/"&gt;Marked&lt;/a&gt; work with &lt;a href="http://johnmacfarlane.net/pandoc/"&gt;Pandoc&lt;/a&gt;, simply go to Marked &amp;gt; Preferences &amp;gt; Advanced. Then specify the filepath to Pandoc like this (e.g.): &lt;code&gt;/usr/bin/pandoc&lt;/code&gt; and the various switches and arguments to pandoc in the ‘Args’ field below it, like this:
  &lt;code&gt;shell
  -r markdown -w html -s -S --bibliography=biblio.bib
 &lt;/code&gt;
Then check the box telling Marked to use this by default. The &lt;code&gt;pandoc&lt;/code&gt; CSS file can be added in Marked &amp;gt; Style &amp;gt; Custom CSS. Marked can then use it to format the HTML output such that it looks like the final &lt;code&gt;.docx&lt;/code&gt; file will.&lt;/li&gt;
  &lt;li&gt;The CSL files in the &lt;code&gt;csl/&lt;/code&gt; folder format the bibliography generated by pandoc and citeproc. (For simplicity we avoid dealing with biblatex directly at all.) The &lt;code&gt;chicago-syllabus.csl&lt;/code&gt; file makes a tiny change to a standard Chicago Notes CSL file so you can use it to output citation information in the body text of a document. This makes it useful for lists of references in CVs and course syllabuses. The other files are the APA, MLA, and Chicago standard files from the main &lt;a href="https://github.com/citation-style-language/styles"&gt;CSL styles repository&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Under &lt;code&gt;defaults&lt;/code&gt;, you will find all of Pandoc’s standard templates for the many of its output formats. These can be helpful in creating your own templates.&lt;/li&gt;
  &lt;li&gt;Finally, under &lt;code&gt;examples&lt;/code&gt;, you will find one plain text Markdown file, one BibTeX &lt;code&gt;.bib&lt;/code&gt; file and a &lt;code&gt;.docx&lt;/code&gt; file. These demonstrate how these templates can be used to generate a beautiful Microsoft Word file from Pandoc. To generate the files for youself, use this pandoc command:
  &lt;code&gt;shell
  -r markdown -w docx -s -S --bibliography=Thesis.bib --csl=/Users/smargheim/Documents/GitHub/pandoc-templates/csl/chicago-author-date.csl --reference-docx=/Users/smargheim/Documents/GitHub/pandoc-templates/templates/reference.docx academic_test.txt --output=academic_test.docx
 &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>I have come to fret the night, the simple silence that it offers.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602142233/"/>
    <id>http://blog.url.com/jots/201602142233/</id>
    <published>2012-02-14T17:33:00-05:00</published>
    <updated>2016-12-17T22:44:21-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Example *Article*</title>
    <link rel="alternate" href="http://blog.url.com/essays/example-article/"/>
    <id>http://blog.url.com/essays/example-article/</id>
    <published>2011-12-31T19:00:00-05:00</published>
    <updated>2016-12-17T23:24:31-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;This is an example article. It contains a wide range of various content to demonstrate how this blog styles such content. For example, this is some text with a footnote.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;{{read more}}&lt;/p&gt;

&lt;p&gt;This is a way to determine the number of characters per line in the various layouts:&lt;/p&gt;

&lt;p&gt;0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\sum_{n=1}^{\infty} \frac{1}{n}&lt;/script&gt;

&lt;p&gt;This text is &lt;em&gt;italic&lt;/em&gt;, while this is &lt;strong&gt;bold&lt;/strong&gt;, and this is a &lt;a href="smargh.github.io"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For code, you have two types:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;inline code&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;list_comp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is an example block quote. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id="h1"&gt;H1&lt;/h1&gt;

&lt;h2 id="h2"&gt;H2&lt;/h2&gt;

&lt;h3 id="h3"&gt;H3&lt;/h3&gt;

&lt;h4 id="h4"&gt;H4&lt;/h4&gt;

&lt;h5 id="h5"&gt;H5&lt;/h5&gt;

&lt;p&gt;&lt;img alt="fractal" src="images/fractal.svg" /&gt;&lt;/p&gt;

&lt;p&gt;For example, a list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Item number one&lt;/li&gt;
  &lt;li&gt;Item number two
    &lt;ul&gt;
      &lt;li&gt;A nested item&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A final item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or with numbers!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Remember to buy some milk&lt;/li&gt;
  &lt;li&gt;Drink the milk&lt;/li&gt;
  &lt;li&gt;Tweet that I remembered to buy the milk, and drank it&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;This is a sample table:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;Operator&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;equal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;not equal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;less than (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;greater than (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;less than or equal (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;greater than or equal (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;in_range(attribute, min_value, max_value)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;numeric values within the range of min_value through max_value in the specified attribute&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;fin.&lt;/p&gt;
&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;This is a footnote for my &lt;code&gt;Example Article&lt;/code&gt;. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
