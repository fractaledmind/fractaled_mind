<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fractaled Mind</title>
  <subtitle>Disparate thoughts, connected</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2015-05-15T13:25:00-04:00</updated>
  <author>
    <name>Stephen Margheim</name>
  </author>
  <entry>
    <title>This is Fractaled Mind</title>
    <link rel="alternate" href="http://blog.url.com/articles/this-is-fractaled-mind/"/>
    <id>http://blog.url.com/articles/this-is-fractaled-mind/</id>
    <published>2015-05-15T13:25:00-04:00</published>
    <updated>2015-05-22T14:00:48-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I’ve been programming in Python for &lt;a href=""&gt;a little over a year now&lt;/a&gt;. I really love Python, and I’m finally starting to feel comfortable reading other people’s code. For me, this was an important plateau. That’s some text with a footnote.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; Being able to read and understand someone else’s code, regardless of their style, preferences, structure, or paradigm, means that I now understand enough Python to follow basically any particular code’s logic. Once I reached this state, however, I started to think about what the next plateau should be. What’s my next goal? I decided to set my sights on clean API design.&lt;/p&gt;

&lt;p&gt;Like most programmers, of any level I would assume, I prefer clean, simple APIs. In Python, these APIs typically are our access points to libraries (whether in the &lt;a href=""&gt;Standard Library&lt;/a&gt; or a 3rd party library). API design centers around how you make the functionality of your code available to other users or programmers. A good API is simple, intuitive, and clean. Simple means it only grants access to the functionality a user needs; intuitive means you can understand and perhaps even predict its semantics; and clean means the underlying code is well-structured, properly decoupled, and tested. I’ve written a decent amount of Python over the last year, but I wouldn’t call any of it simple, intuitive, or clean.&lt;/p&gt;

&lt;p&gt;So, how do I start to learn API design? My first thought was to start a new project from scratch, with a focus on its API. However, I quickly moved away from this approach. Starting totally from scratch means that my API can look like anything, can do anything, can be structured in any way. Clean API design requires structure, which often requires limits. Plus, starting a project from scratch requires so much more work beyond the actual API design itself. I wanted an approach that allowed to focus heavily on the API side of the program. My solution, for better or worse, was to write a Python wrapper for a UNIX program. For my money, this is actually a great way to learn Python API design. In what follows, I will describe how my own project evolved, what I learned, and why I consider it an all-around success.&lt;/p&gt;

&lt;p&gt;As with all programming aimed at learning, I believe its important to find a project/problem that interests you. I had been working with OS X’s &lt;code&gt;mdfind&lt;/code&gt; utility for another project and realized that it was powerful, but a pain to use. All of the &lt;a href=""&gt;Spotlight attribute names&lt;/a&gt; are convoluted, the &lt;a href=""&gt;query syntax&lt;/a&gt; is convoluted, and it’s far too easy to make a small mistake. All these issues aside, however, it’s a program with a predefined API that does something helpful. This is a perfect place for me to write my own Python API to open up &lt;code&gt;mdfind&lt;/code&gt;’s functionality to Python programmers without the hassle of the Terminal and Spotlight’s odd syntax.&lt;/p&gt;

&lt;p&gt;In designing the Python wrapper, I wanted to focus on flexibility and simplicity. This meant deconstructing the Spotlight query syntax. As you can read in the &lt;a href=""&gt;README&lt;/a&gt;, the basic unit of any &lt;code&gt;mdfind&lt;/code&gt; query is a “comparison”, which is itself always composed of three parts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;attribute&lt;/li&gt;
  &lt;li&gt;operator&lt;/li&gt;
  &lt;li&gt;predicate&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, my first question was, “How do I construct comparisons in Python?”&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;And that’s the footnote. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>my interesting new article</title>
    <link rel="alternate" href="http://blog.url.com/articles/my-interesting-new-article/"/>
    <id>http://blog.url.com/articles/my-interesting-new-article/</id>
    <published>2015-03-30T18:58:00-04:00</published>
    <updated>2015-05-21T17:56:28-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h1 id="welcome-to-ghost"&gt;Welcome to Ghost&lt;/h1&gt;

&lt;p&gt;You’re live! Nice. We’ve put together a little post to introduce you to
the Ghost editor and get you started. You can manage your content by
signing in to the admin area at &lt;code&gt;&amp;lt;your blog URL&amp;gt;/ghost/&lt;/code&gt;. When you
arrive, you can select this post from a list on the left and see a
preview of it on the right. Click the little pencil icon at the top of
the preview to edit this post and read the next section!&lt;/p&gt;

&lt;h2 id="getting-started"&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;Ghost uses something called Markdown for writing. Essentially, it’s a
shorthand way to manage your post formatting as you write!&lt;/p&gt;

&lt;p&gt;Writing in Markdown is really easy. In the left hand panel of Ghost, you
simply write as you normally would. Where appropriate, you can use
&lt;em&gt;shortcuts&lt;/em&gt; to &lt;strong&gt;style&lt;/strong&gt; your content. For example, a list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Item number one&lt;/li&gt;
  &lt;li&gt;Item number two
    &lt;ul&gt;
      &lt;li&gt;A nested item&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A final item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or with numbers!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Remember to buy some milk&lt;/li&gt;
  &lt;li&gt;Drink the milk&lt;/li&gt;
  &lt;li&gt;Tweet that I remembered to buy the milk, and drank it&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="links"&gt;Links&lt;/h3&gt;

&lt;p&gt;Want to link to a source? No problem. If you paste in a URL, like
&lt;a href="http://ghost.org"&gt;http://ghost.org&lt;/a&gt; - it’ll automatically be linked up. But if you want
to customise your anchor text, you can do that too! Here’s a link to
&lt;a href="http://ghost.org"&gt;the Ghost website&lt;/a&gt;. Neat.&lt;/p&gt;

&lt;h3 id="what-about-images"&gt;What about Images?&lt;/h3&gt;

&lt;p&gt;Images work too! Already know the URL of the image you want to include
in your article? Simply paste it in like this to make it show up:&lt;/p&gt;

&lt;p&gt;&lt;img alt="The Ghost Logo" src="https://ghost.org/images/ghost.png" /&gt;&lt;/p&gt;

&lt;p&gt;Not sure which image you want to use yet? That’s ok too. Leave yourself
a descriptive placeholder and keep writing. Come back later and drag and
drop the image in to upload:&lt;/p&gt;

&lt;h3 id="quoting"&gt;Quoting&lt;/h3&gt;

&lt;p&gt;Sometimes a link isn’t enough, you want to quote someone on what they’ve
said. It was probably very wisdomous. Is wisdomous a word? Find out in a
future release when we introduce spellcheck! For now - it’s definitely a
word.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Wisdomous - it’s definitely a word.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="working-with-code"&gt;Working with Code&lt;/h3&gt;

&lt;p&gt;Got a streak of geek? We’ve got you covered there, too. You can write
inline &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; blocks really easily with back ticks. Want to show off
something more comprehensive? 4 spaces of indentation gets you there.&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;.awesome-thing {
    display: block;
    width: 100%;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h3 id="ready-for-a-break"&gt;Ready for a Break?&lt;/h3&gt;

&lt;p&gt;Throw 3 or more dashes down on any new line and you’ve got yourself a
fancy new divider. Aw yeah.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="advanced-usage"&gt;Advanced Usage&lt;/h3&gt;

&lt;p&gt;There’s one fantastic secret about Markdown. If you want, you can write
plain old HTML and it’ll still work! Very flexible.&lt;/p&gt;

&lt;p&gt;&lt;input type="text" placeholder="I'm an input field!" /&gt;&lt;/p&gt;

&lt;p&gt;That should be enough to get you started. Have fun - and let us know
what you think :)&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Example Article</title>
    <link rel="alternate" href="http://blog.url.com/articles/example-article/"/>
    <id>http://blog.url.com/articles/example-article/</id>
    <published>2011-12-31T19:00:00-05:00</published>
    <updated>2015-05-23T21:02:01-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;This is an example article. You probably want to delete it and write your own articles!&lt;/p&gt;

&lt;p&gt;This is the content of my blog post. That’s some text with a footnote.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;{{read more}}&lt;/p&gt;

&lt;p&gt;0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Hello World, I know that I’m here&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Here I come&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="smargh.github.io"&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;list_comp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is an example block quote. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img alt="fractal" src="../../images/dragon_curve.png" /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;operator&lt;/em&gt; can be any one of the following:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;Operator&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;equal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;not equal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;less than (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;greater than (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;less than or equal (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;greater than or equal (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;in_range(attribute, min_value, max_value)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;numeric values within the range of min_value through max_value in the specified attribute&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; operators allow for modification. These modifiers specify how the comparison is made.&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Modifier&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;metadata.[object].ignore_case&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The comparison is case insensitive.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;metadata.[object].ignore_diacritics&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The comparison is insensitive to diacritical marks.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Both modifiers are on by default. In order to turn one off, you need to set the property to &lt;code&gt;False&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;fin.&lt;/p&gt;
&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;This is a footnote for my &lt;code&gt;Example Article&lt;/code&gt;. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
