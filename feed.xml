<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fractaled Mind</title>
  <subtitle>Disparate thoughts, connected</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2018-03-04T19:00:00-05:00</updated>
  <author>
    <name>Stephen Margheim</name>
  </author>
  <entry>
    <title>Building Pure CSS Trees (part 1)</title>
    <link rel="alternate" href="http://blog.url.com/articles/css-tree/"/>
    <id>http://blog.url.com/articles/css-tree/</id>
    <published>2018-03-04T19:00:00-05:00</published>
    <updated>2018-03-16T15:12:02-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;Have you ever wanted to represent some hierarchical data on a webpage as a tree? In this series of posts, we are going to build a CSS-only solution for rendering hierarchical trees.&lt;/p&gt;

&lt;p&gt;{{read more}}&lt;/p&gt;

&lt;p&gt;The HTML for our hierarchical data will be structured as nested lists:&lt;/p&gt;

&lt;div class="highlight html"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"tree"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;&lt;/span&gt;1&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;&lt;/span&gt;1.1&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;&lt;/span&gt;1.2&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;&lt;/span&gt;1.2.1&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;&lt;/span&gt;1.2.2&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&amp;lt;code&amp;gt;&lt;/span&gt;1.2.3&lt;span class="nt"&gt;&amp;lt;/code&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Let’s begin by clearing the list of any default list styling:&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.tree&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nl"&gt;list-style&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  
  &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nl"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p data-height="160" data-theme-id="0" data-slug-hash="BYgNJN" data-default-tab="result" data-user="smargh" data-embed-version="2" data-pen-title="css-tree__1" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/smargh/pen/BYgNJN/"&gt;css-tree__1&lt;/a&gt; by Stephen Margheim (&lt;a href="https://codepen.io/smargh"&gt;@smargh&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://static.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;&lt;a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/"&gt;Flexbox&lt;/a&gt; is going to be the heart of our CSS-only implementation. It will give us the power and the flexibility to take our nested lists HTML and render it as a hierarchical tree in a number of different orientations. Initially, however, let’s build a tree that renders along the horizontal axis:&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.tree&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...
&lt;/span&gt;
  &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;flex&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;flex-direction&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;align-items&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This CSS declares that every node is going to be a flex container where the orientation is left-to-right along the horizontal axis and the flex children will be centered along their respective vertical axes.&lt;/p&gt;

&lt;p data-height="125" data-theme-id="0" data-slug-hash="mXZJQd" data-default-tab="result" data-user="smargh" data-embed-version="2" data-pen-title="css-tree__2" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/smargh/pen/mXZJQd/"&gt;css-tree__2&lt;/a&gt; by Stephen Margheim (&lt;a href="https://codepen.io/smargh"&gt;@smargh&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://static.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;Before we start building the connectors, let’s quickly add some basic styling for the nodes so that we can better see our connectors as we build them:&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.tree&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...
&lt;/span&gt;  
  &lt;span class="nt"&gt;span&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;center&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.33em&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.66em&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p data-height="175" data-theme-id="0" data-slug-hash="gvNpZp" data-default-tab="result" data-user="smargh" data-embed-version="2" data-pen-title="css-tree__3" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/smargh/pen/gvNpZp/"&gt;css-tree__3&lt;/a&gt; by Stephen Margheim (&lt;a href="https://codepen.io/smargh"&gt;@smargh&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://static.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;The first connector that we want to build is the line from parent-to-children. Given that we are starting with a simple left-to-right, horizontal tree, this connector will extend out to the right of any parent node.&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.tree&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...
&lt;/span&gt;  
  &lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;ol&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// [connector] parent-to-children
&lt;/span&gt;    &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p data-height="175" data-theme-id="0" data-slug-hash="paXjja" data-default-tab="result" data-user="smargh" data-embed-version="2" data-pen-title="css-tree__4" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/smargh/pen/paXjja/"&gt;css-tree__4&lt;/a&gt; by Stephen Margheim (&lt;a href="https://codepen.io/smargh"&gt;@smargh&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://static.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;This CSS declares that any nested lists (&lt;code&gt;ul&lt;/code&gt;s or &lt;code&gt;ol&lt;/code&gt;s that are descendants of the &lt;code&gt;.tree&lt;/code&gt; list) will have a 1-pixel line, the width of which will be 2% of the viewport width, that is vertically centered and horizontally aligned to the far-left.&lt;/p&gt;

&lt;p&gt;The goal is to have a line that comes out of the center of any parent node; notably, however, we do not put the border on the parent &lt;code&gt;li&lt;/code&gt; element, but on the &lt;code&gt;ul&lt;/code&gt; or &lt;code&gt;ol&lt;/code&gt; element that represents the set of children for the parent node. We do this because we will need both the &lt;code&gt;:before&lt;/code&gt; and &lt;code&gt;:after&lt;/code&gt; pseudo-elements of the &lt;code&gt;li&lt;/code&gt;s to build the connectors for the children.&lt;/p&gt;

&lt;p&gt;Let’s start building those connectors now.&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.tree&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...
&lt;/span&gt;
  &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...
&lt;/span&gt;
    &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    
    &lt;span class="c1"&gt;// [connector] child-to-parent
&lt;/span&gt;    &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2vw&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p data-height="175" data-theme-id="0" data-slug-hash="ddBYVo" data-default-tab="result" data-user="smargh" data-embed-version="2" data-pen-title="css-tree__5" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/smargh/pen/ddBYVo/"&gt;css-tree__5&lt;/a&gt; by Stephen Margheim (&lt;a href="https://codepen.io/smargh"&gt;@smargh&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://static.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;This CSS is simple insofar as it is a direct re-use of the CSS used for the nested &lt;code&gt;ul&lt;/code&gt;s and &lt;code&gt;ol&lt;/code&gt;s. For every &lt;code&gt;li&lt;/code&gt; element, we ensure that it has a 1-pixel line, the width of which will be 2% of the viewport width, that is vertically centered and horizontally aligned to the far-left.&lt;/p&gt;

&lt;p&gt;You should note immediately one issue: the root node has a child-to-parent connector, though it has no parent. Let us remedy that first:&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.tree&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...
&lt;/span&gt;
  &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;padding-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    
    &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;&amp;amp;::&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p data-height="175" data-theme-id="0" data-slug-hash="oErbqG" data-default-tab="result" data-user="smargh" data-embed-version="2" data-pen-title="css-tree__6" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/smargh/pen/oErbqG/"&gt;css-tree__6&lt;/a&gt; by Stephen Margheim (&lt;a href="https://codepen.io/smargh"&gt;@smargh&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://static.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;This ensures that the root node (the direct child of the &lt;code&gt;.tree&lt;/code&gt; list) has no left padding and no child-to-parent connector.&lt;/p&gt;

&lt;p&gt;The only connector left is the vertical line that groups a set of siblings together. In order to create such a line, we need to isolate the first child of a set, the last child, and any middle children. For the middle children, we simple draw a vertical line that is the same height as the child, horizontally aligned to the far-left. For the first child, we want to draw a vertical line that is half the height as the child and that is drawn &lt;em&gt;beneath&lt;/em&gt; the child-to-parent connector. Finally, for the last child, we want another half-height vertical line, but this time it is drawn &lt;em&gt;above&lt;/em&gt; the child-to-parent connector. For this task, we will use the &lt;code&gt;:after&lt;/code&gt; pseudo-element:&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.tree&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// ...
&lt;/span&gt;
  &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// ...
&lt;/span&gt;
    &lt;span class="c1"&gt;// [connector] sibling-to-sibling
&lt;/span&gt;    &lt;span class="err"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;border-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1px&lt;/span&gt; &lt;span class="nb"&gt;solid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// [connector] sibling-to-sibling:last-child
&lt;/span&gt;    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:last-of-type::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// [connector] sibling-to-sibling:first-child
&lt;/span&gt;    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:first-of-type::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;50%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="nl"&gt;bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;// [connector] sibling-to-sibling:middle-child(ren)
&lt;/span&gt;    &lt;span class="k"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;:first-of-type&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;:not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nd"&gt;:last-of-type&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="nd"&gt;::after&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nl"&gt;height&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;100%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p data-height="175" data-theme-id="0" data-slug-hash="PQrZyx" data-default-tab="result" data-user="smargh" data-embed-version="2" data-pen-title="css-tree__7" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/smargh/pen/PQrZyx/"&gt;css-tree__7&lt;/a&gt; by Stephen Margheim (&lt;a href="https://codepen.io/smargh"&gt;@smargh&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://static.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;The only major bit we will add for now is some vertical spacing between children nodes by adding&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="nl"&gt;padding-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;.5vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nl"&gt;padding-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;.5vh&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;to the &lt;code&gt;li&lt;/code&gt; selector.&lt;/p&gt;

&lt;p data-height="185" data-theme-id="0" data-slug-hash="EQBKKw" data-default-tab="result" data-user="smargh" data-embed-version="2" data-pen-title="css-tree__8" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/smargh/pen/EQBKKw/"&gt;css-tree__8&lt;/a&gt; by Stephen Margheim (&lt;a href="https://codepen.io/smargh"&gt;@smargh&lt;/a&gt;) on &lt;a href="https://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://static.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;hr /&gt;

&lt;p&gt;With 78 lines of CSS, we have rendered a nested list as a hierarchical tree graph. In following posts we will extend this CSS to allow for more flexibility and robustness.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>On White Lies and Gas Lights</title>
    <link rel="alternate" href="http://blog.url.com/articles/on-white-lies-and-gas-lights/"/>
    <id>http://blog.url.com/articles/on-white-lies-and-gas-lights/</id>
    <published>2018-02-13T19:00:00-05:00</published>
    <updated>2018-03-06T09:22:36-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;When was the last time you told a “white lie”? You know the one I mean, that harmless little lie you told to avoid hurting someone’s feelings. Our world is rife with them, and they are slowly killing me.&lt;/p&gt;

&lt;p&gt;{{read more}}&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Here’s another question: when was the last time you made an inference about the state of the world? If you’re not sure, I can help you out—it was 5 seconds ago when you read the words “about the state of” and your mind immediately inferred that the following words would be “the world.” Our minds are unfathomable guessing machines. We are making guesses, formulating opinions, and inferring truths &lt;em&gt;all of the time&lt;/em&gt;. And when it comes to inferring, what we lack in accuracy, we make up in quantity.&lt;/p&gt;

&lt;p&gt;I sometimes get lost thinking about the miracle of how successful we all are in our constant guessing. And an absolutely key ingredient in our success is the fact that we all &lt;em&gt;learn&lt;/em&gt; from our past guesses. We aren’t flipping a coin time and time and time again, hoping things come up heads and our guess is right; we are building a complex model of the world and people around us that is constantly evolving to better and better represent the true state of affairs.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Let’s return to the cancer of white lies. A white lie is a lie made with good intentions; you want to avoid offense, want to avoid hurting someone, want to avoid malevolence. And yet, as is so often the case, the road to hell is indeed paved with our good intentions. White lies are little more than gas lights with better PR.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;In 1938, playwright Patrick Hamilton penned and produced &lt;a href="https://en.wikipedia.org/wiki/Gas_Light"&gt;“Gas Light”&lt;/a&gt;, a stage play about a husband who attempts to convince his wife that she is insane when she notices odd details and behaviors stemming from his attempt at covering up a murder. This play, and its later movie adaptations, form the source of the modern concept of “gaslighting”—an attempt to manipulate people into questioning their memory, perception, and even sanity.&lt;/p&gt;

&lt;p&gt;While true gaslighting is intentional, it is utterly possible to deconstruct someone else’s sanity unintentionally. Enter white lies.&lt;/p&gt;

&lt;p&gt;By definition, you tell a white lie whenever you say that the state of the world is &lt;em&gt;X&lt;/em&gt; (those gas lights didn’t dim last night), when the state of the world is actually &lt;em&gt;Y&lt;/em&gt; (the gas lights did dim). And, you are doing this with some twisted sense of doing good by the person to whom you are lying. Consider, however, the consequences of your lie when the person you are lying to has the pre-existing belief that the state of the world is &lt;em&gt;Y&lt;/em&gt;. This person has guessed, has inferred from the world around them, that the state of things is &lt;em&gt;Y&lt;/em&gt;. Maybe this makes them sad or uncomfortable, maybe it doesn’t. Either way, the apparatus of their mind has applied itself to the people and world around them and surmised that things are in state &lt;em&gt;Y&lt;/em&gt;. Now, you enter and declare that, in fact, the state of the world is &lt;em&gt;X&lt;/em&gt;. The person you have just lied to is now faced with a dilemma—do they trust you or trust their judgment? Before even getting into the consequences of them choosing to trust you, consider the position your white lie has put that person in, this person you apparently have enough good will for that you are attempting to do good by them. You have put them in conflict, you have pitted yourself against their own mind. You are telling them to doubt themselves and trust you. Good will, my ass.&lt;/p&gt;

&lt;p&gt;But, what then if they do as you wish and trust you instead of their own sense of things? Well, now their minds must update the model of the people and the world around them. And not simply update the model, but tear down the old, presumed faulty, model of the world. Your lie asks them to deconstruct their own apparatus for determining what is real and what isn’t, the apparatus of their sanity.&lt;/p&gt;

&lt;p&gt;In small doses, such deconstruction and updating has little noticeable effect; you would be surprised, however, how quickly this process can bring a person to an utterly untenable state. You see, the problem is not so much that a person will end up with an inference machine in their mind that is rarely correct. Reality is always reality, and so every other signal besides your lie will be suggesting that the state of things is indeed &lt;em&gt;Y&lt;/em&gt;. So what ends up happening is that the tension each and every lie forces upon a person—do I trust this person and think things are &lt;em&gt;X&lt;/em&gt; or do I trust my intuition and think things are &lt;em&gt;Y&lt;/em&gt;—simply grows and grows. And the more that they choose to trust you and your lies, the more that the eventual collapse will hurt and break them.&lt;/p&gt;

&lt;p&gt;For, as we said above, reality is always reality, and so the truth always eventually makes itself known. And when that happens, if you have convinced someone time and time again to trust you and your lies, that person will now be left with a sanity apparatus left in shambles.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I have been unintentionally gaslit with white lies by various people throughout my life. And, to be honest, I didn’t recognize what was going on or what the consequences were in my life until I was full-blown gaslit by someone. Now, I am able to see much more clearly the small effects that small lies have on me. Now, I am unable to form a solid opinion about what is real and what isn’t, when someone is lying or not, whether they have good intentions or not. White lies and black lies alike have stripped me of my most basic ability to make sense of the people and world around me.&lt;/p&gt;

&lt;p&gt;If you actually care even at all for someone, don’t lie to them. Ever. Don’t ask them to choose between you and their own minds. There are no white lies, only gas lights.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Building an Interpreter for Propositional Logic</title>
    <link rel="alternate" href="http://blog.url.com/articles/ruby-logic-interpreter-2/"/>
    <id>http://blog.url.com/articles/ruby-logic-interpreter-2/</id>
    <published>2018-01-02T19:00:00-05:00</published>
    <updated>2018-01-03T15:52:59-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;In the &lt;a href="http://fractaledmind.com/articles/ruby-logic-interpreter-1/"&gt;first post&lt;/a&gt; of this series, we built an interpreter to work with a basic subset of propositional logic. In this post, we are going to extend that interpreter to handle the full range of valid expressions in classical propositional logic. Specifically, this means we are going to allow for&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;handling stacked negation operators (e.g. &lt;code&gt;~~T&lt;/code&gt;),&lt;/li&gt;
  &lt;li&gt;parentheses to group sub-expressions (e.g. &lt;code&gt;~(T v F) &amp;amp; T&lt;/code&gt;),&lt;/li&gt;
  &lt;li&gt;multiple binary operators to be used in one expression (e.g. &lt;code&gt;T &amp;amp; F v T&lt;/code&gt;), and&lt;/li&gt;
  &lt;li&gt;handling the proper operator precedence of the logical operators&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These additions will give our interpreter the capability to evaluate any properly formed expression of classical propositional logic.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="stacked-negations"&gt;Stacked Negations&lt;/h3&gt;

&lt;p&gt;The simplest addition to make will be the stacked negation operators. When we left our grammar, the &lt;code&gt;formula&lt;/code&gt; rule was like so:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;formula :: (NOT)? term
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; meant that a &lt;code&gt;:NOT&lt;/code&gt; token could be present before a &lt;code&gt;term&lt;/code&gt; zero or one times. We want to allow the &lt;code&gt;:NOT&lt;/code&gt; token to present zero or &lt;em&gt;many&lt;/em&gt; times. How might we accomplish this? Well, what precisely can be negated? Is it simply a term (e.g. &lt;code&gt;T&lt;/code&gt; or &lt;code&gt;F&lt;/code&gt;)? No. We are saying that an expression of the form &lt;code&gt;~~T&lt;/code&gt; is valid. What is the abstract syntax tree of this expression? It is a negation operator whose operand is … another negation operator, but this operator has a term operand.&lt;/p&gt;

&lt;div class="tree"&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;~&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;~&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;T&lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;When we start thinking about what this expression is actually encoding, we should see that a negation operator is not necessarily followed by a term; it is followed by a &lt;em&gt;formula&lt;/em&gt;. But a logical formula (that is, a subexpression) can also have no negation operator and simply be either a &lt;code&gt;:TRUE&lt;/code&gt; token or a &lt;code&gt;:FALSE&lt;/code&gt; token (aka a &lt;code&gt;term&lt;/code&gt;):&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;formula :: (NOT)* formula | term
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;In order to encode this new &lt;code&gt;formula&lt;/code&gt; rule in our parser, we need simply to change what we pass into the creation of the &lt;code&gt;AST::Negation&lt;/code&gt; object:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="c1"&gt;# formula :: (NOT)* formula | term&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;formula&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:NOT&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:NOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Negation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formula&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We can add some tests to the &lt;code&gt;run_tests&lt;/code&gt; method we defined in the last post to ensure that this new method is working properly:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_tests&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~~T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~~~F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~~F &amp;amp; F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F v ~~T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can find the script we have built to this point in &lt;a href="https://gist.github.com/fractaledmind/a072674b18086fdebf3b3a535c0f7dfb/d31ab892cc29ee6814d61270f3ecd32c3ddb51e1"&gt;this revision of this Gist&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id="parenthetical-grouping"&gt;Parenthetical Grouping&lt;/h3&gt;

&lt;p&gt;Just like in arithmetic, expressions in propositional logic can use parentheses to explicitly create sub-expressions. When parentheses are used in this way, it is explicitly encoding that the grouped sub-expression has higher precedence than the rest of the expression.&lt;/p&gt;

&lt;p&gt;The first step in allowing for this feature is to update our &lt;code&gt;Lexer&lt;/code&gt; to create the appropriate tokens for these characters:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Lexer&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tokens&lt;/span&gt;
    &lt;span class="vi"&gt;@input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="c1"&gt;# for each `char`, there are only 6 possible things to do&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;
        &lt;span class="k"&gt;next&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'~'&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:NOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'~'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'&amp;amp;'&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:AND&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;amp;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'v'&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:OR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'v'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'&amp;gt;'&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:IFSO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&amp;gt;'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'('&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:LPAREN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'('&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;')'&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:RPAREN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;')'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'T'&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'T'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Next, we need to update our grammar to allow for such grouped sub-expressions.&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;expression :: formula ((AND | OR | IFSO) formula)*
formula :: (NOT)* formula | LPAREN expression RPAREN | term
term :: TRUE | FALSE 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We say that an &lt;code&gt;expression&lt;/code&gt; comes between parenthese, and not a &lt;code&gt;formula&lt;/code&gt;, because any valid logical expression can be placed between parens, not just a negation operation or a term.&lt;/p&gt;

&lt;p&gt;So, we need to update the &lt;code&gt;Parser#formula&lt;/code&gt; method to handle this case:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="c1"&gt;# formula :: (NOT)* formula | LPAREN expression RPAREN | term&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;formula&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:NOT&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:NOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Negation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;formula&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:LPAREN&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:LPAREN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:RPAREN&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Let’s add some more tests to the &lt;code&gt;run_tests&lt;/code&gt; method to ensure that this new feature is working properly as well:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_tests&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'T &amp;amp; (F v T)'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~(T &amp;amp; (F v T))'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~(T &amp;amp; (F v T)) &amp;gt; T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can find the script we have built to this point in &lt;a href="https://gist.github.com/fractaledmind/a072674b18086fdebf3b3a535c0f7dfb/0b65125d6727f09373a125fa2f18ffd65ce759a8"&gt;this revision of this Gist&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id="multiple-binary-operators"&gt;Multiple Binary Operators&lt;/h3&gt;

&lt;p&gt;Our current &lt;code&gt;Parser&lt;/code&gt; does not properly handle expressions with multiple binary operators. As it is, if we were to parse the expression &lt;code&gt;T &amp;amp; F v T&lt;/code&gt;, we would get an abstract syntax tree of this shape:&lt;/p&gt;

&lt;div class="tree"&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;&amp;amp;&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;T&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;F&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;The disjunction is completely ignored! Before we can fix this, we must first determine why and where this is happening. Well, we know that we handle parsing binary operators in the &lt;code&gt;Parser#expression&lt;/code&gt; method, so let’s start looking there:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="c1"&gt;# expression :: formula ((AND | OR | IFSO) formula)?&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;expression&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;formula&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:AND&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:AND&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Conjunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;formula&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:OR&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:OR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Disjunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;formula&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:IFSO&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:IFSO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Implication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;formula&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;What we find is that we don’t allow for recursive expressions; that is, if a formula is followed by an operator, we presume that the right hand operand is also a formula. In order to allow for complex expressions, we need to update a grammar to:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;expression :: formula ((AND | OR | IFSO) expression)*
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This allows for recursive expressions. And, to encode that in our method, we simply replace the &lt;code&gt;formula&lt;/code&gt; param passed to the AST operator intializers with a recursive call to &lt;code&gt;expression&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="c1"&gt;# expression :: formula ((AND | OR | IFSO) expression)*&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;expression&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;formula&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:AND&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:AND&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Conjunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:OR&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:OR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Disjunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:IFSO&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:IFSO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Implication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We can add a couple more tests to ensure that our change is doing what we expect:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_tests&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'T &amp;amp; F v T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F &amp;amp; T v T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~T &amp;amp; F v T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~F &amp;amp; T v T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can find the script we have built to this point in &lt;a href="https://gist.github.com/fractaledmind/a072674b18086fdebf3b3a535c0f7dfb/e61a5a1b8339119e3e8b75d141282e0b15ac37f1"&gt;this revision of this Gist&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id="operator-precedence"&gt;Operator Precedence&lt;/h3&gt;

&lt;p&gt;The final issue we have with our interpreter is that is doesn’t properly handle the precedence of the logical operators. Operator precedence describes the order of operations in an expression. In arithmetic, I remember learning this mnemonic to remember the order of operations: “Please excuse my dear aunt Sally”. This is an acronym mnemonic for “Parentheses exponentiation multiplication division addition substraction”, or, to put it in tabular form:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;Operator&lt;/th&gt;
      &lt;th style="text-align: center"&gt;Precedence&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
      &lt;td style="text-align: center"&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
      &lt;td style="text-align: center"&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;/&lt;/code&gt;&lt;/td&gt;
      &lt;td style="text-align: center"&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
      &lt;td style="text-align: center"&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
      &lt;td style="text-align: center"&gt;3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;This order of operations says that the arithmetic expression &lt;code&gt;1^2 * 3 / 4 + 5 - 6&lt;/code&gt; should be evaluated as &lt;code&gt;((((1^2) * 3) / 4) + 5) - 6&lt;/code&gt;. So, operator precedence tells our interpreter what order to evaluate the operations in. Should it evaluate the multiplication before the addition, or vice versa?&lt;/p&gt;

&lt;p&gt;In propositional logic, the operator precedence is “negation conjunction disjunction implication”:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;Operator&lt;/th&gt;
      &lt;th style="text-align: center"&gt;Precedence&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
      &lt;td style="text-align: center"&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
      &lt;td style="text-align: center"&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt;
      &lt;td style="text-align: center"&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td style="text-align: center"&gt;4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So, let’s look back at one of the tests we added for handling multiple binary operators:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F &amp;amp; T v T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Given the operator precedence, how should &lt;code&gt;F &amp;amp; T v T&lt;/code&gt; be understood? Since conjunction (&lt;code&gt;&amp;amp;&lt;/code&gt;) has a higher precedence than disjunction (&lt;code&gt;v&lt;/code&gt;), it should be read as &lt;code&gt;(F &amp;amp; T) v T&lt;/code&gt;, which would evaluate as &lt;code&gt;true&lt;/code&gt;; however, we can see that our test expects it to be &lt;code&gt;false&lt;/code&gt;. If you have been running the code as we have gone along, step by step, you would have seen your tests pass. This is because our interpreter has no sense of operator precedence and so evaluates the expression from left to right (e.g., in this case, it reads that expression as &lt;code&gt;F &amp;amp; (T v T)&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;We need to encode the precedence of our operators, but how do we do so?&lt;/p&gt;

&lt;p&gt;I’ll be honest, my first thought was to tweak the order of the branches in the &lt;code&gt;if/else&lt;/code&gt; clause of the &lt;code&gt;Parser#expression&lt;/code&gt; methods. This will not solve the problem. Regardless of the order of the conditions, if all of those conditions live in the same method, the parser will still imply precedence from left to right. To encode the logic that this operator take precedence over that operator, regardless of which comes first in the expression, we need the precedence levels to be encoded as separate methods; that is, we need to expand our grammar.&lt;/p&gt;

&lt;p&gt;This is the state of our grammar after our additions and improvements above:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;expression :: formula ((AND | OR | IFSO) expression)*
formula :: (NOT)* formula | LPAREN expression RPAREN | term
term :: TRUE | FALSE
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We can recall from &lt;a href="http://fractaledmind.com/articles/ruby-logic-interpreter-1/#the-interpreter"&gt;the section on the visitor pattern&lt;/a&gt; from the previous post that our abstract syntax tree is &lt;em&gt;evaluated&lt;/em&gt; from the lowest (leftmost) nodes up. So, for a tree like this:&lt;/p&gt;

&lt;div class="tree"&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;&amp;amp;&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;~&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;T&lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;F&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;We will visit nodes until we get the bottom, leftmost &lt;code&gt;T&lt;/code&gt; node. The interpreter will then negate it (moving up the tree from the &lt;code&gt;T&lt;/code&gt; node to its parent), and then evaluate that result as the lefthand side of the conjunction with the &lt;code&gt;F&lt;/code&gt; node on the right. I bring this back up because it will help us to encode our operator precedence. Since our AST is evaluated from the bottom up, we want the operators with the highest precendences to be put lower in the tree. We can see that negation is already encoded as having a higher precedence than conjunction, since the expression &lt;code&gt;~T &amp;amp; F&lt;/code&gt; put the negation operator node below the conjunction node. But, why?&lt;/p&gt;

&lt;p&gt;Well, the short answer is what I was getting at before, at the parser level, precedence is encoded via rule/method layering. Since the negation operator is defined as being a part of the &lt;code&gt;formula&lt;/code&gt; rule/method, which is used as a part of the &lt;code&gt;expression&lt;/code&gt; rule/method, it will &lt;em&gt;always&lt;/em&gt; be placed lower than the binary operators defined as a part of the &lt;code&gt;expression&lt;/code&gt; rule/method in the abstract syntax tree that the parser generates. So, if we want to distinguish the operator precedence of the binary operators, we will need to define a distinct rule for each of them, and those rules will need to be ordered to encode the precedence. Let’s start defining these rules simply by taking the &lt;code&gt;expression&lt;/code&gt; rule and splitting out the operators into separate rules:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;expression :: formula ((AND | OR | IFSO) expression)*
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;becomes&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;conjunction :: formula (AND expression)*
disjunction :: formula (OR expression)*
implication :: formula (IFSO expression)*
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, how do we encode the operator precedence order? The key is the how the grammar rule definitions “nest”. In the original grammar, &lt;code&gt;expression&lt;/code&gt; was the topmost rule, and it called into &lt;code&gt;formula&lt;/code&gt;, which in term called into &lt;code&gt;term&lt;/code&gt;. And our abstract syntax tree would mirror this nesting; Boolean values were placed beneath the negation operator, which would be placed beneath any binary operators. So, in order to encode the operator precedence of the binary operators, we need to nest the rules properly. Since conjunction has the highest precedence, we want it lowest in the tree, just above negation:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;expression :: conjunction ((OR | IFSO) expression)*
conjunction :: formula (AND expression)*
formula :: (NOT)* formula | LPAREN expression RPAREN | term
term :: TRUE | FALSE
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Disjunction is next; we want it to end up above conjunctions in the tree, so:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;expression : disjunction (IFSO expression)*
disjunction :: conjunction (OR expression)*
conjunction :: formula (AND expression)*
formula :: (NOT)* formula | LPAREN expression RPAREN | term
term :: TRUE | FALSE
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;And now our &lt;code&gt;expression&lt;/code&gt; rule has simply become our &lt;code&gt;implication&lt;/code&gt; rule. We now have a grammar where the operators with the lower precedence are higher in the levels of rules. Let’s now encode this grammar in our parser.&lt;/p&gt;

&lt;p&gt;The only change we must make is what method we call for the right hand side of an operation. Right now, each operation rule calls &lt;code&gt;expression&lt;/code&gt; to evaluate the right hand side. If we leave our grammar as is, we would actually end up with the &lt;em&gt;exact same&lt;/em&gt; result as when our grammar only had the &lt;code&gt;expression&lt;/code&gt;, &lt;code&gt;formula&lt;/code&gt;, and &lt;code&gt;term&lt;/code&gt; rules. This is because if we “restart” the evaluation chain at the top (the &lt;code&gt;expression&lt;/code&gt; rule/method) for every right hand operand, our parser will end up grouping operations from left to right again. Since the new &lt;code&gt;expression&lt;/code&gt;, &lt;code&gt;disjunction&lt;/code&gt;, and &lt;code&gt;conjunction&lt;/code&gt; rules/methods all check if the current token is their respective operator, if we evaluate the right hand side of any of these operations back at expression, we will &lt;em&gt;always&lt;/em&gt; end up running a method that finds the next operator and thus groups the sub-expressions in a simplistic, left-to-right manner.&lt;/p&gt;

&lt;p&gt;Maybe an actual example will help explain this point. Let’s return to our earlier example of &lt;code&gt;F &amp;amp; T v T&lt;/code&gt;. What will happen when our parsers evaluates the tokens that represent this expression?&lt;/p&gt;

&lt;p&gt;First, the &lt;code&gt;expression&lt;/code&gt; method is called inside of the &lt;code&gt;parse&lt;/code&gt; method&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;
  &lt;span class="n"&gt;expression&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;expression&lt;/code&gt; method then calls the &lt;code&gt;disjunction&lt;/code&gt; method to hydrate its internal &lt;code&gt;result&lt;/code&gt; variable&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;expression&lt;/span&gt;
  &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;disjunction&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;disjunction&lt;/code&gt; method then calls the &lt;code&gt;conjunction&lt;/code&gt; method to hydrate its internal &lt;code&gt;result&lt;/code&gt; variable&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;disjunction&lt;/span&gt;
  &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conjunction&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;conjunction&lt;/code&gt; method then calls the &lt;code&gt;formula&lt;/code&gt; method to hydrate its internal &lt;code&gt;result&lt;/code&gt; variable&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;conjunction&lt;/span&gt;
  &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;formula&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;formula&lt;/code&gt; method checks if the current token is a negation operator&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;formula&lt;/span&gt;
  &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:NOT&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;It isn’t (its a true token), so it checks if the current token is a left parens token&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;formula&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:LPAREN&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;It isn’t, so it calls the &lt;code&gt;term&lt;/code&gt; method&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;formula&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;term&lt;/code&gt; method checks if the current token is a true token&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;term&lt;/span&gt;
  &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:TRUE&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;It isn’t, so it checks if the current token is a false token&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;term&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:FALSE&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;It is, so it moves the current token pointer to the next token in the stream (now the current_token is the &lt;code&gt;&amp;amp;&lt;/code&gt; conjunction operator token) and returns the &lt;code&gt;false&lt;/code&gt; value to the &lt;code&gt;formula&lt;/code&gt; method&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;term&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:FALSE&lt;/span&gt;
    &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;formula&lt;/code&gt; method then immediately returns that value to the &lt;code&gt;conjunction&lt;/code&gt; method&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;formula&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;conjunction&lt;/code&gt; method therefore sets the internal &lt;code&gt;result&lt;/code&gt; variable of the &lt;code&gt;conjunction&lt;/code&gt; method to the &lt;code&gt;false&lt;/code&gt; value&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;conjunction&lt;/span&gt;
  &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;formula&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;And then it checks if the new current token is the conjunction operator token&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;conjunction&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;

  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:AND&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;It is, so it moves the current token point to the next token in the stream (now the current token is the &lt;code&gt;T&lt;/code&gt; true token) and updates its internal &lt;code&gt;result&lt;/code&gt; variable to a conjunction node where the left hand operand is the previous &lt;code&gt;result&lt;/code&gt; value (aka the &lt;code&gt;false&lt;/code&gt; value) and the right hand operand is a call to &lt;code&gt;expression&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;conjunction&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:AND&lt;/span&gt;
    &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:AND&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Conjunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So we have now called the &lt;code&gt;expression&lt;/code&gt; method and the current token is now pointing to the the &lt;code&gt;T&lt;/code&gt; token. The parser will make its way through the various methods until it gets back to the &lt;code&gt;term&lt;/code&gt; method, which will return the &lt;code&gt;true&lt;/code&gt; value node and move the current token pointer to the &lt;code&gt;v&lt;/code&gt; disjunction operator token. In the process of finishing the evaluation of this second call to &lt;code&gt;expression&lt;/code&gt; (the call originating from the &lt;code&gt;conjunction&lt;/code&gt; method), the &lt;code&gt;disjunction&lt;/code&gt; method will be called and it will check if the current token is the disjunction operator. And since it is, it will create a new disjunction node and call &lt;code&gt;expression&lt;/code&gt; itself with the new current token set to the final &lt;code&gt;T&lt;/code&gt; token. This third call to &lt;code&gt;expression&lt;/code&gt; (originating from the &lt;code&gt;disjunction&lt;/code&gt; method) will return the &lt;code&gt;true&lt;/code&gt; value node so that the right hand side of the disjunction node is that &lt;code&gt;true&lt;/code&gt; value. And then the result of that call to &lt;code&gt;disjunction&lt;/code&gt; will be returned all the way up to the second call to &lt;code&gt;expression&lt;/code&gt;. The right hand side of the conjunction node will therefore be this disjunction node, and with that our parser will finish. It will output an conjunction node where the left hand side is a false value and the right hand side is a disjunction. This is the exact same (faulty) result that our parser had at the end of the last post.&lt;/p&gt;

&lt;p&gt;If we call &lt;code&gt;expression&lt;/code&gt; to evaluate the right hand side of our binary operations, our parser will end up continuing to parse the order of operations simply based on left-to-right appearance order. In order to ensure the actual order of operations, we need a way to “cap” how high back up the hierarchy methods our parser can go. To put it another way, we want to ensure that if our parser finds a conjunction as the first operation it hits, it guarantees that the right hand side of that conjunction can &lt;em&gt;only&lt;/em&gt; be either a Boolean value or a negation operation (since negation has a higher precedence than conjunction); the right hand side of a conjunction &lt;em&gt;cannot&lt;/em&gt; be a disjunction (unless of course we use parentheses to explicitly group our expression that way, but we have already solved that problem). In order to achieve this result, we simply need to change the methods that are called for the right hand side of a binary operation to be calls &lt;em&gt;back to that same method&lt;/em&gt;. Since our method calls are nested, this will allow the right hand side to be evaluated as any operation or value that has either the same precedence as lower.&lt;/p&gt;

&lt;p&gt;I know that this was a pretty large “detour”, but it took me a while to feel like I fully understood &lt;strong&gt;why&lt;/strong&gt; our grammar (and thus our parser) &lt;em&gt;needed&lt;/em&gt; to have this shape to properly encode our operator precedence. So, our final grammar is:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;expression : disjunction (IFSO expression)*
disjunction :: conjunction (OR disjunction)*
conjunction :: formula (AND conjunction)*
formula :: (NOT)* formula | LPAREN expression RPAREN | term
term :: TRUE | FALSE
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;And our final parse rule methods are:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="c1"&gt;# expression :: disjunction (IFSO expression)*&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;expression&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;disjunction&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:IFSO&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:IFSO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Implication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# disjunction :: conjunction (OR disjunction)* &lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;disjunction&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conjunction&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:OR&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:OR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Disjunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;disjunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# conjunction :: formula (AND conjunction)* &lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;conjunction&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;formula&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:AND&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:AND&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Conjunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conjunction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# formula :: (NOT)* formula | LPAREN expression RPAREN | term&lt;/span&gt;
  &lt;span class="c1"&gt;# remains the same&lt;/span&gt;

  &lt;span class="c1"&gt;# term :: TRUE | FALSE&lt;/span&gt;
  &lt;span class="c1"&gt;# remains the same&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We can now update our non-grouped binary expression tests:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_tests&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F &amp;amp; T v T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_interpret_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~F &amp;amp; T v T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id="wrapping-up"&gt;Wrapping Up&lt;/h3&gt;

&lt;p&gt;We have now successfully implemented an interpreter that handles the full suite of valid expressions in classical propositional logic:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it handles stacked negation operators (e.g. &lt;code&gt;~~T&lt;/code&gt;),&lt;/li&gt;
  &lt;li&gt;it handles parentheses to group sub-expressions (e.g. &lt;code&gt;~(T v F) &amp;amp; T&lt;/code&gt;),&lt;/li&gt;
  &lt;li&gt;it handles multiple binary operators used in one expression (e.g. &lt;code&gt;T &amp;amp; F v T&lt;/code&gt;), and&lt;/li&gt;
  &lt;li&gt;it handles the proper operator precedence of the logical operators&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some of these bits of functionality were easier to implement than others, but we learned a lot more about our parser and the grammar needed to describe a language with the added complexity of robust classical logic.&lt;/p&gt;

&lt;p&gt;In the next post, I want us to expand our interpreter to allow for variables in our expressions, like &lt;code&gt;P &amp;amp; Q&lt;/code&gt;. That should be fun.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can find the script we have built to this point in &lt;a href="https://gist.github.com/fractaledmind/a072674b18086fdebf3b3a535c0f7dfb/0c340cfc3437522d0ec45bd3f7b7820133d25fbd"&gt;this revision of this Gist&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;I say “classical propositional logic” because modern propositional logic has many more valid operators. But this is an addition we will get to in the next post. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Building an Interpreter for Propositional Logic</title>
    <link rel="alternate" href="http://blog.url.com/articles/ruby-logic-interpreter-1/"/>
    <id>http://blog.url.com/articles/ruby-logic-interpreter-1/</id>
    <published>2017-12-28T19:00:00-05:00</published>
    <updated>2018-01-01T19:58:28-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I recently got the itch to dig into how compilers/interpreters worked and were built. So, I’ve decided to start a new series here on the site to follow my exploration of building an interpreter (in Ruby).&lt;/p&gt;

&lt;p&gt;I didn’t want to start by defining my own language to interpret, and I have always loved and been fascinated by logic, so I thought I would build an interpreter for working with logical expressions.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="the-language-of-logic"&gt;The Language of Logic&lt;/h3&gt;

&lt;p&gt;Let’s start small and simple, so for this first post we are only going to build an interpreter for handling the most common operations in &lt;a href="http://www.iep.utm.edu/prop-log/"&gt;propositional logic&lt;/a&gt;:&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: left"&gt;Name&lt;/th&gt;
      &lt;th style="text-align: center"&gt;Symbol&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;Conjunction&lt;/td&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;Disjunction&lt;/td&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;Implication&lt;/td&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: left"&gt;Negation&lt;/td&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;~&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;In addition to these operators, a logical expression must also have some sort of &lt;em&gt;operand&lt;/em&gt;. Propositional logic is the simplest form of logic and only has two kinds of operands: &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt;, which we will represent in our language as &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, in total, our language is composed of only 6 tokens:&lt;/p&gt;

&lt;div style="display:flex;justify-content:space-around;margin-bottom:1rem;"&gt;
  &lt;code&gt;T&lt;/code&gt;
  &lt;code&gt;F&lt;/code&gt;
  &lt;code&gt;~&lt;/code&gt;
  &lt;code&gt;&amp;amp;&lt;/code&gt;
  &lt;code&gt;v&lt;/code&gt;
  &lt;code&gt;&amp;gt;&lt;/code&gt;
&lt;/div&gt;

&lt;p&gt;Simple.&lt;/p&gt;

&lt;p&gt;The next thing we need to consider is how these tokens are used to form a valid expression. First and foremost, the simplest possible valid expression is simply an operand; so, &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt; are both valid expressions in our language. Of our 4 operators, only the negation operator is a so-called &lt;em&gt;unary&lt;/em&gt; operator, which simply means that it is an operator that works on only &lt;em&gt;1&lt;/em&gt; operand. In our language, unary operators must come before their operand, so &lt;code&gt;~T&lt;/code&gt; and &lt;code&gt;~F&lt;/code&gt; are both valid expressions, but &lt;code&gt;T~&lt;/code&gt; or &lt;code&gt;F~&lt;/code&gt; or &lt;code&gt;~&amp;amp;&lt;/code&gt; are not valid expressions. Finally, our other tokens are all &lt;em&gt;binary&lt;/em&gt; operators, which means they work on only &lt;em&gt;2&lt;/em&gt; operands. Our language will use the so-called &lt;em&gt;infix notation&lt;/em&gt; for binary operators, which means that the operator &lt;em&gt;comes between&lt;/em&gt; the two operands; so, &lt;code&gt;T &amp;amp; T&lt;/code&gt;, &lt;code&gt;T v F&lt;/code&gt;, and &lt;code&gt;T &amp;gt; T&lt;/code&gt; are all valid expressions.&lt;/p&gt;

&lt;p&gt;Now that we have a clear sense of what our language for this subset of propositional logic will look like, the final thing we need to clarify before turning to building the actual interpreter is how our valid expressions are supposed to be evaluated. We have thought through the shape and nature of the input of our interpreter, but we also have to think through the output. When we interpret an expression like &lt;code&gt;T &amp;amp; F&lt;/code&gt;, what should the output be? Propositional logic, as noted above, only works with two types of values, &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; (i.e. the &lt;a href="https://en.wikipedia.org/wiki/Boolean_data_type"&gt;Boolean values&lt;/a&gt;). So, when considering how our operators should be evaluated, we simply need to know how each operator responds to the various permutations of the possible values. The unary negation operator is the simplest, so let’s start there.&lt;/p&gt;

&lt;div style="display:flex;justify-content:space-around;margin-bottom:1rem;"&gt;
  &lt;table class="truth-table"&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;&lt;code&gt;~&lt;/code&gt;&lt;/th&gt;
        &lt;th&gt;&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;th&gt;T&lt;/th&gt;
        &lt;td&gt;F&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;F&lt;/th&gt;
        &lt;td&gt;T&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This is a &lt;a href="https://en.wikipedia.org/wiki/Truth_table"&gt;&lt;em&gt;truth table&lt;/em&gt;&lt;/a&gt; and it represents how the negation operator (&lt;code&gt;~&lt;/code&gt;) is evaluated for the two possible values it can operate on.&lt;/p&gt;

&lt;p&gt;For the binary operators, there are four possible states:&lt;/p&gt;

&lt;div style="display:flex;justify-content:space-around;margin-bottom:1rem;"&gt;
  &lt;table class="truth-table"&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/th&gt;
        &lt;th&gt;T&lt;/th&gt;
        &lt;th&gt;F&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;th&gt;T&lt;/th&gt;
        &lt;td&gt;T&lt;/td&gt;
        &lt;td&gt;F&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;F&lt;/th&gt;
        &lt;td&gt;F&lt;/td&gt;
        &lt;td&gt;F&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;table class="truth-table"&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;&lt;code&gt;v&lt;/code&gt;&lt;/th&gt;
        &lt;th&gt;T&lt;/th&gt;
        &lt;th&gt;F&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;th&gt;T&lt;/th&gt;
        &lt;td&gt;T&lt;/td&gt;
        &lt;td&gt;T&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;F&lt;/th&gt;
        &lt;td&gt;T&lt;/td&gt;
        &lt;td&gt;F&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;table class="truth-table"&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/th&gt;
        &lt;th&gt;T&lt;/th&gt;
        &lt;th&gt;F&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;th&gt;T&lt;/th&gt;
        &lt;td&gt;T&lt;/td&gt;
        &lt;td&gt;F&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
        &lt;th&gt;F&lt;/th&gt;
        &lt;td&gt;T&lt;/td&gt;
        &lt;td&gt;T&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;These are the rules that our interpreter is going to have to encode when it comes time to actually evaluate the expressions. For our initial pass we aren’t going to worry yet about the &lt;a href="https://en.wikipedia.org/wiki/Order_of_operations"&gt;order of precedence&lt;/a&gt; of the operators as we will only be working with simple expressions (e.g. expressions with only one binary operator). So, having laid out the shape of the input our interpreter is going to be working with as well as the output it needs to generate, let’s go ahead and write some simple tests that can help guide as we start working on the actual Ruby code:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# the classes and methods reference are what we will eventually build&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;error_msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"Expected '&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;' to evaluate to &lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="n"&gt;tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Lexer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;tokens&lt;/span&gt;
  &lt;span class="n"&gt;ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Parser&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;parse&lt;/span&gt;
  &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Interpreter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;interpret&lt;/span&gt;

  &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;error_msg&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;interpret&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run_tests&lt;/span&gt;
  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'T &amp;amp; T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'T &amp;amp; F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F &amp;amp; T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F &amp;amp; F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'T v T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'T v F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F v T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F v F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'T &amp;gt; T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'T &amp;gt; F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F &amp;gt; T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F &amp;gt; F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'~F &amp;amp; F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;assert_expression_equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'F v ~T'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="s1"&gt;'SUCCESS!'&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id="the-basics-of-interpreters"&gt;The Basics of Interpreters&lt;/h3&gt;

&lt;p&gt;When starting on this quest, I began by doing what I typically do at the outset of some new task: I Googled and I read. The resource I found most helpful was a &lt;a href="https://ruslanspivak.com/lsbasi-part1/"&gt;series of posts&lt;/a&gt; by &lt;a href="https://ruslanspivak.com/pages/about/"&gt;Ruslan Spivak&lt;/a&gt;. There he ends up building an interpreter for the Pascal language, but starts with a simpler calculator. Our goal is much more similar to a calculator than a full programming language, so we can use his early posts as our baseline.&lt;/p&gt;

&lt;p&gt;Over the course of his posts on building the calculator, Ruslan lays out that interpreting is typically decomposed into 3 separate stages:&lt;/p&gt;

&lt;div style="display:flex;justify-content:space-around;align-items:center;margin-bottom:1rem;"&gt;
  &lt;span style="border:thin solid;padding:0.25em 0.5em;padding-top:0.33em;border-radius:4px"&gt;
    lexical analysis
  &lt;/span&gt;
  &lt;span&gt;&amp;rarr;&lt;/span&gt;
  &lt;span style="border:thin solid;padding:0.25em 0.5em;padding-top:0.33em;border-radius:4px"&gt;
    parsing
  &lt;/span&gt;
  &lt;span&gt;&amp;rarr;&lt;/span&gt;
  &lt;span style="border:thin solid;padding:0.25em 0.5em;padding-top:0.33em;border-radius:4px"&gt;
    interpreting
  &lt;/span&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Lexical analysis&lt;/em&gt; is the process of breaking the input string into tokens (we’ll get to what tokens are in just a bit). The tool that does the lexical analysis is called a &lt;em&gt;lexer&lt;/em&gt;, and it is the tool that is going to need to know about the set of tokens for our language that we laid out above. &lt;em&gt;Parsing&lt;/em&gt;, then, is the process of finding structure in the stream of tokens, and the tool that does the parsing is – you guessed it – called a &lt;em&gt;parser&lt;/em&gt;. The parser is what will need to know about what constitutes a valid expression, as outlined above. Finally, &lt;em&gt;interpreting&lt;/em&gt; takes the structured output of the parser and evaluates it to get a result (in our case, some Boolean value). So, we are going to need 3 basic classes:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Lexer&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Interpreter&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id="the-lexer"&gt;The Lexer&lt;/h3&gt;

&lt;p&gt;Our lexer is going to take a string representation of a logical expression and convert it into a collection of tokens. Okay, well, what are tokens? Tokens are the basic, abstract units of the language that the interpreter will, well, interpret. To understand what a token is, it may be easiest to jump over to Ruslan’s example of a calculator. &lt;code&gt;2 + 2&lt;/code&gt; and &lt;code&gt;5 - 3&lt;/code&gt; are both valid arithmetic expressions. Disregarding whitespace, each expression is composed of 3 characters: &lt;code&gt;['2', '+', '2']&lt;/code&gt; and &lt;code&gt;['5', '-', '3']&lt;/code&gt;. We, as people who understand basic arithmetic, know that there are two different categories of characters in these lists—integers and operators. &lt;code&gt;['2', '5', '3']&lt;/code&gt; are all examples of integers, and &lt;code&gt;['+', '-']&lt;/code&gt; are both operators. To put this in the language of interpreters and lexers, we would say that, for example, &lt;code&gt;2&lt;/code&gt; is a token of the integer type with a value of “2”, while &lt;code&gt;+&lt;/code&gt; is a token of the addition type with a value of “+”. Now, I just said that &lt;code&gt;+&lt;/code&gt; is a token of the addition type, not the operator type; why? If our interpreter needs to do different things depending on the exact operator, each operator needs a distinct type. While &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; are both operators, they are different operators that do different things.&lt;/p&gt;

&lt;p&gt;This brings us to the final bit of jargon for this section: &lt;em&gt;lexemes&lt;/em&gt;. If tokens are the abstract units of the language (e.g. integers, addition operators, subtraction operators), lexemes are the concrete values of some particular token. So, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt; are both integer tokens, but each has a different lexeme; or, to put it otherwise, the integer token type can have a variety of lexemes (e.g. &lt;code&gt;2, 5, 3, 11, 100,&lt;/code&gt; etc.). The addition token, however, in the basic implementation of a calculator, will only ever have one lexeme—&lt;code&gt;+&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Well, what does all of this mean for the code we need to write? It means that we will need a &lt;code&gt;Token&lt;/code&gt; class that has &lt;code&gt;#type&lt;/code&gt; and &lt;code&gt;#value&lt;/code&gt; attributes:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Token&lt;/span&gt;
  &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:value&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;
    &lt;span class="vi"&gt;@value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The next thing we need to do is define the set of possible token types for our language. I’m going to base the names of the types on the constants used for &lt;a href="https://en.wikipedia.org/wiki/Logic_gate#Symbols"&gt;logical gates&lt;/a&gt;; so, the set of possible operator types will be: &lt;code&gt;[:AND, :OR, :IFSO, :NOT]&lt;/code&gt;.&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; Given the simplicity of our language here at the outset:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;every &lt;code&gt;Token&lt;/code&gt; of type &lt;code&gt;:AND&lt;/code&gt; will have a value of &lt;code&gt;&amp;amp;&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;every &lt;code&gt;Token&lt;/code&gt; of type &lt;code&gt;:OR&lt;/code&gt; will have a value of &lt;code&gt;v&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;every &lt;code&gt;Token&lt;/code&gt; of type &lt;code&gt;:IFSO&lt;/code&gt; will have a value of &lt;code&gt;&amp;gt;&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;every &lt;code&gt;Token&lt;/code&gt; of type &lt;code&gt;:NOT&lt;/code&gt; will have a value of &lt;code&gt;~&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The only other types of &lt;code&gt;Token&lt;/code&gt; we need for this basic implementation of our logic interpreter are Boolean type. We will define a &lt;code&gt;:TRUE&lt;/code&gt; type and &lt;code&gt;:FALSE&lt;/code&gt; type. Again, we are keeping things simple here at the outset, so these types will likewise only have one possible value:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;every &lt;code&gt;Token&lt;/code&gt; of type &lt;code&gt;:TRUE&lt;/code&gt; will have a value of &lt;code&gt;T&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;every &lt;code&gt;Token&lt;/code&gt; of type &lt;code&gt;:FALSE&lt;/code&gt; will have a value of &lt;code&gt;F&lt;/code&gt;;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our lexer thus needs to convert the string representation of the logical expression into a collection of tokens of these types:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Lexer&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tokens&lt;/span&gt;
    &lt;span class="c1"&gt;# returns an array of Token instances&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We are essentially converting one kind of stream (a string) into another (a stream of &lt;code&gt;Token&lt;/code&gt;s), so let’s use &lt;code&gt;Enumerable#map&lt;/code&gt; as the heart of our &lt;code&gt;tokens&lt;/code&gt; method:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Lexer&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tokens&lt;/span&gt;
    &lt;span class="vi"&gt;@input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="c1"&gt;# for each `char`, there are only 6 possible things to do&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt;
        &lt;span class="k"&gt;next&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'~'&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:NOT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'&amp;amp;'&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:AND&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'v'&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:OR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'&amp;gt;'&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:IFSO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'T'&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:TRUE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="s1"&gt;'F'&lt;/span&gt;
        &lt;span class="no"&gt;Token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:FALSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This method converts our input string into an enumerable array (&lt;code&gt;@input.split('')&lt;/code&gt;) and then &lt;code&gt;#map&lt;/code&gt;s over that array to create a new array of &lt;code&gt;Token&lt;/code&gt; instances. However, since our text input string can contain whitespace, and those are not significant tokens, we skip whitespace (thus inserting &lt;code&gt;nil&lt;/code&gt;s into our output array) and then remove the &lt;code&gt;nil&lt;/code&gt;s with the call to &lt;code&gt;#compact&lt;/code&gt; at the end.&lt;/p&gt;

&lt;p&gt;This method will hande a wide variety of expressions:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;$&amp;gt;Lexer.new('~T').tokens
=&amp;gt; [#&amp;lt;NOT value="~"&amp;gt;, #&amp;lt;TRUE value="T"&amp;gt;]

$&amp;gt;Lexer.new('F &amp;amp; T').tokens
=&amp;gt; [#&amp;lt;FALSE value="F"&amp;gt;, #&amp;lt;AND value="&amp;amp;"&amp;gt;, #&amp;lt;TRUE value="T"&amp;gt;]

$&amp;gt;Lexer.new('T v F').tokens
=&amp;gt; [#&amp;lt;TRUE value="T"&amp;gt;, #&amp;lt;OR value="v"&amp;gt;, #&amp;lt;FALSE value="F"&amp;gt;]

$&amp;gt;Lexer.new('T &amp;gt; F').tokens
=&amp;gt; [#&amp;lt;TRUE value="T"&amp;gt;, #&amp;lt;IFSO value="&amp;gt;"&amp;gt;, #&amp;lt;FALSE value="F"&amp;gt;]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id="the-parser"&gt;The Parser&lt;/h3&gt;

&lt;p&gt;With a &lt;code&gt;Lexer&lt;/code&gt; built that will output an enumerable of &lt;code&gt;Token&lt;/code&gt;s, we can now build a simple &lt;code&gt;Parser&lt;/code&gt; that will encode the syntax of our basic propositional logic. But first, what is our parser going to output? Here is where we hit our next big patch of jargon and theory, so let’s go ahead and jump in!&lt;/p&gt;

&lt;p&gt;In short, our parser is going to encode a &lt;em&gt;grammar&lt;/em&gt; and output an &lt;em&gt;abstract syntax tree&lt;/em&gt;; these are the two main bits of jargon we need to make sense of before turning to actually writing our parser. Ruslan has a &lt;a href="https://ruslanspivak.com/lsbasi-part4/"&gt;very good introduction to grammars&lt;/a&gt; in his series on building an interpreter, but let’s try to get there on our own. A grammar, in this context, is simply a structured representation of what constitutes a valid expression in the language, which is precisely the task we set ourselves to earlier. Any grammar is made up of a series of &lt;em&gt;rules&lt;/em&gt;; each &lt;em&gt;rule&lt;/em&gt; has a name (called a “start symbol” or the “head” of the rule) and a definition (called the “body” of the rule). The definition of the &lt;em&gt;rule&lt;/em&gt; (the &lt;em&gt;body&lt;/em&gt;) can refer to other rules or to tokens. But that’s basically it. Let’s go back to Ruslan’s example of a simple calculator to look at a simple grammar for handling addition and subtraction:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;expression :: term ((PLUS | MINUS) term)*
term :: INTEGER
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This is a grammar defining the structure of a language composed of only 3 types of tokens (&lt;code&gt;PLUS&lt;/code&gt;, &lt;code&gt;MINUS&lt;/code&gt;, and &lt;code&gt;INTEGER&lt;/code&gt;). The simplest rule is the rule for a “term”; a term, in this language, is only ever some particular integer. Somewhat more complicated is the rule for an “expression”; an expression, in this language, is &lt;em&gt;always&lt;/em&gt; made up of at least one “term”, but it can optionally (that’s what the &lt;code&gt;(...)*&lt;/code&gt; represents) be made up of a term followed by either the plus or minus operator (&lt;code&gt;(PLUS | MINUS)&lt;/code&gt;) and then another term. So, this grammar dictates that &lt;code&gt;2&lt;/code&gt; is a valid expression, &lt;code&gt;2 + 2&lt;/code&gt; is a valid expression, and &lt;code&gt;2 + 2 - 3&lt;/code&gt; is also a valid expression.&lt;/p&gt;

&lt;p&gt;Now, this is basically as simple as a grammar can be, but that’s ok. We are starting off simple, and this grammar still captures the primary elements and characteristics of the concept.&lt;/p&gt;

&lt;p&gt;For our minimal propositional logic language, we are going to need to define the grammar and then encode that logic in our parser. But, before we get quite there, let’s talk a bit about what our parser is going to output—an Abstract Syntax Tree (AST).&lt;/p&gt;

&lt;p&gt;An &lt;a href="https://en.wikipedia.org/wiki/Abstract_syntax_tree"&gt;abstract syntax tree&lt;/a&gt; is a very important concept in the world of software development. Whether you know it or not, code you have written has very likely used an abstract syntax tree at some point in its execution (even if only at the low level of compiling your code into machine code). First and foremost, an abstract syntax tree is a &lt;em&gt;tree&lt;/em&gt;. This is a particular and oft-used data structure in programming. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction"&gt;DOM&lt;/a&gt; is a tree; &lt;a href="http://ruby-doc.org/core-2.4.0/Hash.html"&gt;hashes&lt;/a&gt; are trees; but what, exactly, is a tree? Simply, a tree is a data structure that consists of one or more nodes organized into a hierarchy. An abstract syntax tree is simply a tree where the nodes represent either the operations or the operands that comprise the language for your interpreter. Ruslan puts it this way:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;So, what is an abstract syntax tree? An abstract syntax tree (AST) is a tree that represents the abstract syntactic structure of a language construct where each interior node and the root node represents an operator, and the children of the node represent the operands of that operator.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Jargony? Yes. But also detailed and specific. But, maybe a concrete example will help firm things up. Returning to our simple calculator, what would the abstract syntax tree for the expression &lt;code&gt;2 + 2 - 3&lt;/code&gt; look like?&lt;/p&gt;

&lt;div class="tree"&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;-&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;+&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;2&lt;/a&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;2&lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;3&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;In the case of our propositional logic language, the abstract syntax tree for the expression &lt;code&gt;~T &amp;amp; F&lt;/code&gt; would look like:&lt;/p&gt;

&lt;div class="tree"&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;&amp;amp;&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;~&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;T&lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;F&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;The output of our parser needs simply to encode such a structure. How might we go about that?&lt;/p&gt;

&lt;p&gt;Well, the first thing we will need is a class to represent an atom node:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;AST&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Atom&lt;/span&gt;
    &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;An atom node is the simplest kind of node; you simply initialize it with a value.&lt;/p&gt;

&lt;p&gt;Next, we need to encode unary operations (like negation):&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;AST&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;UnaryOperation&lt;/span&gt;
    &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:operand&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@operand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;operand&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Unary operations, as we recall from above, take only one operand; so, we initialize this kind of AST node with one operand. We only have one unary operation in our language, so let’s define our negation operation node now:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;AST&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Negation&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;UnaryOperation&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Binary operations are quite similar; they simply take two operands instead of one:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;AST&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;BinaryOperation&lt;/span&gt;
    &lt;span class="kp"&gt;attr_reader&lt;/span&gt; &lt;span class="ss"&gt;:left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:right&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@left&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;
      &lt;span class="vi"&gt;@right&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Let’s now define the AST nodes to represent our 3 binary operators:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;AST&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Conjunction&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;BinaryOperation&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Disjunction&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;BinaryOperation&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Implication&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="no"&gt;BinaryOperation&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;These classes encode all of the possible nodes for our abstract syntax tree. And, each of these classes is composable with any of the others; that is, like the graphical tree representation, they can be nested such that a negation operation is the left operand of a conjunction operation. All we need now is to build a parser that can accept a stream of tokens and output an abstract syntax tree represented by some composition of our newly minted node classes:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;
    &lt;span class="c1"&gt;# this will be the public interface of this class&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, before we can write the code that will live in our &lt;code&gt;Parser&lt;/code&gt; class, we need to define the grammar for our basic implementation of propositional logic. Let’s start with the grammar for basic arithmetic from above:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;expression :: term ((PLUS | MINUS) term)*
term :: INTEGER
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;First, let’s simply replace the arithmetic binary operations with our binary operations:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;expression :: term ((AND | OR | IFSO) term)*
term :: INTEGER
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Next, let’s replace the one integer token with our two Boolean tokens:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;expression :: term ((AND | OR | IFSO) term)*
term :: TRUE | FALSE
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We are nearly there; we just need to handle our unary operation. Let’s add one further rule between the &lt;code&gt;expression&lt;/code&gt; rule and the &lt;code&gt;term&lt;/code&gt; rule for our negation operation:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;expression :: formula ((AND | OR | IFSO) formula)*
formula :: (NOT)? term
term :: TRUE | FALSE
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Finally, we are going to change the &lt;code&gt;*&lt;/code&gt; in the &lt;code&gt;expression&lt;/code&gt; rule to an &lt;code&gt;?&lt;/code&gt;. This means that an &lt;code&gt;expression&lt;/code&gt; is made up of at least a &lt;code&gt;formula&lt;/code&gt; and then either zero or one phrases of the shape operator and formula. The &lt;code&gt;*&lt;/code&gt; meant that the &lt;code&gt;formula&lt;/code&gt; could be followed by &lt;em&gt;zero or more&lt;/em&gt; phrases of that shape. We will get to handling multiple binary operators in our expressions in the next post in this series.&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;expression :: formula ((AND | OR | IFSO) formula)?
formula :: (NOT)? term
term :: TRUE | FALSE
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So, our grammar states that a valid expression in our language is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;composed of at least one formula
    &lt;ul&gt;
      &lt;li&gt;which has zero or one negation operators followed by one term
        &lt;ul&gt;
          &lt;li&gt;which is either a true or false token&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;optionally followed by zero or one predicates
    &lt;ul&gt;
      &lt;li&gt;which has one of three possible operators followed by one formula&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, this isn’t the most complicated or flexible grammar, but it is a valid grammar and it does encode the possible range of expressions in our tests from the start. Over this series of posts, we will expand on this grammar, but for now, let’s write the parser code for this grammar.&lt;/p&gt;

&lt;p&gt;Our parser begins life with a stream of tokens, but we need to work through this stream one token at a time; so, we need a way to iterate through the stream of tokens in a controlled manner. We cannot simply call &lt;code&gt;#each&lt;/code&gt; on the stream of tokens because we need to build our abstract syntax tree recursively. So, let’s implement our own iterator that will use a pointer for the current token that we will manually increment through the stream of tokens.&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tokens&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@tokens&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tokens&lt;/span&gt;
    &lt;span class="vi"&gt;@stream&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@tokens&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_enum&lt;/span&gt;
    &lt;span class="vi"&gt;@current_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token_type&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;token_type&lt;/span&gt;

    &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="vi"&gt;@current_token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@stream&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt;
    &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;StopIteration&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;To achieve our desired result, we are going to use Ruby’s &lt;a href="https://rossta.net/blog/what-is-enumerator.html"&gt;&lt;code&gt;Enumerator&lt;/code&gt; infrastructure&lt;/a&gt;. Our &lt;code&gt;@stream&lt;/code&gt; will be an enumerator object that we can manually iterate over, one token at a time, using the &lt;code&gt;#next&lt;/code&gt; method. Our &lt;code&gt;Parser#eat&lt;/code&gt; method will be the internal mechanism we use to move the pointer (&lt;code&gt;@current_token&lt;/code&gt;) to the next token in our stream (with one extra bit of safety–only moving the pointer forward if the current token is of the type specified when the method is called).&lt;/p&gt;

&lt;p&gt;With a mechanism in place for manually iterating through the stream of tokens, let’s start encoding our grammar rules. The lowest level, and simplest, rule is the &lt;code&gt;term&lt;/code&gt; rule, so let’s start by writing a method for this rule:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="c1"&gt;# term :: TRUE | FALSE&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;term&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:TRUE&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:TRUE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:FALSE&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:FALSE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Atom&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is an invalid term"&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This code should be fairly straightforward. We inspect the current token and if it is a &lt;code&gt;:TRUE&lt;/code&gt; type token, we move the current token point up and return an operand AST node with the Boolean &lt;code&gt;true&lt;/code&gt; value; whereas if the current token is a &lt;code&gt;:FALSE&lt;/code&gt; type token, we move the pointer up and return an operand AST node with the &lt;code&gt;false&lt;/code&gt; value; otherwise, we raise an error.&lt;/p&gt;

&lt;p&gt;Next, we need a method to handle our &lt;code&gt;formula&lt;/code&gt; rule:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="c1"&gt;# formula :: (NOT)? term&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;formula&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:NOT&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:NOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Negation&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Here, we either wrap a call to &lt;code&gt;term&lt;/code&gt; in a negation AST node (if the current token is a &lt;code&gt;:NOT&lt;/code&gt; type), or we simply return the &lt;code&gt;term&lt;/code&gt; unwrapped.&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" class="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Finally, let’s implement the &lt;code&gt;expression&lt;/code&gt; rule:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;

  &lt;span class="c1"&gt;# expression : formula ((AND | OR | IFSO) formula)?&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;expression&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;formula&lt;/span&gt;
    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@current_token&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:AND&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:AND&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Conjunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;formula&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:OR&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:OR&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Disjunction&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;formula&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:IFSO&lt;/span&gt;
      &lt;span class="n"&gt;eat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:IFSO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Implication&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;formula&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;result&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This method begins by setting a temporary &lt;code&gt;result&lt;/code&gt; variable to the output of the &lt;code&gt;Parser#formula&lt;/code&gt; method (since every expression must begin with one valid formula). We then check if the current token (which has been updated by the call to &lt;code&gt;Parser#formula&lt;/code&gt;) is one of the three operator types; if it is, we move the current token pointer forward and then update that &lt;code&gt;result&lt;/code&gt; variable to be the proper AST operator node, where the left hand operand is the previous &lt;code&gt;result&lt;/code&gt; and the right hand operand is the result of a new call to the &lt;code&gt;Parser#formula method&lt;/code&gt;. Once these checks are all done, we return the final &lt;code&gt;result&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With our grammar now fully and properly encoded in our parser, we can finally implement the &lt;code&gt;Parser#parse&lt;/code&gt; method. Luckily, this part is extremely simple, as a parsed stream of tokens is simply an expression:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Parser&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;
    &lt;span class="n"&gt;expression&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h3 id="the-interpreter"&gt;The Interpreter&lt;/h3&gt;

&lt;p&gt;With our &lt;code&gt;Lexer&lt;/code&gt; and &lt;code&gt;Parser&lt;/code&gt; now implemented, we have a pipeline for converting a string representation of a basic expression of propositional logic into an abstract syntax tree object that represents that exact same expression. The final piece of the puzzle is the interpreter that will actually take our abstract syntax tree object and calculate the Boolean output of that expression.&lt;/p&gt;

&lt;p&gt;The question becomes, how do we work with our abstract syntax tree to evaluate an output? Well, let’s start by thinking through what our abstract syntax tree &lt;em&gt;encodes&lt;/em&gt;. Let’s work with the expression from earlier, &lt;code&gt;~T &amp;amp; F&lt;/code&gt;. Represented as a tree, we would have:&lt;/p&gt;

&lt;div class="tree"&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;&amp;amp;&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;~&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;T&lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;F&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;How would we interpret this statement properly ourselves? We would take the first value—&lt;code&gt;T&lt;/code&gt; for &lt;code&gt;true&lt;/code&gt;— and negate it; this would give us a value of &lt;code&gt;false&lt;/code&gt;. We would then compute the result of the expression &lt;code&gt;F &amp;amp; F&lt;/code&gt;, which, given the truth table for the conjunction operator, would give us &lt;code&gt;false&lt;/code&gt;. Simple enough. Now, how could we do something essentially the same as this in code?&lt;/p&gt;

&lt;p&gt;Well, what is it precisely that we did when we “processed” this expression ourselves? We started with values, applied operators to get new values, and followed this process until we had no more operators left, and thus only a value. We need to do the same thing with the abstract syntax tree. Let’s go ahead and translate our tree just above into a visual representation of our abstract syntax tree for this expression:&lt;/p&gt;

&lt;div class="tree"&gt;
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;AST::Conjunction&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;AST::Negation&lt;/a&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;AST::Atom(true)&lt;/a&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href="#" class="monospace bg-lightgrey font-1em bold"&gt;AST::Atom(false)&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;Let’s start at the bottom of this tree and walk through the basics of how to interpret an object like this. Starting with the left hand side of the conjunction, we have a negation operator applied to a true value operand. We know that we need the left hand side of the conjunction to be a value operand before we can evaluate it, so we first need to evaluate the negation operator. When looking at the negation operator node we see that it has only the one child node, only the one operand. To evaluate the operand, we simply need to get its value. With that node evaluated, we next simply need to apply the logic of negation on that value to generate a new value (&lt;code&gt;true&lt;/code&gt; becomes &lt;code&gt;false&lt;/code&gt; when negated). We now have a value for the left hand side of the conjunction. On the right hand side, we already have a value operand. So, we can simply evaluate the conjunction now; what is the output when the left hand side is &lt;code&gt;false&lt;/code&gt; and the right hand side is &lt;code&gt;false&lt;/code&gt;? Also &lt;code&gt;false&lt;/code&gt;. That is our output.&lt;/p&gt;

&lt;p&gt;What we are doing is essentially “visiting” each node in our tree, recursively and one at a time. When we visit a node, we first check what type of node it is. If it is an operand type of node, we simply extract its value. If it is a unary operator node (like negation), we visit its one operand node. If it is a binary operator node (like conjunction), we visit its left operand node and its right operand node. These visits just restart the process, but for that new node (this is what makes the process recursive). In fact, this process of making our way through the hierarchical abstract syntax tree is a well-worn pattern in programming, called the &lt;a href="https://sourcemaking.com/design_patterns/visitor"&gt;Visitor pattern&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With a firmer understanding of &lt;em&gt;how&lt;/em&gt; our &lt;code&gt;Interpreter&lt;/code&gt; is going to interpret the expression represented by the abstract syntax tree passed into it, let’s get started actually writing the code.&lt;/p&gt;

&lt;p&gt;First, we need an initializer that will take the abstract syntax tree that our interpreter needs to evaluate as well as the primary public method for this class, the &lt;code&gt;Interpreter#interpret&lt;/code&gt; method.&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Interpreter&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@ast&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ast&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret&lt;/span&gt;
    &lt;span class="c1"&gt;# this is where the magic will happen&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Next, we need to start implementing our “visitor” pattern. Let’s start with the simplest type of node, the operand node, and write a visitor method for that. As we said above, all this method needs to do is extract the value from the node:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Interpeter&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;visit_atom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;value&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We only have one unary operator, negation, so let’s write a visitor method for that next. In our description above, we said that we need to visit this node’s operand child node and then flip the Boolean value. This leads us to our first issue: how do we determine which visitor method to use when visiting the operand child node? Well, we need to check the type of the node. So let’s do that:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Interpeter&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;visit_negation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;operand_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;operand&lt;/span&gt;
    &lt;span class="n"&gt;operand_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;operand_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Atom&lt;/span&gt;
                      &lt;span class="n"&gt;visit_atom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operand_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;operand_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Negation&lt;/span&gt;
                      &lt;span class="n"&gt;visit_negation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operand_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;operand_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Conjunction&lt;/span&gt;
                      &lt;span class="n"&gt;visit_conjunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operand_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;operand_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Disjunction&lt;/span&gt;
                      &lt;span class="n"&gt;visit_disjunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operand_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;operand_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Implication&lt;/span&gt;
                      &lt;span class="n"&gt;visit_implication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;operand_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;operand_value&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We first figure out what kind of node the &lt;code&gt;node.operand&lt;/code&gt; child node is, then we use the proper visitor method for that node type to get the value of that node. With the value, we can then implement the logic to flip the Boolean value.&lt;/p&gt;

&lt;p&gt;Next, let’s try the first of our binary operators–conjunction. Our visitor method needs to do essentially the same thing as the negation visitor, just with two child nodes:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Interpeter&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;visit_conjunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;left_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;
    &lt;span class="n"&gt;left_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;left_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Atom&lt;/span&gt;
                      &lt;span class="n"&gt;visit_atom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;left_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Negation&lt;/span&gt;
                      &lt;span class="n"&gt;visit_negation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;left_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Conjunction&lt;/span&gt;
                      &lt;span class="n"&gt;visit_conjunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;left_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Disjunction&lt;/span&gt;
                      &lt;span class="n"&gt;visit_disjunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;left_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Implication&lt;/span&gt;
                      &lt;span class="n"&gt;visit_implication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="n"&gt;right_node&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;
    &lt;span class="n"&gt;right_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;right_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Atom&lt;/span&gt;
                      &lt;span class="n"&gt;visit_atom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;right_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Negation&lt;/span&gt;
                      &lt;span class="n"&gt;visit_negation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;right_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Conjunction&lt;/span&gt;
                      &lt;span class="n"&gt;visit_conjunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;right_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Disjunction&lt;/span&gt;
                      &lt;span class="n"&gt;visit_disjunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;right_node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Implication&lt;/span&gt;
                      &lt;span class="n"&gt;visit_implication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;right_node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Here we see a clear opportunity for refactoring to clean this all up a bit. Instead of putting the logic to determine which visitor method to use based on the kind of node &lt;em&gt;inside&lt;/em&gt; of each specific visitor method itself, let’s pull that out into its own separate method. This method will be the sort-of switchboard for all of our specific visitor methods; and each of our specific visitor methods can focus simply on the logic for converting their child nodes into a value:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Interpreter&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Atom&lt;/span&gt;
      &lt;span class="n"&gt;visit_atom&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Negation&lt;/span&gt;
      &lt;span class="n"&gt;visit_negation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Conjunction&lt;/span&gt;
      &lt;span class="n"&gt;visit_conjunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Disjunction&lt;/span&gt;
      &lt;span class="n"&gt;visit_disjunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elsif&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="no"&gt;AST&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Implication&lt;/span&gt;
      &lt;span class="n"&gt;visit_implication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;visit_negation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;operand&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;
      &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;
      &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;visit_conjunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Much nicer! The process for writing the other binary operator visitor methods would be the same as the conjunction method, just with different logic for evaluating a Boolean value:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Interpreter&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;visit_disjunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;visit_implication&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;left&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;false&lt;/span&gt;
    &lt;span class="k"&gt;when&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
      &lt;span class="kp"&gt;true&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Finally, with our visitor pattern all built out, we simply need to wire up the &lt;code&gt;Interpreter#interpret&lt;/code&gt; method. Since our abstract syntax tree is simply a hierarchical, complex object—that is, it is a single node object that nests various levels of complexity within its children nodes—, we simply need to visit the tree object itself:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Interpreter&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;interpret&lt;/span&gt;
    &lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@ast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;With that, we have a proper interpreter for working with simple expressions of propositional logic! Congrats on sticking with it this far. If you have been writing this in a file on your own computer, you can run the tests we defined at the outset and see that our interpreter works precisely as expected. Awesome!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="wrapping-up"&gt;Wrapping Up&lt;/h3&gt;

&lt;p&gt;So, what all have we accomplished? We have written a &lt;code&gt;Lexer&lt;/code&gt; that takes an input string representing a basic logical expression and converts it into a stream of &lt;code&gt;Token&lt;/code&gt; objects that represent the atomic components of the expression. We wrote a &lt;code&gt;Parser&lt;/code&gt; that takes such a stream of tokens and builds an abstract syntax tree to represent the expression based on a grammar that properly and fully describes the shape of our language. We finally built an &lt;code&gt;Interpreter&lt;/code&gt; that takes an abstract syntax tree representation of a logical expression and evaluates its Boolean result.&lt;/p&gt;

&lt;p&gt;Along the way, we learned the basics of &lt;em&gt;propositional logic&lt;/em&gt;: its four basic operators, its two operand values, the truth tables for each operator, and the grammar of our simple subset of the language. We also learned what &lt;em&gt;tokens&lt;/em&gt; are and how they are used in &lt;em&gt;lexical analysis&lt;/em&gt;. We learned what a &lt;em&gt;grammar&lt;/em&gt; is, how we can define a grammar using &lt;em&gt;rules&lt;/em&gt;, and how to encode those rules in a &lt;em&gt;parser&lt;/em&gt;. We then learned what an &lt;em&gt;abstract syntax tree&lt;/em&gt; is, how to structure one, and how to evaluate one using the &lt;em&gt;visitor pattern&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;All in all, we have worked through a &lt;strong&gt;ton&lt;/strong&gt; of important and interesting material. I feel pretty accomplished, and so should you.&lt;/p&gt;

&lt;p&gt;In the next post, we are going to expand our grammar to allow for grouped expressions (e.g. &lt;code&gt;~(T v F)&lt;/code&gt;), to allow multiple binary operators (e.g. an expression like &lt;code&gt;T &amp;amp; F v T&lt;/code&gt;), to handle operator precedence (&lt;code&gt;T &amp;amp; F v T&lt;/code&gt; should be read as &lt;code&gt;(T &amp;amp; F) v T&lt;/code&gt;, not &lt;code&gt;T &amp;amp; (F v T)&lt;/code&gt;), and to handle stacked negations (e.g. &lt;code&gt;~~T&lt;/code&gt;). Hope you’ll be back to dive into that when it gets published.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You can find the script we have built to this point in &lt;a href="https://gist.github.com/fractaledmind/a072674b18086fdebf3b3a535c0f7dfb/09e7c7c28c71823f7611e8d1597a8758350cc9f2"&gt;this Gist&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;I have covered most of this in a section of a previous article: &lt;a href="http://fractaledmind.com/articles/conjunctive-binarism/#a-primer-on-propositional-logic"&gt;A Primer on Propositional Logic&lt;/a&gt; &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;The &lt;code&gt;:IFSO&lt;/code&gt; type does not have a corollary in the set of logic gates. This is a constant that I made up to fit the basic semantic pattern. &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:3"&gt;
      &lt;p&gt;Our code here can be quite simple like this since our grammar specifies that a &lt;code&gt;formula&lt;/code&gt; is optionally preceeded by &lt;em&gt;zero or one&lt;/em&gt; negation operators. If our grammar allowed for &lt;em&gt;zero or more&lt;/em&gt; negation operators, we would have to change this code fairly significantly. This will be one of the ways in which we evolve our grammar and thus our interpreter in this series of posts. &lt;a href="#fnref:3" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Death of Self</title>
    <link rel="alternate" href="http://blog.url.com/articles/death-of-self/"/>
    <id>http://blog.url.com/articles/death-of-self/</id>
    <published>2017-12-18T19:00:00-05:00</published>
    <updated>2017-12-19T23:59:57-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;It was the Friday before Christmas, and I remember that my legs went first. One moment, I was capable of standing up; next, I wasn’t, and I was slowly but haphazardly bringing my body to the floor.&lt;/p&gt;

&lt;p&gt;From there, I began to lose sensation in my hands. This cool notion of nothingness began to creep up my hands and into my arms. It called me to lie down, to relax, to let go. And it was the only thing that made any sense, so I lied down, relaxed, and I let go.&lt;/p&gt;

&lt;p&gt;That nothing-sense moved inward; it was cool but not cold, no thing but not nothing. As it made its way to my chest, I noticed how odd this all felt. I was functionally paralyzed—I couldn’t move my legs and I couldn’t move my arms. But that didn’t scare me; it felt right. In some real, visceral way “I” was receding. I felt my self waning like a flame starving of oxygen. I was flickering, and steadily and slowly I was going out.&lt;/p&gt;

&lt;p&gt;And in full honesty, it didn’t feel bad and it didn’t feel scary. It simply felt; it simply was. Nothing anywhere else made any sense whatsoever. Nothing anywhere else felt right. Nothing anywhere was. It was all a facade; some shadow somehow colored to feign reality to those too stuck believing colors were all it took to be real, too naïve to ask if the image had depth. And so this shadow that I could sense in my chest felt right because it knew it was a shadow and presented itself as such. It was honest, and that wasn’t bad and that wasn’t scary.&lt;/p&gt;

&lt;p&gt;Until that flame, which for so long I had understood to be “me”, went out, and all that was left was the shadow and its cool darkness. And then I was scared. Because then I didn’t exist, except there I was, frightened by the notion that “I” no longer existed. And this didn’t make sense, and I was scared. And I lay on that floor swimming in that nothingness for some amount of time, I know not how long. And I truly felt I had just experienced my own death. But not the simple death of my body; I so obviously hadn’t died like that. No, I had experienced the deeper death of my self. And it was odd. Odd in ways that I will never be able to capture in words. That time, whatever all it was, is bound up in me.&lt;/p&gt;

&lt;p&gt;And then, quite as quickly as my legs went, I no longer felt dead. The flame was still gone, but I had a self. It was small and simple and bare; and it wasn’t a flame. It was this room where the flame had burned, this open barren room. And it was me, and there was nothing left within it. And so I opened the door, and I got on my feet, and I walked out.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The Word of God</title>
    <link rel="alternate" href="http://blog.url.com/articles/the-word-of-god/"/>
    <id>http://blog.url.com/articles/the-word-of-god/</id>
    <published>2017-09-03T20:00:00-04:00</published>
    <updated>2017-09-03T20:47:48-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;The &lt;strong&gt;Word of God&lt;/strong&gt;, as a phrase, denotes 3 different things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Utterances of God to a person.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Unmediated&lt;/em&gt; revelation via&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Communication&lt;/em&gt; that is&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Anchored&lt;/em&gt; in time.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The Scriptures.
    &lt;ul&gt;
      &lt;li&gt;&lt;em&gt;Mediated&lt;/em&gt; revelation via&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Communication&lt;/em&gt; that is&lt;/li&gt;
      &lt;li&gt;&lt;em&gt;Anchored&lt;/em&gt; within a time-frame.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Our Lord Jesus Christ.
    &lt;ul&gt;
      &lt;li&gt;both &lt;em&gt;Unmediated&lt;/em&gt; (he existed physically on earth) and &lt;em&gt;Mediated&lt;/em&gt; (relative to us, who have not met his physical self) via&lt;/li&gt;
      &lt;li&gt;the &lt;em&gt;Incarnation&lt;/em&gt; and&lt;/li&gt;
      &lt;li&gt;is both &lt;em&gt;Timeless&lt;/em&gt; and &lt;em&gt;In-Time&lt;/em&gt;.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Christ is the Perfect Word of God (complete and without error).&lt;/p&gt;

&lt;p&gt;Scripture is &lt;em&gt;imperfect&lt;/em&gt;, in the sense of incomplete. It offers a Mediated representation of Reality, but it is True.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>On Antinomies and Paradoxes</title>
    <link rel="alternate" href="http://blog.url.com/articles/on-antinomies-and-paradoxes/"/>
    <id>http://blog.url.com/articles/on-antinomies-and-paradoxes/</id>
    <published>2017-09-01T20:00:00-04:00</published>
    <updated>2017-09-03T20:42:55-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This post builds on and relates to a number of earlier posts where I am thinking through the nature of theological reasoning and logic. If you read this and it seems thin and implicit, try reading the other articles with these tags to flesh out the picture.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I define &lt;strong&gt;antinomies&lt;/strong&gt; as &lt;em&gt;actual contradictions&lt;/em&gt;; &lt;strong&gt;paradoxes&lt;/strong&gt; are &lt;em&gt;seeming contradictions&lt;/em&gt;. Here I follow Kant’s jargon that defines antinomies as the combination of a rationally-justified (and true?) thesis along with a rationally-justified (and true?) antithesis. If knowledge is defined as justified true belief, such an antinomy produces contradictory knowledge. That is, I know &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;not-P&lt;/code&gt;. In the language of some of &lt;a href="http://fractaledmind.com/articles/conjunctive-binarism/"&gt;my earlier posts&lt;/a&gt;, an antinomy is a strong “conjunctive binary”.&lt;/p&gt;

&lt;p&gt;Contrarily, a paradox produces &lt;em&gt;seeming&lt;/em&gt; contradiction. There is a rationally-justified (and true?) thesis and an unjustified (and untrue?) antithesis; however, both are believed. Thus, I believe that I know &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;not-P&lt;/code&gt;; however, I only know &lt;code&gt;P&lt;/code&gt; and merely believe &lt;code&gt;not-P&lt;/code&gt;, such that I can be made to rationally disbelieve &lt;code&gt;not-P&lt;/code&gt;. So much for introductory definitions.&lt;/p&gt;

&lt;p&gt;Now, I have questioned the truth value of the propositions when describing both antinomies and paradoxes. The justification is the defining characteristic and differentiator; the truth value of either &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;not-P&lt;/code&gt; &lt;em&gt;must be&lt;/em&gt; in question because Truth resides in the 2-D realm (for this analogy of Reality, Truth, and Correctness to dimensionality, see &lt;a href="http://fractaledmind.com/articles/degrees-of-separation/"&gt;this earlier post&lt;/a&gt;), whereas justification resides in our Blurry Vision realm. I am only concerned with that third realm in this post.&lt;/p&gt;

&lt;p&gt;I believe that the central tenets of Christian theology are best understood as &lt;em&gt;antinomies&lt;/em&gt; in the Truth realm of 2-D representation, but &lt;em&gt;paradoxes&lt;/em&gt; in the Correctness realm of our blurry vision (Of course, in the Reality realm of the 3-D, such binaries are void and these terms are meaningless). By this I mean, we ought to presuppose that &lt;strong&gt;theological propositions&lt;/strong&gt; will be paradoxical to our minds. Our thinking exists in that blurry realm of Correctness, two degrees separated from the reality of God; so, our fundamentally assumption should be, I believe, that thoughts about God will be &lt;em&gt;seeming contradictions&lt;/em&gt; to us.&lt;/p&gt;

&lt;p&gt;Practically, I am suggesting that if we initially think that a theological position is simple and one-sided, then we should immediately pause and assume we are being overly simplistic. Moreover, when someone disagrees with us on a theological position, I am suggesting that it would be responsible first to meaningfully investigate the truth of that other position.&lt;/p&gt;

&lt;p&gt;The issue though is that at the 2-D level of Truth, that seeming paradox still cannot be finally resolved. We will come face-to-face with an &lt;em&gt;antinomy&lt;/em&gt;. Yet this ought not to lead to epistemic cynicism, as we know that the antinomy presupposes a human binary epistemology (for an initial articulation of why we might want to consider binary epistemologies to be essentially broken and fallen, see &lt;a href="http://fractaledmind.com/articles/ruminations-on-a-credal-logic/"&gt;this earlier post&lt;/a&gt;). It is thoroughly difficult (impossible?) not to think in binaries, so we will likely be stuck holding “contradictory” propositions (e.g. God is One; God is Three). Yet we also know that this is not a fully true contradiction, because there is something beyond the 2-D realm – the 3-D reality.&lt;/p&gt;

&lt;p&gt;Thus, in the 3-D:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Q&lt;/code&gt; (a single, complex proposition) simply is.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the 2-D representation:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;Q&lt;/code&gt; is (re-)presented as both &lt;code&gt;P&lt;/code&gt; (a single, simple proposition) and &lt;code&gt;not-P&lt;/code&gt;, each rationally-justified and each true (inasmuch as both are &lt;code&gt;Q&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But, in the realm of our Blurry Vision:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code&gt;P&lt;/code&gt; and &lt;code&gt;not-P&lt;/code&gt; are a priori presupposed to be &lt;em&gt;paradoxes&lt;/em&gt;, such that finer and finer distinctions will allow us to think what in even the 2-D representation is unthinkable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I am hopeful that these divisions between the epistemic realms and distinctions of knowledge may help us to think about God more humbly and clearly.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Degrees of Separation</title>
    <link rel="alternate" href="http://blog.url.com/articles/degrees-of-separation/"/>
    <id>http://blog.url.com/articles/degrees-of-separation/</id>
    <published>2017-08-24T20:00:00-04:00</published>
    <updated>2017-08-25T09:24:24-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;When talking about God, I’m not so certain that we have a great understanding of what we can and cannot say properly, or what we can and cannot understand properly. {{read more}} Might there not be degrees of separation between what we think we understand and what it actually is that we are attempting to understand?&lt;/p&gt;

&lt;p&gt;I’m toying with a tripartite division of terms (and thus degrees):&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Reality&lt;/td&gt;
      &lt;td&gt;Truth&lt;/td&gt;
      &lt;td&gt;Correctness&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;em&gt;Reality&lt;/em&gt; is that which is as it truly is.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Truth&lt;/em&gt; is that which is as it represents itself.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Correctness&lt;/em&gt; is that which is as we perceive it.&lt;/p&gt;

&lt;p&gt;Here is an analogy: God’s thoughts are 3-D. As limited creations, our thoughts are 2-D. God’s Revelation through Scripture is a 2-D representation of a 3-D reality; that is, it is true, yet (in a meaningful sense) incomplete. This is the first degree of separation. However, there is a second degree. As fallen, limited humans, we are unable to see this 2-D representation clearly. It is as if we are looking at it with our glasses off; we can only see a blurry image of the 2-D representation of the 3-D thought. Once again, the 2-D representation is true (in a sense), yet (in another sense) incomplete. Our blurry vision does not affect its truth-value, but does affect our understanding.&lt;/p&gt;

&lt;p&gt;Theology and Hermeneutics both help us to interpret this blurry vision correctly, but they require a correct interpretation themselves. This recursive cycle is the problem point. Whenever we say “the Bible is literally true,” are we saying that our blurry vision of the Bible is a complete understanding of the 3-D truth? &lt;strong&gt;This cannot be.&lt;/strong&gt; This must rather mean that the 2-D representation is a true (if relative to the original, incomplete) picture of Truth. Our blurry vision, however, is not literally true. It is fraught with problems. We may be construing our blurs incorrectly in a myriad of different ways. And even if construed correctly, we still are left with a Blurry Vision!&lt;/p&gt;

&lt;p&gt;We ought to seek to be Correct in our understanding of God’s revealed Truth, a 2-D representation of God’s 3-D Reality.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>I am but a water glass</title>
    <link rel="alternate" href="http://blog.url.com/articles/i-am-but-a-water-glass/"/>
    <id>http://blog.url.com/articles/i-am-but-a-water-glass/</id>
    <published>2017-08-23T20:00:00-04:00</published>
    <updated>2017-08-24T20:57:14-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I am but a water glass,&lt;br /&gt;
a container for my life.&lt;br /&gt;
Life osmoses through me&lt;br /&gt;
forming droplets of moments&lt;br /&gt;
that ruin rivulet-like to the tabletop.&lt;/p&gt;

&lt;p&gt;{{read more}}&lt;/p&gt;

&lt;p&gt;I am but a water glass,&lt;br /&gt;
separating inner from outer.&lt;br /&gt;
Time gloms to my edges&lt;br /&gt;
condensed from the agitated infinite air around me&lt;br /&gt;
evaporating as quickly as it forms.&lt;/p&gt;

&lt;p&gt;I am but a water glass,&lt;br /&gt;
filled with molecules moving&lt;br /&gt;
both thick and fast and hot&lt;br /&gt;
yet lithe and smooth and cool&lt;br /&gt;
a fluid resembling a solid.&lt;/p&gt;

&lt;p&gt;I am.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Time in Ruby and ActiveRecord</title>
    <link rel="alternate" href="http://blog.url.com/articles/time-in-ruby-and-activerecord/"/>
    <id>http://blog.url.com/articles/time-in-ruby-and-activerecord/</id>
    <published>2017-08-19T20:00:00-04:00</published>
    <updated>2017-11-16T16:36:30-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I recently lost about a day of work trying to figure what the hell was going on when I was working with an ActiveRecord model that had a &lt;code&gt;time&lt;/code&gt; type column. In the hopes that I will not loose such time again and that this post can help others avoid such lost time, I want to lay out my investigation into time in Ruby and ActiveRecord.&lt;/p&gt;

&lt;p&gt;Let’s start with Ruby. The &lt;a href="https://ruby-doc.org/core-2.4.1/Time.html"&gt;documentation for Ruby 2.4.1&lt;/a&gt; describes the &lt;code&gt;Time&lt;/code&gt; class like so:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Time is an abstraction of dates and times. Time is stored internally as the number of seconds with fraction since the Epoch, January 1, 1970 00:00 UTC.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In short, an instance of the &lt;code&gt;Time&lt;/code&gt; class represents an &lt;em&gt;exact&lt;/em&gt; moment in the history of our world (down to the nanosecond), a moment that happened on a particular date and at a particular time. The Ruby documentation offers the following example for creating a new instance of &lt;code&gt;Time&lt;/code&gt; where we set the year, month, day, hour, minute, and second: &lt;code&gt;Time.new(2002, 10, 31, 2, 2, 2)&lt;/code&gt;. Those are the elements (plus the timezone) that compose an instance of &lt;code&gt;Time&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Alright, now what about time in ActiveRecord? In ActiveRecord you can specify that a database column is of type &lt;code&gt;time&lt;/code&gt; (e.g. &lt;code&gt;create_table :foos { |t| t.time :column }&lt;/code&gt;). Now, if you are anything like me, you don’t have the column type in your application, so you probably don’t know much about what it is or how it works. So, what’s the first thing I do when I’m dealing with a new concept or problem? I start poking at it.&lt;/p&gt;

&lt;p&gt;I had a Rails application with a test database, so I opened a console in the test environment and starting poking. I’m working with an instance of the &lt;code&gt;Foo&lt;/code&gt; class (defined in this context as &lt;code&gt;foo&lt;/code&gt;) that has a column called &lt;code&gt;time&lt;/code&gt; that is, you guessed it, of type &lt;code&gt;time&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&amp;gt; foo.time
=&amp;gt; Sat, 01 Jan 2000 01:00:00 UTC +00:00
&amp;gt; foo.time.class
=&amp;gt; ActiveSupport::TimeWithZone
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The first thing I want to do is look at a value from the &lt;code&gt;time&lt;/code&gt; column. I find that ActiveRecord returns an instance of the &lt;code&gt;ActiveSupport::TimeWithZone&lt;/code&gt; class, which is a wrapper around Ruby’s &lt;code&gt;Time&lt;/code&gt; class.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; This makes sense; a column of database type &lt;code&gt;time&lt;/code&gt; stores an instance of the Ruby &lt;code&gt;Time&lt;/code&gt; class, or so I think. The next thing I do is start playing with this &lt;code&gt;time&lt;/code&gt; column:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&amp;gt; foo.time = 1.day.from_now.to_time
=&amp;gt; 2017-11-17 15:08:54 -0500
&amp;gt; foo.time
=&amp;gt; Sat, 01 Jan 2000 20:08:54 UTC +00:00
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Hrm. All of the date bits about our time disappeared… What in the hell is going on? As any sane developer would when faced with a situation that doesn’t make sense, I start Googling: “activerecord time column”, “active record column types”, etc. I can’t find official documentation anywhere for what the hell a &lt;code&gt;time&lt;/code&gt; database column is. Luckily, there are other other sources of unofficial documentation (i.e. StackOverflow). In &lt;a href="https://stackoverflow.com/a/11894584/2884386"&gt;one&lt;/a&gt; I find this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Time:
      &lt;ul&gt;
        &lt;li&gt;Stores only a time (hours, minutes, seconds)&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;In &lt;a href="https://stackoverflow.com/a/25702629/2884386"&gt;another&lt;/a&gt; I found these images:&lt;/p&gt;

&lt;p&gt;&amp;lt;%= image_tag ‘activerecord-column-types-1.png’ %&amp;gt;
&amp;lt;%= image_tag ‘activerecord-column-types-2.png’ %&amp;gt;&lt;/p&gt;

&lt;p&gt;In my test database, I’m using SQlite, so this column is being stored in the actual database as a SQLite &lt;code&gt;datetime&lt;/code&gt; object. However, the first answer says that a column of this type represents &lt;em&gt;only&lt;/em&gt; the combination of hour, minute, and second. Ok. Well, still, what’s going on here?&lt;/p&gt;

&lt;p&gt;The short answer is that Ruby has no class to represent &lt;em&gt;only&lt;/em&gt; the combinarion of hour, minute, and second. While &lt;code&gt;Date&lt;/code&gt; represents year, month, and day, and &lt;code&gt;Time&lt;/code&gt; represents year, month, day, hour, minute, and second (I will write more about &lt;code&gt;Time&lt;/code&gt; and &lt;code&gt;DateTime&lt;/code&gt; at a later date), there is no class for simply hour, minute, and second. So, what does ActiveRecord do? The only thing it really can do, use the &lt;code&gt;Time&lt;/code&gt; class. But, in order to ensure that the year, month, and day are meaningless, ActiveRecord &lt;strong&gt;always&lt;/strong&gt; forces the year, month, and day of any value set for a &lt;code&gt;time&lt;/code&gt; type column to be &lt;code&gt;2000-01-01&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is why our date information disappeared in the above example. When ActiveRecord casts the value passed in (&lt;code&gt;1.day.from_now.to_time&lt;/code&gt;), it resets the date portion. This can be seen by inspecting the &lt;code&gt;time_before_type_cast&lt;/code&gt; value:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&amp;gt; foo.time = 1.day.from_now.to_time
=&amp;gt; 2017-11-17 15:08:54 -0500
&amp;gt; foo.time
=&amp;gt; Sat, 01 Jan 2000 20:08:54 UTC +00:00
&amp;gt; foo.time_before_type_cast
=&amp;gt; 2017-11-17 15:08:54 -0500
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So, in short, the ActiveRecord &lt;code&gt;time&lt;/code&gt; column type, while it does return an instance of the Ruby &lt;code&gt;Time&lt;/code&gt; class, &lt;strong&gt;does not&lt;/strong&gt; represent the same kind of object. Ruby &lt;code&gt;Time&lt;/code&gt; represents year, month, day, hour, minute, and second. ActiveRecord &lt;code&gt;time&lt;/code&gt; represents hour, minute, and second.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;You can read more about this class &lt;a href="http://api.rubyonrails.org/v5.1/classes/ActiveSupport/TimeWithZone.html"&gt;here&lt;/a&gt;. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Portrait of Pain II</title>
    <link rel="alternate" href="http://blog.url.com/articles/portrait-of-pain-ii/"/>
    <id>http://blog.url.com/articles/portrait-of-pain-ii/</id>
    <published>2017-08-19T20:00:00-04:00</published>
    <updated>2017-08-20T17:59:26-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I had felt it for a while, though even then I didn’t know it. I didn’t know that I knew. It’s odd when truth gnaws at your gut, but you stubbornly ignore it. It is odd because, on the one hand, &lt;em&gt;you&lt;/em&gt; know it, but on the other, &lt;em&gt;you&lt;/em&gt; don’t. It’s odd and it’s dangerous. The truth is the truth, and you know it, and it gnaws at your gut. But you ignore it, and it keeps gnawing and gnawing and biting and biting, until it finally eats you up. The truth eats you up and spits you out. I remember the night the truth vomited me out.&lt;/p&gt;

&lt;p&gt;In a total fluke, she updates her operating system and all of a sudden her phone has started sharing her location with me. She doesn’t know it; I know she doesn’t know. And in a normal situation, I would have just told her, and she would have turned it off, and we would have gone on none the wiser. But this wasn’t a normal situation, because I &lt;em&gt;knew&lt;/em&gt;, though I didn’t know that I knew. I knew and so I let it be. I didn’t say anything; but I would check from time to time. See where she is, imagine what she’s doing. And the imagining fed the truth. I &lt;em&gt;felt&lt;/em&gt; it; I’m starting to know what I knew.&lt;/p&gt;

&lt;p&gt;One night, I see that she leaves work and goes to a bar. I know she has a meeting coming up, and we’re texting, and I know she’s texting me from this bar. And we’re texting, chatting, and I’m thinking “Why is she at this bar? When is she going to leave? Why hasn’t she left yet?” And these questions start driving me mad. She’s still at the bar; we’re still texting. And the questions are burrowing deeper and deeper into my mind; I can’t get them out. “What is she doing here? Who did she meet? Why hasn’t she left?” I have to know. So I try to find out; I try to ask without asking, so I ask my awkward question, whatever it is. She gives her answer, whatever it is. And it’s fine. Question answered. But it isn’t fine; I &lt;em&gt;know&lt;/em&gt;. I know it and I feel it, but I’m unaware.&lt;/p&gt;

&lt;p&gt;Maybe it was the mixture of unawareness and knowledge and feeling, maybe it wasn’t. Maybe we can’t know and not know for too long. Or maybe we all have little monsters in our minds waiting for their moment to grab a passing thought and spin a story. Maybe the monster doesn’t want us to really know, but can’t deny that we &lt;em&gt;know&lt;/em&gt;, so the monster is forced to spin the trueish false story that so easily ensares us. Maybe; or maybe not. I don’t know.&lt;/p&gt;

&lt;p&gt;But, after she answered, I felt searing guilt. I have rarely, if ever, felt such strong guilt. It burned me. What was I thinking? Why didn’t I trust her? Why was I lying to her by keeping her location sharing silent? I felt guilty and I felt evil. I had done a terrible thing. I had failed to trust her, I had angled and tried to manipulate her. I had suspected her. I was filthy and dirty and shameful and wrong. The weight was too much to bear. And so it broke me.&lt;/p&gt;

&lt;p&gt;Whatever the reasons, however odd or normal, it doesn’t really matter, but when I break, I want to break myself. This is one of my monsters. Now, I can be honest and say that I have truly never wanted to end my own life; but, I have wanted to break myself. And it sounds vague because it is vague. It is just a strong sense that I need to make things right by &lt;em&gt;doing something&lt;/em&gt;, and doing it to myself. And so when I broke, on that night,&lt;br /&gt;
  I wanted to break myself;&lt;br /&gt;
    I wanted to break my skin;&lt;br /&gt;
      I wanted to make amends;&lt;br /&gt;
deep down, I just wanted all the pain to stop. And maybe &lt;em&gt;real&lt;/em&gt; pain would stop this other, amorphous, silent, scary pain. And that’s what I thought, and that’s what I wanted. And I sat on the side of the bed and I cried. I cried because I felt such guilt and shame; I cried because I wanted to hurt myself; I cried because I felt utterly broken; I cried because I felt &lt;em&gt;it&lt;/em&gt;, the truth, slowly spitting me out.&lt;/p&gt;

&lt;p&gt;I cried, long and hard and ugly. And at some point I had gathered enough of myself to call her. I had to tell her. I had to take away the possibility of snooping and lying. I had to confess and start to make amends.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I asked those awkward questions because I knew you were at the bar, and I knew you had your meeting, and I was honestly a bit suspicious. I’m so sorry. I’m so so sorry that I didn’t trust you, that I didn’t tell you about your location sharing.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;She was understandably upset. She didn’t want to come home; she needed time.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“How could you do this? This is an invasion of my privacy. I feel hurt. I need time; I need space”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Every word rang fully true. I had failed; I was a failure. I knew it and she knew it. And I broke again.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“You’re right. You are so right. It was wrong and I knew it was wrong. I feel so terrible.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was broken and I wanted to break myself. But I couldn’t; I couldn’t really. I liked the idea more than the execution. So I told her.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I want to hurt myself”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I was reaching out; I was asking her what to do, I think. Am I broken? Should I do something to make up for being broken?&lt;/p&gt;

&lt;p&gt;She freaked out a bit, told me not to do anything, asked if I wanted to kill myself.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“No. Nothing like that. I just feel so bad.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Don’t freak me out like that. Are you just trying to get me to come home? Is this a stunt?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I don’t know; maybe, yes, no. I don’t know.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“No, it’s not a stunt. But you’re right, I was being crazy. I said something dumb in a low spot. I’m alright. You are understandably upset. You don’t need to come home. I promise; I won’t do anything.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And I didn’t.&lt;/p&gt;

&lt;p&gt;I cried more, but I didn’t &lt;em&gt;do&lt;/em&gt; anything. I had broken twice, the truth gnawing at my gut had finally chewed its way through me. But it’s not like I realized anything that night, nothing changed. All I knew was the pain. And it wasn’t good, and it wasn’t bad; it simply was, like the truth that I knew and yet didn’t know.&lt;/p&gt;

&lt;p&gt;Truth and pain&lt;br /&gt;
pain and truth&lt;br /&gt;
me and her&lt;br /&gt;
me and I&lt;/p&gt;

&lt;p&gt;some things simply are, or simply were, or simply will be …&lt;/p&gt;

&lt;p&gt;pain&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Typecasting in Ruby and Rails</title>
    <link rel="alternate" href="http://blog.url.com/articles/typecasting-in-ruby-and-rails/"/>
    <id>http://blog.url.com/articles/typecasting-in-ruby-and-rails/</id>
    <published>2017-08-18T20:00:00-04:00</published>
    <updated>2017-11-16T16:14:05-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I recently had the need to typecast string values passed as query parameters to a controller action to their appropriate type. In solving this problem, I’ve learned a lot about Rails’ typecasting layer, Ruby’s typecasting methods, as well as a handful of edge cases. The result was a typecasting function that I think has a lot to offer.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The first key to any attempt at typecasting is to understand what you are casting &lt;em&gt;from&lt;/em&gt; and what you are casting &lt;em&gt;to&lt;/em&gt;. It is no small task to write a typecaster that properly and intelligently handles casting any kind of value into any other kind of value. Luckily for me, this was not the situation I was in. I had a fixed &lt;em&gt;from&lt;/em&gt; type–I was always casting &lt;em&gt;from&lt;/em&gt; a string value. So, all I needed was a typecaster that properly and intelligently handles casting a string value into any other kind of value. ¯_(ツ)_/¯&lt;/p&gt;

&lt;p&gt;I was working in the context of a Rails application, so my first thought was that I could simply use the typecasting layer baked into ActiveRecord. In Rails 4.x, &lt;code&gt;ActiveRecord::Type&lt;/code&gt; has a number of descendent classes representing the various datatypes that ActiveRecord handles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Boolean&lt;/li&gt;
  &lt;li&gt;Date&lt;/li&gt;
  &lt;li&gt;DateTime&lt;/li&gt;
  &lt;li&gt;Decimal&lt;/li&gt;
  &lt;li&gt;Float&lt;/li&gt;
  &lt;li&gt;Integer&lt;/li&gt;
  &lt;li&gt;String&lt;/li&gt;
  &lt;li&gt;Time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these classes have an instance method &lt;code&gt;type_cast&lt;/code&gt; that accepts one param and tries to return a new value of the type that class represents. So, for example, &lt;code&gt;ActiveRecord::Type::Boolean.new.type_cast('true')&lt;/code&gt; would return &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In Rails 5.x, this same essential functionality lives in classes under the &lt;code&gt;ActiveModel::Type&lt;/code&gt; namespace and the instance method is &lt;code&gt;cast&lt;/code&gt;. So, if I wanted something to work across Rails versions, I would need to handle these changes.&lt;/p&gt;

&lt;p&gt;However, this Rails &lt;code&gt;Type&lt;/code&gt; layer has its limitations. First, it doesn’t cover all of the scalar Ruby types (the &lt;code&gt;Complex&lt;/code&gt; and &lt;code&gt;Rational&lt;/code&gt; numeric types for example). Second, the boolean type does not map to an actual Ruby class. &lt;code&gt;true.class&lt;/code&gt; returns &lt;code&gt;TrueClass&lt;/code&gt;, not &lt;code&gt;Boolean&lt;/code&gt;. This limits our ability to simply use the class of the desired value type as a way of finding the appropriate &lt;code&gt;Type&lt;/code&gt; class to use for the casting.&lt;/p&gt;

&lt;p&gt;These aren’t major problems, but they are real ones.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;When investigating typecasting typecasting in Ruby, you hopefully shouldn’t go too far without thinking of the various &lt;code&gt;#to_*&lt;/code&gt; methods. Ruby has a well defined and often used typecasting infrastructure. &lt;code&gt;to_s&lt;/code&gt; casts a value to a &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;to_f&lt;/code&gt; casts a value to a &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;to_i&lt;/code&gt; casts a value to an &lt;code&gt;Integer&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;These are a helpful tool in our toolbox, but this too has limitations. First, there is no &lt;code&gt;#to_*&lt;/code&gt; method that casts values into &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. Second, not every value instance has the same collection of &lt;code&gt;#to_*&lt;/code&gt; methods available to it. Third, the &lt;code&gt;to_date&lt;/code&gt;, &lt;code&gt;to_datetime&lt;/code&gt;, and &lt;code&gt;to_time&lt;/code&gt; methods are provided by ActiveSupport and are not a part of basic Ruby.&lt;/p&gt;

&lt;p&gt;Some of these are major problems, others less so.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Having investigated these two mechanisms for typecasting, my thought was to combine them. Let’s try typecasting with one mechanism, and if it doesn’t work try the other one. I want a module namespace with one public method &lt;code&gt;cast&lt;/code&gt; that takes two params, &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt;. I want the method to either return the &lt;code&gt;from&lt;/code&gt; value cast into the &lt;code&gt;to&lt;/code&gt; class or, if that fails, to simply return back the &lt;code&gt;from&lt;/code&gt; value. I also want want the method to only use as many “adapters” as necessary (adapters being the typecasting mechanisms). So, if we can cast the value using basic Ruby, cast and return. Only use the Rails &lt;code&gt;Type&lt;/code&gt; layer if the Ruby layer can’t get the job done.&lt;/p&gt;

&lt;p&gt;With these feature requirements in mind, let’s start writing our module and method.&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;TypeCaster&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="n"&gt;adapters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;process&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;from&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Here I am expecting to be able to call an &lt;code&gt;adapters&lt;/code&gt; getter that will return an Enumerable of classes that take two params on initialization and have a public &lt;code&gt;process&lt;/code&gt; method. I am going to use the &lt;a href="https://bogdanvlviv.github.io/posts/ruby/patterns/design-patterns-in-ruby.html#adapter"&gt;Adapter structural design pattern&lt;/a&gt; for these classes to provide a consistent interface to the two typecasting mechanisms we have. So, let’s start building that adapter classes.&lt;/p&gt;

&lt;p&gt;We know we have a few feature requirements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;the class needs to accepts two params on initialization&lt;/li&gt;
  &lt;li&gt;the class needs a public &lt;code&gt;process&lt;/code&gt; method that takes no params&lt;/li&gt;
  &lt;li&gt;the &lt;code&gt;process&lt;/code&gt; method needs to &lt;em&gt;either&lt;/em&gt; return the typecasted value &lt;em&gt;or&lt;/em&gt; &lt;code&gt;nil&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first two are simple, so let’s start there:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PlainRubyAdapter&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;
    &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The next key is getting the various &lt;code&gt;#to_*&lt;/code&gt; method available on the &lt;code&gt;@from&lt;/code&gt; value.&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PlainRubyAdapter&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;
    &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_typecasters&lt;/span&gt;
    &lt;span class="vi"&gt;@possible_typecasters&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;methods&lt;/span&gt;
                                   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start_with?&lt;/span&gt; &lt;span class="s1"&gt;'to_'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Here I am memoizing the result mostly as a general practice; healthy habit and all that. The logic itself of the method is straightforward though–from the set of all of &lt;code&gt;@from&lt;/code&gt;’s methods, pull out those that start with the string &lt;code&gt;to_&lt;/code&gt;. This will give us a collection of methods that will cast the &lt;code&gt;@from&lt;/code&gt; value &lt;em&gt;to&lt;/em&gt; various other types. The next step is to actually use these methods to do some typecasting:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PlainRubyAdapter&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;
    &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_values&lt;/span&gt;
    &lt;span class="n"&gt;possible_typecasters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_typecasters&lt;/span&gt;
    &lt;span class="vi"&gt;@possible_typecasters&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;methods&lt;/span&gt;
                                   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start_with?&lt;/span&gt; &lt;span class="s1"&gt;'to_'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This &lt;code&gt;possible_values&lt;/code&gt; method will convert a collection of typecasting methods into a collection of typecasted values (removing any &lt;code&gt;nil&lt;/code&gt;s created along the way). The final step is simply to return the typecasted value that matches &lt;code&gt;@to&lt;/code&gt;, if it exists in the collection of &lt;code&gt;possible_values&lt;/code&gt;, or return &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PlainRubyAdapter&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;
    &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt;

    &lt;span class="n"&gt;possible_values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_values&lt;/span&gt;
    &lt;span class="n"&gt;possible_typecasters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_typecasters&lt;/span&gt;
    &lt;span class="vi"&gt;@possible_typecasters&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;methods&lt;/span&gt;
                                   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                   &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start_with?&lt;/span&gt; &lt;span class="s1"&gt;'to_'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;Enumerable#find&lt;/code&gt; is a perfect method for either returning a value in a collection that matches a condition or returning &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The &lt;code&gt;PlainRubyAdapter&lt;/code&gt; was fairly straightforward; To handle the differences between Rails 4.x and 5.x, however, this next adapter will be a bit more complicated.&lt;/p&gt;

&lt;p&gt;The basic requirements are the same, so let’s start with the basic skeleton:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RailsTypeAdapter&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;
    &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, let’s begin with determining which namespace we can find the &lt;code&gt;Type&lt;/code&gt; code in. We know that we will need to &lt;code&gt;require&lt;/code&gt; an external dependency and use the appropriate namespace for finding descendent classes. Here’s a simple way to handle our two scenarios:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RailsTypeAdapter&lt;/span&gt;
  &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'active_model/type'&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;LoadError&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'active_record/type'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;
    &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type_class&lt;/span&gt;
    &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Type&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;NameError&lt;/span&gt;
    &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Type&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We will try to use the Rails 5.x (&lt;code&gt;ActiveModel::Type&lt;/code&gt;) code first and fallback to the Rails 4.x code otherwise (&lt;code&gt;ActiveRecord::Type&lt;/code&gt;). With that handled, let’s next gather the collection of possible typecasting classes:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RailsTypeAdapter&lt;/span&gt;
  &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'active_model/type'&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;LoadError&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'active_record/type'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;
    &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_typecasters&lt;/span&gt;
    &lt;span class="vi"&gt;@possible_typecasters&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;type_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constants&lt;/span&gt;
                                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;can_typecast?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type_class&lt;/span&gt;
    &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Type&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;NameError&lt;/span&gt;
    &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Type&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;can_typecast?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;const_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;typecasting_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;const_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;const_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;typecasting_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:cast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
      &lt;span class="n"&gt;typecasting_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:type_cast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Recall that the Rails 5.x code (&lt;code&gt;ActiveModel::Type&lt;/code&gt;) uses the &lt;code&gt;cast&lt;/code&gt; method, while the Rails 4.x code (&lt;code&gt;ActiveSupport::Type&lt;/code&gt;) uses the &lt;code&gt;type_cast&lt;/code&gt; method. So, in order to determine if one of the descendent classes of the our type namespace can typecast, we need to check for either method. Aside from that, the logic is essentially the same as what we have in the &lt;code&gt;PlainRubyAdapter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With a collection of classes that are capable of typecasting, let’s now get the collection of typecasted values:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RailsTypeAdapter&lt;/span&gt;
  &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'active_model/type'&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;LoadError&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'active_record/type'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;
    &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_values&lt;/span&gt;
    &lt;span class="n"&gt;possible_typecasters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;type_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;const_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;typecast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_typecasters&lt;/span&gt;
    &lt;span class="vi"&gt;@possible_typecasters&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;type_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constants&lt;/span&gt;
                                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;can_typecast?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type_class&lt;/span&gt;
    &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Type&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;NameError&lt;/span&gt;
    &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Type&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;can_typecast?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;const_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;typecasting_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;const_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;const_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;typecasting_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:cast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
      &lt;span class="n"&gt;typecasting_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:type_cast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;typecast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caster&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;caster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type_cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;caster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt; &lt;span class="ss"&gt;:type_cast&lt;/span&gt;
    &lt;span class="n"&gt;caster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Since the typecasting method, whether &lt;code&gt;type_cast&lt;/code&gt; or &lt;code&gt;cast&lt;/code&gt;, is an instance method, we first need to initialize our classes. Once we have an instance of the &lt;code&gt;Type&lt;/code&gt; class, we can call the appropriate typecasting method. Finally, we discard any &lt;code&gt;nil&lt;/code&gt;s. Our &lt;code&gt;possible_values&lt;/code&gt; method will now return a collection of typecasted values. The last step is to either find the appropriate typecasted value or return &lt;code&gt;nil&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RailsTypeAdapter&lt;/span&gt;
  &lt;span class="k"&gt;begin&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'active_model/type'&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;LoadError&lt;/span&gt;
    &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'active_record/type'&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;
    &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt;

    &lt;span class="n"&gt;possible_values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="kp"&gt;private&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_values&lt;/span&gt;
    &lt;span class="n"&gt;possible_typecasters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;type_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;const_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;typecast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_typecasters&lt;/span&gt;
    &lt;span class="vi"&gt;@possible_typecasters&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;type_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constants&lt;/span&gt;
                                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                        &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;can_typecast?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type_class&lt;/span&gt;
    &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Type&lt;/span&gt;
  &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;NameError&lt;/span&gt;
    &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Type&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;can_typecast?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;const_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;typecasting_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;const_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;const_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;typecasting_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:cast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
      &lt;span class="n"&gt;typecasting_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:type_cast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;typecast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caster&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;caster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type_cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;caster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt; &lt;span class="ss"&gt;:type_cast&lt;/span&gt;
    &lt;span class="n"&gt;caster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We now have to classes that conform to our adapter interface that we can use in our &lt;code&gt;Typecaster.cast&lt;/code&gt; method. Let’s now wire up the &lt;code&gt;adapters&lt;/code&gt; getter in that module:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;TypeCaster&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="n"&gt;adapters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;process&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;from&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;adapters&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;PlainRubyAdapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;RailsTypeAdapter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;As one final piece, let’s also nest our adapter classes under the &lt;code&gt;TypeCaster&lt;/code&gt; module namespace. This will help isolate them. We don’t want clients to use them directly; we want the only public interface to our typecasting logic to be &lt;code&gt;TypeCaster.cast&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is our final implementation:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;module&lt;/span&gt; &lt;span class="nn"&gt;TypeCaster&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;:)&lt;/span&gt;
    &lt;span class="n"&gt;adapters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
      &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;adapter&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;process&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;nil?&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="n"&gt;from&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;adapters&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="no"&gt;PlainRubyAdapter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="no"&gt;RailsTypeAdapter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PlainRubyAdapter&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;
      &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt;

      &lt;span class="n"&gt;possible_values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_values&lt;/span&gt;
      &lt;span class="n"&gt;possible_typecasters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_typecasters&lt;/span&gt;
      &lt;span class="vi"&gt;@possible_typecasters&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;methods&lt;/span&gt;
                                     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                     &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;start_with?&lt;/span&gt; &lt;span class="s1"&gt;'to_'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RailsTypeAdapter&lt;/span&gt;
    &lt;span class="k"&gt;begin&lt;/span&gt;
      &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'active_model/type'&lt;/span&gt;
    &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;LoadError&lt;/span&gt;
      &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;'active_record/type'&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;
      &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;process&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt;

      &lt;span class="n"&gt;possible_values&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;find&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;is_a?&lt;/span&gt; &lt;span class="vi"&gt;@to&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="kp"&gt;private&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_values&lt;/span&gt;
      &lt;span class="n"&gt;possible_typecasters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;type_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;const_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;typecast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="vi"&gt;@from&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
                          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;possible_typecasters&lt;/span&gt;
      &lt;span class="vi"&gt;@possible_typecasters&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;type_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;constants&lt;/span&gt;
                                          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                                          &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;select&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;can_typecast?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;type_class&lt;/span&gt;
      &lt;span class="no"&gt;ActiveModel&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Type&lt;/span&gt;
    &lt;span class="k"&gt;rescue&lt;/span&gt; &lt;span class="no"&gt;NameError&lt;/span&gt;
      &lt;span class="no"&gt;ActiveRecord&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="no"&gt;Type&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;can_typecast?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;const_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;typecasting_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;type_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;const_get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;const_name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;typecasting_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:cast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt;
        &lt;span class="n"&gt;typecasting_class&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;instance_methods&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:type_cast&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;typecast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;caster&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;caster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;type_cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;caster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;respond_to?&lt;/span&gt; &lt;span class="ss"&gt;:type_cast&lt;/span&gt;
      &lt;span class="n"&gt;caster&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;cast&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, this doesn’t handle all of our edgecases just yet, but this is a solid start, and I think this post has gotten long enough, so I’m going to save that for a later post.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Recalling my earliest deep regret</title>
    <link rel="alternate" href="http://blog.url.com/articles/recalling-my-earliest-deep-regret/"/>
    <id>http://blog.url.com/articles/recalling-my-earliest-deep-regret/</id>
    <published>2017-08-17T20:00:00-04:00</published>
    <updated>2017-08-18T21:08:03-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I remember my earliest deep regret. And thinking back on it, the depth of the regret seems so out of scope, but, in many ways, this story captures a part of my heart that I lost sight of for years and am only recently re-discovering.&lt;/p&gt;

&lt;p&gt;I’ve always liked beautiful things; I’m an aesthete, what can I say. And when I was younger, maybe around 10 or so, I went through a phase where I was enamored with polished rocks. I loosely recall seeing some ad or something on TV for a rock polisher, and I was immediately hooked. They showed so many different rocks–different colors, different textures, different patterns–and each of them was beautiful. At the time, my family lived in a small trailer park in Louisiana, and there were rocks &lt;em&gt;everywhere&lt;/em&gt;. The road through the park was a gravel road; rocks as far as my child’s eyes could see. I wanted a rock polisher badly. I wanted to polish the rocks in our driveway. I wanted to create something beautiful from something drab. But, rock polishers were pricey.&lt;/p&gt;

&lt;p&gt;I don’t actually recall mentioning this fascination with my friends in the park, but I must have, because eventually this brother and sister from a couple of trailers down the road came by with an offer. They had a small collection of polished rocks. I have no idea where or how they got them, but they were pretty fine looking rocks. They offered to sell me the whole lot for $2. What a steal! I bought them then and there. I might not have had a rock polisher, but I did have polished rocks, and they were beautiful.&lt;/p&gt;

&lt;p&gt;And here, let me step away from the rocks to give some needed context. I believe at the time I was still being homeschooled by my mom (I went to “regular” school in 5th grade), and my dad worked nights at a machine shop that manufactured industrial valves. So, my dad was at work while we were all sleeping, and he was asleep while we were in the house all afternoon. It was an awkward schedule, but I always enjoyed hanging out with my dad in the evenings before he went to work for the night (honestly, I also enjoyed hanging with my mom in the day doing “school”. My parents are cool; you’d enjoy hanging with them as well). And often, my dad would stop by as I was going to bed to say goodbye as he left for work.&lt;/p&gt;

&lt;p&gt;Back to the rocks. One evening shortly after buying the rocks, my dad popped his head into my room to say goodnight and goodbye:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Love ya, bud. Good night, sleep tight, don’t let the bedbugs bite.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Love you too, Dad. Have a good night at work. See you tomorrow.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Oh, hey, could I borrow $0.50 to buy a coke at work? I promise to pay you back tomorrow.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Um… Sorry… I don’t have $0.50. I spent my money on those polished rocks.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“That’s fine. I’m sure I can borrow a few cents from a friend. Love ya, good night.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Good night.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A quick, simple exchange. He left, went to work, and no doubt got a coke. But I could not fall asleep. I felt terrible. I didn’t have much money, and one of the few times that I could have helped &lt;em&gt;my dad&lt;/em&gt; with &lt;em&gt;my money&lt;/em&gt;, I couldn’t. Why? Because I had spent the money on &lt;strong&gt;rocks&lt;/strong&gt;. Polished rocks, sure, but still, &lt;strong&gt;rocks&lt;/strong&gt;. I couldn’t stop comparing the value of my dad with the value of rocks. I felt frivolous, I felt foolish, I felt ashamed.&lt;/p&gt;

&lt;p&gt;And I cried. I cried a lot. I’m pretty sure at some point my mom heard me and came in to check on me. I think I tried to explain why I was so upset, but I’m sure I didn’t make much sense. She calmed me down, explained that everything was fine, that dad would get a coke easily, he didn’t need my money, everything would be fine. Eventually, I was calm enough and tired enough to find a fitfull sleep.&lt;/p&gt;

&lt;p&gt;The next day, I sought out the culprits.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“I changed my mind. I don’t want the rocks. I want my money back.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Sorry, we can’t.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Yeah, we already spent your money.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Already? … on what?”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“On a Snickers.”&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>Encoding the Logic of Sets</title>
    <link rel="alternate" href="http://blog.url.com/articles/encoding-the-logic-of-sets/"/>
    <id>http://blog.url.com/articles/encoding-the-logic-of-sets/</id>
    <published>2017-08-15T20:00:00-04:00</published>
    <updated>2017-08-18T21:08:50-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I have &lt;a href="http://fractaledmind.com/articles/initial-thoughts-on-infinite-sets-and-procedures/"&gt;started thinking&lt;/a&gt; about how we conceive of sets in mathematics. My entry point is to consider sets as &lt;em&gt;procedures&lt;/em&gt;, that is, as a structure that encodes the “shape” (I’m still trying to think through the appropriate language to use) of a set. I think that this conceptual model works particularly well for infinite sets, as infinite sets clearly cannot be conceived of as actual objects in the way that finite sets are objects. But if we are to conceive of infinite sets as procedures, ought we not also to conceive of finite sets similarly? And if we consider all sets as procedures, how does that affect how we categorize sets?&lt;/p&gt;

&lt;p&gt;I think it is simplest to start with finite sets, so let’s start there and work our way up and out. How can we describe a finite set? Well, initially, it seems thoroughly straight-forward: &lt;code&gt;{1, 2, 3, 4, 5}&lt;/code&gt; is a finite set. We can describe it as the collection of the numbers &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, and &lt;code&gt;5&lt;/code&gt;. Each of those numbers are “objects,” and the set is simply a composite object. And I think that this is a sensible way to conceive of finite sets; but, &lt;a href="http://fractaledmind.com/articles/initial-thoughts-on-infinite-sets-and-procedures/"&gt;as articulated in my earlier piece&lt;/a&gt;, this mode of thinking leads to logical complications when we consider infinite sets. Is the infinite set a composite object if it has no boundaries? Can we treat it as an “object” in any way similar to a finite set without logical contradiction? I think not. This is what led me to treating sets as procedures. So, how might we understand the set &lt;code&gt;{1, 2, 3, 4, 5}&lt;/code&gt; as a procedure?&lt;/p&gt;

&lt;p&gt;Well, let’s start with some pedantic tablesetting. Strictly speaking, finite sets are &lt;em&gt;not&lt;/em&gt; “procedures”, since they will all return an actual value. Infinite sets must be conceived of as procedures, because they will never actually return a value. A finite set can simply be a function, that is, a procedure that returns an actual value. Recall:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;
    &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;command_1&lt;/span&gt;
    &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;command_2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;procedure&lt;/span&gt;
    &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;command_1&lt;/span&gt;
    &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;command_2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;But, for the sake of simplicity, I am going to use “procedure” to mean any small, portable chunk of executable commands, whether it returns a value or not.&lt;/p&gt;

&lt;p&gt;So, the set &lt;code&gt;{1, 2, 3, 4, 5}&lt;/code&gt; as a procedure. The first and simplest way to write that as a procedure would be to have a procedure that takes each of the elements of the set as a parameter/argument:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;five_element_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fourth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fifth&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;third&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fourth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fifth&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;five_element_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# =&amp;gt; {1, 2, 3, 4, 5}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;In the world of computer programming, the “parameters” or “arguments” are simply the values that you pass into a procedure. This allows you to create procedures that are dynamic and flexible. Consider a simple example:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;left&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;

  &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# =&amp;gt; 4&lt;/span&gt;

  &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# =&amp;gt; 7&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Here, &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;2&lt;/code&gt; are the parameters first passed to the &lt;code&gt;add&lt;/code&gt; procedure, which returns the value &lt;code&gt;4&lt;/code&gt;. Then, we pass &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;5&lt;/code&gt; as parameters and &lt;code&gt;add&lt;/code&gt; returns &lt;code&gt;7&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It seems fairly straightforward, then, that &lt;em&gt;any&lt;/em&gt; finite set could be constructed as a procedure where each element of the set is simply one parameter passed to the procedure. So, the set &lt;code&gt;{1, 2, 3, 4, 5}&lt;/code&gt; could be built with a procedure that takes 5 parameters where we pass &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;3&lt;/code&gt;, &lt;code&gt;4&lt;/code&gt;, and &lt;code&gt;5&lt;/code&gt; as the parameters. Then set &lt;code&gt;{3, 1, 4, 1, 5, 9, 2, 6, 5, 4}&lt;/code&gt; could be a procedure that takes 10 parameters, etc. Going back to the language of computer programming, we describe the number of parameters that a procedure takes as its &lt;em&gt;arity&lt;/em&gt;. The &lt;code&gt;add&lt;/code&gt; procedure above would have an “arity” of 2, the procedure to generate the set &lt;code&gt;{1, 2, 3, 4, 5}&lt;/code&gt; would have an “arity” of 5, and the procedure for &lt;code&gt;{3, 1, 4, 1, 5, 9, 2, 6, 5, 4}&lt;/code&gt; would have an “arity” of 10. This means that we can say that &lt;strong&gt;any finite set could be constructed as a procedure with an arity equal to the number of elements in that set where the procedure simply returns those elements in that order as a set&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;That’s a bit wordy, so let’s give some pseudo-code examples:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;five&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# =&amp;gt; {3, 1, 4, 1, 5, 9, 2, 6, 5, 4}&lt;/span&gt;

  &lt;span class="n"&gt;five&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# =&amp;gt; {1, 2, 3, 4, 5}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;pi&lt;/code&gt; is a procedure that accepts 10 parameters and thus has an arity of 10. It is a stupidly simple procedure because it simply takes those 10 parameters, in the order they were passed, and puts them in a set and returns that value. The point about order is important; consider this:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# =&amp;gt; {3, 1, 4, 1, 5, 9, 2, 6, 5, 4}&lt;/span&gt;

  &lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# =&amp;gt; {4, 5, 6, 2, 9, 5, 1, 4, 1, 3}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;pi&lt;/code&gt;, the procedure, has the exact same shape but with two different collections of parameters passed to it, it returns &lt;em&gt;two totally different sets&lt;/em&gt;. Now, each set is composed of 10 elements, so they are similar sets, but they are also clearly different.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now, if you are anything like me, you will have gotten to this point and thought to yourself, “Who cares? &lt;em&gt;Of course&lt;/em&gt; a finite set could be constructed as a procedure that simply takes the elements as parameters and returns a set with those elements.” And you are right, that is boring. But, is that the &lt;em&gt;only&lt;/em&gt; way to construct a procedure for a finite set?&lt;/p&gt;

&lt;p&gt;Let’s go back to &lt;code&gt;{1, 2, 3, 4, 5}&lt;/code&gt;; how else might we construct a procedure to output this set? How about this:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_by_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;
      &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;

  &lt;span class="n"&gt;add_by_one&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c"&gt;# =&amp;gt; {1, 2, 3, 4, 5}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now this is starting to look interesting! We are doing much more than simply returning a collection of parameters as a set. The &lt;code&gt;add_by_one&lt;/code&gt; procedure is actually encoding some meaningful structure. Without necessarily getting into the specifics of the implementation, the idea is that we can structure the set &lt;code&gt;{1, 2, 3, 4, 5}&lt;/code&gt; as a procedure that starts at &lt;code&gt;1&lt;/code&gt; and adds new elements by adding &lt;code&gt;1&lt;/code&gt; to the previous element until it gets to &lt;code&gt;5&lt;/code&gt; at which point it ends the set. Note, we have constructed a procedure that returns the set we want, but &lt;em&gt;it only has an arity of 2&lt;/em&gt;, instead of 5. The only thing we need to generate that set is the starting number and the ending number. The rest of the structure of the set we can encode in the procedure.&lt;/p&gt;

&lt;p&gt;This leads me to my concluding thought for this piece:&lt;/p&gt;

&lt;p&gt;If we conceive of all sets, both infinite and finite, as &lt;em&gt;procedures&lt;/em&gt;, we should strive to construct a procedure for each set we are interested in that has &lt;strong&gt;the lowest possible arity&lt;/strong&gt;. For, the lower the arity of the procedure, the more of the structure of the set is encoded in the procedure (and not in the parameters themselves). This then would mean that the procedure is more “purely” encoding the shape of the set, or maybe the “logic” of the set.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>On Death and Life</title>
    <link rel="alternate" href="http://blog.url.com/articles/on-death-and-life/"/>
    <id>http://blog.url.com/articles/on-death-and-life/</id>
    <published>2017-08-14T20:00:00-04:00</published>
    <updated>2017-08-15T21:15:56-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;To anyone who has ever hedged or criticized someone who has committed suicide. Don’t.&lt;/p&gt;

&lt;p&gt;Stop.&lt;/p&gt;

&lt;p&gt;Mourn.&lt;/p&gt;

&lt;p&gt;We are not all of us leased to live a life filled with distractions from the basic truth that this world, shaped by us after our own image, is broken, and primarily so because we are each of us broken and are breaking it.&lt;/p&gt;

&lt;p&gt;Some of us have looked long into that abyss, that true abyss, and some have been unable to see anything beyond that darkness. Some of us have a flesh that feels nothing but scarred, have eyes that seem to have seen nothing but broken edges and sharp things. These things are each of them deeply real. And we must mourn for those who could not escape them, who sensed this brokenness and nothing else.&lt;/p&gt;

&lt;p&gt;For, despite all the dark broken shards, there is a light that refracts amongst them. And we are each blessed to have glimpsed enough of it to be breathing here, in this moment. For without that light, would we not, of necessity, have eventually joined them?&lt;/p&gt;

&lt;p&gt;And yet, here we are.&lt;/p&gt;

&lt;p&gt;Thanks be to God.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>On Moral Judgment</title>
    <link rel="alternate" href="http://blog.url.com/articles/on-moral-judgment/"/>
    <id>http://blog.url.com/articles/on-moral-judgment/</id>
    <published>2017-08-14T08:25:00-04:00</published>
    <updated>2017-08-15T09:02:02-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;There exists a moral universe. We are subject in that universe just as we are subject in the physical universe. We can affect the state of this universe, just as we can affect the state of the physical universe. We are also objects in the moral universe; we can be affected by the state of this universe. Ethics is a mode of analysis that considers how we do and how we ought to relate to this moral universe. The goal of ethics is to live life well. In order to live life well, we need to&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;see the state of the moral universe as it truly is, and&lt;/li&gt;
  &lt;li&gt;respond to that state appropriately.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In essence, ethics is this simple; the complexity arises when we actually attempt to live life well. The practice of ethics is difficult.&lt;/p&gt;

&lt;p&gt;I find that one of the most common points of error in the practice of ethics is the application of judgment. I want to consider, briefly, what judgment is with respect to the moral universe, how it can be used properly, and how it is often used improperly.&lt;/p&gt;

&lt;p&gt;Judgment is a type of critical analysis, and critical analysis is absolutely necessary to living life well. It is a key means to the end of seeing the state of the moral universe correctly and responding to it appropriately. It is preparation, exercise, and review. Conceptually, judgment has a few central characteristics. First and foremost, judgment always has a &lt;em&gt;particular&lt;/em&gt; object of focus. We do not judge abstract ideas (we may critique them, but we do not–properly speaking–judge them); we judge people, actions, or beliefs. And this is the first key way in which we can differentiate judgment from criticism. One can be critical of either a general or a particular; one can only judge a particular. “That is bad/wrong/evil.”  There must be a “that” there. Judgment must be focused.&lt;/p&gt;

&lt;p&gt;Note, however, that the language of judgment often elides the judge. &lt;em&gt;I&lt;/em&gt; am not the judge, for I cannot be a sufficient grounds for judgment. What makes “that” “bad/wrong/evil”? The answer to this question can be thought of as the &lt;em&gt;subject&lt;/em&gt; of the judgment. And while the &lt;em&gt;object&lt;/em&gt; of the judgment is &lt;strong&gt;particular&lt;/strong&gt;, the &lt;em&gt;subject&lt;/em&gt; of the judgment must be &lt;strong&gt;general&lt;/strong&gt;. No particular can provide a sufficient foundation for a moral judgement. We judge on the grounds of Right or Truth or Justice. We may be the mouthpiece for judgment, but we are not the judge.&lt;/p&gt;

&lt;p&gt;This leads us to consider the chief way in which judgment can be used properly within the moral universe. We can and should often judge ourselves, make ourselves the particular object of a judgment. We must hold ourselves accountable; we must judge our successes and failures in attempting to correctly see the state of the moral universe and appropriately respond to it. Now, I am not advocating any kind of ethical self-immolation. One could easily imagine taking things too far, but rutting in our mistakes to the exclusion of anything else very clearly does not help us to live life well. To live life well, we must live life; we must act and engage and take risks and keep moving forward, even when we do not know the way. Judgment can help us to turn our past mistakes into guards against future ones, it can help us to more clearly see the correct state of the moral universe, but it shouldn’t be an albatross that drags us into stagnation.&lt;/p&gt;

&lt;p&gt;If ethics is aimed at living life well, in what ways does judging others aid in achieving that goal? Does making someone else the particular object of judgment help me to live my life well? Does making someone else the particular object of judgment help them to live their live well? These are the questions we must ask before even beginning to judge others. In my opinion, there is often little value to my own goal of living life well in judging someone else. And while it might occasionally be beneficial to the other, the &lt;strong&gt;only&lt;/strong&gt; context in which that is true is when I and the other already share a close enough relationship that I can speak truth into their life. I believe firmly that there is no value in judging another with whom you have no pre-existing relationship. It does not help you to live life well and it will not help them to live life well. And yet, to my eyes, this is the &lt;em&gt;primary&lt;/em&gt; context in which I see judgment being practiced.&lt;/p&gt;

&lt;p&gt;Before you start to judge, ask yourself: how is this helping me to live life well? How is this helping them to live life well? If you can’t come up with a concrete answer, an answer you can practically employ, you ought not to judge. In short, we may want to consider the deeper truths behind:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Judge not, lest ye be judged.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  <entry>
    <title>Initial Thoughts on Infinite Sets and Procedures</title>
    <link rel="alternate" href="http://blog.url.com/articles/initial-thoughts-on-infinite-sets-and-procedures/"/>
    <id>http://blog.url.com/articles/initial-thoughts-on-infinite-sets-and-procedures/</id>
    <published>2017-08-09T08:25:00-04:00</published>
    <updated>2017-08-10T21:28:55-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;In a &lt;a href="http://steve-patterson.com/cantor-wrong-no-infinite-sets/"&gt;well-written, clearly articulated piece&lt;/a&gt; on his personal site, Steve Patterson argues that Georg Cantor, the father of modern set theory, was simply, categorically, logically wrong in his understanding and presentation of infinite sets. I appreciate the simplicity, clarity, and forcefulness of his position:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Cantor’s argument isn’t ridiculous in isolation; the entire modern mathematics profession is also damned by association. Modern math, by not weeding out the illogical presuppositions of Cantor, has turned itself into modern Numerology.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;More so, however, I commend his approach. Patterson takes seriously what he calls the “&lt;a href="http://steve-patterson.com/the-metaphysics-of-mathematics-against-platonism/"&gt;metaphysics of mathematics&lt;/a&gt;”; he thinks carefully about the logical nature of these mathematical positions; he is explicit about his terms, what they mean, what he is doing with them, and why they are important. In short, he takes a very philosophical approach to mathematics.&lt;/p&gt;

&lt;p&gt;This is precisely my own bent as well. I am not a professional mathematician, nor am I a fully and/or properly trained mathematician. I am an amateur of the lowest order, but I am deeply drawn to, fascinated by, and enamored with the world of mathematics. I am particularly struck by the ways in which the work of mathematicians who have delved deep into such abstract waters can help us to better think about our minds, the world around us, and the state and nature of knowledge itself.&lt;/p&gt;

&lt;p&gt;But enough with the table setting. I want to write a bit about my response to Patterson’s piece. For while I appreciate his approach, his clarity of thought and presentation, I also fundamentally disagree with him. He places the world of rational, properly meaningful thought on one side and the world of modern mathematics, built on the concepts of set theory, on the other:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Math needs to be logical – grounded in the principles of identity, non-contradiction, and clear conceptual reasoning – and it also needs to be metaphysically precise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He begins from classical, Aristotelian logic and needs must (in his mind) cast out modern set theory. I want to work towards understanding the ground that properly unites them such that the one can illumine the other and vice versa.&lt;/p&gt;

&lt;p&gt;So, let’s begin.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;My initial thoughts on this subject focus in on our understanding of what sets &lt;em&gt;even are&lt;/em&gt;. This stands at the heart of Patterson’s critique, and I think he has it quite wrong. In his mind, mathematicians are conceiving of infinite sets in essentially the same manner that they conceive of finite sets:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To ask, “How many positive integers are there?” is to presuppose an error. Sets aren’t “out there.” They are created. All sets are exactly as large as they’ve been created. There is no such thing as “all the positive integers.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But are we indeed to conceive of infinite sets as &lt;em&gt;things&lt;/em&gt; that exist “out there”? I think not. I believe mathematicians are quite aware that there aren’t infinite sets “out there,” and I do not think that mathematicians consider infinite sets primarily as “things.” This was how people understood finite sets, yes, but my understanding of Cantor’s position, and why he has affected mathematics so forcefully since, centers on a shift from conceiving of sets as &lt;em&gt;things&lt;/em&gt; to conceiving of them as &lt;em&gt;procedures&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here my own proclivity for computer programming is peeking through, as I am borrowing the concept of procedures from that world. In programming, the “program” is a chunk of executable commands to the computer. When talking about the smaller chunks of executable commands, programmers often refer to “functions” and “procedures,” each being a small, portable chunk of executable commands. The difference between a “function” and a “procedure” is noteworthy when thinking about sets, however. A function will return a value as a result of executing its commands; a procedure will not. Consider the following (pseudo-code):&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;
    &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;command_1&lt;/span&gt;
    &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;command_2&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;procedure&lt;/span&gt;
    &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;command_1&lt;/span&gt;
    &lt;span class="n"&gt;execute&lt;/span&gt; &lt;span class="n"&gt;command_2&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So, when I run the “function,” I will get the “value” back as a result after “command_1” and “command_2” are executed. When I run “procedure” though, “command_1” and “command_2” are both executed, but nothing is returned back to me (the caller) as a result.&lt;/p&gt;

&lt;p&gt;Bringing these concepts back to the world of sets, I begin to see possible conceptual connections. Finite sets are analogous to functions–they return something–, while infinite sets can correspond to procedures. This may seem a trivial analogy, but I believe it lies at the conceptual heart of modern set theory and our understanding of infinite sets (and thus, sets in general).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Before Cantor’s investigation into infinite sets, set theory had as its “metaphysics” an understanding that sets were “things” or “values”–&lt;code&gt;{1, 1, 2, 3, 5, 8}&lt;/code&gt; is a discrete value. It is a discrete value &lt;em&gt;composed&lt;/em&gt; of other discrete values, sure, but it is nonetheless itself discrete. Were we to consider the concept of “set” as strictly a “value,” Patterson’s critique would ring true, I believe. Infinite sets &lt;em&gt;cannot&lt;/em&gt; be values. Patterson clearly has this understanding of sets in mind when he writes:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A set explicitly means an &lt;em&gt;actual, defined collection of elements&lt;/em&gt;. If you ever, at any point, have an actual collection of elements, you certainly do not have an infinite amount.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But is this how modern mathematicians, following Cantor, understand sets? I doubt it. And I doubt it primarily because Cantor’s own arguments and writing seem decently aware of this tension (see his desire to consider what we now call “infinite sets” as “&lt;a href="https://en.wikipedia.org/wiki/Transfinite_number"&gt;transfinite sets&lt;/a&gt;”). Moreover, his arguments describing infinite sets are so clearly laying out &lt;em&gt;procedures&lt;/em&gt;, not values. And, in my (very limited) opinion, this is key to Cantor’s revolution.&lt;/p&gt;

&lt;p&gt;He shifts the “metaphysical” understanding of sets away from values to procedures. He does not construct infinite sets by enumerating all of the discrete values that compose the set; he lays out a procedure for generating a set. &lt;strong&gt;The set is the procedure, and the procedure the set&lt;/strong&gt;. The set of all natural numbers is not properly understood as a value composed of all of the discrete values that are the natural numbers; it is to be understood as a procedure, the structure of which maps cleanly and clearly to the structure of the natural numbers.&lt;/p&gt;

&lt;p&gt;Perhaps some pseudo-code would help here. How might we describe the set of the natural numbers as a procedure?&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;naturals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;naturals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Were we to run this as a program, the computer would yell at us very quickly: “Runtime Error: maximum recursion depth exceeded.” This is a recursive procedure and there is nothing in its construction that would lead to it ever stopping from executing; it would execute forever if it could. This is why it is a procedure – it can never return a value. For to return a value would be to stop execution, but to stop execution would mean it had finished, and thus it was finite; but it is infinite.&lt;/p&gt;

&lt;p&gt;That doesn’t mean, however, that we can’t understand things about this procedure, particularly in comparison with other procedures:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;evens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;evens&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;odds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;odds&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;There are immediate, clear, and meaningful differences between the structures of the “naturals,” “evens,” and “odds” procedures. Just because none of these procedures would or ever &lt;em&gt;could&lt;/em&gt; return a value doesn’t mean we can’t reason about them. And that is the heart of modern set theory; this is their “metaphysics of sets.” Sets are not primarily values (as this would restrict the definition of sets to include only finite sets); sets are primarily procedures (or, more properly, “programs” as finite sets would map to “functions” because they terminate and return values, while infinite sets would map to “procedures”).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’m going to stop there for now. As I continue mulling on these thoughts, I want to explore further how the arity of the set/procedure (that is, the number of arguments that it takes) relates to the complexity and categorization of all sets, both finite and infinite. I am also interested in thinking through how recursive and non-recursive sets/procedures relate to the categorization of all sets. Finally, I’m curious as to whether a non-terminating procedure (that is, an infinite set) could ever be constructed as anything &lt;em&gt;other than&lt;/em&gt; a recursive procedure in this schema.&lt;/p&gt;

&lt;p&gt;But, all of those thoughts must wait for another day…&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Introducing: Togglicons</title>
    <link rel="alternate" href="http://blog.url.com/articles/introducing-togglicons/"/>
    <id>http://blog.url.com/articles/introducing-togglicons/</id>
    <published>2017-08-03T07:20:00-04:00</published>
    <updated>2017-08-03T23:24:54-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I’ve finally created an initial version of one of my favorite side-projects: &lt;a href="http://togglicons.com"&gt;Togglicons&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Visit and click around. You can choose:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;any two icons you want to toggle between,&lt;/li&gt;
  &lt;li&gt;the color of the icons,&lt;/li&gt;
  &lt;li&gt;the animation transition easing,&lt;/li&gt;
  &lt;li&gt;the transition duration,&lt;/li&gt;
  &lt;li&gt;and how rounded the icon edges are.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And it all just works!&lt;/p&gt;

&lt;p&gt;In the coming month, I’ll finish the full documentation and add that to the site.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>togglicons</title>
    <link rel="alternate" href="http://blog.url.com/projects/togglicons/"/>
    <id>http://blog.url.com/projects/togglicons/</id>
    <published>2017-08-02T20:00:00-04:00</published>
    <updated>2017-11-16T16:33:57-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; &lt;a href="http://togglicons.com"&gt;http://togglicons.com&lt;/a&gt;&lt;/p&gt;

&lt;h2 id="what"&gt;What?&lt;/h2&gt;

&lt;p&gt;A “togglicon” is an icon that toggles between two states. &lt;strong&gt;&lt;code&gt;Togglicons&lt;/code&gt;&lt;/strong&gt; is a toolkit for creating and adding any number and kind of togglicons to your project. In many ways, this project is similar to the &lt;a href="http://www.transformicons.com"&gt;Transformicons&lt;/a&gt; project. The key differences are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;that &lt;strong&gt;&lt;code&gt;Togglicons&lt;/code&gt;&lt;/strong&gt; is a “pure CSS” (it’s actually all written in SCSS) solution, requiring no JavaScript, and&lt;/li&gt;
  &lt;li&gt;that &lt;strong&gt;&lt;code&gt;Togglicons&lt;/code&gt;&lt;/strong&gt; offers nearly total control over the look and combination of your icons.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id="why"&gt;Why?&lt;/h2&gt;

&lt;p&gt;Why use a togglicon, and in what contexts does it make sense? Since any and all togglicons can only switch between two icons, they only really make sense when you are toggling between two states and you want a UI signal of which state things are in at any given moment. One primary example would be collapsible panels. Another would be a button that show/hides a menu.&lt;/p&gt;

&lt;p&gt;Within those contexts, togglicons can help to add a sense of polish and whimsy to your UI. Instead of simply swapping out on Font Awesome icon for another, have &lt;code&gt;iconA&lt;/code&gt; magically morph into &lt;code&gt;iconB&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id="how"&gt;How?&lt;/h2&gt;

&lt;p&gt;In order to add &lt;strong&gt;&lt;code&gt;Togglicons&lt;/code&gt;&lt;/strong&gt; to your project, you first need to download the SCSS source code and bring it into your project.&lt;/p&gt;

&lt;p&gt;Once you have the &lt;code&gt;src/&lt;/code&gt; directory in your project, you will have access to the &lt;code&gt;togglicon&lt;/code&gt; mixin. Given the deep dynamicity of &lt;strong&gt;&lt;code&gt;Togglicons&lt;/code&gt;&lt;/strong&gt;, no CSS will be generated and no toggling icons will be added to your site until you &lt;code&gt;@include togglicon&lt;/code&gt; somewhere in your projects SASS/SCSS. This will allow you to have multiple, different togglicons present on the same page, as well as reduce the overall CSS footprint of the togglicon library in your final stylesheets. For example, you might include the mixin within a particular namespace:&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.togglicon-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;togglicon&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This, however, is the least interesting way to include the mixin, as the mixin allows for a number of parameters to customize the look and feel of your togglicons.&lt;/p&gt;

&lt;p&gt;First and foremost, you can declare which specific icons you want to toggle between. This will immediately and drastically reduce the final CSS footprint of togglicons, as the library will now only generate the CSS required for those specific icons. You set the set of icons you want these togglicons to toggle between with the &lt;code&gt;$icons&lt;/code&gt; parameter passed to the mixin:&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.togglicon-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;togglicon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$icons&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'chevron-up'&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'chevron-down'&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;When it comes to the overall look of your icons, you have a number of options. You can also set the width (in pixels) of the icons as well as the multiplier used to calculate the height of the icons (&lt;em&gt;Note:&lt;/em&gt; Given the math used to ensure each icon is perfect positioned, the height needs to be a multiple of the width). This allows you to have togglicons as tall and thick or as small as your app requires. These variables are set using the &lt;code&gt;$width&lt;/code&gt; and &lt;code&gt;$multiplier&lt;/code&gt; parameters:&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.togglicon-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;togglicon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                       &lt;span class="nv"&gt;$multiplier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Furthermore, you can specify the &lt;code&gt;border-radius&lt;/code&gt; of the icons by setting the &lt;code&gt;$radius&lt;/code&gt; parameter:&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.togglicon-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;togglicon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                       &lt;span class="nv"&gt;$multiplier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                       &lt;span class="nv"&gt;$radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;You can then also set the color of the icons with the &lt;code&gt;$color&lt;/code&gt; parameter:&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.togglicon-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;togglicon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                       &lt;span class="nv"&gt;$multiplier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                       &lt;span class="nv"&gt;$radius&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                       &lt;span class="nv"&gt;$color&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#111111&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The final bit of control you have is over the transitions between the icons. You can set both the &lt;code&gt;transition-duration&lt;/code&gt; property (&lt;code&gt;$duration&lt;/code&gt;) as well as the &lt;code&gt;transition-timing-function&lt;/code&gt; property (&lt;code&gt;$transition&lt;/code&gt;):&lt;/p&gt;

&lt;div class="highlight scss"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nc"&gt;.togglicon-container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;@include&lt;/span&gt; &lt;span class="nd"&gt;togglicon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$duration&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.5&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
                       &lt;span class="nv"&gt;$transition&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nf"&gt;cubic-bezier&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.68&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;-0&lt;/span&gt;&lt;span class="mi"&gt;.55&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="mi"&gt;.265&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="mi"&gt;.55&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;With any or all of these parameters set, &lt;strong&gt;&lt;code&gt;Togglicons&lt;/code&gt;&lt;/strong&gt; will output precisely the CSS required to have beautiful toggling icons on your page.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Can there be a property that is universally predicated of every instance of a set that is not simply the definition of that set?</title>
    <link rel="alternate" href="http://blog.url.com/jots/201706270013/"/>
    <id>http://blog.url.com/jots/201706270013/</id>
    <published>2017-06-26T20:13:00-04:00</published>
    <updated>2017-06-27T00:14:25-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Argument for the Reasonableness of Eucharistic Substantiation</title>
    <link rel="alternate" href="http://blog.url.com/articles/argument-for-the-reasonableness-of-eucharistic-substantiation/"/>
    <id>http://blog.url.com/articles/argument-for-the-reasonableness-of-eucharistic-substantiation/</id>
    <published>2017-06-25T20:00:00-04:00</published>
    <updated>2017-06-27T00:08:53-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;ul&gt;
  &lt;li&gt;Jesus is fully God and fully man (&lt;code&gt;J == G &amp;amp;&amp;amp; M&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;‘to be’ is a substantial statement (&lt;code&gt;'==' = substantial&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Jesus’ substance is fully the substance of God and fully the substance of man (&lt;code&gt;s(J) == s(G) &amp;amp;&amp;amp; s(M)&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;The substance of God is immaterial (&lt;code&gt;s(G) = i&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;The substance of man is material (&lt;code&gt;s(M) = m&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;So, the substance of Jesus is fully material and fully immaterial (&lt;code&gt;s(J) == i &amp;amp;&amp;amp; m&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Therefore, some substances can be be fully material and fully immaterial (&lt;code&gt;V s == i &amp;amp;&amp;amp; m&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;I am sure that someone could poke holes in the logic of that argument–and I welcome any such comments; however, I also currently find it convincing. Given the conclusion, then, I simply ask myself: “Is it likely that the Eucharist is a member of the set of possible substances that can be both fully material and fully immaterial?” To my mind, it is likely. When Jesus says “this is my body” and “this is my blood”, these are terms of a substantial register. Moreover, these are statements of identity (using the verb “to be”). Finally, for me, the parallelism of Jesus is to God and man as eucharistic bread is to Christ’s body and regular bread fits too well into the general structures of Christian thinking.&lt;/p&gt;

&lt;p&gt;In short, I believe both that &lt;a href="http://www.theopedia.com/consubstantiation"&gt;consubstantiation&lt;/a&gt; is reasonable and true.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>It's the small things, the quiet ones, the moments between where meaning often runs deepest.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201706230133/"/>
    <id>http://blog.url.com/jots/201706230133/</id>
    <published>2017-06-22T21:33:00-04:00</published>
    <updated>2017-06-27T00:28:04-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Each and every day, I exist, for there is life in the small things, light among the sharp edges.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201706221136/"/>
    <id>http://blog.url.com/jots/201706221136/</id>
    <published>2017-06-22T07:36:00-04:00</published>
    <updated>2017-06-27T00:19:24-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>This world chips away at us like waves against a cragg'd cliff, leaving us sharp yet fractal--complex by the simple iteration of the tide.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201706190032/"/>
    <id>http://blog.url.com/jots/201706190032/</id>
    <published>2017-06-18T20:32:00-04:00</published>
    <updated>2017-06-27T00:27:46-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>You are asking questions in prose that can only be answered in poetry.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201706130731/"/>
    <id>http://blog.url.com/jots/201706130731/</id>
    <published>2017-06-13T03:31:00-04:00</published>
    <updated>2017-06-27T00:21:36-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Complexity is often no more than iterated simplicity.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201706061113/"/>
    <id>http://blog.url.com/jots/201706061113/</id>
    <published>2017-06-06T07:13:00-04:00</published>
    <updated>2017-06-27T00:22:33-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Are goodbyes as hard as their related memories are soft--memories made soft by my now foreignness in them? I often feel like a ghost in my own memories, haunting a moment that is not quite mine.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201706040723/"/>
    <id>http://blog.url.com/jots/201706040723/</id>
    <published>2017-06-04T03:23:00-04:00</published>
    <updated>2017-06-27T00:23:29-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Scars II</title>
    <link rel="alternate" href="http://blog.url.com/articles/scars-ii/"/>
    <id>http://blog.url.com/articles/scars-ii/</id>
    <published>2017-06-03T20:00:00-04:00</published>
    <updated>2017-06-27T00:35:07-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;The scar is wound and healing.&lt;/p&gt;

&lt;p&gt;The scar is flesh and memory.&lt;/p&gt;

&lt;p&gt;The scar is past and present.&lt;/p&gt;

&lt;p&gt;We are a people of scars.&lt;/p&gt;

&lt;p&gt;The world is broken; broken things are sharp; sharp things cut; cuts are wounds.&lt;/p&gt;

&lt;p&gt;As a people of scars, we too are broken.&lt;/p&gt;

&lt;p&gt;Yet the scar is brokenness and wholeness.&lt;/p&gt;

&lt;p&gt;We are wounded, yet also knit back together.&lt;/p&gt;

&lt;p&gt;Know this: your scars are real. They are seen and felt. I am broken with and for you.&lt;/p&gt;

&lt;p&gt;But you are so much more than your wounds. You are healing, wholeness, present.&lt;/p&gt;

&lt;p&gt;I love you and your scars.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Scars I</title>
    <link rel="alternate" href="http://blog.url.com/articles/scars-i/"/>
    <id>http://blog.url.com/articles/scars-i/</id>
    <published>2017-05-31T20:00:00-04:00</published>
    <updated>2017-06-27T00:35:04-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I live a life of scars,&lt;/p&gt;

&lt;p&gt;so small as to be invisible,&lt;/p&gt;

&lt;p&gt;like the slivers and shards and fragments of shrapnel—broken and sharp—&lt;/p&gt;

&lt;p&gt;that seared them into the fleshy bits of my me.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A life forgotten</title>
    <link rel="alternate" href="http://blog.url.com/articles/a-life-forgotten/"/>
    <id>http://blog.url.com/articles/a-life-forgotten/</id>
    <published>2017-05-13T20:00:00-04:00</published>
    <updated>2017-06-27T00:36:09-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;A life forgotten&lt;/p&gt;

&lt;p&gt;Eroding against the incremental scratch of time&lt;/p&gt;

&lt;p&gt;Like a lonely obelisk in the desert&lt;/p&gt;

&lt;p&gt;Graven with images&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Flatland and Theological Expectations</title>
    <link rel="alternate" href="http://blog.url.com/articles/flatland-and-theological-expectations/"/>
    <id>http://blog.url.com/articles/flatland-and-theological-expectations/</id>
    <published>2017-03-08T19:00:00-05:00</published>
    <updated>2017-05-01T20:08:26-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I am going to confess at the outset that I have not read the novella &lt;a href="https://en.wikipedia.org/wiki/Flatland"&gt;&lt;em&gt;Flatland: A Romance of Many Dimensions&lt;/em&gt;&lt;/a&gt; in its entirety.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; The central conceit of the book, however, has fascinated me since I first learned of it. While scholars read the original work as a satire of Victorian culture and its class system, the work has gained a renewed notoriety since Einstein’s general theory of relativity gained wide-spread understanding. In needing a mechanism to think more concretely about the fourth-dimension, many saw this book by Edwin Abbott as a witty imagining of how dimensionality must be understood by being that exist within a certain dimension. In the story, the protagonist, a square who lives in a two-dimensional world, visits a one-dimension world, only to be threatened and chased off after he attempts to convince the people there of the existence of a second dimension. Later, the square is then visited by a sphere, who transports the square to a three-dimensional world. While the specifics of the plot have their charm, the key point for my purposes today is the conceit and the general questions it raises:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;how are beings limited in their thinking by the world that they occupy?&lt;/li&gt;
  &lt;li&gt;Can we think rationally about worlds with greater degrees of complexity (or “dimensions”) than our own?&lt;/li&gt;
  &lt;li&gt;Insofar as we can think rationally about more complex worlds, what general expectations can we form about the nature and limits of our understanding of such things?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In particular, as the title suggests, I am interested in how thought experiments of this sort might elucidate certain features of theology. Without spoiling the fun too much too early, I think that we can draw a meaningful analogy between squares attempting to think about and understand spheres and humans attempting to think about and understand God. But, before we go too far down that path, I want to return to Flatland.&lt;/p&gt;

&lt;h3 id="thinking-in-flatland"&gt;Thinking in Flatland&lt;/h3&gt;

&lt;p&gt;Imagine that you are a square. You are a two-dimensional object that lives in a two-dimensional world. All around you are circles, triangles, parallelograms, quadrilaterals of all kinds, and every imaginable form of polygon. You can see height and width, but you have no sense of depth. You are in Flatland. Now, I want you to observe these shapes and think about what you can glean from them:&lt;/p&gt;

&lt;p&gt;&lt;img src="images/cube_collection_1.png" /&gt;&lt;/p&gt;

&lt;p&gt;There are four objects here. One is a simple square. Next we have a hectagon that is wider than it is tall, followed by another hectagon that is taller than it is wide. These two hectagons are fairly similar. The final object is also a hectagon, but is distinctly different from the first two. Like the second, it is tall, but like the first it has a pointed top. Unlike the second, however, it’s top and bottom angle are sharper. An intriguing collection of objects.&lt;/p&gt;

&lt;p&gt;Now, I am going to tell you that these 4 images all represent the &lt;em&gt;same object&lt;/em&gt;. So, and don’t forget that you are a square in Flatland, what do we do this piece of information? Would this not be as perposterous as saying that Mr. Triangle (△) is actually the same as Miss Diamond (◇) or Sir Circle (○)? Maybe, &lt;em&gt;maybe&lt;/em&gt;, you could say that the second and third images represent the same object; Mr. Hectagon has simply decided to lie down for a nap. But &lt;em&gt;all four&lt;/em&gt;? Three of these images have 6 sides and one has 4. This simply cannot be. What object could possibly be represented by these four images?&lt;/p&gt;

&lt;p&gt;Some of you may very well have a sense of the answer, but assuredly our poor Square does not. Not yet. So, let’s give him a helping hand and add a bit more detail:&lt;/p&gt;

&lt;p&gt;&lt;img src="images/cube_collection_2.png" /&gt;&lt;/p&gt;

&lt;p&gt;Here are our four images with their foremost lines visible. At this point, the object is starting to come into focus. We are looking at various orientations of a &lt;strong&gt;cube&lt;/strong&gt; as represented in two-dimensions. Imagine trying to explain a cube to Mr. Square. Imagine trying to not just convince him that the original four images are all the same object, but to help him understand &lt;em&gt;what that object is&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;While I hope that this small thought experiment starts to suggest the difficulty of thinking about greater orders of complexity than that within which we actually live, I also understand that all of us actually live in a three-dimensional world, and so we fundamentally &lt;em&gt;can’t&lt;/em&gt; imagine being lowly squares. We can see those four images and fairly easily the single cube that each represents. We can imagine that cube and spin it in our mind’s eye into the four orientations pictured. In short, we are likely to undervalue how difficult a task poor Mr. Square has in understand this cube. So, to try and bring the point to bear with more clarity, I offer you those two aminated images:&lt;/p&gt;

&lt;div style="display:flex;align-items:center;"&gt;
  &lt;img style="width:50%;" src="images/tesseract_2.gif" /&gt;
  &lt;img style="width:50%;" src="images/tesseract_3.gif" /&gt;
&lt;/div&gt;

&lt;p&gt;These images are attempts at rendering a &lt;a href="https://en.wikipedia.org/wiki/Tesseract"&gt;tesseract&lt;/a&gt;, which is to a cube what a cube is to a square; it is the four-dimensional equivalent of a cube. I want you to study these animations, try to understand this object, try to picture it in your mind. If you follow a particular line in one of the animations, you will see at some point that it does something impossible; it crosses from behind to infront of another line.&lt;/p&gt;

&lt;p&gt;This is the central truth. Whether a square trying to understand a cube or a human trying to understand a tesseract, when something tries to reason about an object that exists in a greater degree of complexity, &lt;em&gt;paradoxes&lt;/em&gt; will start to appear. One object has both 4 sides and 6 sides; one line is both behind and infront of another.&lt;/p&gt;

&lt;h3 id="thinking-about-god"&gt;Thinking about God&lt;/h3&gt;

&lt;p&gt;Theology is, in essential form, nothing more than thinking about God. And, as I said at the beginning, I think we can draw a meaningful analogy between a square trying to think about a cube (or a cube trying to think about a tesseract) and humans theologizing about God. God is—metaphysically, existentially, definitionally—more complex than us humans. He is the Creator, we are created; He is beyond space and time, we are within it.&lt;/p&gt;

&lt;p&gt;So, given the examples above, what might we expect about the outcomes of theology? And note that I am being purposely very broad here. I am thinking of theology of any sort. We are trying to think about the nature and limits of thinking about God in general. Given the nature of God and nature of humans, what might be general characteristics of theology that we can expect? I consider this kind of meta-question similar in efficacy to the sorts of approximations we make when doing arithmetic. While I can’t determine the product of 17 and 24 immediately, I can know that the answer will be &lt;em&gt;around&lt;/em&gt; 400 (20 × 20). Knowing this can help me to avoid settling on a wrong answer, but cannot help me to determine the right answer. It is a heuristic, not a formula. Likewise, considering how our very natures and realities impinge upon our thinking can help us develop a theological heuristic that shows us certain types of theological conclusions are clearly false, even if it cannot show us that any particular theological claim is clearly true.&lt;/p&gt;

&lt;p&gt;God, within the minds of humans, is a &lt;em&gt;paradox&lt;/em&gt;, &lt;strong&gt;must be&lt;/strong&gt; a paradox. This does not mean that we are incapable of thinking meaningful thoughts about God, nor does it mean that we cannot say some predicates are false of God. It does, however, impose a much stronger limit to the things we can say of God. Although, from a different perspective, it also opens up much that we can say of God. For many predicates, God is &lt;em&gt;both&lt;/em&gt; X and not-X. Be wary of people peddling propositions that God is &lt;strong&gt;only&lt;/strong&gt; some X. Likewise, be wary of people suggesting God is &lt;em&gt;everything&lt;/em&gt;, that there is nothing stable that we can think about or interact with. Like the tesseract, God has real qualities, there are things that are true of God and things that aren’t. But, like the tesseract, when we put our minds to God, there is much that fuzzes and distorts our minds. God is the cube; we, the square.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;If you wish to peruse it, Project Gutenberg has a &lt;a href="http://www.gutenberg.org/files/201/201-h/201-h.htm"&gt;free HTML version&lt;/a&gt;. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>A Simple Tree Building Algorithm</title>
    <link rel="alternate" href="http://blog.url.com/articles/a-simple-tree-building-algorithm/"/>
    <id>http://blog.url.com/articles/a-simple-tree-building-algorithm/</id>
    <published>2017-03-04T19:00:00-05:00</published>
    <updated>2017-05-01T18:57:24-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;It is, unfortunately, not that often that I get the opportunity to devise an algorithm to solve a problem at work. Most work simply doesn’t require that kind of thinking. But I thoroughly enjoy that kind of thinking, and thus thoroughly enjoyed the most recent opportunity I had to employ it. The problem was simple (though I have simplified and abstracted it for this post as well): we have a database table of &lt;code&gt;things&lt;/code&gt;, and these &lt;code&gt;things&lt;/code&gt; have a parent-child hierarchy, and we need to display a tree of these &lt;code&gt;things&lt;/code&gt; in our UI. So, let’s dig in.&lt;/p&gt;

&lt;p&gt;First, let’s examine the basic shape of the database table. Each &lt;code&gt;thing&lt;/code&gt; has an &lt;em&gt;id&lt;/em&gt;, &lt;em&gt;name&lt;/em&gt;, and &lt;em&gt;parent_id&lt;/em&gt;, like so:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;parent_id&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;A&lt;/td&gt;
      &lt;td&gt;nil&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;B&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;C&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;D&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;E&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;F&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;G&lt;/td&gt;
      &lt;td&gt;nil&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Each row in the table gives us a “node” for our tree and tells us about that node’s parent. This means that we cannot know by looking at a single row whether or not that “node” will have any children, but we can know if that “node” has a parent and what other “node” that parent is. If we want to think of this data in Ruby, this would be an array of hashes:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="ss"&gt;id: &lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;That is the shape of the data that we are starting with, but what is the shape of the data that we want? We want a nested tree in the UI, so I think that is best represented in Ruby as a nested hash:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
              &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'E'&lt;/span&gt;
              &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
      &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'F'&lt;/span&gt;
          &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
      &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'G'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We now know where we are coming from and where we are going; the only thing left to do is to get there.&lt;/p&gt;

&lt;p&gt;I like to start with simple facts, things that I know to be true. For example, if we are starting with an array of hashes, our solution is going to need to iterate over that array. It is also a fact that any “node” in the tree can be described as one of three things: a “root”, a “leaf”, or a “branch”. Here I may be stretching the tree metaphor a bit too far, but bear with me.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A “root” is a top level object; it has children but no parent.&lt;/li&gt;
  &lt;li&gt;A “leaf” is the exact opposite; it has a parent but no children.&lt;/li&gt;
  &lt;li&gt;A “branch”, then, is simply a node that has both a parent and children.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, we said earlier that we cannot know by looking at a simple node whether or not it has children. This means that we cannot determine if a particular node is a “branch” or a “leaf” just by examining it. We &lt;em&gt;can&lt;/em&gt;, however, determine if a particular node is a “root” or not on its own.&lt;/p&gt;

&lt;p&gt;A final thing that we know is that an efficient algorithm to solve this problem will only scan the initial array once. We want to iterate over that array of hashes once and build up our nested hash as we go.&lt;/p&gt;

&lt;p&gt;We have some basic facts before us so let’s start actually trying to write some code. We need to iterate over the array of hashes, so let’s start there:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# `nodes` = the array of hashes&lt;/span&gt;
&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# some computation&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We also know that we want to get a hash out at the end, and that we will need to build that hash as we iterate over the array, so let’s initialize that hash as well:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="c1"&gt;# `nodes` = the array of hashes&lt;/span&gt;
&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# some computation&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We know that as we iterate over the &lt;code&gt;nodes&lt;/code&gt;, we need to insert each node into the &lt;code&gt;tree&lt;/code&gt;. Let’s start with a naive implementation:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="c1"&gt;# `nodes` = the array of hashes&lt;/span&gt;
&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="ss"&gt;:id&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I call this “naive” not to be condescending; it is literally where I started and I think it is a healthy place to start. Iteration is at the heart of good programming, good thinking. We know where we are going but not how quite to get there, so let’s experiment and learn as we go. Here, we start to learn something important. For, while this will turn an array of hashes into a single hash, it gets us nowhere near a nested hash. If we were to run this code, we would simply get:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Our array is now a hash, but the basic shape of the data hasn’t changed at all. Moreover, this naive approach has shown us that we really need to do something with the &lt;code&gt;parent_id&lt;/code&gt; of each node as we process it. Also, I notice a key difference between our starting data and our desired output data: our starting data focuses on the “parent” of the “parent-child” relationship (via &lt;code&gt;parent_id&lt;/code&gt;), while our output data focuses on the “child” (with the &lt;code&gt;children&lt;/code&gt; key). Making this switch will prove to be difficult, but let’s examine why.&lt;/p&gt;

&lt;p&gt;We said earlier that we can tell by looking at a single node whether or not it is a “root” or not, that is, whether or not it has a parent. This means we could build the first level of our nested hash quite simply:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="c1"&gt;# `nodes` = the array of hashes&lt;/span&gt;
&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reject&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;include?&lt;/span&gt; &lt;span class="s1"&gt;'id'&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This would produce a &lt;code&gt;tree&lt;/code&gt; with this shape:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"G"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This, at least, is &lt;em&gt;starting&lt;/em&gt; to look like our desired output. But what do we do about the possible children? We don’t know if either of these nodes has children just by looking at them; we only that a node is a child if it has a &lt;code&gt;parent_id&lt;/code&gt;. So this switch from a parent-centric perspective to a children-centric perspective is going to be difficult. In fact, spoiler warning, if we want to get the nested hash output we described initially &lt;strong&gt;and&lt;/strong&gt; only parse the array once, &lt;em&gt;we are screwed&lt;/em&gt;. We are screwed because we can’t insert a node into an arbitrary place in the nested hash.&lt;/p&gt;

&lt;p&gt;We could create an auto-vivifying hash and insert a node arbitrarily deep in the hash:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;autovivifying_tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;default_proc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;autovivifying_tree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# autovivifying_tree =&amp;gt; {1=&amp;gt;{2=&amp;gt;{4=&amp;gt;{5=&amp;gt;{}}}}}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The problem here is that we have to have the path to the nested node; we need to know that nodes ancestors. But, in our data, we can only learn the ancestor paths by parsing the whole array. This data model also fails to give us the &lt;code&gt;name&lt;/code&gt; of each node. So, what to do?&lt;/p&gt;

&lt;p&gt;At this point, I determined that the nested hash was simply going to be impossible to create by parsing the array once. Moreover, I realized that it was not necessary (or even most effective) for storing the data in the way my UI would need it. While a nested hash most directly modeled the shape of the data I needed, the directness of the model comes at the expense of efficiency and ease of use. An arbitrarily nested hash is more difficult for the UI code to parse. It would need a recursive function, which would need to check if the hash under consideration had a &lt;code&gt;children&lt;/code&gt; key, and would have to traverse the whole tree without knowing the keys (a central benefit of Hashes as a data structure). Thus, while visually the closest to a “tree”, the nested hash comes with too much baggage for our implementation. So let’s go back to the drawing board for what our output data structure could and should look like.&lt;/p&gt;

&lt;p&gt;As I turned myself back to the problem, I thought about what kind of code I would like in my UI to generate the visual tree. I would like to efficiently navigate the entire collection of &lt;code&gt;things&lt;/code&gt;, moving from the top of the hierarchy (&lt;code&gt;things&lt;/code&gt; with no parent, i.e. “roots”) thru the various middle layers (the “branches”) and down to the very bottom (the “leaves”). I want this parsing to be as direct and efficient as the parsing of the database–one pass. When you want to navigate data directly and effienctly, &lt;code&gt;Hash&lt;/code&gt;es are a great place to start. But, we have already discussed the difficulties with a nested hash, so let’s use a flat hash. The keys should be the &lt;code&gt;id&lt;/code&gt; of the &lt;code&gt;thing&lt;/code&gt;, one entry per row in the database. The values need to tell use at least two pieces of information: the &lt;code&gt;parent&lt;/code&gt; and the &lt;code&gt;children&lt;/code&gt; of that particular &lt;code&gt;thing&lt;/code&gt;. That is, we want something that would look like this:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We could navigate this data structure hierarchically with ease.&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;visit_children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;children&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:children&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:li&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:span&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:ul&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
      &lt;span class="n"&gt;safe_join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="n"&gt;visit_children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;child&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;children&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;roots&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:children&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:ul&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="n"&gt;roots&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;visit_children&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This code would create this HTML:&lt;/p&gt;

&lt;div class="highlight html"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;A&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;B&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;D&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
              &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;E&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;span&amp;gt;&lt;/span&gt;C&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;F&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;span&amp;gt;&lt;/span&gt;G&lt;span class="nt"&gt;&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Our front-end code suggests to use that this data structure would work well for our needs. So, now all we need to do is munge our array of hashes into a hash of the structure described.&lt;/p&gt;

&lt;p&gt;Let’s think through what precisely we need to happen. We need to iterate over an array of hashes. For each item/node/hash in that array, we need to store a reference in the &lt;code&gt;tree&lt;/code&gt;. For each node we also need to add that node to its parent reference in the &lt;code&gt;tree&lt;/code&gt;. This means we need to ensure that the reference to the parent &lt;em&gt;already exists&lt;/em&gt; in the &lt;code&gt;tree&lt;/code&gt;; that is, imagine a scenario where we process node 2 before node 1 (the parent of node 2). We cannot add node 2 to node 1’s &lt;code&gt;children&lt;/code&gt; if node 1 does not exist in the tree. This, however, should be sufficient for parsing our array of hashes into a hash of nodes to be consumed by our UI code. So, let’s start building it!&lt;/p&gt;

&lt;p&gt;We already know we must start with a &lt;code&gt;tree&lt;/code&gt; and iterating of the &lt;code&gt;nodes&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="c1"&gt;# ...&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, we also need to either find or create the reference to the &lt;code&gt;node&lt;/code&gt; in the &lt;code&gt;tree&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;||=&lt;/code&gt; operator is what allows us to “find or create” a reference in the &lt;code&gt;tree&lt;/code&gt; hash. If &lt;code&gt;tree[node[:id]]&lt;/code&gt; already has a value, nothing happens; but, if it doesn’t, the value is set to the empty hash &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;But we don’t just want an empty hash for the value in the &lt;code&gt;tree&lt;/code&gt;; we want to set the &lt;code&gt;parent_id&lt;/code&gt; and initialize the &lt;code&gt;children&lt;/code&gt; array (plus insert the &lt;code&gt;name&lt;/code&gt;):&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;If we were to process &lt;code&gt;nodes&lt;/code&gt; with just this code, at the end &lt;code&gt;tree&lt;/code&gt; would look like this:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"A"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"B"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"C"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"D"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"E"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"F"&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s2"&gt;"G"&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;We are close. All we need to do now is fill in the &lt;code&gt;children&lt;/code&gt; information. A first step would be to mimic what we do with &lt;code&gt;node[:id]&lt;/code&gt; in dealing with &lt;code&gt;node[:parent_id]&lt;/code&gt;, that is, “find or create” its reference in the &lt;code&gt;tree&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This has a hole, however, in its logic. Every node in &lt;code&gt;tree&lt;/code&gt; will only ever have the shape it was initialized with. This means that if we visit node 2 first, node 2’s &lt;code&gt;children&lt;/code&gt; array will never be updated to include node 4 and node 1’s reference will never have any more &lt;code&gt;chilren&lt;/code&gt; than node 2, never have a &lt;code&gt;name&lt;/code&gt;, and never have a &lt;code&gt;parent_id&lt;/code&gt; (the logic still holds even if, in this particular scenario, node 1’s parent is &lt;code&gt;nil&lt;/code&gt;). So, we need a way to update references when we gather new information (on subsequent iterations). The first thing we must do is ensure that we set &lt;code&gt;parent_id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; for every &lt;code&gt;node&lt;/code&gt; as we process it, whether that node has a reference in the &lt;code&gt;tree&lt;/code&gt; yet or not:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]].&lt;/span&gt;&lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This code ensures that &lt;code&gt;tree[node[:id]]&lt;/code&gt; &lt;em&gt;always&lt;/em&gt; has the proper &lt;code&gt;parent_id&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt;. Unfortunately, however, it also obliterates any &lt;code&gt;children&lt;/code&gt; value that may have been previously set. So, let’s remove &lt;code&gt;children&lt;/code&gt; from our reference &lt;code&gt;default&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]].&lt;/span&gt;&lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This now at least ensures that if I visit a parent node &lt;em&gt;after&lt;/em&gt; I have visited one of its children, the parent’s &lt;code&gt;children&lt;/code&gt; array will still be intact. It does not, however, ensure that the &lt;code&gt;children&lt;/code&gt; array is properly updated. Recall that in our test data node 1 has two children (2 and 3). This code will &lt;em&gt;never&lt;/em&gt; give us a reference node with more than one item in the &lt;code&gt;children&lt;/code&gt; array. Moreover, it doesn’t help us, when I visit a parent node first and one of its children later, to ensure that the reference to the parent node is updated while processing the child node to have that child node in its &lt;code&gt;children&lt;/code&gt; array. What we need is to treat the parent node as intelligently as the current node on each processing cycle:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;current_default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;current_default&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;]].&lt;/span&gt;&lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;current_default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;parent_default&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="n"&gt;parent_default&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent_default&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;
  &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;]][&lt;/span&gt;&lt;span class="ss"&gt;:children&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This code can now handle multiple children and cares not for which node (parent or child) we visit first. This code, when processing our array of nodes, would produce:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kp"&gt;nil&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'A'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'B'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'C'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'D'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'E'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'F'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
  &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;name: &lt;/span&gt;&lt;span class="s1"&gt;'G'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;parent_id: &lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;children: &lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Huzzah! This is what we have been looking for! Pat yourself on the back, we’ve finally made our way to our goal. I hope this long (and sometimes circuitous) journey has helped you. I’ve tried to walk through the ups and downs, the missteps and recalibrations, that my actual process resembled. I have also tried to write code that is readable and understandable before all else. This code, however, is not the code that I actually ended up with or used. I used a few more elegant Ruby-isms to accomplish my goal. So, I leave you with my actual implementation, without a walk-thru, as a bit of mental homework. If you can understand how and why this code accomplishes the same goals as the above code, you will have learned a good deal about Ruby. And, I promise to write up an explanation at some point as well ;)&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;tree&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
  &lt;span class="n"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;tree&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;siblings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:children&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;current&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:parent_id&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;siblings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:id&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

</content>
  </entry>
  <entry>
    <title>Communication is Hard</title>
    <link rel="alternate" href="http://blog.url.com/articles/communication-is-hard/"/>
    <id>http://blog.url.com/articles/communication-is-hard/</id>
    <published>2017-02-20T19:00:00-05:00</published>
    <updated>2017-05-01T20:09:29-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;Communication is hard. I have found myself contemplating this truth a lot lately. At work it has become a kind of mantra on my team. Have you ever taken the proverbial step back to consider what all is involved in communicating with another human being? We have these thoughts, often messy, squishy, and loosely formed, which we attempt to shuttle from our mind into someone else’s mind (let alone a group of other minds). In order to get these nearly amorphous ideas out of our heads and into another, we package them up in words. We quiver these small muscles in our throats or we engage our wrists and fingers to hammer out some collection of runes or we sometimes even drag our hands across tree pulp scrawling out an even cruder form of these same symbols. There is no inherent connection between the etherial thoughts in our minds and these vibrations in the air or scribbles on a surface; there is nothing that guarantees this representation, whatever physical form it takes, properly encodes our thoughts. In fact, it is impossible for me to imagine that words could ever &lt;em&gt;fully&lt;/em&gt; encode thought. But that is only half of it.&lt;/p&gt;

&lt;p&gt;After we squeeze these atomless, formless ideas into some physical form, we send them out on a hope and a prayer toward the other mind, the other person. And they fly on what must be a hope and prayer as we no longer have any control over them; it is the chick out of the nest, the child off to college. Our words, these gangly bodies for our pure thoughts, now belong to that other person. He or she receives them, whether by ear or eye, takes them in, and must now begin the delicate, intricate task of decoding them. Their mind, like ours, has little use for mere words; it requires ideas in idea-form. So it attempts to perfectly trace our steps in reverse, to decode what we encoded. And can we really ever blame them for failing to achieve perfection? Perfect listening is a fool’s errand; perfect reading is hopeless. And yet, in the face of this impossible task, against these staggering odds, each and every day, billions of people in thousands of languages meaningfully communicate. To my mind, it is one of the most mesmerizing miracles this side of eternity.&lt;/p&gt;

&lt;p&gt;It saddens me, however, that so many people so often add to the burden, make the task that much more difficult, by shirking from communicating openly and honestly. Whether from shame or awkwardness, a twisted sense of propriety or an overly-tuned care for perfection, people consistently mince words, avoid topics, stop at smalltalk, or simply avoid the impossibly delicate dance of true and deep communication altogether. And, on the other side, how many people lazily and sloppily unpack the carefully considered package of meaning sent their way by a caring friend? Communication is hard, so why make it harder with slovenly listening or cheap talk? I would much rather slow down, consider well, package my thoughts carefully, listen empathetically, and dance the intricacies of meaningful communication.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Thoughts on a Birthday</title>
    <link rel="alternate" href="http://blog.url.com/articles/thoughts-on-a-birthday/"/>
    <id>http://blog.url.com/articles/thoughts-on-a-birthday/</id>
    <published>2017-01-18T19:00:00-05:00</published>
    <updated>2017-05-01T20:07:58-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I am 26 and as this, my 26th year, comes to a close I see that I have learned a lot.&lt;/p&gt;

&lt;p&gt;I have learned how to truly cry–to give a thought, image, or emotion the space to breathe and grow and bubble up into my chest, and then to let that physical sensation extend and deepen as it struggles to find physical release in the form of tears, whether a slow sole tear or a mighty torrent.&lt;/p&gt;

&lt;p&gt;I have learned the dedication needed for consistent mental and emotional health–that health, true health, requires asking for help, leaning on others, recognizing and accepting fault and responsibility, and living and communicating openly and honestly.&lt;/p&gt;

&lt;p&gt;I have also learned that I can and do struggle with depression, with the ennui that seems to settle into your bones. Blessedly, however, I have also learned that there is a beauty within depression–that seeing, accepting, and being affected by the true brokenness of the world and the people in it is a signal of a depth of spirit that is a blessing.&lt;/p&gt;

&lt;p&gt;I have learned that not all stories play out like the stories our culture or our minds tell us; some stories end abruptly, in some stories the “bad guy” “wins”, and some barely look like stories at all.&lt;/p&gt;

&lt;p&gt;I have seen and felt the deep human desire to be truly seen and truly accepted, and I have seen and experienced the near-universal drive to receive this without ever giving it to others first or ever.&lt;/p&gt;

&lt;p&gt;Suffice it to say, it has been quite the year.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Evidentiary Arguments in 5th century prose</title>
    <link rel="alternate" href="http://blog.url.com/essays/empiricism-in-5th-century-prose/"/>
    <id>http://blog.url.com/essays/empiricism-in-5th-century-prose/</id>
    <published>2016-12-17T19:00:00-05:00</published>
    <updated>2017-05-03T00:16:18-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Ruminations on a Credal Logic</title>
    <link rel="alternate" href="http://blog.url.com/articles/ruminations-on-a-credal-logic/"/>
    <id>http://blog.url.com/articles/ruminations-on-a-credal-logic/</id>
    <published>2016-09-19T20:00:00-04:00</published>
    <updated>2017-05-01T20:06:20-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;How do we understand our faith? More precisely, how do we reason deeply and precisely as faith-adherents? Or, perhaps most precisely, how might our faith shape our reason? Do we have a faith seeking the light of understanding, or a faith seeking out understanding with its light?&lt;/p&gt;

&lt;h2 id="a-logical-primer"&gt;0: A Logical Primer&lt;/h2&gt;

&lt;h3 id="on-the-law-of-non-contradiction"&gt;0.1: On the Law of Non-Contradiction&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;The most certain of all basic principles is that contradictory propositions are not true simultaneously. (Aristotle, &lt;em&gt;Metaphysics&lt;/em&gt; 1011b13-14)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the bedrocks of modern rationality, of contemporary logic, is the so-called &lt;a href="https://en.wikipedia.org/wiki/Law_of_noncontradiction"&gt;Law of Non-Contradiction&lt;/a&gt; (LNC), quoted above. A contradiction, expressed symbolically, is simply &lt;code&gt;P &amp;amp; ~P&lt;/code&gt;; or, expressed logically, “the proposition &lt;code&gt;P&lt;/code&gt; and its contradiction &lt;code&gt;not-P&lt;/code&gt;”. This law of rationality states that no such contradictions can or do exist; that is, symbolically, &lt;code&gt;~(P &amp;amp; ~P)&lt;/code&gt;, or logically, “it is not the case that both the proposition &lt;code&gt;P&lt;/code&gt; and its contradiction &lt;code&gt;not-P&lt;/code&gt; are both true (at the same time in the same way)”. The reason that this proposition &lt;em&gt;must be&lt;/em&gt; true, for the system of logic, is that &lt;em&gt;any&lt;/em&gt; contradiction allows for &lt;em&gt;any&lt;/em&gt; proposition to be logically deduced. Let’s quickly run through a logical argument that begins from a contradiction:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;1. All X is Y and not all X is Y            (P &amp;amp; ~P)
2. All X is Y                               (P)
    [by Conjunctive Elimination]
3. Not all X is Y                           (~P)
    [by Conjunctive Elimination]
4. All X is Y or {something impossible}     (P v Q)
    [by Disjunctive Introduction]
5. {something impossible}                   (Q)
    [by Disjunctive Syllogism]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Given the logical rules for conjunctions (“and”/&lt;code&gt;&amp;amp;&lt;/code&gt;) and disjunctions (“or”/&lt;code&gt;v&lt;/code&gt;), any proposition (&lt;code&gt;Q&lt;/code&gt;) can be logically deduced from a contradiction (&lt;code&gt;P &amp;amp; ~P&lt;/code&gt;). This is the so-called “&lt;a href="https://en.wikipedia.org/wiki/Principle_of_explosion"&gt;Principle of Explosion&lt;/a&gt;” (or “ECQ”, from its early Latin form &lt;em&gt;ex contradictione (sequitur) quodlibet&lt;/em&gt;).&lt;/p&gt;

&lt;h3 id="on-the-law-of-the-excluded-middle"&gt;0.2: On the Law of the Excluded Middle&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is necessary for the affirmation or the negation to be true or false. (Aristotle, &lt;em&gt;On Interpretation&lt;/em&gt;, 9.18a28-29)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A corollary to the Law of Non-Contradiction is the so-called &lt;a href="https://en.wikipedia.org/wiki/Law_of_excluded_middle"&gt;Law of the Excluded Middle&lt;/a&gt; (LEM). Symbolically, it is represented as the disjunction &lt;code&gt;P v ~P&lt;/code&gt;, logically, we could express it as “it is the case that either the proposition &lt;code&gt;P&lt;/code&gt; is true or &lt;code&gt;not-P&lt;/code&gt; is true”. I call it a corollary of the LNC because we can actually deduce its truth from the LNC. Consider: if it is true that &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;not-P&lt;/code&gt; cannot both be true, then it is false that both &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;not-P&lt;/code&gt; are both true. In order for a conjunction to be false, one of its conjucts must be false. Thus, either &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;not-P&lt;/code&gt; must be false. Moreover, if &lt;code&gt;P&lt;/code&gt; is false, then &lt;code&gt;not-P&lt;/code&gt; is true; and, if &lt;code&gt;not-P&lt;/code&gt; is false, then &lt;code&gt;P&lt;/code&gt; is true. Thus, either &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;not-P&lt;/code&gt; must be true. Symbolically, we might express that deduction as:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;1. ~(P &amp;amp; ~P) =&amp;gt; true
2. P &amp;amp; ~P =&amp;gt; false
3. (P =&amp;gt; false) v (~P =&amp;gt; false)
4. (~P =&amp;gt; true) v (P =&amp;gt; true)
5. P v ~P
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This principle of rational thought is called the “excluded middle” because it means that there is no middle ground between truth and falsity.&lt;/p&gt;

&lt;h3 id="on-definite-descriptions"&gt;0.3: On Definite Descriptions&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Denoting phrases never have any meaning in themselves, but every proposition in whose verbal expression they occur has a meaning. (Russell, “On Denoting”)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The LNC and the LEM are two of the three so-called “&lt;a href="https://en.wikipedia.org/wiki/Law_of_thought"&gt;Laws of Thought&lt;/a&gt;” (the third (first really) is the &lt;a href="https://en.wikipedia.org/wiki/Law_of_identity"&gt;Law of Identity&lt;/a&gt; (&lt;code&gt;A = A&lt;/code&gt;)). Whether we know it or not, whether we think about it or not, these principles undergird all of our thought. Yet even these foundational principles of rational thought are not without complications. The LEM, for example, was often criticized for failing to properly or fully handle propositions about non-existent subjects. Consider the proposition “All unicorns have horns”. The LEM compels us to state that either “All unicorns have horns” is true &lt;em&gt;or&lt;/em&gt; “All unicorns do not have horns” is true; yet, to state that either of these propositions is true would seem to imply that “unicorns” exist. One of the most famous and influential solutions to this problem is Bertrand Russell’s theory of &lt;a href="https://en.wikipedia.org/wiki/Definite_description"&gt;Definite Descriptions&lt;/a&gt; (“On Denoting”, 1905). In simplified form, Russell suggests that propositions of this sort (e.g. denoting propositions) should be considered logically as containing an implicit existential proposition. We might restate our proposition as “There exists at least one thing such that it is called ‘unicorn’ and it has a horn”. This is what we are really logically implying, in Russell’s view, when we assert that “All unicorns have horns”; that is, we assume the existence of our subject and then define it by describing it.&lt;/p&gt;

&lt;h2 id="credal-propositions"&gt;1: Credal Propositions&lt;/h2&gt;

&lt;h3 id="faith-reason-and-truth-defined"&gt;1.1: Faith, Reason, and Truth Defined&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;What does Jerusalem have to do with Athens, the Church with the Academy, the Christian with the heretic? Our principles come from the Porch of Solomon. (Tertullian, &lt;em&gt;Prescriptions against Heretics&lt;/em&gt; 7)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The question “What does Jerusalem have to do with Athens” is often abstracted to the form “What does &lt;em&gt;faith&lt;/em&gt; have to do with &lt;em&gt;reason&lt;/em&gt;”? But what do we mean by these terms? I believe that for many reason concerns itself with the realm of justified (or justifiable) belief and faith that of non-justified (or non-justifiable) belief. Both are, however, concerned primarily with &lt;em&gt;belief&lt;/em&gt;, and thus with propositions. Moreover, for many, truth equates to &lt;a href="https://en.wikipedia.org/wiki/Justified_true_belief"&gt;justified true belief&lt;/a&gt;. However, insofar as truth is defined as justified true belief, faith is excluded from truth. And yet it is a foundational proposition of our faith that God is the source of all truth, is Truth itself. This is the first gap between a common understanding of faith, reason, and truth.&lt;/p&gt;

&lt;h3 id="on-paradoxical-propositions-of-our-faith"&gt;1.2: On Paradoxical Propositions of our Faith&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;No sooner do I conceive of the One than I am illumined by the splendour of the Three; no sooner do I distinguish Three than I am carried back into the One. When I think of any of the Three, I think of Him as the Whole, and my eyes are filled, and the greater part of what I am thinking escapes me. I cannot grasp the greatness of that One so as to attribute a greater greatness to the rest. When I contemplate the Three together, I see but one torch, and cannot divide or measure out the undivided light (Gregory of Nazianzus, &lt;em&gt;Orations&lt;/em&gt; 40.41)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the central propositions of our Christian faith is the Trinity; God is three and God is one. A central proposition concerning the nature of Jesus Christ is the Incarnation; Jesus is God and Jesus is man. These two foundations of the Christian faith are, in simplest form, paradoxes. Note, I call them “paradoxes” and not “contradictions”, for, where they “contradictions”, they would conflict with the LNC and stand in opposition to the foundations of human rationality. Indeed, there has been much effort of the thousands of years of Christian thought to show with clarity and adroitness that these and all articles of Christian faith are indeed rational. We need look no further than the work of the &lt;a href="https://en.wikipedia.org/wiki/Cappadocian_Fathers"&gt;Cappadocian Fathers&lt;/a&gt; in articulating the Trinity with respect to “substance” (&lt;em&gt;ousia&lt;/em&gt;) and “persons” (&lt;em&gt;hypostaseis&lt;/em&gt;). Propositions of the Christian faith of this sort may &lt;em&gt;appear&lt;/em&gt; to be contradictions, but they are not; they are merely paradoxes, mysteries of the faith (&lt;em&gt;mysteria fidei&lt;/em&gt;).&lt;/p&gt;

&lt;h3 id="a-cartesian-re-assessment"&gt;1.3: A Cartesian Re-Assessment&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Faith seeking understanding (St. Anselm)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In René Descartes’ &lt;em&gt;Meditations on First Philosophy&lt;/em&gt;, the philosopher begins by discarding all beliefs, all propositions, that he does not know for certain, and then attempts to build back up a system of beliefs by working systematically from what he can know for certain (&lt;em&gt;cogito ergo sum&lt;/em&gt;). One consequence of this methodical skepticism is that it immediately highlights the hierarchy of our beliefs. It separates the axioms from the theorems.&lt;/p&gt;

&lt;p&gt;It seems to me that with respect to articles of the Christian faith, the principles of reason are treated as axiomatic. We take pains to demonstrate how the mysteries of our faith adhere to the LNC, we struggle to articulate our terms and clarify our meaning, we shine the light of logic on these dark mysteries. And indeed, why should we not? The system of logic reflects the ordered, rational nature of God, does it not? Our minds are made in the image of God, are they not? Our faith should seek understanding in the light of logic, should it not?&lt;/p&gt;

&lt;h2 id="a-christian-aetiology-of-epistemology"&gt;2: A Christian Aetiology of Epistemology&lt;/h2&gt;

&lt;h3 id="on-the-tree-of-the-knowledge-of-good-and-evil"&gt;2.1: On the Tree of the Knowledge of Good and Evil&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Behold, the man has become like one of us in knowing good and evil. Now, lest he reach out his hand and take also of the tree of life and eat, and live forever. (&lt;em&gt;Genesis&lt;/em&gt; 3:22)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Epistemology is at the center of the biblical narrative of the Fall. At the heart of Eden lie two trees: the Tree of Life and the Tree of the Knowledge of Good and Evil (Gen. 2:9). The first command God gives his human creation is “You may surely eat of every tree of the garden, but of the tree of the knowledge of good and evil you shall not eat, for in the day that you eat of it you shall surely die” (Gen. 2:16b-17). And it is, of course, this Tree of the Knowledge of Good and Evil that Eve and Adam eat from, and “[their] eyes were both opened” (Gen. 3:7a).&lt;/p&gt;

&lt;p&gt;Now, the story of the Fall is rich with meaning, and there is much to be said and learned from it; however, I fear that the epistemic implications of this narrative are too often underconsidered. Whatever “knowledge of good and evil” might mean–experiential knowledge, a merism for knowledge generically, moral knowledge, etc–it is epistemic definitionally. Before the Fall the nature of knowledge, of reason, was in one state; and, after the Fall, it was in another. I believe this simply must be true, even if the delta is as simple as pre-Fall humanity did not have propositional knowledge of the concepts “good” and “evil”, and post-Fall they did. The Fall, among its many consequences, represents a state change in human knowing.&lt;/p&gt;

&lt;p&gt;Though we cannot know with any confidence what the epistemic state change was, I offer the following as my interpretation.&lt;/p&gt;

&lt;h3 id="on-binary-thinking"&gt;2.2: On Binary Thinking&lt;/h3&gt;

&lt;p&gt;I have always been fascinated by the fact that two of the most foundational axioms of logic concern contradictions. While the LNC and the LEM certainly strike the mind as intuitive, it is difficult to articulate a reason why these two propositions &lt;em&gt;must be&lt;/em&gt; foundational for thought. What is it about contradictions that proves so intuitively foundational to us? Well, for one, contradictions are logically-exhaustive binaries. If we think in terms of sets, &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;not-S&lt;/code&gt;, regardless of the definition of &lt;code&gt;S&lt;/code&gt;, would account for any and all &lt;code&gt;x&lt;/code&gt;. Building a logical system atop logically-exhaustive entities must be more effective and efficient than the alternative (behold! another logically-exhaustive binary). In addition, contradictions make use of nothing but negation, a primitive logical operator in basically all propositional logical systems. Few movements of the mind would appear to come as naturally to the human person as negation. Yet again, however, we might ask, why? Why is negation a movement of the mind at all? Why is it so basic? Why are we seemingly drawn to the contradictions negation so easily creates?&lt;/p&gt;

&lt;p&gt;Well, I’m inclined to think that some part of the answer lies in the Genesis account of the Fall. To have eaten of the Tree of the Knowledge of Good and Evil was to ground “knowledge” upon binaries, of the sort “good and evil”. To have eaten of the Tree of the Knowledge of Good and Evil was to have introduced analytical thinking (in the etymological sense, “thinking that separates”). To have eaten of the Tree of the Knowledge of Good and Evil was to have made negation a primitive logical operation (“good and evil” logically equaling “good and not-good”).&lt;/p&gt;

&lt;h2 id="a-credal-logic"&gt;3: A Credal Logic&lt;/h2&gt;

&lt;p&gt;Now, none of this is to suggest that analytical thinking, negation, or binaries are “bad” or “wrong” or even “inferior” to anything. They are a necessary aspect of epistemology, of logic. However, this particular aetiology of epistemology, for me at least, opens up another gap between faith and reason. Faith is built on top of propositions of the (simplified) sort: &lt;code&gt;3 = 1&lt;/code&gt; or &lt;code&gt;100 + 100 = 100&lt;/code&gt;; reason is built on top of propositions of the sort: &lt;code&gt;(3 = 3)&lt;/code&gt;, and &lt;code&gt;(1 = 1)&lt;/code&gt;, and &lt;code&gt;(3 ~= 1)&lt;/code&gt;. No matter what we do, there will always between tension between faith and reason; certain credal propositions of faith will always &lt;em&gt;at best&lt;/em&gt; be paradoxes in the light of reason. The question, to my mind, then becomes: in which direction is that tension resolved? Put another way, what does it mean for faith to seek understanding? Do we seek to understand our faith in the light of logical reason, or do we seek to understand our logical reason in light of our faith? I believe there is great value to be found in the latter, but what does that even look like?&lt;/p&gt;

&lt;p&gt;First, let our credal logic begin from paradox and end in paradox. Instead of looking to resolve the paradoxes in the mysteries of our faith, to find refuge by demonstrating the ways, means, and degrees to which they are not contradictions, let us instead look to explore the paradoxes, their shape, nature, and edges.&lt;/p&gt;

&lt;h3 id="and-the-trinity"&gt;3.1: 1 = 0.9999… and the Trinity&lt;/h3&gt;

&lt;p&gt;In an overly-simplified mathematical form, we might represent the propositional content of the Trinity as the paradoxical &lt;code&gt;3 = 1&lt;/code&gt;. This is a paradox of identity. In looking to explore this paradox, we might turn to a particular mathematical paradox of identity: &lt;code&gt;1 = 0.9999...&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id="section"&gt;3.1.1: 1 = 0.9999…&lt;/h4&gt;

&lt;p&gt;To begin, let me prove this identity statement:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Define the infinitely-repeating decimal as a variable&lt;/span&gt;
k &lt;span class="o"&gt;=&lt;/span&gt; 0.9999...
&lt;span class="c"&gt;# Multiply both sides of the equation by 10&lt;/span&gt;
10k &lt;span class="o"&gt;=&lt;/span&gt; 9.9999...
&lt;span class="c"&gt;# Subtract the larger portions by the smaller portions&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;10k - k&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;9.9999... - 0.9999...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Since the infinitely-repeating decimals are both infinitely long,&lt;/span&gt;
&lt;span class="c"&gt;# subtraction cancels them out&lt;/span&gt;
9k &lt;span class="o"&gt;=&lt;/span&gt; 9
&lt;span class="c"&gt;# Divide both sides of the equation by 9&lt;/span&gt;
k &lt;span class="o"&gt;=&lt;/span&gt; 1
&lt;span class="c"&gt;# Replace k with our original identity&lt;/span&gt;
1 &lt;span class="o"&gt;=&lt;/span&gt; 0.9999...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, this proof may perhaps feel a bit fishy to you; you may think that we are mathematically cheating somewhere, but I can promise you that every single step is totally valid. And if every step is totally valid, then the conclusion is valid. But how can this be and what does this mean?&lt;/p&gt;

&lt;p&gt;This “problem”, this seeming incongruity, arises because we have a hard time grappling with infinity. To put it another way, we underestimate the weight of that ellipsis. So let’s dig into that ellipsis a bit. What does &lt;code&gt;0.9999...&lt;/code&gt; really mean, really represent? Well, we all remember from elementary school that decimals can also be represented by fractions, so let’s try to represent this decimal by a fraction. Unfortunately, there is no simple fraction to represent this number (like &lt;code&gt;0.3333...&lt;/code&gt; being representable by \(\frac{1}{3}\)). However, we can break this decimal down. We know that &lt;code&gt;0.9&lt;/code&gt; is simply \(\frac{9}{10}\), and &lt;code&gt;0.09&lt;/code&gt; is \(\frac{9}{100}\), and &lt;code&gt;0.009&lt;/code&gt; is \(\frac{9}{1000}\) and so on. We also know that &lt;code&gt;0.9 + 0.09 + 0.009 = 0.999&lt;/code&gt;. So, we could represent &lt;code&gt;0.9999...&lt;/code&gt; fractionally as:&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\frac{9}{10} + \frac{9}{100} + \frac{9}{1000} + \frac{9}{10000} + \ldots&lt;/script&gt;

&lt;p&gt;In mathematics, this is called an &lt;a href="http://www.waldron-math.com/BCCalculus/ClassNotes/Ch9/9.1_Infinite%20Series.pdf"&gt;&lt;em&gt;infinite sum&lt;/em&gt;&lt;/a&gt; or an &lt;em&gt;infinite series&lt;/em&gt;; we are adding terms together to infinity. If you recall from your high school math class, you can represent an infinite sum with what is called &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Summation#Capital-sigma_notation"&gt;sigma notation&lt;/a&gt;&lt;/strong&gt;, and our infinite sum above can be represented as:&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\sum_{n=1}^{\infty} \frac{9}{10^n}&lt;/script&gt;

&lt;p&gt;This is simply a more concise way of writing the larger sum of the fractions above.&lt;/p&gt;

&lt;p&gt;Infinite sums are truly fascinating, and I hope to write more about them in the future, but for now I want to focus on one characteristic in particular. All infinite sums fit into one of two categories: &lt;em&gt;convergent&lt;/em&gt; or &lt;em&gt;divergent&lt;/em&gt;. Now, these are math-jargon terms that mean relatively simple things. An infinite sum is &lt;em&gt;convergent&lt;/em&gt; if it converges on a finite number. The language you might remember from your calculus class is that the &lt;em&gt;limit&lt;/em&gt; of the infinite sum &lt;em&gt;approaches&lt;/em&gt; a finite number. So, a &lt;em&gt;convergent infinite sum&lt;/em&gt; is an infinity that touches the finite. In contrast, a &lt;em&gt;divergent infinite sum&lt;/em&gt; is one that has no limit, one that grows to infinity. A stock example is&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\sum_{n=1}^{\infty} \frac{1}{n}&lt;/script&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;1 + \frac{1}{2} + \frac{1}{3} + \frac{1}{4} + \ldots&lt;/script&gt;

&lt;p&gt;This is an infinite sum that approaches infinity, that is, it &lt;em&gt;diverges&lt;/em&gt;, it does not have a finite limit, it is unbounded.&lt;/p&gt;

&lt;p&gt;Returning to our infinite sum, we have enough context now to see that saying &lt;code&gt;1 = 0.9999...&lt;/code&gt; is really just one way of saying that the summation of \(\frac{9}{10^n}\) as &lt;code&gt;n&lt;/code&gt; goes from 1 to infinity is a convergent infinite sum that converges on 1.&lt;/p&gt;

&lt;h4 id="on-infinity-touching-the-finite"&gt;3.1.2: On Infinity touching the Finite&lt;/h4&gt;

&lt;p&gt;Paradoxes abound when the infinite collides with the finite. On the one hand, it is quite clear that &lt;code&gt;1&lt;/code&gt; &lt;em&gt;does not equal&lt;/em&gt; &lt;code&gt;0.9999...&lt;/code&gt; for the simple reason that &lt;code&gt;1&lt;/code&gt; is a finite integer and &lt;code&gt;0.9999...&lt;/code&gt; is an infinite series. If &lt;em&gt;equality&lt;/em&gt; is &lt;em&gt;categorical identity&lt;/em&gt;, then &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0.9999...&lt;/code&gt; are not equal. On the other hand, this whole post has shown that &lt;code&gt;1&lt;/code&gt; &lt;em&gt;does equal&lt;/em&gt; &lt;code&gt;0.9999...&lt;/code&gt;. If &lt;em&gt;equality&lt;/em&gt; is &lt;em&gt;referrential identity&lt;/em&gt;, then &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0.9999...&lt;/code&gt; are equal. Now, note that I call this a paradox and not an antinomy. I want to define these two terms clearly and distinguish them.&lt;/p&gt;

&lt;p&gt;In my parlance, a &lt;strong&gt;paradox&lt;/strong&gt; is a &lt;em&gt;seeming&lt;/em&gt; contradiction, while an &lt;strong&gt;antinomy&lt;/strong&gt; is an &lt;em&gt;actual&lt;/em&gt; contradiction; that is, a paradox is resolvable and an antinomy is not. It is important, however, to note that resolving a paradox &lt;em&gt;does not&lt;/em&gt; mean that one side “wins” and the other “loses”, that one proposition is “right” and the other is “wrong”; instead, it means that we can rationally make sense of the difference between the two propositions. This is why I used the if-then statements above. It is not that one of the propositions is “right” or “wrong”, it is that we can enumerate the conditions under which each one would be “right” and the other “wrong”. An antinomy does not submit itself to such enumeration; we cannot articulate the conditions under which one side is “right” and the other is “wrong”. So, if I were to abstract out my definitions of &lt;em&gt;paradoxes&lt;/em&gt; and &lt;em&gt;antinomies&lt;/em&gt;, I would describe them thusly:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A paradox is composed of a proposition (&lt;code&gt;P&lt;/code&gt;) and its negation (&lt;code&gt;not-P&lt;/code&gt;) such that the conditionals “if &lt;code&gt;conditions for P&lt;/code&gt;, then &lt;code&gt;P&lt;/code&gt;” and “if &lt;code&gt;conditions for not-P&lt;/code&gt;, then &lt;code&gt;not-P&lt;/code&gt;” are both true, and thus the conjunction “if &lt;code&gt;conditions for P&lt;/code&gt;, then &lt;code&gt;P&lt;/code&gt; and if &lt;code&gt;conditions for not-P&lt;/code&gt;, then &lt;code&gt;not-P&lt;/code&gt;” is also true.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;An antinomy is composed of a proposition (&lt;code&gt;P&lt;/code&gt;) and its negation (&lt;code&gt;not-P&lt;/code&gt;) such that there are no conditions for &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;not-P&lt;/code&gt; and the conjunction “&lt;code&gt;P&lt;/code&gt; and &lt;code&gt;not-P&lt;/code&gt;” is true.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After exploring a convergent infinite sums, we have a clearer understanding of identity paradoxes like &lt;code&gt;1 = 0.9999... and 1 != 0.9999...&lt;/code&gt;. If we express that proposition in the form of the paradox explained above, we would express that proposition as “if equality means referential indentiy, then 1 = 0.9999… and if equality means categorical identity, then 1 != 0.9999…”.&lt;/p&gt;

&lt;h4 id="section-1"&gt;3.1.3: 3 = 1&lt;/h4&gt;

&lt;p&gt;We could now return to the Trinity and see that the orthodox articulation of this article of faith maps well onto this understanding of the shape of an identity paradox. We might recast the Cappadocian Fathers’ articulation of the Trinity as a proposition in the form: “if identity is defined by essence, then God is one and if identity is defined by person, then God is three”.&lt;/p&gt;

&lt;h4 id="on-denotation"&gt;3.1.4: On Denotation&lt;/h4&gt;

&lt;p&gt;One consequence of this approach to paradoxical identity statements is an analytical approach similar to Russell’s definite descriptions. Where definite descriptions analyze the subject of a proposition into an existential proposition, this method analyzes the verb of a proposition into a meaning-centric conditional.&lt;/p&gt;

&lt;h3 id="wave-particle-duality-and-the-incarnation"&gt;3.2: Wave-Particle Duality and the Incarnation&lt;/h3&gt;

&lt;p&gt;For now, how about we leave this as an exercise for the reader? ;)&lt;/p&gt;

&lt;h2 id="ruminating"&gt;4: Ruminating&lt;/h2&gt;

&lt;p&gt;I cannot help but to feel that there is a value in pursuing a “credal logic”, in exploring the myriad ways that the propositions undergirding our faith illuminate ways of thinking that deepen “standard logic”. Moreover, it seems to me to be the case that these ways of thinking found in and through credal propositions align profoundly with various “secular” rationalities. All truth is indeed God’s truth. Finally, I am convinced that pushing against the boundaries of binary thinking is healthy, not only for the Christian, but for the human.&lt;/p&gt;

&lt;p&gt;However, I believe that in one respect the Christian has an opportunity the non-Christian does not. The non-Christian, it seems to me, can never move beyond the boundaries of binary thinking and retain “rational” thinking; they can push but never break. The Christian, however, may very well be able to be “rational” without binary thinking. Or, to put it more concretely, it might simply be the case that God is three and one, that God is a contradiction, that Christ is a contradiction. It might be the case that when the infinity that is the divine intersects the finite that is this reality, contradictions arise (and not mere paradoxes). And, it might be the case that through faith, through revelation, we have the ability to think “rationally” with a credal logic grounded on contradictions. It might be the case…&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>1 = 0.9999...</title>
    <link rel="alternate" href="http://blog.url.com/articles/1-0-9999/"/>
    <id>http://blog.url.com/articles/1-0-9999/</id>
    <published>2016-08-31T20:32:00-04:00</published>
    <updated>2017-05-01T18:55:59-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I saw a wonderful video recently on an odd fact in mathematics:&lt;/p&gt;

&lt;p&gt;&lt;a title="9.999... really is equal to 10" href="http://www.youtube.com/watch?v=SDtFBSjNmm0"&gt;&lt;img alt="9.999... really is equal to 10 -- Mathologer" src="http://img.youtube.com/vi/SDtFBSjNmm0/0.jpg" /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the video (from a channel I would heartily recommend), the presenter offers a proof that &lt;code&gt;10 = 9.9999...&lt;/code&gt;. Here the ellipsis is quite important, as it communicates that the &lt;code&gt;9&lt;/code&gt;s continue on &lt;em&gt;forever&lt;/em&gt;, that is, to infinity. So, &lt;code&gt;9.9&lt;/code&gt; followed by an infinite number of &lt;code&gt;9&lt;/code&gt;s fully and simply equals &lt;code&gt;10&lt;/code&gt;. I want to explore the proof for this fact and then move on to explore how this example of an infinity touching the finite might elucidate our understanding of paradoxes.&lt;/p&gt;

&lt;p&gt;So, the video is concerned with &lt;code&gt;10 = 9.9999...&lt;/code&gt;, but I want to take it down a notch and think about &lt;code&gt;1 = 0.9999...&lt;/code&gt;. Borrowing the proof from the video, we can show that this identity statement is true relatively simply:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Define the infinitely-repeating decimal as a variable&lt;/span&gt;
k &lt;span class="o"&gt;=&lt;/span&gt; 0.9999...
&lt;span class="c"&gt;# Multiply both sides of the equation by 10&lt;/span&gt;
10k &lt;span class="o"&gt;=&lt;/span&gt; 9.9999...
&lt;span class="c"&gt;# Subtract the larger portions by the smaller portions&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;10k - k&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;9.9999... - 0.9999...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c"&gt;# Since the infinitely-repeating decimals are both infinitely long,&lt;/span&gt;
&lt;span class="c"&gt;# subtraction cancels them out&lt;/span&gt;
9k &lt;span class="o"&gt;=&lt;/span&gt; 9
&lt;span class="c"&gt;# Divide both sides of the equation by 9&lt;/span&gt;
k &lt;span class="o"&gt;=&lt;/span&gt; 1
&lt;span class="c"&gt;# Replace k with our original identity&lt;/span&gt;
1 &lt;span class="o"&gt;=&lt;/span&gt; 0.9999...
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, this proof may perhaps feel a bit fishy to you; you may think that we are mathematically cheating somewhere, but I can promise you that every single step is totally valid. And if every step is totally valid, then the conclusion is valid. But how can this be and what does this mean?&lt;/p&gt;

&lt;p&gt;This “problem”, this seeming incongruity, arises because we have a hard time grappling with infinity. To put it another way, we underestimate the weight of that ellipsis. So let’s dig into that ellipsis a bit. What does &lt;code&gt;0.9999...&lt;/code&gt; really mean, really represent? Well, we all remember from elementary school that decimals can also be represented by fractions, so let’s try to represent this decimal by a fraction. Unfortunately, there is no simple fraction to represent this number (like &lt;code&gt;0.3333...&lt;/code&gt; being representable by \(\frac{1}{3}\)). However, we can break this decimal down. We know that &lt;code&gt;0.9&lt;/code&gt; is simply \(\frac{9}{10}\), and &lt;code&gt;0.09&lt;/code&gt; is \(\frac{9}{100}\), and &lt;code&gt;0.009&lt;/code&gt; is \(\frac{9}{1000}\) and so on. We also know that &lt;code&gt;0.9 + 0.09 + 0.009 = 0.999&lt;/code&gt;. So, we could represent &lt;code&gt;0.9999...&lt;/code&gt; fractionally as:&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\frac{9}{10} + \frac{9}{100} + \frac{9}{1000} + \frac{9}{10000} + \ldots&lt;/script&gt;

&lt;p&gt;In mathematics, this is called an &lt;em&gt;infinite sum&lt;/em&gt; or an &lt;em&gt;infinite series&lt;/em&gt;; we are adding terms together to infinity. If you recall from your high school math class, you can represent an infinite sum with what is called &lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Summation#Capital-sigma_notation"&gt;sigma notation&lt;/a&gt;&lt;/strong&gt;, and our infinite sum above can be represented as:&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\sum_{n=1}^{\infty} \frac{9}{10^n}&lt;/script&gt;

&lt;p&gt;This is simply a more concise way of writing the larger sum of the fractions above.&lt;/p&gt;

&lt;p&gt;Infinite sums are truly fascinating, and I hope to write more about them in the future, but for now I want to focus on one characteristic in particular. All infinite sums fit into one of two categories: &lt;em&gt;convergent&lt;/em&gt; or &lt;em&gt;divergent&lt;/em&gt;. Now, these are math-jargon terms that mean relatively simple things. An infinite sum is &lt;em&gt;convergent&lt;/em&gt; if it converges on a finite number. The language you might remember from your calculus class is that the &lt;em&gt;limit&lt;/em&gt; of the infinite sum &lt;em&gt;approaches&lt;/em&gt; a finite number. So, a &lt;em&gt;convergent infinite sum&lt;/em&gt; is an infinity that touches the finite. In contrast, a &lt;em&gt;divergent infinite sum&lt;/em&gt; is one that has no limit, one that grows to infinity.&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; A stock example is&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\sum_{n=1}^{\infty} \frac{1}{n}&lt;/script&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;1 + \frac{1}{2} + \frac{1}{3} + \frac{1}{4} + \ldots&lt;/script&gt;

&lt;p&gt;This is an infinite sum that approaches infinity, that is, it &lt;em&gt;diverges&lt;/em&gt;, it does not have a finite limit, it is unbounded.&lt;/p&gt;

&lt;p&gt;Returning to our infinite sum, we have enough context now to see that saying &lt;code&gt;1 = 0.9999...&lt;/code&gt; is really just one way of saying that the summation of \(\frac{9}{10^n}\) as &lt;code&gt;n&lt;/code&gt; goes from 1 to infinity is a convergent infinite sum that converges on 1.&lt;/p&gt;

&lt;p&gt;Ok, so that was a fun romp through one fascinating branch of mathematics, but all we really did was gain enough context to state the “odd fact” in more precise mathematical language. What’s the point? I stated at the beginning that I was fascinated by some of the general ramifications of infinity touching the finite. What we have with convergent infinite sums are well-studied mathematical examples of precisely this phenomenon. And I find them so fascinating because they offer glimpses at some of the issues we face when thinking about infinity. However, they also show us that we &lt;em&gt;can&lt;/em&gt; think well about infinity.&lt;/p&gt;

&lt;p&gt;The implication I’d like to explore a bit now is that paradoxes abound when the infinite colliding with the finite. On the one hand, it is quite clear that &lt;code&gt;1&lt;/code&gt; &lt;em&gt;does not equal&lt;/em&gt; &lt;code&gt;0.9999...&lt;/code&gt; for the simple reason that &lt;code&gt;1&lt;/code&gt; is a finite integer and &lt;code&gt;0.9999...&lt;/code&gt; is an infinite series. If &lt;em&gt;equality&lt;/em&gt; is &lt;em&gt;categorical identity&lt;/em&gt;, then &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0.9999...&lt;/code&gt; are not equal. On the other hand, this whole post has shown that &lt;code&gt;1&lt;/code&gt; &lt;em&gt;does equal&lt;/em&gt; &lt;code&gt;0.9999...&lt;/code&gt;. If &lt;em&gt;equality&lt;/em&gt; is &lt;em&gt;referrential identity&lt;/em&gt;, then &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0.9999...&lt;/code&gt; are equal. Now, note that I call this a paradox and not an antinomy. I want to define these two terms clearly and distinguish them. In my parlance, a &lt;strong&gt;paradox&lt;/strong&gt; is a &lt;em&gt;seeming&lt;/em&gt; contradiction, while an &lt;strong&gt;antinomy&lt;/strong&gt; is an &lt;em&gt;actual&lt;/em&gt; contradiction; that is, a paradox is resolvable and an antinomy is not.&lt;/p&gt;

&lt;p&gt;It is important, however, to note that resolving a paradox &lt;em&gt;does not&lt;/em&gt; mean that one side “wins” and the other “loses”, that one proposition is “right” and the other is “wrong”; instead, it means that we can rationally make sense of the difference between the two propositions. This is why I used the if-then statements above. It is not that one of the propositions is “right” or “wrong”, it is that we can enumerate the conditions under which each one would be “right” and the other “wrong”. An antinomy does not submit itself to such enumeration; we cannot articulate the conditions under which one side is “right” and the other is “wrong”. So, if I were to abstract out my definitions of &lt;em&gt;paradoxes&lt;/em&gt; and &lt;em&gt;antinomies&lt;/em&gt;, I would describe them thusly:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A paradox is composed of a proposition (&lt;code&gt;P&lt;/code&gt;) and its negation (&lt;code&gt;not-P&lt;/code&gt;) such that the conditionals “if &lt;code&gt;conditions for P&lt;/code&gt;, then &lt;code&gt;P&lt;/code&gt;” and “if &lt;code&gt;conditions for not-P&lt;/code&gt;, then &lt;code&gt;not-P&lt;/code&gt;” are both true, and thus the conjunction “if &lt;code&gt;conditions for P&lt;/code&gt;, then &lt;code&gt;P&lt;/code&gt; and if &lt;code&gt;conditions for not-P&lt;/code&gt;, then &lt;code&gt;not-P&lt;/code&gt;” is also true.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;An antinomy is composed of a proposition (&lt;code&gt;P&lt;/code&gt;) and its negation (&lt;code&gt;not-P&lt;/code&gt;) such that there are no conditions for &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;not-P&lt;/code&gt; and the conjunction “&lt;code&gt;P&lt;/code&gt; and &lt;code&gt;not-P&lt;/code&gt;” is true.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I believe that paradoxes run deep in our world. I have written earlier on my neologism &lt;a href="http://fractaledmind.com/articles/conjunctive-binarism"&gt;“conjunctive binarism”&lt;/a&gt;, a view that truth is probably most closely articulated as “the proposition &lt;code&gt;P&lt;/code&gt; and its contradiction &lt;code&gt;¬P&lt;/code&gt; are &lt;em&gt;kinda&lt;/em&gt; both true”. After exploring a convergent infinite sums, I feel that this definition of paradoxes more properly expresses my view of what this “kinda” maps to. So, &lt;code&gt;1 = 0.9999... and 1 != 0.9999...&lt;/code&gt; is a “conjunctive binary”. If we express it in the form of the paradox explained above, we would express that proposition as “if equality means referential indentiy, then 1 = 0.9999… and if equality means categorical identity, then 1 != 0.9999…”. Going one step further, I would now define a conjunctive binary as a compound proposition of that form (“if &lt;code&gt;conditions for P&lt;/code&gt;, then &lt;code&gt;P&lt;/code&gt; and if &lt;code&gt;conditions for not-P&lt;/code&gt;, then &lt;code&gt;not-P&lt;/code&gt;”).&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:2"&gt;

      &lt;p&gt;Well, that is not properly technically true, as there are some divergent series that do not tend to infinity, but are also clearly not convergent. Take &lt;code&gt;1 − 1 + 1 − 1 + ⋯&lt;/code&gt;. This is the so-called &lt;a href="https://en.wikipedia.org/wiki/Grandi%27s_series"&gt;Grandi’s series&lt;/a&gt;, and if you attempt to resolve it using partial sums, you will quickly see that the value ocillates between &lt;code&gt;1&lt;/code&gt; (when the number of terms in the partial sum is odd) and &lt;code&gt;0&lt;/code&gt; (when the number of terms in the partial sum is even). However, modern mathematics defines its sum as \(\frac{1}{2}\), which is a finite term (thus it would appear to “converge” on \(\frac{1}{2}\)). Thus, this series would appear to have two conclusions:&lt;/p&gt;

      &lt;ol&gt;
        &lt;li&gt;The series 1 − 1 + 1 − 1 + ⋯ has no sum.&lt;/li&gt;
        &lt;li&gt;Its sum should be \(\frac{1}{2}\).&lt;/li&gt;
      &lt;/ol&gt;

      &lt;p&gt;I find this infinite series fascinating, and may very well write it about at some point as well. &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;There is a branch of epistemology that believes such conjections do exist and calls them “dialetheias”. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Portrait of Pain</title>
    <link rel="alternate" href="http://blog.url.com/articles/portrait-of-pain/"/>
    <id>http://blog.url.com/articles/portrait-of-pain/</id>
    <published>2016-08-18T20:00:00-04:00</published>
    <updated>2017-05-01T20:07:14-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;She swipes from right to left, the red square appearing and then disappearing, along with the words. Five minutes later, caught initially in my peripheral vision, the red square again.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why did you delete those message tonight?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;What do you mean?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;You got a couple messages, and after reading them, you deleted the thread. I’m just curious why.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I don’t know what you’re talking about.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;I wasn’t paying close attention, but I swear I saw the read delete and you delete the thread.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;It must have been something else. I didn’t delete any message threads.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is the first time she lies to my face and I know it. I learn she lies frequently. Past, present, and future are littered. But today is the one time I know she is lying. It’s confusing more than painful. The pain comes later.&lt;/p&gt;

&lt;p&gt;It’s a double-sided pain. First, the sting; she … lies … to me. Subject, verb, object. She’s an active force, I’m an object. And I feel like an object. Do I not warrant the truth? Am I not person enough that she can look into my eyes and tell me the lie? I am less then–I am inanimate, I am the object of her verb. After the sting comes the ache. A second pain and a different pain. Here I am the subject. I believed. Not this one time, but every other time. And even this one time, I almost believed. She doesn’t lie; people don’t lie. Not to your face, not to your eyes. Do eyes lie? Did the red square lie? The pain of foolishness, of naivete. It is a deep, aching pain. It hurts so deeply because it ought not to be true. I want to be that fool; I want the world to allow it. Look me in the eye and tell me the truth. Let me believe you; let me see you.&lt;/p&gt;

&lt;p&gt;She lies. Then the sting. Now the ache.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>An Example of an ERB Component</title>
    <link rel="alternate" href="http://blog.url.com/articles/an-example-of-an-erb-component/"/>
    <id>http://blog.url.com/articles/an-example-of-an-erb-component/</id>
    <published>2016-08-06T20:00:00-04:00</published>
    <updated>2017-11-16T16:21:25-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;In a &lt;a href="http://fractaledmind.com/articles/a-function-for-generating-html-attribute-values/"&gt;previous post&lt;/a&gt; I discussed my need for a flexible function for generating values to pass into the HTML attribute options hash of the &lt;code&gt;content_tag&lt;/code&gt; helper. In this post, I want to discuss one particular context in which I needed the &lt;code&gt;meld&lt;/code&gt; method.&lt;/p&gt;

&lt;p&gt;For one particular work project I found myself building a few “ERB components”, that is, ERB partials that had some flexibility around their HTML output via params passed on &lt;code&gt;render&lt;/code&gt;. In one specific example, I was building a simple partial for rendering a key-value pair. I was using the description list HTML element (&lt;code&gt;dl&lt;/code&gt;), but I wanted the flexibility to have the entry render &lt;em&gt;either&lt;/em&gt; as a “column” &lt;em&gt;or&lt;/em&gt; as a “row”, e.g.:&lt;/p&gt;

&lt;h4 id="column-entry"&gt;Column Entry&lt;/h4&gt;
&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;  Key
 value
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h4 id="row-entry"&gt;Row Entry&lt;/h4&gt;
&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;Key  value
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So, I wanted one ERB partial where I could get either output based on params passed to the &lt;code&gt;render&lt;/code&gt; call of that partial.&lt;/p&gt;

&lt;p&gt;Using Bootstrap 4, I know how I wanted the HTML for each entry to look:&lt;/p&gt;

&lt;h4 id="column-entry-1"&gt;Column Entry&lt;/h4&gt;
&lt;div class="highlight html"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;dl&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center my-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dt&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Key&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;value&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h4 id="row-entry-1"&gt;Row Entry&lt;/h4&gt;
&lt;div class="highlight html"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;dl&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"d-flex my-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dt&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Key&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;value&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So, I could write some aspirational ERB for how I would like the partial to work:&lt;/p&gt;

&lt;div class="highlight erb"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:dl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;props_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:entry&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:dt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;props_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:key&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;value_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:dd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;props_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;value_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I then could also write some aspirational &lt;code&gt;render&lt;/code&gt; calls:&lt;/p&gt;

&lt;h4 id="column-entry-2"&gt;Column Entry&lt;/h4&gt;
&lt;div class="highlight erb"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'entry'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="s1"&gt;'Key'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="s1"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;props: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="ss"&gt;entry: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="sx"&gt;%[text-center my-0]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
             &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
           &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h4 id="row-entry-2"&gt;Row Entry&lt;/h4&gt;
&lt;div class="highlight erb"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'entry'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="s1"&gt;'Key'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="s1"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;props: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="ss"&gt;entry: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="sx"&gt;%[d-flex my-0]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="sx"&gt;%[col-4]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="sx"&gt;%[col]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
           &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, I just needed to write the &lt;code&gt;props_for&lt;/code&gt; and &lt;code&gt;value_for&lt;/code&gt; methods for the partial. The first thing I need is to access the params passed into the partial. With ERB partials, you can get the full set of params passed into a partial via the &lt;code&gt;local_assigns&lt;/code&gt; variable. &lt;code&gt;local_assigns&lt;/code&gt; references a hash of the params. So, I wrote my methods like so:&lt;/p&gt;

&lt;div class="highlight erb"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;props_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;local_assigns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;local_assigns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;try&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:dig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;code&gt;value_for&lt;/code&gt; method here is precisely the same as the &lt;code&gt;access&lt;/code&gt; method I discussed in &lt;a href="http://fractaledmind.com/articles/accessing-values-form-nested-hashes/"&gt;this past article&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While simple and elegant, these methods have two problems. First, &lt;code&gt;local_assigns&lt;/code&gt; is not accessible from any scope except the outer partial scope; you will get a &lt;code&gt;undefined local variable or method 'local_assigns'&lt;/code&gt; error when you try to run these methods in the partial. Second, these methods won’t handle params passed using string keys. Let’s refactor and fix both of these issues:&lt;/p&gt;

&lt;div class="highlight erb"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local_assigns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deep_symbolize_keys&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;props_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_sym&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;try&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:dig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, we can simply pass the symbolized hash of &lt;code&gt;local_assigns&lt;/code&gt; into the methods as a param, and we ensure that we are always working with symbols. Our final ERB partial-as-component looks like so:&lt;/p&gt;

&lt;div class="highlight erb"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;local_assigns&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;deep_symbolize_keys&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;props_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:props&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_sym&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;value_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_sym&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;try&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:dig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:dl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;props_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:entry&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:dt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;props_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;value_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;

  &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:dd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;props_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
    &lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;value_for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instructions&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="k"&gt;end&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This will output the HTML we desire given the &lt;code&gt;render&lt;/code&gt; calls outlined above.&lt;/p&gt;

&lt;h4 id="column-entry-3"&gt;Column Entry&lt;/h4&gt;
&lt;div class="highlight erb"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'entry'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="s1"&gt;'Key'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="s1"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;props: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="ss"&gt;entry: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="sx"&gt;%[text-center my-0]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
             &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="p"&gt;{},&lt;/span&gt;
           &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;outputs&lt;/p&gt;

&lt;div class="highlight html"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;dl&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"text-center my-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dt&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Key&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;value&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h4 id="row-entry-3"&gt;Row Entry&lt;/h4&gt;
&lt;div class="highlight erb"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'entry'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="s1"&gt;'Key'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="s1"&gt;'value'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
           &lt;span class="ss"&gt;props: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="ss"&gt;entry: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="sx"&gt;%[d-flex my-0]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="sx"&gt;%[col-4]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
             &lt;span class="ss"&gt;value: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="sx"&gt;%[col]&lt;/span&gt; &lt;span class="p"&gt;},&lt;/span&gt;
           &lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;outputs&lt;/p&gt;

&lt;div class="highlight html"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;dl&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"d-flex my-0"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dt&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col-4"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;Key&lt;span class="nt"&gt;&amp;lt;/dt&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;dd&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"col"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;value&lt;span class="nt"&gt;&amp;lt;/dd&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/dl&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>A function for generating HTML attribute values</title>
    <link rel="alternate" href="http://blog.url.com/articles/a-function-for-generating-html-attribute-values/"/>
    <id>http://blog.url.com/articles/a-function-for-generating-html-attribute-values/</id>
    <published>2016-08-01T20:00:00-04:00</published>
    <updated>2017-11-16T16:26:10-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;When using the ActionView &lt;code&gt;content_tag&lt;/code&gt; helper, you can pass either an array or a scalar value as the value of an HTML attribute. For example, these two method calls produce the exact same output:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Hello world!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'strong'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'highlight'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Hello world!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="s1"&gt;'strong highlight'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; &amp;lt;div class="strong highlight"&amp;gt;Hello world!&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This is a nifty and helpful small feature. However, it has a few limitations.&lt;/p&gt;

&lt;p&gt;First, it leaves a trailing space in sitations like this&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;content_tag&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:div&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'Hello world!'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;class: &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'strong'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'active'&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i_am_an_active_item?&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; &amp;lt;div class="strong active"&amp;gt;Hello world!&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; &amp;lt;div class="strong "&amp;gt;Hello world!&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Second, it can &lt;em&gt;only&lt;/em&gt; work with one-dimensional arrays and scalar values. Now, it makes sense for this function to have a restricted type signature, but when working with this helper in other contexts, this limitation can be irksome.&lt;/p&gt;

&lt;p&gt;I recently found myself in such a context and was thereby irked. This irk got me to thinking: How might I write a function that was as flexible as possible in its type signature, and yet still predictable and sane in its output of HTML attribute values?&lt;/p&gt;

&lt;p&gt;I began by writing some expectations:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;         &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;    &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a b'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;    &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;])).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;       &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;])).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;  &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a b'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;])).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;  &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;])).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;  &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a b'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;  &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I want my method to handle &lt;em&gt;n&lt;/em&gt; number of params and to handle arrays; I also want it to handle &lt;code&gt;nil&lt;/code&gt;s intelligently.&lt;/p&gt;

&lt;p&gt;In order to get these expectations passing, I wrote a method that looked like this:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;With those expectations met, I began considering other edge cases I wanted to cover. First, I don’t want duplicate values:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;          &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;])).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;        &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;     &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a b'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;])).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;   &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a b'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;])).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;   &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This required a minor update:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uniq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Next, I wanted to handle extraneous whitespace:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' a '&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;         &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a '&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;          &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' a'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;          &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' a '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;    &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a b'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;])).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;   &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a b'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;' a'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;   &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a b'&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' a '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;    &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'a '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;])).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;   &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;

&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;     &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' a '&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;])).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;  &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'a '&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;   &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'a'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Another minor update to get these specs passing:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# NOTE: `strip` must come before `uniq`&lt;/span&gt;
  &lt;span class="c1"&gt;# or else duplicates will sneak in&lt;/span&gt;
  &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:strip&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;uniq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Finally, I wanted to handle non-string scalar values:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;                       &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'18446744073709551616'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;true&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;                        &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'true'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;false&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;                       &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'false'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from_now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_date&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;      &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'2017-11-16'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from_now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;  &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'2017-11-16T16:38:32-05:00'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;day&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;from_now&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;to_time&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;      &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'2017-11-16 16:38:45 -0500'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;                        &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'1.11'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;                           &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'1'&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;                         &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;''&lt;/span&gt;
&lt;span class="n"&gt;expect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:s&lt;/span&gt;&lt;span class="p"&gt;)).&lt;/span&gt;&lt;span class="nf"&gt;to&lt;/span&gt;                          &lt;span class="n"&gt;eq&lt;/span&gt; &lt;span class="s1"&gt;'s'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Once again, this was a very minor update:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;my_method&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:strip&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nf"&gt;uniq&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;I tend to prefer pipelines of &lt;code&gt;Enumerable&lt;/code&gt; methods like this to be formatted with each “pipe” on a separate line. I also wanted to give it a more meaningful name. Since the key (and final) action is &lt;code&gt;join&lt;/code&gt;, I wanted a name that communicated this essence in addition to the data-munging that goes on. After some consideration, I went with:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;meld&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;flatten&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;compact&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:to_s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="ss"&gt;:strip&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;uniq&lt;/span&gt;
      &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Accessing Values from Nested Hashes</title>
    <link rel="alternate" href="http://blog.url.com/articles/accessing-values-from-nested-hashes/"/>
    <id>http://blog.url.com/articles/accessing-values-from-nested-hashes/</id>
    <published>2016-07-14T20:00:00-04:00</published>
    <updated>2017-11-16T16:37:38-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I need a function that will allow me to access values from a nested (i.e. multidimensional) hash. However, the shape of the hash is not strictly fixed.&lt;/p&gt;

&lt;p&gt;If you knew the keypath already (i.e. you didn’t need it to be a param that was passed into a function), the oldest standard way to achieve this in Ruby is:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:to&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:to&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="ss"&gt;:key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;If you wanted to take that approach and put it into a method, you could use &lt;code&gt;Enumerable#reduce&lt;/code&gt; to work with the keypath’s array:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keypath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;keypath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;memo&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Starting in Ruby 2.3, the &lt;code&gt;Hash&lt;/code&gt; class actually added a method that does essentially this. &lt;code&gt;Hash#dig&lt;/code&gt; takes a keypath and will access the value:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ss"&gt;:key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So, we could rewrite our function to use &lt;code&gt;Hash#dig&lt;/code&gt; like so:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keypath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;dig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;keypath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;That is both clean and uses modern Ruby semantics; however, it is not without its limitations. Let’s consider the following 2 hashes:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;hash1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;path: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="ss"&gt;key: &lt;/span&gt;&lt;span class="s1"&gt;'value'&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;hash2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="ss"&gt;path: &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="ss"&gt;to: &lt;/span&gt;&lt;span class="s1"&gt;'key'&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;And let’s also consider the following three keypaths:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;keypath1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%i[path to key]&lt;/span&gt;
&lt;span class="n"&gt;keypath2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%i[path to nested key]&lt;/span&gt;
&lt;span class="n"&gt;keypath3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sx"&gt;%i[path to key then another]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;What will happen in these six scenarios?&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hash1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keypath1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hash1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keypath2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hash1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keypath3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hash2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keypath1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hash2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keypath2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hash2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keypath3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;Well, here’s the answer:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&amp;gt; access(hash1, keypath1)
=&amp;gt; "value"
&amp;gt; access(hash1, keypath2)
=&amp;gt; nil
&amp;gt; access(hash1, keypath3)
TypeError: String does not have #dig method
&amp;gt; access(hash2, keypath1)
TypeError: String does not have #dig method
&amp;gt; access(hash2, keypath2)
TypeError: String does not have #dig method
&amp;gt; access(hash2, keypath3)
TypeError: String does not have #dig method
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Scenario 1 makes sense. The hash has those keys defined in that structure, so the value is accessed.&lt;/p&gt;

&lt;p&gt;Scenario 2 also makes sense. The subhash returned from &lt;code&gt;hash[:path][:to]&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; have the key &lt;code&gt;:nested&lt;/code&gt;, so a &lt;code&gt;nil&lt;/code&gt; is returned.&lt;/p&gt;

&lt;p&gt;But each of the other 4 scenarios throw this &lt;code&gt;TypeError&lt;/code&gt;. First, let’s answer why.&lt;/p&gt;

&lt;p&gt;You can get this error simply. Call &lt;code&gt;'foo'.dig(:key)&lt;/code&gt;. We recall that &lt;code&gt;dig&lt;/code&gt; is an instance method on the &lt;code&gt;Hash&lt;/code&gt; class. It is not an instance method on the &lt;code&gt;String&lt;/code&gt; class. Thus, when we try to call that method on an instance of &lt;code&gt;String&lt;/code&gt;, we get this error.&lt;/p&gt;

&lt;p&gt;This error is being thrown in our final four scenarios because as soon as we hit a scalar value (a string in these cases), the implicit chained call to &lt;code&gt;dig&lt;/code&gt; on that value throws the error. I say that it is the “implicit chained call to &lt;code&gt;dig&lt;/code&gt;” because the &lt;code&gt;Hash#dig&lt;/code&gt; method is implemented recursively.&lt;/p&gt;

&lt;p&gt;So, the way &lt;code&gt;Hash#dig&lt;/code&gt; works is that it will return a &lt;code&gt;nil&lt;/code&gt; if it encounters a key that is not present in the current (sub-)hash that it is processing; however, if it encounters a key that &lt;em&gt;is present&lt;/em&gt;, but that returns a scalar value, it will blow up.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;We need a function that won’t blow up. We need a function that &lt;em&gt;either&lt;/em&gt; returns the value &lt;em&gt;or&lt;/em&gt; returns &lt;code&gt;nil&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Maybe our original implemenation of &lt;code&gt;access&lt;/code&gt; would work?&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keypath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;keypath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;memo&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&amp;gt; access(hash1, keypath1)
=&amp;gt; "value"
&amp;gt; access(hash1, keypath2)
=&amp;gt; nil
&amp;gt; access(hash1, keypath3)
TypeError: no implicit conversion of Symbol into Integer
&amp;gt; access(hash2, keypath1)
TypeError: no implicit conversion of Symbol into Integer
&amp;gt; access(hash2, keypath2)
TypeError: no implicit conversion of Symbol into Integer
&amp;gt; access(hash2, keypath3)
TypeError: no implicit conversion of Symbol into Integer
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Not quite (I leave the explanation of this error to the reader).&lt;/p&gt;

&lt;p&gt;Using &lt;code&gt;Hash#fetch&lt;/code&gt; instead of &lt;code&gt;Hash#dig&lt;/code&gt; gives us a similar problem:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keypath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;keypath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&amp;gt; access(hash1, keypath1)
=&amp;gt; "value"
&amp;gt; access(hash1, keypath2)
=&amp;gt; {}
&amp;gt; access(hash1, keypath3)
NoMethodError: undefined method `fetch' for "value":String
&amp;gt; access(hash2, keypath1)
NoMethodError: undefined method `fetch' for "key":String
&amp;gt; access(hash2, keypath2)
NoMethodError: undefined method `fetch' for "key":String
&amp;gt; access(hash2, keypath3)
NoMethodError: undefined method `fetch' for "key":String
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Clearly, what we need is a way to tentatively call the method; and ActiveSupport’s &lt;code&gt;Object#try&lt;/code&gt; fits the bill nicely. So, let’s try pairing &lt;code&gt;Object#try&lt;/code&gt; with &lt;code&gt;Hash#dig&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight ruby"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;access&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;keypath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;keypath&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;reduce&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;memo&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nf"&gt;try&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:dig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&amp;gt; access(hash1, keypath1)
=&amp;gt; "value"
&amp;gt; access(hash1, keypath2)
=&amp;gt; nil
&amp;gt; access(hash1, keypath3)
=&amp;gt; nil
&amp;gt; access(hash2, keypath1)
=&amp;gt; nil
&amp;gt; access(hash2, keypath2)
=&amp;gt; nil
&amp;gt; access(hash2, keypath3)
=&amp;gt; nil
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Success!&lt;/p&gt;

&lt;p&gt;When you need to attempt to access a value from a nested/multidimensional hash given a keypath that may or may not match the shape of the hash, try and dig.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>"Oft evil will shall evil mar" - J.R.R. Tolkien (via Theoden)</title>
    <link rel="alternate" href="http://blog.url.com/jots/201604051529/"/>
    <id>http://blog.url.com/jots/201604051529/</id>
    <published>2016-04-05T11:29:00-04:00</published>
    <updated>2016-12-17T22:50:41-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Elevator</title>
    <link rel="alternate" href="http://blog.url.com/articles/elevator/"/>
    <id>http://blog.url.com/articles/elevator/</id>
    <published>2016-04-03T20:00:00-04:00</published>
    <updated>2017-05-03T00:07:18-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;You step forward, press the button, and begin to wait.&lt;br /&gt;
Dingy carpet in a worn-down lobby, a space almost asking you to leave it.&lt;br /&gt;
Elevator crawls down the walls; is it fighting back?&lt;br /&gt;
Even so, button pressed, future sealed.&lt;/p&gt;

&lt;p&gt;Ding. It arrives. Future becomes present. Doors open.&lt;br /&gt;
Gold and chrome and shining things. You enter.&lt;br /&gt;
Perhaps slow at first, perhaps not. Doors close.&lt;br /&gt;
Buttons arrayed in simple lines belie the complexity of choice. Each button a world. Present becomes future.&lt;br /&gt;
You hesitate; or do you? Button pressed, future sealed.&lt;br /&gt;
The elevator flies–a new floor, a better world.&lt;/p&gt;

&lt;p&gt;Ding. Doors open.&lt;br /&gt;
Clean carpet and soft lights, inviting. You step out.&lt;br /&gt;
Elevator closes and returns, it’s task complete.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Cleaning up Git repos</title>
    <link rel="alternate" href="http://blog.url.com/articles/cleaning-up-git-repos/"/>
    <id>http://blog.url.com/articles/cleaning-up-git-repos/</id>
    <published>2016-03-14T20:00:00-04:00</published>
    <updated>2017-05-01T18:57:51-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h3 id="deleting-old-remote-branches"&gt;Deleting old remote branches&lt;/h3&gt;

&lt;p&gt;If you have a repository that’s been around for long enough, you probably have a fair number of “stray branches”: deadends, false starts, orphans, etc. Let’s clean up all of the remote branches that haven’t been touched in the last 6 months:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;for &lt;/span&gt;k &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;git branch -r | grep -E -v &lt;span class="s1"&gt;'&amp;gt;|master|prod'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;; &lt;span class="k"&gt;do
  if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; -z &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;git log -1 --since&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'6 months ago'&lt;/span&gt; -s &lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;git push origin --delete &lt;span class="k"&gt;$(&lt;/span&gt;cut -d&lt;span class="s2"&gt;"/"&lt;/span&gt; -f2- &lt;span class="o"&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$k&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;;
  &lt;span class="k"&gt;fi
done&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Walking through the various steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;git branch -r&lt;/code&gt; lists all remote branches&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;grep -E -v '&amp;gt;|master|prod'&lt;/code&gt; filters that list of branches, removing any that have &lt;code&gt;&amp;gt;&lt;/code&gt; (e.g. &lt;code&gt;origin/HEAD -&amp;gt; origin/master&lt;/code&gt;), &lt;code&gt;master&lt;/code&gt; (e.g. &lt;code&gt;origin/master&lt;/code&gt;), or &lt;code&gt;prod&lt;/code&gt; (e.g. &lt;code&gt;origin/prod&lt;/code&gt;) in their names.&lt;/li&gt;
  &lt;li&gt;Iterating over each of these branches (as &lt;code&gt;$k&lt;/code&gt;), &lt;code&gt;git log -1 --since='6 months ago' -s $k&lt;/code&gt; checks if the branch has been commited to in the last 6 months (you could obviously set the timeframe to whatever suited your needs).&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;cut -d"/" -f2- &amp;lt;&amp;lt;&amp;lt; "$k")&lt;/code&gt; trims a branch string like &lt;code&gt;origin/feature/some_branch&lt;/code&gt; to a string like &lt;code&gt;feature/some_branch&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Finally &lt;code&gt;git push origin --delete $(...)&lt;/code&gt; removes that branch from the remote repository.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id="deleting-already-merged-remote-branches"&gt;Deleting already-merged remote branches&lt;/h3&gt;

&lt;p&gt;You may also find yourself needing to remove remote branches that have also already been merged to &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;git branch -r --merged origin/master
| grep -E -v &lt;span class="s1"&gt;'&amp;gt;|master|prod'&lt;/span&gt;
| cut -d&lt;span class="s2"&gt;"/"&lt;/span&gt; -f2-
| xargs git push origin --delete
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Here we see many of the same basic sub-commands we used before. There is, however, one note-worthy difference. We specify the specific branch we want to check whether the remote branches have been merged into by specifying &lt;code&gt;origin/master&lt;/code&gt;. This ensures that only remote branches that have been merged into remote &lt;code&gt;master&lt;/code&gt; are passed to the next sub-command.&lt;/p&gt;

&lt;h3 id="deleting-already-merged-local-branches"&gt;Deleting already-merged local branches&lt;/h3&gt;

&lt;p&gt;Finally, if you need to clean up your local repository, you can prune the local branches that have already been merged into &lt;code&gt;master&lt;/code&gt; in a similar way:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;git branch -d &lt;span class="k"&gt;$(&lt;/span&gt;git branch --merged master | grep -E -v &lt;span class="s1"&gt;'\*|master|prod'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;A word of warning though: have local copies of these branches somewhere, just in case you delete a branch you want back at some point ;)&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>The best cure for the past is the present</title>
    <link rel="alternate" href="http://blog.url.com/jots/201603111233/"/>
    <id>http://blog.url.com/jots/201603111233/</id>
    <published>2016-03-11T07:33:00-05:00</published>
    <updated>2016-12-17T22:42:11-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Everything a word, not everything a meaning</title>
    <link rel="alternate" href="http://blog.url.com/jots/201603111232/"/>
    <id>http://blog.url.com/jots/201603111232/</id>
    <published>2016-03-11T07:32:00-05:00</published>
    <updated>2016-12-17T22:42:24-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>I, who wear the horns</title>
    <link rel="alternate" href="http://blog.url.com/jots/201603072312/"/>
    <id>http://blog.url.com/jots/201603072312/</id>
    <published>2016-03-07T18:12:00-05:00</published>
    <updated>2016-12-17T22:42:39-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Who am I that You are mindful of me?</title>
    <link rel="alternate" href="http://blog.url.com/jots/201603061800/"/>
    <id>http://blog.url.com/jots/201603061800/</id>
    <published>2016-03-06T13:00:00-05:00</published>
    <updated>2016-12-17T22:42:56-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Forever the mind races; forever the body reacts. And life keeps spinning all around me.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201603052310/"/>
    <id>http://blog.url.com/jots/201603052310/</id>
    <published>2016-03-05T18:10:00-05:00</published>
    <updated>2016-12-17T22:43:11-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>In brokenness we find a chaotic refracted beauty that immediately reveals itself to be _real_ and all other beauty to be some mathematical abstraction, some too clean facsimile.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602231006/"/>
    <id>http://blog.url.com/jots/201602231006/</id>
    <published>2016-02-23T05:06:00-05:00</published>
    <updated>2016-12-17T22:43:27-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>You, Made and Unmade</title>
    <link rel="alternate" href="http://blog.url.com/articles/you-made-and-unmade/"/>
    <id>http://blog.url.com/articles/you-made-and-unmade/</id>
    <published>2016-02-21T19:00:00-05:00</published>
    <updated>2017-05-01T20:07:41-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;What is time? Time is commonly dissected into three parts: past, present, and future. The past is done, it is set; the future is yet to be done, it is possibility. But what of the present? The present is, in simplest form, the future being made the past. Yet if the present is nothing more than the future being made the past, why is it “the present”, this thing on the same level as the past and future? Well, I think the answer is masked by the passive voice, “being made” by whom? By you. The present is the future being made the past by you.&lt;/p&gt;

&lt;p&gt;How do you convert the future into the past? What is involved? Again, in simple form, there is you and there are outside stimuli, outside signals. There is you and not-you, which is outside of you. But the two spheres are not totally separate, as you receive many of these external signs and signals; you, via your five senses, have some connection to the not-you. And, in response to those outside signs and signals, you either act or don’t act, you think, you respond. You convert the future into the past by reacting to signals from the not-you.&lt;/p&gt;

&lt;p&gt;So, what is time? Time is the combination of the not-you things you have done, the not-you things you have yet to do, and the not-you things you are doing. Time is not-you, made and unmade, and you, making. But what is not-you without you? Nothing. Time is you, becoming; time is you, made and unmade.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Conjunctive Binarism</title>
    <link rel="alternate" href="http://blog.url.com/articles/conjunctive-binarism/"/>
    <id>http://blog.url.com/articles/conjunctive-binarism/</id>
    <published>2016-02-20T19:00:00-05:00</published>
    <updated>2017-05-01T20:09:09-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;Epistemology has fascinated me far longer than I have known what that word means. Built upon the Greek words for “knowledge” (ἐπιστήμη) and “study” (λόγος), epistemology means the study of knowledge. This can (and does) encompass a wide variety of specific ideas: the nature of knowledge, the acquisition of knowledge, the difference between knowledge and opinion, etc. It is a field of inquiry that aims to help us answer questions like “How do I know something?”, “What does it mean to know something?”, “Are some things unknowable?”, etc. Now, before we go too far down this (admittedly intriguing) rabbit-hole, I had said that I wanted to consider alethiology, not epistemology. While epistemology is the study of knowledge, alethiology is the study of truth. The two inquiries are cousins; indeed, one can barely call alethiology a field of inquiry &lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; and is often considered a sub-field of epistemology. The standard definition of knowledge holds that knowledge equals justified true belief &lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;. In debating the finer points of that definition, academics must then define their terms. What does it mean for a belief to be justified? What does it mean for a belief to be true? What is truth? This context is, I believe, important as it helps to situate the kinds of questions I am interested in pursuing within their general philosophical context. I want to probe around the edges of the question “What is truth?”, which, as we see, has strong implications on the nature of knowledge.&lt;/p&gt;

&lt;h2 id="a-primer-on-propositional-logic"&gt;A Primer on Propositional Logic&lt;/h2&gt;

&lt;p&gt;When considering the nature of truth, it is common to think about &lt;a href="http://www.iep.utm.edu/prop-log/#H1"&gt;propositions&lt;/a&gt;. Propositions are simply declarative sentences; they are statements. In most high school English courses we learn that sentences that end with a period (&lt;code&gt;.&lt;/code&gt;) are declarative sentences (&lt;code&gt;?&lt;/code&gt; = interrogatives, &lt;code&gt;!&lt;/code&gt; = interjections). So, that previous sentence was a declarative sentence. So was that one! Ah, now we have an interjection. Well, I could play this game all night (really, I’m easily amused), but the point ought to be clear: propositions == statements == declarative sentences. They are forms of communication that say something is the case. A key characteristic of propositions is that they are either true or false. When I state that something is the case, it either is the case or it isn’t. Either most high school English classes &lt;em&gt;do&lt;/em&gt; teach that sentences ending in a period are declarative sentences, or they don’t. Either that previous sentence is a declarative sentence, or it isn’t. Now, one important thing to note immediately is that we need not be able to determine whether a proposition is true or false; this has no bearing on its “propositionness”. The statement “God exists” is a proposition, it is either true or false; however, we have no way of determining whether it is true or false (regardless of what anyone has ever told you). So, propositions are statements that something is the case that are either true or false, but we need not determine whether they are actually true or actually false for them to be propositions.&lt;/p&gt;

&lt;p&gt;In academic logic, propositions are generally referred to using the symbolic shorthand &lt;code&gt;P&lt;/code&gt;. This is the generic proposition, the Ur-proposition, in computer programming terms we might say it is the proposition type. Like algebraic variables, we can use any uppercase letter to designate other propositions. So, for example, if I needed to talk about three propositions, I could use &lt;code&gt;P&lt;/code&gt;, &lt;code&gt;Q&lt;/code&gt;, and &lt;code&gt;R&lt;/code&gt; (these are the common letters used in academic circles, for whatever the reasons). Now, when dealing with multiple propositions there are two key operators that we will use&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" class="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;: &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt;. Perhaps these symbols seem a bit foreign, but I promise that their concepts are utterly simple. &lt;code&gt;&amp;amp;&lt;/code&gt; is the “and” operator; it combines two propositions to make one new proposition, called the “conjunction” of the two propositions. &lt;code&gt;v&lt;/code&gt; is the “or” operator; it also combines two propositions to make one new proposition, called the “disjunction” of the two propositions. In high school English we would say that “and” and “or” are conjunctions, and just like in English class we can take two declarative sentences and combine them with a conjunction to make a new sentence. Ah, that sentence was a perfect example (almost as if I planned it ;)). So, symbolically we could write &lt;code&gt;P &amp;amp; Q =&amp;gt; R&lt;/code&gt; and &lt;code&gt;P v Q =&amp;gt; S&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ok, so propositions can be combined to make new propositions in two different ways, but what precisely is the difference? Well, I’m interested in truth, so you might have already guessed the difference. The difference between &lt;code&gt;R&lt;/code&gt; and &lt;code&gt;S&lt;/code&gt; from above is what is required for them to be true. When using the &lt;code&gt;&amp;amp;&lt;/code&gt; operator to combine &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;Q&lt;/code&gt;, the conjunction &lt;code&gt;R&lt;/code&gt; is only true when &lt;strong&gt;both&lt;/strong&gt; &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;Q&lt;/code&gt; are themselves true. If either &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;Q&lt;/code&gt; is false, then &lt;code&gt;R&lt;/code&gt; is also false. When using the &lt;code&gt;v&lt;/code&gt; operator, the disjunction &lt;code&gt;S&lt;/code&gt; is true if either &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;Q&lt;/code&gt; is true. These relationships are most often considered using a “truth table”. Consider the following, which lays out all of the possible scenarios for the &lt;code&gt;&amp;amp;&lt;/code&gt; operator:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;(P &amp;amp; Q)&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here we can clearly see that the expression &lt;code&gt;(P &amp;amp; Q)&lt;/code&gt; is only true whenever both the proposition &lt;code&gt;P&lt;/code&gt; and the proposition &lt;code&gt;Q&lt;/code&gt; are true. This is contrasted with the &lt;code&gt;v&lt;/code&gt; operator:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;Q&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;(P v Q)&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Here the relationship is almost the exact opposite. The expression &lt;code&gt;(P v Q)&lt;/code&gt; is only &lt;em&gt;false&lt;/em&gt; whenever both the proposition &lt;code&gt;P&lt;/code&gt; and the proposition &lt;code&gt;Q&lt;/code&gt; are false. In every other instance the expression &lt;code&gt;(P v Q)&lt;/code&gt; is true, as one of the two constituent propositions is true.&lt;/p&gt;

&lt;p&gt;These two operators handle how the truth values relate when combining two or more propositions, but there is one last operator we need to discuss, which is used on single propositions. The “negation” operator &lt;code&gt;¬&lt;/code&gt; is used, you guessed it, to negate propositions. The truth table for this operator is pretty straight forward:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;¬P&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The negation operator basically just “flips” the truth value of the proposition.&lt;/p&gt;

&lt;p&gt;With all of that now settled, we can finally turn to the heart of this excursion.&lt;/p&gt;

&lt;h2 id="p--p"&gt;&lt;code&gt;P &amp;amp; ¬P&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Now, I will readily admit that “conjunctive binarism” is a phrase that I totally made up &lt;sup id="fnref:4"&gt;&lt;a href="#fn:4" class="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt;, but I was trying to find a phrase that accurately captured the idea I had in my head, which I was initially conceiving of in purely symbolic terms: &lt;code&gt;P &amp;amp; ¬P&lt;/code&gt; &lt;sup id="fnref:BB"&gt;&lt;a href="#fn:BB" class="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt;. In many ways I find the symbolic phrase far clearer than the English phrase “conjunctive binarism”, but hopefully my English phrase at least accurately describes precisely what I’m interested in.&lt;/p&gt;

&lt;p&gt;I said at the beginning that I was interested in the question “What is truth?”, yet now that we have a firmer grasp on what precisely “conjunctive binarism” means, I’m sure that you, my reader, are a bit worried. And, I would say, rightfully so. Here is the truth table for the conjunctive binary:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;¬P&lt;/code&gt;&lt;/th&gt;
      &lt;th style="text-align: center"&gt;&lt;code&gt;(P &amp;amp; ¬P)&lt;/code&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
      &lt;td style="text-align: center"&gt;T&lt;/td&gt;
      &lt;td style="text-align: center"&gt;F&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Well there you have it, the conjunctive binary &lt;code&gt;(P &amp;amp; ¬P)&lt;/code&gt; &lt;em&gt;can never be true&lt;/em&gt; &lt;sup id="fnref:AA"&gt;&lt;a href="#fn:AA" class="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt;. In many ways the the simplest, most intuitive answer to the question of “What is truth?” is “I don’t know, but it certainly isn’t &lt;code&gt;(P &amp;amp; ¬P)&lt;/code&gt;”. In fact, Aristotle himself states this directly in his &lt;em&gt;Metaphysics&lt;/em&gt;&lt;sup id="fnref:5"&gt;&lt;a href="#fn:5" class="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The most certain of all basic principles is that contradictory propositions are not true simultaneously. (1011b13-14)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This idea, that a proposition (&lt;code&gt;P&lt;/code&gt;) and its contradiction (&lt;code&gt;¬P&lt;/code&gt;) cannot both be true in the same sense at the same time, is so fundamental to human logical thought that it is a &lt;em&gt;law&lt;/em&gt;, the Law of Non-Contradiction.&lt;/p&gt;

&lt;p&gt;Now, I am not quite so bold as to suggest that the Law of Non-Contradiction is wrong; however, I would like to press it a bit. The caveats in the definition of the LNC are clearly important. I’m sure we can all think of examples where a proposition (&lt;code&gt;P&lt;/code&gt;) and its contradiction (&lt;code&gt;¬P&lt;/code&gt;) are both true, just in different senses. As one contrived examples, the proposition “Citi is a bank” and its contradiction “Citi is not a bank” would both be true if “bank” in the first case meant “a financial institution” and “bank” in the second case meant “the side of a river”. Likewise, if time is not an issue, we can certainly conceive of an example where some proposition is true and then later its contradiction is true. Taking the same contrived example, right now the proposition “Citi is a bank” is true, but if in the future they were to go out of business, the contradiction “Citi is not a bank” would then be true.&lt;/p&gt;

&lt;p&gt;What I would like to suggest is that while the Law of Non-Contradiction is strictly true, it is not practically all that helpful when confronting the question “What is truth?”. Specifically, I would argue (and hopefully I will at some point soon) that &lt;em&gt;in the everyday world&lt;/em&gt; one of those two caveats is very likely to be true. That is to say, I contend and my definition of Conjunctive Binarism states that a proposition (&lt;code&gt;P&lt;/code&gt;) and its contradiction (&lt;code&gt;¬P&lt;/code&gt;) are likely both true either in different senses or at different times. More simply, I argue that &lt;strong&gt;&lt;code&gt;(P &amp;amp; ¬P)&lt;/code&gt; will likely be true &lt;em&gt;in some way&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If I could create my own logical symbol, I would create the “fuzzy” symbol &lt;code&gt;~&lt;/code&gt;, which would denote the existence of one or more of these caveats. In my logical lexicon the “fuzzy” symbol &lt;code&gt;~&lt;/code&gt; generally maps to the English word “kinda”. So, in strictest form Conjunctive Binarism would be expressed symbolically as &lt;code&gt;~(P &amp;amp; ¬P)&lt;/code&gt;, or even more strictly as &lt;code&gt;(~P ~&amp;amp; ~¬P)&lt;/code&gt;. In plain English we might say “the proposition &lt;code&gt;P&lt;/code&gt; and its contradiction &lt;code&gt;¬P&lt;/code&gt; are kinda both true”.&lt;/p&gt;

&lt;h2 id="fin"&gt;Fin&lt;/h2&gt;

&lt;p&gt;I plan, in later posts, to explore this thesis from various angles, to consider some of its consequences, and to argue for its correctness. For now, however, I leave it at this: my answer to the question “What is truth?” would be, in a more rigorous and philosophic way than this sounds, “Kinda everything”.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;The term “alethiology” is fairly rare in academia; for example, the ten-volume &lt;a href="https://en.wikipedia.org/wiki/Routledge_Encyclopedia_of_Philosophy"&gt;Routledge Encyclopedia of Philosophy&lt;/a&gt; mentions it only once. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;For those readers of a more academic bent, &lt;a href="http://plato.stanford.edu/entries/knowledge-analysis/#KnoJusTruBel"&gt;this article&lt;/a&gt; from the Stanford Encyclopedia of Philosophy provides a robust explanation of this analysis of knowledge, and indeed of knowledge in general. &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:3"&gt;

      &lt;p&gt;There are, in fact, many other logical operators beside these two:&lt;/p&gt;

      &lt;table class="tables"&gt;
        &lt;thead&gt;
          &lt;tr&gt;
            &lt;th style="text-align: center"&gt;Sign&lt;/th&gt;
            &lt;th style="text-align: center"&gt;Operator&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“and”&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;v&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“or”&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;→&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“if… then…”&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;↔&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“if and only if”&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;&lt;code&gt;¬&lt;/code&gt;&lt;/td&gt;
            &lt;td style="text-align: center"&gt;“not”&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;

      &lt;p&gt;See &lt;a href="http://www.iep.utm.edu/prop-log/#SH3a"&gt;here&lt;/a&gt; for a more in-depth analysis of them all. &lt;a href="#fnref:3" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:4"&gt;
      &lt;p&gt;A Google search for the exact phrase “conjunctive binarism” returns &lt;a href="https://www.google.com/search?q=%22conjunctive+binarism%22"&gt;no results&lt;/a&gt;. &lt;a href="#fnref:4" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:BB"&gt;
      &lt;p&gt;This construction of the constructive binarism marks it as a close kin of &lt;a href="http://plato.stanford.edu/entries/dialetheism/"&gt;dialetheism&lt;/a&gt;, a newer philosophical position that holds that dialetheias do in fact exist, and a dialetheia is simply a sentence, &lt;code&gt;A&lt;/code&gt;, such that both it and its negation, &lt;code&gt;¬A&lt;/code&gt;, are true; that is, &lt;code&gt;A &amp;amp; ¬A&lt;/code&gt;. &lt;a href="#fnref:BB" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:AA"&gt;

      &lt;p&gt;This is in direct contrast with the disjunctive binary, which is always true.&lt;/p&gt;

      &lt;table class="tables"&gt;
        &lt;thead&gt;
          &lt;tr&gt;
            &lt;th style="text-align: center"&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
            &lt;th style="text-align: center"&gt;&lt;code&gt;¬P&lt;/code&gt;&lt;/th&gt;
            &lt;th style="text-align: center"&gt;&lt;code&gt;(P v ¬P)&lt;/code&gt;&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;T&lt;/td&gt;
            &lt;td style="text-align: center"&gt;F&lt;/td&gt;
            &lt;td style="text-align: center"&gt;T&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr&gt;
            &lt;td style="text-align: center"&gt;F&lt;/td&gt;
            &lt;td style="text-align: center"&gt;T&lt;/td&gt;
            &lt;td style="text-align: center"&gt;T&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/tbody&gt;
      &lt;/table&gt;

      &lt;p&gt;In fact, the disjunctive binary, by definition, includes &lt;em&gt;all possible states&lt;/em&gt;, as any state would either be &lt;code&gt;P&lt;/code&gt; or &lt;code&gt;¬P&lt;/code&gt;. Since &lt;code&gt;¬P&lt;/code&gt; is simply the negation of &lt;code&gt;P&lt;/code&gt;, the disjunction offers a logically exhaustive set of states. &lt;a href="#fnref:AA" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:5"&gt;
      &lt;p&gt;&lt;a href="http://plato.stanford.edu/entries/aristotle-noncontradiction/"&gt;This article&lt;/a&gt; from the Stanford Encyclopedia of Philosophy provides a rich analysis of Aristotle on the Law of Non-Contradiction. &lt;a href="#fnref:5" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>I am now swimming against the grain.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602201430/"/>
    <id>http://blog.url.com/jots/201602201430/</id>
    <published>2016-02-20T09:30:00-05:00</published>
    <updated>2016-12-17T22:43:44-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>The greatest lie the world ever told was that _you_ deserve to be loved.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602201248/"/>
    <id>http://blog.url.com/jots/201602201248/</id>
    <published>2016-02-20T07:48:00-05:00</published>
    <updated>2016-12-17T22:44:03-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>"You are more powerful than you think you are, act accordingly." - Seth Godin</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602131253/"/>
    <id>http://blog.url.com/jots/201602131253/</id>
    <published>2016-02-13T07:53:00-05:00</published>
    <updated>2016-12-17T22:50:47-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>On Lent and Marriage</title>
    <link rel="alternate" href="http://blog.url.com/articles/on-lent-and-marriage/"/>
    <id>http://blog.url.com/articles/on-lent-and-marriage/</id>
    <published>2016-02-10T22:16:00-05:00</published>
    <updated>2017-05-01T20:07:02-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;Lent is a time of fasting. We deny ourselves an earthly good in order to, hopefully, receive a heavenly good. We fast to clear our minds and reset our hearts, to find balance with ourself and with God. Lent isn’t easy; it isn’t meant to be easy. It isn’t easy to say no, to turn your mind and heart toward God every time your flesh desires that earthly good you’ve denied yourself. It isn’t easy to enact your will–to make a commitment and stand by it– especially when you have committed yourself to a fasting.&lt;/p&gt;

&lt;p&gt;This Lenten season I am giving up my marriage. I am fasting from my spouse. Let me be clear, I am not ending my marriage; in fact, I pray that this season will deepen and strengthen my marriage. However, for these 40 days my wife and I will be separated, in the full sense of that word. Let me attempt to explain why and how I hope to use this time to better my life, my faith, and my marriage.&lt;/p&gt;

&lt;p&gt;Marriage is hard. I’d go so far as to say it is one of the hardest things a human person could endeavor to do. And I don’t just mean “marriage” in its simple everyday sense–two people who live together, are monogamous, and form a family unit. I mean &lt;em&gt;marriage&lt;/em&gt;; I mean the commitment and the act of grafting your soul to another soul; I mean the pursuit of unconditional love; I mean the coming together of two people to form &lt;em&gt;one&lt;/em&gt;. &lt;strong&gt;That&lt;/strong&gt; kind of marriage is &lt;em&gt;hard&lt;/em&gt;. But, I believe that kind of marriage is the most rewarding. That’s the kind of marriage worth fighting for.&lt;/p&gt;

&lt;p&gt;Marriage is hard, and for me, that means specifically that being a husband is hard. It’s hard in ways I cannot even fathom. It’s hard in ways I didn’t fathom when I made my vows. It’s hard in ways I could never hope to communicate to you. It is &lt;em&gt;hard&lt;/em&gt;. And, to be honest, I’ve failed at it time and time again. I would hope that in the simply everyday sense, I’ve been a pretty good husband. I would hope that the world would judge me at least a mediocre husband. But I’m not sure it would. That’s of little matter, however, because in the deep and true sense, I &lt;em&gt;know&lt;/em&gt; that I have failed as a husband. There is no point in listing out my failures here. First, because I do truly believe that all sins are equal, but our minds are built to rank things. I also won’t list out my particular failings because they are &lt;em&gt;mine&lt;/em&gt;. I own them. I am responsible for them. Nothing I say and nothing I do will change that. I confess them to God and make amends to man. I take steps to Pharisaism when I confess them to man and make amends to God.&lt;/p&gt;

&lt;p&gt;Marriage is hard and I am a failed husband. In my life, at this moment, those two facts have now generated a third fact: my wife doesn’t love me. Again, I don’t mean “love” in a trite sense; we’re talking about deep, meaningful love. And love like that isn’t easy. This form of deep and meaningful love comes when you meet another person, another soul, and you &lt;em&gt;see&lt;/em&gt; them. They grant you the ability to truly &lt;em&gt;see&lt;/em&gt; them. And when you see them, when you meet them, when you &lt;em&gt;know&lt;/em&gt; them, your soul changes. Your soul becomes a little bit more like them. You graft them into your soul and it changes you. Some part of them now &lt;em&gt;is&lt;/em&gt; you, is a part of you. This kind of love is hard. It is hard to open yourself up to another person to allow them to love you like this. It is hard to receive another person if they have opened themselves up to you. It is hard to allow yourself to change because of another person. This kind of love is hard. My wife still likes me, my wife is still fond of me, we are still friends; but my wife no longer &lt;em&gt;loves&lt;/em&gt; me.&lt;/p&gt;

&lt;p&gt;Now, let’s briefly set two things straight. First, I don’t say this to gain your sympathy. 7 billion people on this planet do not love me in this way, do not love you in this way. No one has a right to this kind of love. It is rare and it is given freely. It is never earned and never taken. Marriage is hard and I am failed husband; I have no right to this from her. Second, she is under no obligation to give it to me. She is not “wrong” for not loving me. She simply doesn’t. This is not a matter to be judged or adjudicated; this simply is. We are responsible for our thoughts and our actions, not for our state. Now, our state will factor strongly in our thoughts and actions, but that is beside the point. I am not responsible for being a male, but I am responsible for how I think and how I act &lt;em&gt;as&lt;/em&gt; a male. I am not responsible for being a husband, but I am responsible for how I think and how I act &lt;em&gt;as&lt;/em&gt; a husband. The kind of love we are talking about is so deep, so low, that it is a state. I am not responsible for being a male husband who loves his wife. I simply am that. What I am responsible for is how I live my life &lt;em&gt;as&lt;/em&gt; such a person. And as a male husband who loves his wife, I am responsible for my failings as well as for my successes. And as a female wife who does not love her husband, my wife is responsible for her failings and her successes. But in both cases, the state of our love stands outside of the arena of responsibility. And it stands outside this arena quite simply because we are not in control of it. I have no more control over whether or not I love my wife as she does of whether or not she doesn’t. Actions and thoughts affect our state, but they don’t control it. Certainly, my thoughts and my actions over the course of our marriage have some causal relationship to her current state, but I didn’t &lt;em&gt;cause&lt;/em&gt; her to not love me. And certainly her thoughts and actions have some relation to her current state, but again those things did not &lt;em&gt;cause&lt;/em&gt; them. There is no simple &lt;em&gt;cause&lt;/em&gt; to low-lying states of mind and heart.&lt;/p&gt;

&lt;p&gt;So, marriage is hard. I am a failed husband. My wife doesn’t love me. These are facts; these are states. This is the spilt milk not worth crying over (though I certainly have cried, about all three facts). The real question, the real challenge, the real point of this post is, what next? How do I respond? How do I think and act next? And my answers to this question are why I am giving up my marriage for Lent.&lt;/p&gt;

&lt;p&gt;I am a computer programmer; I often like to break down complex problems by trying to isolate the constants and the variables. Constants are things that simply &lt;em&gt;are&lt;/em&gt;, variables are things that can, have, and/or will change. So, we might say that “marriage is hard” is a constant. That is like a definition of marriage: it is hard. We could also say that “I am a failed husband” is a constant. It is a statement about the past, it cannot change. Likewise “my wife doesn’t love me” is a constant, insofar as it is simply a statement about the present moment. I would say that “my wife’s love” is a variable; that can and has changed. However, the statement “my wife doesn’t love me” is a constant; it simply is true right now. So, are there any other constants worth taking into consideration when thinking about what to do next. I believe so. First, I believe that I &lt;em&gt;ought&lt;/em&gt; to continue to love my wife; this is an ethical constant. I believe that full and deep love is unconditional; this is a definitional constant. I believe that all human beings have the authority and autonomy to exercise their own wills; this is an ontological constant. I also believe that God exists and loves &lt;em&gt;me&lt;/em&gt;; this is a faith constant. So, when I start to take all of these constants into consideration, it makes how I should respond to all of the variables a bit clearer. But before we get there, let’s take a moment to think through some of the things that are variables.&lt;/p&gt;

&lt;p&gt;My wife loving me is a variable; it could change in the future. My wife being my wife could change. Me loving my wife is variable; that could change. Me being a failed husband, that could change (not in a true ontological sense, but in a true practical sense). These are the key variables in this situation. However, in life, &lt;em&gt;most things are variables&lt;/em&gt;. Life is flux; things change. And few things are as dangerous to living life well as treating variables as constants (another danger: treating constants as variables). This is, to my mind, the main reason not to “cry over spilt milk”; milk being spilt is a variable. You can clean up the milk. You can buy new milk. You can take care not to spill the new milk. Cry about constants.&lt;/p&gt;

&lt;p&gt;So, I feel like I have some sense of what key things are constants and what things are variables. How does that affect my thinking and my action? If true and deep love is unconditional, and if I ought to continue to love my wife, then I ought to love my wife unconditionally. Now, how do I do that? As I hope you sense, this is far easier said than done. I have, in fact, thought this for years. I have believed that I &lt;em&gt;ought&lt;/em&gt; to love my wife unconditionally as long as we have been married. I can say without a shadow of a doubt that I have &lt;em&gt;never&lt;/em&gt; loved her unconditionally. My love always has conditions. I frequently don’t see them in the present, but they always come out, creep to the surface. One of the things I have been wrestling with lately is whether or not loving someone unconditionally was even &lt;em&gt;possible&lt;/em&gt;. Am I barking up the wrong tree here? Is this a fool’s errand? My answer today is, no. It &lt;em&gt;is&lt;/em&gt; possible to love someone unconditionally, and I really only have one piece of evidence to support that. I believe that we can love someone unconditionally because we love &lt;em&gt;ourselves&lt;/em&gt; unconditionally. The more I think about it, the clearer it becomes. I fully believe that I have failed in my role as a husband, yet I still love myself. In fact, it wasn’t that hard. I wasn’t always happy with myself, I wasn’t always satisfied, but I can’t remember ever not loving myself. And the reason seems pretty simple. If love, true love, is the other side of true empathy, then how could we ever not empathize with ourselves? I am me, therefore I understand what it is like to be me. I am in my own shoes, so to speak. And certainly it is harder to love another person unconditionally, but I do believe it is possible. I can’t imagine that it is possible to do all the time, to do perfectly, but what is? I’m not searching for perfection, I’m searching for deeply meaningful love.&lt;/p&gt;

&lt;p&gt;My goal in this Lenten season is to come to love my wife unconditionally. That is my true goal. “Giving up my marriage” for Lent is merely the means I am attempting to reach that end. And the reason I chose that means, that path, is simply because I have come to realize one of the deepest conditions of my love: returned love. I feel slighted, I feel wronged when I love and that love is not returned. “That is unfair”, I say to myself (maybe even to others at times); or even, “That’s just plain stupid”. Why give out love for nothing? I’m devaluing my love. I’m selling my stock short. If you want my love, you have to give me something back in return. And when it comes to my wife, what I want back is deep love. I want her to accept me, to see me as I truly am and to accept and love me. I want her to know me, I want her to join with me in living life. I want to become one. I want her to want me. I want it, I need it. And every time I act out of love and I don’t feel that her response is up to snuff, I feel victimized, hell, I feel dehumanized. I have reached out in love, I have tried to see you and to know you as you truly are, and &lt;em&gt;this&lt;/em&gt; is what I get in response? Like a petulant child, I cry foul. This isn’t right, this isn’t fair! Well, one of the constants I laid out earlier states that all human beings have the authority and autonomy to exercise their own wills. I also stated earlier that I have no right to my wife’s (or anyone’s) love. It is not owed to me, regardless of what I do or don’t do. Thus, I feel I must give up my marriage for Lent. I must spend 40 days in an emotional desert in the hopes of finding the grace to love without requiring love back. As long as I feel wronged by not being loved by someone, I am utterly incapable of loving that person unconditionally.&lt;/p&gt;

&lt;p&gt;This brings me, finally, back to the season of Lent. We Christians spend 40 days in fasting as we prepare for Easter, the day that signifies Jesus Christ’s rise from death. And while I do believe that the variables and constants outlined above, the behaviors and thoughts that I espouse, are true for anyone, regardless of religion or faith, these things make the most sense, contain the most truth, when viewed within the light of the Christian faith. Within that light, we see that there are in fact two instances of unconditional love. Not only do we, as humans, unconditionally love ourselves (“love your neighbor as yourself”), but God himself, incarnated, loved each and every one of us unconditionally. He did not require love in return, he simply loved. He loved fully and he loved deeply. He loved to the point of death. He loved in ways and to degrees that I cannot and probably will never fathom. And yet that is my desire. I want to love as Christ loved. But how? How can I ever possibly hope to love like that? I know for a fact that I will never love in that manner on my own. I’ve tried, and every time I have failed. It is beyond me. I am too selfish, too self-centered; I am too &lt;em&gt;me&lt;/em&gt;. I am ontologically, at the core of my being, incapable of giving out love without receiving love. I &lt;em&gt;must&lt;/em&gt; be loved. I, my self, my ego, is nothing, is undefined, until I am loved. There is no subject &lt;em&gt;I&lt;/em&gt; until there is the object &lt;em&gt;me&lt;/em&gt;. My identity, first and foremost, exists as an object in a sentence with some other subject. I can do nothing until He loved me; I am nothing until He loved me. You see (but do I?), I am already loved, I already have all that I need. I can give love to others because I have received love from God, from Christ. I &lt;em&gt;know&lt;/em&gt; this. This Lent, I pray that I will &lt;em&gt;feel&lt;/em&gt; this. I pray that I will feel God’s love so fully, so deeply, so truly that I can love others unconditionally as easily as I love myself. And so, this Lent, I am giving up my marriage in the hope and with the prayer that by giving God the space, finally, to be the source of my “belovedness” (and not my wife, or my family, or my peers, as it has been in the past), I will grow able to love others (my wife, my family, my peers) as Christ loves me.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Patience ...</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602101939/"/>
    <id>http://blog.url.com/jots/201602101939/</id>
    <published>2016-02-10T14:39:00-05:00</published>
    <updated>2016-12-17T22:44:56-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Sometimes the most loving action is inaction.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602091517/"/>
    <id>http://blog.url.com/jots/201602091517/</id>
    <published>2016-02-09T10:17:00-05:00</published>
    <updated>2016-12-17T22:45:13-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>To love is nothing more than to see another as fully human.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602041409/"/>
    <id>http://blog.url.com/jots/201602041409/</id>
    <published>2016-02-04T09:09:00-05:00</published>
    <updated>2016-12-17T22:45:29-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Pain is a yoke requiring another.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201601192153/"/>
    <id>http://blog.url.com/jots/201601192153/</id>
    <published>2016-01-19T16:53:00-05:00</published>
    <updated>2016-12-17T22:48:05-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>A man’s greatest threats are often the barely bearable burden and the barely there burden.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201601152317/"/>
    <id>http://blog.url.com/jots/201601152317/</id>
    <published>2016-01-15T18:17:00-05:00</published>
    <updated>2016-12-17T22:46:12-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>The discrete is nothing but an accident of the infinite.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201601011324/"/>
    <id>http://blog.url.com/jots/201601011324/</id>
    <published>2016-01-01T08:24:00-05:00</published>
    <updated>2016-12-17T22:46:28-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Analogies are broken fractals.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201510212018/"/>
    <id>http://blog.url.com/jots/201510212018/</id>
    <published>2015-10-21T16:18:00-04:00</published>
    <updated>2016-12-17T22:46:47-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Consolation and Commemoration in Horace Odes 1.24 and 4.12</title>
    <link rel="alternate" href="http://blog.url.com/essays/consolation-and-commemoration-in-horace-odes-1-24-and-4-12/"/>
    <id>http://blog.url.com/essays/consolation-and-commemoration-in-horace-odes-1-24-and-4-12/</id>
    <published>2015-10-20T20:00:00-04:00</published>
    <updated>2017-05-03T00:16:13-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Evidence and Inference in Herodotus</title>
    <link rel="alternate" href="http://blog.url.com/essays/evidence-and-inference-in-herodotus/"/>
    <id>http://blog.url.com/essays/evidence-and-inference-in-herodotus/</id>
    <published>2015-10-20T20:00:00-04:00</published>
    <updated>2017-05-03T00:16:28-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Full communication is actually impossible, and the degree of communication we do have is a total miracle.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201509221446/"/>
    <id>http://blog.url.com/jots/201509221446/</id>
    <published>2015-09-22T10:46:00-04:00</published>
    <updated>2016-12-17T22:41:28-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>To understand and be understood, that is the quest.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201509221444/"/>
    <id>http://blog.url.com/jots/201509221444/</id>
    <published>2015-09-22T10:44:00-04:00</published>
    <updated>2016-12-17T22:38:58-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>git-do</title>
    <link rel="alternate" href="http://blog.url.com/projects/git-do/"/>
    <id>http://blog.url.com/projects/git-do/</id>
    <published>2015-07-24T20:00:00-04:00</published>
    <updated>2017-05-01T18:51:36-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-01"&gt;Version 0.1&lt;/h4&gt;

&lt;h4 id="download-on-githubhttpsgithubcomsmarghgit-do"&gt;Download on &lt;a href="https://github.com/smargh/git-do"&gt;GitHub&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; is a &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; extension that adds a new perspective to the standard Git workflow. I conceive of it as a promises-based workflow.&lt;/p&gt;

&lt;p&gt;To better explain, let me begin by laying out the default Git workflow:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You start working on a new feature/fix/item&lt;/li&gt;
  &lt;li&gt;Maybe you create a new branch for this feature to live in&lt;/li&gt;
  &lt;li&gt;You get in the flow and knockout the feature in 1 hour&lt;/li&gt;
  &lt;li&gt;You realize you should commit some of this great workflow&lt;/li&gt;
  &lt;li&gt;You want your commit history to be clean and readable, so you want to chunk your work into logical commits&lt;/li&gt;
  &lt;li&gt;So, you use &lt;code&gt;git status&lt;/code&gt; and &lt;code&gt;git diff&lt;/code&gt; to figure out which changes/additions/deletions should live together in a single commit&lt;/li&gt;
  &lt;li&gt;This whole time, your mind is running forward, thinking of the next thing you &lt;em&gt;actually want to code&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This general flow happens to me almost every time I code. I’m future oriented, always thinking about what’s next. So, few things bog me down quite like having to stop after writing code only to retroactively document what I’ve done. This is Git’s default point-of-view: backwards-facing, past-oriented. You can only commit &lt;em&gt;after&lt;/em&gt; you’ve done some work.&lt;/p&gt;

&lt;p&gt;Now, of course, this makes good sense. How could you commit nothing? You need to have done something in order to commit it. Yes, but committing is more than simply adding your work to the Git history; committing is also directly tied to documenting, describing, and summarizing your work. As many developers have argued, commit messages explain &lt;em&gt;why&lt;/em&gt; the changes are there (diffs explain &lt;em&gt;what&lt;/em&gt; changed).&lt;/p&gt;

&lt;p&gt;In an intriguing and well-written &lt;a href="https://arialdomartini.wordpress.com/2012/09/03/pre-emptive-commit-comments/"&gt;blog post&lt;/a&gt;, Arialdo Martini suggests that pre-emptive commit messages confer a number of benefits:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;More focus while developing&lt;/li&gt;
  &lt;li&gt;Commit review is easier&lt;/li&gt;
  &lt;li&gt;Less cognitive load&lt;/li&gt;
  &lt;li&gt;More precise comments&lt;/li&gt;
  &lt;li&gt;Declaration of intent&lt;/li&gt;
  &lt;li&gt;Triggers micro design session&lt;/li&gt;
  &lt;li&gt;Sets a micro goal&lt;/li&gt;
  &lt;li&gt;Creates a little timebox&lt;/li&gt;
  &lt;li&gt;Commit history gains balanced granularity&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I heartily recommend that you read the entire post and wrestle with Arialdo’s points yourselves; I, for one, think he’s on to something. Pre-emptive commit messages have become, for me, something akin to micro &lt;a href=""&gt;feature branches&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When using feature branches, you necessarily are pre-planning what all the feature entails, how best to describe/name it, and what it looks like to complete said feature. Pre-emptive commit messages are conceptually the same thing, just on a smaller scale. In addition to considering what an entire feature entails, you consider what your next commit will entail &lt;em&gt;before you start writing any code&lt;/em&gt; for that commit. This method of working forces you to &lt;a href="http://programmer.97things.oreilly.com/wiki/index.php/Know_Your_Next_Commit"&gt;know your next commit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a co-developer pointed out, this is really just taking the philosophy of Test-Driven Development (TDD) and enforcing it’s mental model even at the commit level (conceptually, the commit is the atomic unit of Git). Everything you do, you do with purpose. You declare your intention before you begin. You know exactly what the code needs to do for this commit to be ready. You make a promise with yourself.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The actual api for &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; is utterly simple. Before you start your next task (by “task” here I mean whatever you conceive of as your smallest unit of work), you run &lt;code&gt;git do "&amp;lt;message&amp;gt;"&lt;/code&gt;. As soon as you have completed your task, you run &lt;code&gt;git done&lt;/code&gt;. That’s it!&lt;/p&gt;

&lt;p&gt;Under the hood &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; is doing a few things. First, it will save your commit message to a temporary file (in a created &lt;code&gt;.git/.git-do/&lt;/code&gt; directory) as well as the name of whatever branch you are on when you run the &lt;code&gt;git do&lt;/code&gt; command. It will then create and checkout a new branch (using the naming schema &lt;code&gt;do/&amp;lt;slugify(message)&amp;gt;&lt;/code&gt;). &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; checkouts out a new branch so that you have a safe “sand-box” to do your work, allowing you to leave if something urgent comes up (e.g. you need to create a hotfix branch from master and solve a critical problem). This branch, however, will be deleted as soon as you run &lt;code&gt;git done&lt;/code&gt;, so you should always think of it and treat it as a temporary branch.&lt;/p&gt;

&lt;p&gt;As you do your work in the &lt;code&gt;do/&lt;/code&gt; branch, you need not commit anything. Remember, &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; exists at the level of the individual commit. If you think you want to use &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt;, but think you will probably have multiple commits, create a feature branch instead. Once you have finished whatever constitutes your commit, you run &lt;code&gt;git done&lt;/code&gt;. This will stage and commit all of the changes made in the &lt;code&gt;do/&lt;/code&gt; branch. It will use the message your wrote for &lt;code&gt;git do&lt;/code&gt; as the actual commit message. It will then checkout the &lt;code&gt;do/&lt;/code&gt; branch’s parent branch and merge that one commit. This merge must be a &lt;a href=""&gt;fast forward merge&lt;/a&gt;, which means you can’t have changed or done anything in the parent branch after running &lt;code&gt;git do&lt;/code&gt; but before running &lt;code&gt;git done&lt;/code&gt; (Again, anything you do using &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; should fit in one commit and should be your branch’s next commit. Don’t let the fact that &lt;strong&gt;&lt;code&gt;git-do&lt;/code&gt;&lt;/strong&gt; creates a temporary branch lull you into thinking you should treat your work there as anything but a single, simple commit).&lt;/p&gt;

&lt;p&gt;After merging your commit into the original parent branch, &lt;code&gt;git done&lt;/code&gt; will delete the &lt;code&gt;do/&lt;/code&gt; branch. So, if you have a terminal prompt that doesn’t specify the current branch, you would never know the &lt;code&gt;do/&lt;/code&gt; branch ever existed. Your commit history would look exactly as it would had you done the work and written the commit message at the end.&lt;/p&gt;

&lt;p&gt;Below is a (contrived) example to demonstrate how simple and short I believe the workflow ought to be:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="gp"&gt;$ &lt;/span&gt;git &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="s2"&gt;"Demonstrate how git-do works for my project page"&lt;/span&gt;
&lt;span class="gp"&gt;$ &lt;/span&gt;touch demonstration.txt
&lt;span class="gp"&gt;$ &lt;/span&gt;vi demonstration.txt
&lt;span class="gp"&gt;$ &lt;/span&gt;git &lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>A Depressed Graduate Student</title>
    <link rel="alternate" href="http://blog.url.com/articles/a-depressed-graduate-student/"/>
    <id>http://blog.url.com/articles/a-depressed-graduate-student/</id>
    <published>2015-06-18T13:38:00-04:00</published>
    <updated>2017-05-01T20:09:52-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;In my &lt;a href="http://fractaledmind.com/articles/a-failed-graduate-student"&gt;previous post&lt;/a&gt; on my time in graduate school, I discussed how I learned to handle failures better. Today, I’m going to talk about how I failed to handle the depression that these mounting failures produced.&lt;/p&gt;

&lt;p&gt;Let’s start where some people find it difficult to start: I have struggled with depression, and odds are that I will stuggle with depression again in my future. This isn’t a sign of weakness; this isn’t something shameful. This is just a fact of my life. I’m a self-critical perfectionist who tends toward absolutist perceptions of reality; of course I’m going to struggle with depression. Unfortunately, when I entered graduate school, I was generally unaware of this likelihood. As with Imposter’s Syndrome, I thought I knew what depression was and I thought I could spot it fairly early on. And, as with Imposter’s Syndrome, it snuck up on me slowly but fiercely.&lt;/p&gt;

&lt;p&gt;When you feel like you are failing frequently and regularly, when those failures build up on top of one another, it can start to have odd effects. The more I thought I failed, the more I wanted to succeed in my next task. Yet, the more I thought I failed, the less energy I had to put into that next task. “I’ve failed at these things; I’ll probably fail at this. Why even try so hard?” This is the internal thought-process I assume my mind had. I say “assume” because I never consciously thought anything like this. My conscious mind wanted to succeed, to return to my old form. My unconscious mind seems to have grown more and more weary, more and more gun-shy.&lt;/p&gt;

&lt;p&gt;For me, depression felt like I was loosing control of my intention. What my conscious mind wanted seemed to have very little effect over what I actually ended up doing. This is the vicious cycle that Imposter’s Syndrome and Depression can generate. The more I thought I was failing, the less energy I could muster to tackle the next task. Putting less energy in, I was more likely to see the result (whatever it might actually be) as a failure, a failure to perform with enough vim and vigor. Failure -&amp;gt; Waning energy -&amp;gt; Failure … on and on.&lt;/p&gt;

&lt;p&gt;I got caught in this cycle for probably two years without really noticing what was happening. This is one of the shittiest things about depression–once you’re in it, it is &lt;em&gt;so much harder&lt;/em&gt; to get out on your own. It’s like trying to run in mud: the more you try, the dirtier and more tired you get, without actually getting as far as you think you should.&lt;/p&gt;

&lt;p&gt;Depression is a spiraling-in on oneself. You are the center of gravity, so &lt;em&gt;you&lt;/em&gt; cannot generate the outside force to propel yourself out. However, others can. I wish I didn’t take so long to actually talk to someone about how I felt. I was so ashamed of my failures, so oblivious to my depression, so insecure in my position, that I kept everything hidden, consciously. There can be a quiet cloud that lingers over graduate school which says that weakness is death, progress is paramount. In many departments, this isn’t probably actually true, but the shadow remains, and a shadow can be enough. I lived in that shadow for far too long.&lt;/p&gt;

&lt;p&gt;But, after finally getting to a point where I simply was unable to keep moving forward with all of the stress internalized, I went and got help. I started going to a therapist. This was a wise decision. No practical effects came of it–I didn’t get any diagnoses, no prescriptions–but I did get better. Talking with someone, being honest about my feelings, emotions, fears, got those things outside of my head, put them in front of me, and thus allowed me to see them for the puny things they were. Fear and depression grow in the shadow; in the light, they shrink to their actual sizes.&lt;/p&gt;

&lt;p&gt;So, I’ve been depressed, I’ve been (and continue to go) to therapy. For anyone out there in anything at all similar to my situation, know that understood weakness is the foundation of wisdom, progress without wisdom is folly, and getting help really will help.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Failed Graduate Student</title>
    <link rel="alternate" href="http://blog.url.com/articles/a-failed-graduate-student/"/>
    <id>http://blog.url.com/articles/a-failed-graduate-student/</id>
    <published>2015-06-16T20:18:00-04:00</published>
    <updated>2017-05-01T20:09:48-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;I’m no longer a graduate student. I’ve graduated; I’m out. It’s a somewhat odd feeling, made even odder because I haven’t felt like a graduate for the last year. I was in graduate school for 3 years and got my Masters, but for the final year I was a “lame-duck” graduate student–I knew I was leaving, my department knew I was leaving, but I was still there. This lame-duck year has been odd, but it has also been the year where I have grown most, matured more, learned truly important things, and started to better understand myself. Hopefully, I can capture some glimmer of those insights in the few words that follow.&lt;/p&gt;

&lt;p&gt;When I started graduate school, I was coming off the single most successful years of my life. I had set lofty goals as an undergraduate, and I had met all of them plus some. I literally thought I was the smartest student at a university of some 10,000 students, and I had enough evidence to convince myself and maybe even some others. I had reached summits I didn’t even know existed when I first started. To put it simply, I hadn’t really ever failed. Then, I started graduate school. I came down from the mountain and entered the valley, starting a new climb. It was odd&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;, certainly, to go from being convinced I was the smartest to feeling deep down that I was one of the dumbest. Everyone knew more than me, everyone knew how to talk better than me, everyone looked calmer than me, everyone was ahead of me. I had heard of “Imposter’s Syndrome” before I came to graduate school, and I thought I knew what it was. I was wrong. You think you’ll be able to spot a “syndrome” when you’re inside of it–“I won’t foolishly think I’m dumb if in actuality I’m not”, I thought. The whole crux of Imposter’s Syndrome is that it is a false perception of reality. I’ll know when I’m perceiving reality incorrectly, won’t I? Well, not to fall too deeply into the Matrix metaphor, but how will you know if your perception of reality is true or not if you don’t have any other external guide? In graduate school, I failed to find such a guide. No one ever told me that I was dumb, that I was saying dumb things, that I was mucking things up; but, no one ever told me otherwise either. For me, this was one of the hardest things about graduate school–I got virtually no feedback, and when I did, it was either generic or negative. The negative feedback, however, was apparently institutional. “Don’t worry about your first year translation exams. Everyone fails and everyone gets bad emails.” This is what multiple upper-classmen in the department told me. Well, I took my first year translation exams; I failed; I got a bad email. Apparently, just like everyone else. But how can I know that my email was “just like” everyone else’s. Why would anyone say something that wasn’t at least based in truth? Why would someone say that it didn’t appear that I &lt;em&gt;truly&lt;/em&gt; knew Latin if that was false? Maybe everyone got somewhat negative emails, but I got the truth, and the truth was horrific. I failed, and I failed hard; a first, but not the last.&lt;/p&gt;

&lt;p&gt;Failure is hard. It’s harder still when you don’t really know how to deal with it. I spent most of graduate school feeling like I had failed in small ways time and time again. Turn in a paper, no response = failure. Turn in a paper late, good response = failure. Bumble a sight-reading in class = failure. Not get through all the assigned reading = failure. Not talk enough in class = failure. Talk too much in class = failure. I’ll let you in on a nasty secret–most of those things I saw as failures, my professors didn’t even notice. One of the most liberating things that came out of me talking to my professors about my desire to leave was learning how surprised they were. They thought I was a good student, added value to the department, did good work, was bright. I never would have thought that. Never. And this is the pernicious trouble with unhandled failure–it blinds you. I couldn’t handle my failures, real or perceived, and so they built up on top of one another. Each increasing the odds that I would see more failures in the future. The more you fail, you more you think of yourself as a failures. What do failures do, they fail, so you expect to fail more, so you see more failures, and the process spirals out of control. To anyone who may read this, &lt;strong&gt;don’t be stupid, learn to handle failure&lt;/strong&gt;. Well, you would ask, how the hell do I do that? To be honest, I’m not entirely sure still, but I think I’ve gotten better, so I’ll talk about those small advancements.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Not all failures are created equal.&lt;/em&gt; This may seem obvious, but it took me an unfortunately long time to realize this simple truth. True failures live on a spectrum, some more grievous than others. A typo in this essay is a failure. Missing a bill payment is a failure. Clearly, they are different failures with different weights. Don’t waste your energy lamenting the small ones. If the problem is fixable, fix it and move on. If not, add a mental note to not make that same mistake in the future and move on. Save your energy to lament the big ones.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Lament big failures.&lt;/em&gt; Don’t try to bottle away emotion caused by failure.Don’t try to act like a robot who can rationally handle the failure and move on easily. If you failed, it will make you feel bad. Actually feel that. Allow yourself to sit in that emotion for a bit. Acknowledge its existence. I let way too many failures build up because I thought I had dealt with them simply by rationalizing them. “Failed in this way, by doing these things. Don’t do those things in these situations again. Dealt with.” I was dumb.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Don’t wallow.&lt;/em&gt; Sit in emotion, but don’t swim in it. You do need to move on. While only rationalizing away a failure will probably cause you more grief further down the road, not actually rationally considering how you failed, what you did to directly cause the failure, and how best to avoid that failure in the future, you will probably just spiral into depression. Failing sucks, but it is a much better learning experience than success.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Talk with someone.&lt;/em&gt; This can work on a number of fronts. You should actually talk with people to ensure that your sense of the failure (its existence, weight, repercussions) are close to reality. If only I had sat down and had frank conversations with my professors early and often, I would have learned that I was grossly over-estimating the weight of my perceived failures. But, even if you did actually fail, talking to someone ensures that you don’t try to deal with it all on your own. We’re social animals; don’t fight that.&lt;/p&gt;

&lt;p&gt;OK. This little sermonette is over, but I wanted to go down that path because it’s intensely important to me. Learning to deal with failure was the primary benefit of graduate school for me. From what I gather talking to others, it’s an absolutely essential part of any successful individual, whether graduate student or not. More importantly, however, not handling failure well is what sent me into depression. This is a deeper topic for discussion and consideration in another post, but suffice it say that I would wish for no one to become depressed due to perceived failures. I would confidently assert, without knowing anything about you individually, that you almost certainly haven’t failed as badly as you think, the repercussions aren’t as dire as you think, and your worth is still much higher than you think. If you don’t take my word for it, talk to someone else and check; you might be surprised by what they think.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;There’s that word again. I will almost certainly return to it, as its monosyllabic gruffness is the closest I can come to capturing reality. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>ZotQuery</title>
    <link rel="alternate" href="http://blog.url.com/projects/zotquery/"/>
    <id>http://blog.url.com/projects/zotquery/</id>
    <published>2015-05-26T20:00:00-04:00</published>
    <updated>2017-05-01T18:52:26-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-85"&gt;Version 8.5&lt;/h4&gt;

&lt;h4 id="download-on-packalhttppackalorgworkflowzotquery"&gt;Download on &lt;a href="http://packal.org/workflow/zotquery"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; is an Alfred workflow that grants the user access to the data stored in their &lt;a href="https://www.zotero.org"&gt;Zotero&lt;/a&gt; application.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="requirements"&gt;REQUIREMENTS&lt;/h3&gt;

&lt;p&gt;To date, it has only been tested on a Mac with both Zotero Firefox and Standalone installed. &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; should work with only Zotero Firefox or Standalone installed, but that is currently untested. If you are using the workflow successfully with either one only installed, please let me know. It has also only been tested on Alfred 2.1+. Finally, it was tested on the standard Python distribution for Mac OS X Mavericks (10.9), which is 2.7.6, and not on Python 3. Once again, if anyone is using the workflow successfully on another distribution of Python, please let me know.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="configuration"&gt;CONFIGURATION&lt;/h3&gt;

&lt;p&gt;When you first download the workflow, you will need to run &lt;code&gt;z:config&lt;/code&gt; first to configure the necessary settings before you attempt any queries. In fact, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; will kick you to the &lt;code&gt;z:config&lt;/code&gt; command if you try any of the queries without having first configured your settings.&lt;/p&gt;

&lt;p&gt;&lt;img alt="configuration" src="../../images/projects/zotquery/zq_config_init.png" /&gt;&lt;/p&gt;

&lt;p&gt;On first run, the configurator will begin by searching for, and creating if necessary, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;’s workflow data folder, which can always be found at &lt;code&gt;/Users/$USER/Library/Application Support/Alfred 2/Workflow Data/com.hackademic.zotquery/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, in version 5.5 and on, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; &lt;strong&gt;no longer needs to install any Python dependencies.&lt;/strong&gt; The workflow ships with all necessary components baked in. This has already removed a vast majority of the support issues.&lt;/p&gt;

&lt;p&gt;The configurator next moves on to find all the necessary Zotero paths. &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; requires the full path to 3 things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;your Zotero sqlite database&lt;/li&gt;
  &lt;li&gt;your Zotero storage folder&lt;/li&gt;
  &lt;li&gt;the folder that holds your linked attachments&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The configurator attempts to find all necessary paths automatically, but if it fails, it will ask you to select one manually. The title of the dialog box will alert you to what path the configurator requires:&lt;/p&gt;

&lt;p&gt;&lt;img alt="choosing the Zotero folder where linked attachments reside" src="../../images/projects/zotquery/zq_config_choose-folder.png" /&gt;&lt;/p&gt;

&lt;p&gt;Once all paths are stored, the configurator moves on to set up your &lt;a href="http://www.zotero.org/support/dev/server_api/v2/start"&gt;Zotero API&lt;/a&gt; information. This workflow utilizes the Zotero API to export citations of chosen items. In order for the user to utilize these functions, they must have and set up a Zotero private key. Step one requires your Zotero User ID:&lt;/p&gt;

&lt;p&gt;&lt;img alt="entering Zotero user ID" src="../../images/projects/zotquery/zq_config_userid.png" /&gt;&lt;/p&gt;

&lt;p&gt;If you do not have or do not know your Zotero User ID, click the &lt;code&gt;Where do I find my User ID?&lt;/code&gt; button. This will open Zotero’s “Feeds/API” tab, where you may need to login. Once logged in, you will see a page similar to this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="creatingnew Zotero private key" src="../../images/projects/zotquery/Zotero___Settings___Feeds_API-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;This shows a user who has two API keys set up, one for personal use and one for the iOS app &lt;a title="PaperShip - Manage, Annotate, and Share your Papers On The Go ..." href="http://www.papershipapp.com/"&gt;PaperShip&lt;/a&gt;. If you do not have a Personal API key, you can easily set one up by clicking the “Create new private key” link. Your User ID will be a number, probably less than 8 digits. Insert it into the text field and click &lt;code&gt;Set User ID&lt;/code&gt; (&lt;strong&gt;Note&lt;/strong&gt;: Applescript text input dialog boxes do not respond, typically, to the keyboard shortcut for paste, so you will likely need to right-click and manually paste in the ID).&lt;/p&gt;

&lt;p&gt;Second, you will need to input your API Key:&lt;/p&gt;

&lt;p&gt;&lt;img alt="entering Zotero API key" src="../../images/projects/zotquery/zq_config_apikey-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;Since &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; reads this &lt;code&gt;settings.json&lt;/code&gt; file whenever it attempts to connect to the Zotero API, if you don’t insert the proper data here, the “Export Citation” and “Export Reference” (see below) functions &lt;strong&gt;will not work&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; (now in version 4.0) will also allow you to set your export style and format. Once you have entered your API information, the configurator will move to setting your export preferences:&lt;/p&gt;

&lt;p&gt;&lt;img alt="choosing export style and format" src="../../images/projects/zotquery/zq_prefs1.png" /&gt;&lt;/p&gt;

&lt;p&gt;First, you will select the &lt;a href="http://citationstyles.org/"&gt;CSL Style&lt;/a&gt; that you wish to use. Currently &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; can export data in 5 different styles: Chicago (author-date), APA, MLA, Zotero’s own RTF-Scan format, and BibTeX. Now, in &lt;strong&gt;version 6.2&lt;/strong&gt;, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; will also allow users to export in the &lt;a href="http://zotero-odf-scan.github.io/zotero-odf-scan/"&gt;ODT-RTF Scannable Cites format&lt;/a&gt; (option not shown in image below). This will determine the format of exported citations and references.&lt;/p&gt;

&lt;p&gt;&lt;img alt="choosing CSL style" src="../../images/projects/zotquery/zq_prefs2-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;Next, you will select the text formatting for exported data. &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; (in version 4.0) can export in either &lt;a href="http://daringfireball.net/projects/markdown/basics"&gt;Markdown&lt;/a&gt; or &lt;a href="http://en.wikipedia.org/wiki/Rich_Text_Format"&gt;Rich Text&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="choosing export text format" src="../../images/projects/zotquery/zq_prefs3.png" /&gt;&lt;/p&gt;

&lt;p&gt;All exported text is put in your clipboard, so you can use it anywhere in any text editor. You can also alter your export preferences at any point, using the &lt;code&gt;z:settings&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:settings command" src="../../images/projects/zotquery/zq_export_settings.png" /&gt;&lt;/p&gt;

&lt;p&gt;Finally, you will need to select which Zotero client you use, either &lt;a href="https://www.zotero.org/download/"&gt;Zotero Standalone&lt;/a&gt; or &lt;a href="https://www.zotero.org/download/"&gt;Zotero for Firefox&lt;/a&gt;. This will determine which app will open any items that you select.&lt;/p&gt;

&lt;p&gt;&lt;img alt="choosing Zotero client" src="../../images/projects/zotquery/zq_client.png" /&gt;&lt;/p&gt;

&lt;p&gt;Once all settings and preferences are set, the configurator will finally build the JSON cache of your Zotero data. &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; will clone your Zotero database and also generate a JSON file with all pertinent information. Once cached, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; is configured.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="functions"&gt;FUNCTIONS&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; has 5 main functions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Search&lt;/li&gt;
  &lt;li&gt;Cite&lt;/li&gt;
  &lt;li&gt;Open&lt;/li&gt;
  &lt;li&gt;Cache&lt;/li&gt;
  &lt;li&gt;and Add&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In general, the order of operations would be: cache, search, open/cite. This means, in order to search, you need to have an up-to-date cache, and in order to cite or open an item, you will first need to search and select it.&lt;/p&gt;

&lt;p&gt;Under &lt;code&gt;Search&lt;/code&gt; there are 8 options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;General search&lt;/li&gt;
  &lt;li&gt;Title-specific search&lt;/li&gt;
  &lt;li&gt;Author-specific search&lt;/li&gt;
  &lt;li&gt;Tag-specific search&lt;/li&gt;
  &lt;li&gt;Collection-specific search&lt;/li&gt;
  &lt;li&gt;Attachment-specific search&lt;/li&gt;
  &lt;li&gt;Notes-specific search&lt;/li&gt;
  &lt;li&gt;New items only&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Note that all searches coerce both the query and the data into lowercase, so you can search using lowercase queries and still get matches.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;General&lt;/strong&gt; search is launched by the keyword &lt;code&gt;zot&lt;/code&gt; or the short version &lt;code&gt;z&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot general search command" src="../../images/projects/zotquery/zq_gen_init-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;This will search your entire Zotero database for any use of the query provided. The search script is “loose,” that is, it searches for matches of the query “in” the data not matches that “equal” the data. This means you can search half words, words in the middle of titles, etc.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; will not begin searching until you have entered at least 3 characters. This ensures faster, smarter results. Until you have typed at least 3 characters, you will see this result:&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot general search with too short query" src="../../images/projects/zotquery/Screen_Shot_2014-01-18_at_6_10_23_PM-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;Once you complete your query, and the script catches up with you, you will see a list of all of your Zotero items that match the query. If your query doesn’t have any matches, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; returns an error:&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot general search no results" src="../../images/projects/zotquery/zq_error_res-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;If, however, you have results, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; presents them in a ranked order:&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot general search ranked results" src="../../images/projects/zotquery/zq_gen_search-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;For ease of use, the workflow provides unique icons for the various item types:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;article   &lt;img alt="article icon" src="../../images/projects/zotquery/n_article.png" /&gt;&lt;/li&gt;
  &lt;li&gt;book      &lt;img alt="book icon" src="../../images/projects/zotquery/n_book.png" /&gt;&lt;/li&gt;
  &lt;li&gt;chapter   &lt;img alt="chapter icon" src="../../images/projects/zotquery/n_book.png" /&gt;&lt;/li&gt;
  &lt;li&gt;conference paper &lt;img alt="conference icon" src="../../images/projects/zotquery/n_conference.png" /&gt;&lt;/li&gt;
  &lt;li&gt;other &lt;img alt="other icon" src="../../images/projects/zotquery/n_written.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If your item has an attachment, the icon changes to signal the addition as will the subtitle field. The subtitle field will include &lt;code&gt;Attachments: n&lt;/code&gt;, where n is the number of attachments:&lt;/p&gt;

&lt;p&gt;&lt;img alt="item with attachments" src="../../images/projects/zotquery/zq_attachments-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;The altered icons each have a small plus sign in the top-right corner:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;article + attachment  &lt;img alt="article icon with attachment" src="../../images/projects/zotquery/att_article.png" /&gt;&lt;/li&gt;
  &lt;li&gt;book + attachment     &lt;img alt="book icon with attachment" src="../../images/projects/zotquery/att_book.png" /&gt;&lt;/li&gt;
  &lt;li&gt;chapter + attachment  &lt;img alt="chapter icon with attachment" src="../../images/projects/zotquery/att_chapter.png" /&gt;&lt;/li&gt;
  &lt;li&gt;conference paper + attachment   &lt;img alt="conference icon with attachment" src="../../images/projects/zotquery/att_conference.png" /&gt;&lt;/li&gt;
  &lt;li&gt;other + attachment    &lt;img alt="other icon with attachment" src="../../images/projects/zotquery/att_written.png" /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;Author&lt;/strong&gt; search is launched by &lt;code&gt;zot:a&lt;/code&gt; or the short version &lt;code&gt;za&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot:a author search command" src="../../images/projects/zotquery/zq_a_init-4.png" /&gt;&lt;/p&gt;

&lt;p&gt;This search only queries the last names of the authors of your Zotero data. For example: &lt;code&gt;zot:a thomas&lt;/code&gt; will return all the items that have an author (or editor, translator, etc.) with the last name “Thomas”.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot:a author search results" src="../../images/projects/zotquery/zq_a_search-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Title&lt;/strong&gt; search is launched by &lt;code&gt;zot:t&lt;/code&gt; or the short version &lt;code&gt;zt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot:t title search command" src="../../images/projects/zotquery/zq_t_init-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;This search only queries the title fields of your Zotero data. For example: &lt;code&gt;zot:t virgil&lt;/code&gt; will return all of the items whose title contains the word “Virgil”.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot:t title search results" src="../../images/projects/zotquery/zq_t_search.png" /&gt;&lt;/p&gt;

&lt;p&gt;The final two searches (Tag and Collection) are two-step searches. In step-one, you search &lt;em&gt;for&lt;/em&gt; a particular Tag or Collection; in step-two you search &lt;em&gt;within&lt;/em&gt; that particular Tag or Collection for your query.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Tag&lt;/strong&gt; search is launched by &lt;code&gt;z:tag&lt;/code&gt; or the short version &lt;code&gt;ztg&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:tag tags search command" src="../../images/projects/zotquery/zq_tag_init.png" /&gt;&lt;/p&gt;

&lt;p&gt;This allows you to search through all of your Zotero tags.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:tag tags search results" src="../../images/projects/zotquery/zq_tag_search.png" /&gt;&lt;/p&gt;

&lt;p&gt;Once you select a tag, Alfred will automatically initiate the &lt;code&gt;zot:tag&lt;/code&gt; search, which will search within that tag for your query. The &lt;code&gt;zot:tag&lt;/code&gt; (or &lt;code&gt;znt&lt;/code&gt;) query functions just like the general &lt;code&gt;zot&lt;/code&gt; query, except that it is limited to those items with the previously chosen tag.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot:tag in-tag search results" src="../../images/projects/zotquery/zq_intag_seach.png" /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;Collection&lt;/strong&gt; search is similar. It is launched by &lt;code&gt;z:col&lt;/code&gt;, or by &lt;code&gt;zc&lt;/code&gt;, which begins a search for all of your Zotero collections.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:col collections search command" src="../../images/projects/zotquery/zq_col_init.png" /&gt;&lt;/p&gt;

&lt;p&gt;As you type, it will filter any collections that contain the query.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:col collections search results" src="../../images/projects/zotquery/zq_col_search-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;Once you choose a particular collection, Alfred will initiate the &lt;code&gt;zot:c&lt;/code&gt; search (also &lt;code&gt;znc&lt;/code&gt;), which will search within that particular collection.&lt;/p&gt;

&lt;p&gt;&lt;img alt="zot:c in-collection search results" src="../../images/projects/zotquery/zq_incol_search.png" /&gt;&lt;/p&gt;

&lt;p&gt;As above, the &lt;code&gt;zot:c&lt;/code&gt; search functions just like the simple &lt;code&gt;zot&lt;/code&gt; search.&lt;/p&gt;

&lt;p&gt;Finally, you can now (after version 4.1) search only items with attachments using the &lt;code&gt;z:att&lt;/code&gt; query (short version = &lt;code&gt;zat&lt;/code&gt;). This query allows you to quickly find pdfs or epubs in your Zotero library and open them in your default application. As of now, &lt;code&gt;z:att&lt;/code&gt; only allows for you to open the attached files.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:att attachments search results" src="../../images/projects/zotquery/zq_attachment_search.png" /&gt;&lt;/p&gt;

&lt;p&gt;Similarly, you can use &lt;code&gt;zot:n&lt;/code&gt; (or &lt;code&gt;zn&lt;/code&gt;) to search through the notes for any items. This can prove very helpful for people who use Zotero as their notes repository for all of their secondary sources.&lt;/p&gt;

&lt;p&gt;Finally, the &lt;code&gt;z:new&lt;/code&gt; search will bring all of the items added to Zotero since the last cache update. This feature is there to make it easier to find items if you do one long research run, adding lots of items to Zotero before re-using &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;. Using &lt;code&gt;z:new&lt;/code&gt; you can double check exactly what’s been added.&lt;/p&gt;

&lt;p&gt;Together these 8 search options provide you with various ways to find the exact item you need. Once you find that item, you have a few options with what you can do next.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Once you select an item (in all the searches except &lt;code&gt;z:att&lt;/code&gt;), there are 5 options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open Zotero to that item.&lt;/li&gt;
  &lt;li&gt;Export a short reference to that item.&lt;/li&gt;
  &lt;li&gt;Export a citation of that item.&lt;/li&gt;
  &lt;li&gt;Open the item’s attachment (if it has any).&lt;/li&gt;
  &lt;li&gt;Append a citation of the item to a temporary bibliography&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you merely hit &lt;code&gt;return&lt;/code&gt; on your chosen item, option 1 will occur and Zotero will open to that item.&lt;/p&gt;

&lt;p&gt;If you hit &lt;code&gt;option+return&lt;/code&gt; when you choose your item, you will export a short reference to that item.&lt;/p&gt;

&lt;p&gt;&lt;img alt="export reference" src="../../images/projects/zotquery/zq_gen_ref.png" /&gt;&lt;/p&gt;

&lt;p&gt;Depending on your style and format settings, your reference will be of various types.&lt;/p&gt;

&lt;p&gt;If you hit &lt;code&gt;control+return&lt;/code&gt;, you will export a full citation of the item in your chosen format.&lt;/p&gt;

&lt;p&gt;&lt;img alt="export markdown citation" src="../../images/projects/zotquery/zq_gen_cite.png" /&gt;&lt;/p&gt;

&lt;p&gt;Next, if you hit &lt;code&gt;shift+return&lt;/code&gt;, you will open the attachment of that item.&lt;/p&gt;

&lt;p&gt;&lt;img alt="open attachment" src="../../images/projects/zotquery/zq_gen_open.png" /&gt;&lt;/p&gt;

&lt;p&gt;Finally, if you hit &lt;code&gt;fn+return&lt;/code&gt;, you will append a citation of the item to a temporary bibliography file.&lt;/p&gt;

&lt;p&gt;&lt;img alt="append markdown citation to bibliography" src="../../images/zq_gen_append.png" /&gt;&lt;/p&gt;

&lt;p&gt;This bibliography file is stored in the workflow’s cache folder. You can add as many citations to it as you wish. This function allows you to dynamically build a Bibliography/Works Cited page. When you have put all the needed citations in the temporary file, you need only run the &lt;code&gt;z:bib&lt;/code&gt; command to export them.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:bib export command" src="../../images/projects/zotquery/zq_bib_init-5.png" /&gt;&lt;/p&gt;

&lt;p&gt;This will take all of the citations in the temporary bibliography file, organize them in alphabetical order, and copy the result to the clipboard. A result in Markdown format will resemble this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="exported markdown citations example" src="../../images/projects/zotquery/WORKS_CITED-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;The temporary bibliography file is not the only way, however, to automatically generate a full Bibliography/Works Cited page. Since many Zotero users, myself included, use either Tags or Collections to organize their library into writing projects, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; also allows the user to export a full formatted bibliography (in alphabetical order) for any Tag or Collection.&lt;/p&gt;

&lt;p&gt;When you are searching for a Tag or a Collection with &lt;code&gt;z:tag&lt;/code&gt; or &lt;code&gt;z:col&lt;/code&gt;, you can use &lt;code&gt;control+return&lt;/code&gt; to export a bibliography of that Tag or Collection, instead of simply searching within that Tag or Collection by hitting &lt;code&gt;return&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="export bibliography of collection" src="../../images/projects/zotquery/zq_col_bib.png" /&gt;&lt;/p&gt;

&lt;p&gt;Thus, if you organize the citations for particular project within a certain Collection or under a certain Tag, you can create full, formatted Works Cited pages on the fly from &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;Taken together, these export options make &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; an academic’s best friend in the writing process. You can insert in-text references, full citations, or generate entire Works Cited all from &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;. These citations, references, and bibliographies can also now be Rich Text in addition to Markdown. This allows users who write in &lt;a href="http://office.microsoft.com/en-us/word/"&gt;Microsoft Word&lt;/a&gt;, &lt;a href="http://www.apple.com/mac/pages/"&gt;Pages&lt;/a&gt;, or &lt;a href="http://literatureandlatte.com/scrivener.php"&gt;Scrivener&lt;/a&gt; to utilize &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;. You can also open Zotero directly to an item (for quick meta-data editing) or even open an item’s attachment to double check a quote.&lt;/p&gt;

&lt;p&gt;There are, however, a few caveats and possible configurations. First, these final options (export reference, export citations, append citation, and generate works cited) all use Zotero’s web API, and so they require an internet connection. If you are not connected to the internet, all will fail (gracefully). Second, the workflow defaults to Chicago (author-date) style both for short references and full citations (examples above). If you wish to use another of Zotero’s CSL styles, you will need to change the style via the &lt;code&gt;z:settings&lt;/code&gt; command. Since &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; now exports BibTeX and RTF-Scan cite keys, even users who prefer to write in [MultiMarkdown](http://fletcherpenney.net/multimarkdown/ “MultiMarkdown - fletcherpenney.net”) and convert to [LaTeX](http://www.latex-project.org/ “LaTeX – A document preparation system”) can utilize &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: These features will also require that you have the proper Zotero API data in the &lt;code&gt;settings.json&lt;/code&gt; file. For instructions on setting this up, see above.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;There is also the Caching function. All of the query scripts are querying a JSON cache of your Zotero database. This file is created and then updated with the keyword &lt;code&gt;z:cache&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img alt="z:cache caching command" src="../../images/projects/zotquery/zq_cache_init-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;This function will find your Zotero sqlite database, read its contents, and create a JSON cache of the pertinent information.&lt;/p&gt;

&lt;p&gt;When you first download the workflow, the configurator will run this command in order to create the cache that all of the query scripts will read. You will always be able to update the cache with this command as well, although the workflow is configured to auto-update the cache after every query execution; that is, after you do any action on an item (open, reference, citation, append). This means that after you perform an action on an item, the workflow will check if the cache needs updating and if so, the workflow will update it in the background.&lt;/p&gt;

&lt;p&gt;Note, however, that if you have altered your Zotero data and are about to use &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;, you will need to force an update using &lt;code&gt;z:cache&lt;/code&gt; before any of the queries have access to the new information. As a general rule of thumb, I will force update the cache each time I sit down to a lot of work with &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;, but will let it auto-update most of the time.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="additional-features"&gt;ADDITIONAL FEATURES&lt;/h3&gt;

&lt;p&gt;Aside from the core features, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; comes with some additional features. First, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; comes with the ability to set up a keyboard shortcut to launch the title-specific search. I use &lt;code&gt;command+shift+Z&lt;/code&gt; as my hotkey. If you setup the hotkey, you can launch immediately into the title search (with a snazzy interface):&lt;/p&gt;

&lt;p&gt;&lt;img alt="auto title search" src="../../images/projects/zotquery/zq_hotkey_search-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;You can also change this hotkey to launch whichever query you like.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; also has the ability to be an option in your Alfred fallback searches. In order to setup &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; as a fallback search option, open Alfred’s preferences and go to the &lt;code&gt;Features&lt;/code&gt; tab. Near the bottom of the page you will see a button to &lt;code&gt;Setup fallback results&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img alt="add fallback search in preferences pt. 1" src="../../images/projects/zotquery/zq_fallback_setup-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;When you click that button a panel will slide out of top:&lt;/p&gt;

&lt;p&gt;&lt;img alt="add fallback search in preferences pt. 2" src="../../images/projects/zotquery/zq_fallback-3.png" /&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;code&gt;+&lt;/code&gt; button and select &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; from the &lt;code&gt;Workflow Trigger&lt;/code&gt; list. You can even re-order the fallback searches, and put &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; near the top. When setup, this will allow you to search in Alfred like this:&lt;/p&gt;

&lt;p&gt;&lt;img alt="add fallback search in preferences pt. 3" src="../../images/projects/zotquery/zq_fallback_search-2.png" /&gt;&lt;/p&gt;

&lt;p&gt;And have it immediately become a &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; search.&lt;/p&gt;

&lt;p&gt;It’s also possible to manually determine what &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; will use to search for the various query types. &lt;strong&gt;NOTE:&lt;/strong&gt; This is probably a &lt;em&gt;power-user&lt;/em&gt; feature and not for those who don’t know their way around JSON.&lt;/p&gt;

&lt;p&gt;In order to alter the search scope for any query type, you will need to find and open the &lt;code&gt;zot_filters.json&lt;/code&gt; file in &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;’s storage folder (&lt;code&gt;z:bug&lt;/code&gt; -&amp;gt; &lt;code&gt;Storage&lt;/code&gt; to open that folder). If you edit this file, it changes what &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; looks at for the various filters. The file is (obviously) in JSON format. The keys are the various types of filters (&lt;code&gt;general&lt;/code&gt;, &lt;code&gt;titles&lt;/code&gt;, &lt;code&gt;in-collection&lt;/code&gt;, etc). For each key, there is a list of items that it will search. This items are themselves lists with two items (except for &lt;code&gt;notes&lt;/code&gt;, which is only one item). To remove an item, be sure to remove its entirety:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;[
"data",
"title"
],
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;You could also use a scripting language to read the JSON, manipulate the dictionary, then overwrite the file with new JSON.&lt;/p&gt;

&lt;p&gt;Another “power-user” feature allows users to limit the overall scope of &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; to only their personal library. Since &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; now indexes and caches any Group Libraries that you may be a part of, these items are searchable from &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;. However, it is occasionally the case that user’s don’t want to search these items, but only their own personal items. In order to restrict &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;’s scope to &lt;em&gt;only&lt;/em&gt; your personal library, you only need to change a few things.&lt;/p&gt;

&lt;p&gt;If you open Alfred and &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;, and you open the Run Script action connected to &lt;code&gt;z:cache&lt;/code&gt; you will find this:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python zotquery.py --cache True False&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;These three arguments tell zotquery to use the caching object (&lt;code&gt;--cache&lt;/code&gt;), to force a cache update (&lt;code&gt;True&lt;/code&gt;) and to not limit the scope to only the user’s personal library (&lt;code&gt;False&lt;/code&gt;). As detailed in the description at the top of &lt;code&gt;zotquery.py&lt;/code&gt;, the last argument is a Boolean value for whether or not to limit the scope of the cache to the user’s personal library. By default, it is set to &lt;code&gt;False&lt;/code&gt;, which means that group libraries are included in &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;’s cache. If you change this to &lt;code&gt;True&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; will only cache your personal library, and thus will only search your personal library.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt; also has a cache updater that runs each time you perform an action. This is the Run Script action beneath the “Citation Copied!” notification for each filter type. If you open this Run Script action you will see:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python zotquery.py --cache False False&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This will check to see if the cache needs updating (thus the &lt;code&gt;False&lt;/code&gt; force argument), and will include all libraries. To exclude group libraries, change each of these Run Script actions to:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python zotquery.py --cache False True&lt;/code&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;So that’s how you use &lt;strong&gt;&lt;code&gt;ZotQuery&lt;/code&gt;&lt;/strong&gt;. It’s a powerful tool. I hope you like it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Wikify</title>
    <link rel="alternate" href="http://blog.url.com/projects/wikify/"/>
    <id>http://blog.url.com/projects/wikify/</id>
    <published>2015-05-26T20:00:00-04:00</published>
    <updated>2017-05-01T18:52:23-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-26"&gt;Version 2.6&lt;/h4&gt;

&lt;h4 id="download-on-packalhttpwwwpackalorgworkflowwikify"&gt;Download on &lt;a href="http://www.packal.org/workflow/wikify"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; is a workflow to add some great &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; and wiki goodness to &lt;a href="https://www.evernote.com/"&gt;Evernote&lt;/a&gt;. In this post, I want to lay out all of the functionality and how to take advantage of it.&lt;/p&gt;

&lt;h3 id="markdown-functionality"&gt;Markdown Functionality&lt;/h3&gt;

&lt;p&gt;One half of &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt;’s functionality concerns integrating Markdown and Evernote. Essentially, this means being able to send Markdown text to Evernote as HTML &lt;em&gt;and&lt;/em&gt; being able to export an Evernote note to a Markdown text file.&lt;/p&gt;

&lt;p&gt;In order to export an Evernote note to a Markdown text file, you can use the &lt;code&gt;enmd&lt;/code&gt; keyword from Alfred. &lt;code&gt;enmd&lt;/code&gt; stands for “Evernote to Markdown”, and this command will take your currently selected Evernote note and create a Markdown formatted text file which will immediately be opened in your default text editor. In addition, &lt;code&gt;enmd&lt;/code&gt; will fill in the note’s title, notebook, and tags as metadata at the top of the file (this will make it a snap to edit the note and send it back to Evernote using the &lt;code&gt;mden&lt;/code&gt; command, which I will talk about next). The workflow also comes with the ability to bind a keyboard shortcut to this function (I use &lt;code&gt;cmd + shift + 9&lt;/code&gt;). No fuss, no hassle, no wait. Export your Evernote note into Markdown in a flash.&lt;/p&gt;

&lt;p&gt;But what about getting data &lt;em&gt;into&lt;/em&gt; Evernote? &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; will also allow you to write notes in Markdown in your text editor of choice and then send that text to Evernote, where it will be formatted and displayed in proper HTML. Now, this function has a bit of quirks to it, so let me elaborate. You can launch this function in one of two ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;code&gt;mden&lt;/code&gt; keyword in Alfred&lt;/li&gt;
  &lt;li&gt;setup a keyboard shortcut&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The keyboard shortcut will actually allow you simply to select your text (&lt;code&gt;cmd + a&lt;/code&gt; for “Select All”) and then press the shortcut to run the script. Alternatively, you can select the text, &lt;em&gt;copy it to the clipboard&lt;/em&gt;, and then pop up Alfred and use the &lt;code&gt;mden&lt;/code&gt; command (this is, obviously, short for “Markdown to Evernote”). It is important to note that if you use the &lt;code&gt;mden&lt;/code&gt; command from Alfred, your Markdown text &lt;em&gt;must&lt;/em&gt; be in the clipboard.&lt;/p&gt;

&lt;p&gt;Now, how do you tell &lt;code&gt;mden&lt;/code&gt; &lt;em&gt;where&lt;/em&gt; to send your note, or what tags it should have, or what it’s title is? In order to assign Note Title, Notebook, and Tags, you can use simple &lt;a href="http://fletcherpenney.net/multimarkdown/"&gt;MultiMarkdown Headers&lt;/a&gt;, or simple symbols which are placed at the top of the document:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Title:&lt;/code&gt; or &lt;code&gt;#&lt;/code&gt; for the note’s title&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Notebook:&lt;/code&gt; or &lt;code&gt;=&lt;/code&gt; for the note’s notebook destination&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;Tags:&lt;/code&gt; or &lt;code&gt;@&lt;/code&gt; for the note’s tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, the top of your Markdown text note might look something like this:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;# Text Note Title
= My Default Notebook
@ tag1, tag2, tag3
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;But, that’s not all that &lt;code&gt;mden&lt;/code&gt; can do. I’ve added a few extras to its capabilities. In addition to converting Markdown to text to HTML and sending that to Evernote, &lt;code&gt;mden&lt;/code&gt; has three other pretty cool features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;document-specific text snippets (use &lt;code&gt;^^^snippet^^^&lt;/code&gt; syntax)&lt;/li&gt;
  &lt;li&gt;auto-linking to pre-existing Evernote notes (no special syntax)&lt;/li&gt;
  &lt;li&gt;auto-linking to new Evernote notes (use &lt;code&gt;[[double bracket]]&lt;/code&gt; syntax)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, let me explain document-specific text snippets. This feature was inspired recently as I was taking notes in class. In-class note-taking is a bit unique, since you won’t exactly know what words will be used repeatedly before the class begins. I’m all about &lt;a href="http://smilesoftware.com/TextExpander/"&gt;TextExpander&lt;/a&gt;, but I can’t set up snippets if I don’t know what will be the key words for that class. Plus, I don’t want to clutter my TextExpander library with these one-off snippets. So, document-specific text snippets was born. The idea is to use snippets in your notes as you type, and then define the &lt;code&gt;snippet:expanded text&lt;/code&gt; relationship before you use &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; to send the notes to Evernote. The syntax is dead-simple. Simply wrap your “snippet dictionary” in triple carets (&lt;code&gt;^^^snippet:expanded text^^^&lt;/code&gt;). You can have one-off “dictionaries” or you can make one long dictionary at the end of your document. The only things you need to remember are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ALWAYS use ,, as your in-text prefix (you &lt;em&gt;can&lt;/em&gt; change this in the code)&lt;/li&gt;
  &lt;li&gt;if its a one-off (only one snippet), the “dictionary” needs to exist on its own line&lt;/li&gt;
  &lt;li&gt;if its a multi-snippet “dictionary”, use the triple carets like fenced code blocks&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To ensure these few easy syntax rules makes sense, here’s an example:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;,,p are separated by a blank line.
^^^p:Paragraphs^^^
New text.
2nd paragraph. *,,i*, **,,b**, `,,m`.
^^^
i:Italics
b:BOLD
m:monospace
^^^
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Thats all there is to it. Note how each snippet is prefixed by &lt;code&gt;,,&lt;/code&gt;. This ensures that both you and the processor know what text needs to be expanded, and you don’t need to have the commas in the snippet dictionary. You can mix and match single-line snippet dictionaries with multi-snippet dictionaries in the same document. You can even use non-ASCII characters in your snippets or in your expanded text. For me, this is a killer feature. I hope someone else finds it useful.&lt;/p&gt;

&lt;p&gt;Next, auto-linking to pre-existing Evernote notes. This is really the feature at the heart of &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt;, because this is what allows you to “wikify” your Evernote library. The idea is really quite simple: write your note as you normally would (in this case in Markdown, but I’ll discuss later how this can work within Evernote itself), and &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; will ensure that anytime you reference &lt;em&gt;any other Evernote note&lt;/em&gt; by title, your note will have a hyperlink to that other note. Let me offer a simple example. Say I began a new note like so:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;# Note Title
= Notebook
@ tag1, tag2

This is the first line of my new note on Alfred App!
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Now, if I had a note in my Evernote account entitled “Alfred App”, when I process this note to send it to Evernote, &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; will now catch that and hyperlink to that pre-existing note, so this new note would have the phrase “Alfred App” linked directly to that other Evernote note. No fuss, no hassle, no funky syntax. And (this is what was holding me back on this feature for while), this is SUPER-FAST!&lt;/p&gt;

&lt;p&gt;The final feature that “wikifies” Evernote when you are sending Markdown text to Evernote is smoothly creating new spaces to fill with data later, while simultaneously creating the inter-linking between notes. &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; has you covered here as well. Let’s say as you’re typing up a new Evernote note, you realize that you are discussing an idea, topic, or person that you want to research further, but at some later date. What to do? Well, you can use the standard wiki-syntax of the &lt;code&gt;[[double brackets]]&lt;/code&gt; to mark that idea, topic, or person as something you want to create a new note for, while also linking to that new note from within your current note. To return to our sample note above, let’s say you added this:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;# Note Title
= Notebook
@ tag1, tag2
This is the first line of my new note on Alfred App!
I want to talk more about [[AppleScript]].
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Whenever you have &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; process this Markdown text and send it to Evernote, it will first create a new note (in the same notebook as the one specified in the meta-data) entitled “AppleScript”, then embed the Evernote hyperlink to that new note within this current note. This means that your new Evernote note will have 2 links: one to the pre-existing note “Alfred App” and one to the newly created, blank note “AppleScript”. All of this without you having to do anything but type!&lt;/p&gt;

&lt;p&gt;For anyone who prefers to write in Markdown, but loves the always-there accessibility of Evernote, this can be a powerful addition to your workflow. But obviously, not everyone writes their Evernote notes in Markdown first. Most people just write their notes directly in Evernote. But what if you wanted to still “wikify” your Evernote library, to easily create these interlinked notes? Well, I’ve tried to solve that problem too.&lt;/p&gt;

&lt;h3 id="wiki-functionality"&gt;Wiki Functionality&lt;/h3&gt;

&lt;p&gt;While I’ve already discussed some of the wiki functionality that’s inherent in the &lt;code&gt;mden&lt;/code&gt; function, that isn’t the only way to ensure that all of your Evernote data is intelligently interlinked. I have versions of both the link to pre-existing note and link to new note capabilities detailed above that work purely within Evernote. Here’s how they work.&lt;/p&gt;

&lt;p&gt;In order to interlink any of your current Evernote notes with &lt;em&gt;pre-existing&lt;/em&gt; notes, you can use the &lt;code&gt;wfy&lt;/code&gt; command from Alfred. Simply open up Evernote and select the notes you want to “wikify” (the workflow does accept multiple selections, but you shouldn’t over tax it). Once your notes are selected, pull up Alfred and use the &lt;code&gt;wfy&lt;/code&gt; (short for “wikify”) keyword. The workflow will then process each of your notes individually, auto-linking to any pre-existing other notes which it references by name. &lt;strong&gt;NOTE:&lt;/strong&gt; In order to use this feature, you will need the &lt;a href="http://www.satimage.fr/software/en/downloads_osaxen.html"&gt;Satimage OSAX Scripting Addition&lt;/a&gt;. I’ve set it up such that this is remarkably easy to install. Simply use the keyword in Alfred &lt;code&gt;wfy:install&lt;/code&gt; and the Satimage installer will boot up and walk you through the process. It really is as simple as that. The script will search your note’s content for any references to other notes’ titles. If any are found, that text will be replaced with a hyperlink to that note. Here’s a gif that shows the process in action:&lt;/p&gt;

&lt;p&gt;&lt;img alt="wfy command" src="../../images/projects/wikify/wfy.gif" /&gt;&lt;/p&gt;

&lt;p&gt;Next, let’s say that you are in Evernote and see a phrase or term in one of your notes that you want to research more, while creating the wiki-environment that &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; is all about. I’ve added a companion feature which will:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;take the currently selected text in the open Evernote note&lt;/li&gt;
  &lt;li&gt;create a new note in that notebook whose title is the selected text&lt;/li&gt;
  &lt;li&gt;embed a hyperlink back to the original note as the first line of this new note&lt;/li&gt;
  &lt;li&gt;and replace the selected text with a hyperlink to that newly created note&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This means that you have two-way hyperlinking (which is impossible in the &lt;code&gt;mden&lt;/code&gt; version of this functionality) between your current note and your new note. Creating spaces for new thought, while retaining context and wiki-style hyperlinking has never been easier. To use this feature, you can either use a user-specified keyboard shortcut, or copy the selected text to the clipboard and run &lt;code&gt;ensel&lt;/code&gt;. Here’s another gif to illustrate:&lt;/p&gt;

&lt;p&gt;&lt;img alt="ensel command" src="../../images/projects/wikify/ensel.gif" /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To sum up, &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; has 4 main commands:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;mden&lt;/code&gt; to send Markdown text to Evernote&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;enmd&lt;/code&gt; to export an Evernote note to Markdown&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;wfy&lt;/code&gt; to “wikify” the selected Evernote note&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;ensel&lt;/code&gt; to create and wikify a new Evernote note from selection&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these features, and all of the “sub-features” elaborated above, I truly believe that &lt;strong&gt;&lt;code&gt;Wikify&lt;/code&gt;&lt;/strong&gt; could be a great help to those others out there who love Evernote, Markdown, and Wiki goodness.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Snippets</title>
    <link rel="alternate" href="http://blog.url.com/projects/snippets/"/>
    <id>http://blog.url.com/projects/snippets/</id>
    <published>2015-05-26T20:00:00-04:00</published>
    <updated>2017-05-01T18:52:15-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-12"&gt;Version: 1.2&lt;/h4&gt;

&lt;h4 id="download-on-packalhttpwwwpackalorgworkflowsnippets"&gt;Download on &lt;a href="http://www.packal.org/workflow/snippets"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Have you ever been taking notes and realized that certain terms or phrases were going to be used repeatedly? You don’t have the time or really the desire to create all new TextExpander snippets for these terms or phrases, but you’d also really like to shorten your typing. That’s where &lt;strong&gt;&lt;code&gt;Snippets&lt;/code&gt;&lt;/strong&gt; comes in. &lt;strong&gt;&lt;code&gt;Snippets&lt;/code&gt;&lt;/strong&gt; is a dead simple Alfred workflow that allows you to use simple snippet syntax while writing, and then seamlessly convert your text to its full glory.&lt;/p&gt;

&lt;p&gt;The set-up is simple. As you’re typing, and you realize you want to make a snippet, simply prepend your snippet with &lt;code&gt;,,&lt;/code&gt; (comma comma). Then, when you get a free moment, create a “snippet dictionary” to tell Snippets what that snippet means. To create the dictionary, simply wrap it in &lt;code&gt;^^^&lt;/code&gt; (triple carets). Here’s an example:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;This is an example of ,,sn. ,,sn is a fantastic workflow for ,,a!

^^^
sn: **`Snippets`**
a: Alfred
^^^
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;That’s all there is to it. Once your dictionary is complete and you have finished typing, either copy the text to the clipboard and use the keyword &lt;code&gt;snip&lt;/code&gt;, or assign a keyboard shortcut for even quicker results. When you activate &lt;strong&gt;&lt;code&gt;Snippets&lt;/code&gt;&lt;/strong&gt;, the text above will instantly become:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;This is an example of **`Snippets`**. **`Snippets`** is a fantastic workflow for Alfred!
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;It’s so simple. Double-comma before the snippet; dictionary wrapped in triple-carets with snippet: expanded. Nothing more, nothing less.&lt;/p&gt;

&lt;p&gt;&lt;img alt="demo" src="https://raw.githubusercontent.com/smargh/alfred_snippets/master/snippets.gif" /&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Skimmer</title>
    <link rel="alternate" href="http://blog.url.com/projects/skimmer/"/>
    <id>http://blog.url.com/projects/skimmer/</id>
    <published>2015-05-26T20:00:00-04:00</published>
    <updated>2017-05-01T18:52:12-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h3 id="version-221"&gt;Version: 2.2.1&lt;/h3&gt;

&lt;h3 id="download-at-packalhttpwwwpackalorgworkflowskimmer"&gt;Download at &lt;a href="http://www.packal.org/workflow/skimmer"&gt;Packal&lt;/a&gt;&lt;/h3&gt;

&lt;h2 id="description"&gt;Description&lt;/h2&gt;

&lt;p&gt;This workflow &lt;strong&gt;only&lt;/strong&gt; works with the free Mac PDF app &lt;a href="http://skim-app.sourceforge.net/"&gt;Skim&lt;/a&gt;. Skim is a fantastic app with great Applescript support (and its &lt;em&gt;free!&lt;/em&gt;). This workflow provides quick, easy access to a few custom Applescripts that I’ve written to deal with certain pesky problems I’ve come across when dealing with PDFs. There are currently four actions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Crop and Split PDF&lt;/li&gt;
  &lt;li&gt;Extract Data and Search Google Scholar&lt;/li&gt;
  &lt;li&gt;Export Annotations&lt;/li&gt;
  &lt;li&gt;Search your PDFs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In this description I will explain how each of these works, and why you might want to use it.&lt;/p&gt;

&lt;h3 id="crop-and-split-pdf"&gt;Crop and Split PDF&lt;/h3&gt;

&lt;p&gt;First, &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; allows you to properly format those darned scanned PDFs. You know the ones I’m talking about, 2 books pages scanned into one, landscape-oriented PDF page. I want all of my PDFs in pretty, proper format with one PDF page corresponding to one portrait-oriented book/article page. In the past, it was quite the ordeal to crop the PDF so that the right- and left-hand margins were equal, and then to split each individual page and finally reconstruct the entire PDF. &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; makes this whole process as simple as π. You can use either a Hotkey or the Keyword &lt;code&gt;split&lt;/code&gt; to activate this feature.&lt;/p&gt;

&lt;p&gt;&lt;img alt="split" src="https://www.evernote.com/shard/s41/sh/83197405-2d1a-469e-a3ca-64cc4a481807/36b73f97006ac7fd5b650e22fb122769/deep/0/skimmer_split.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; then does 3 things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Crop the PDF using a user-inserted Line Annotation (if necessary) (see image below)&lt;/li&gt;
  &lt;li&gt;Split the two-page PDF into individual pages&lt;/li&gt;
  &lt;li&gt;Re-assemble everything and clean up&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me walk you thru the process. To begin, you will need to &lt;em&gt;ensure that the two scanned book pages have equal margins&lt;/em&gt;. &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will split the PDF page right down the middle, so we want the middle of the PDF to be the middle of the two pages. If the margins are unequal, you only need to use Skim’s Line Annotation to create a border for &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt;. Here’s an example:&lt;/p&gt;

&lt;p&gt;&lt;img alt="cropping" src="https://www.evernote.com/shard/s41/sh/d34511a1-b571-4df0-a6df-5c7b370704a6/0759f2d2f21a614c9a39d72f8eab0d42/deep/0/skimmer_original.png" /&gt;&lt;/p&gt;

&lt;p&gt;Note the small, vertical line at the bottom of the page. &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will crop off everything to the left of this line. You could put the line anywhere on the page. If you the right-hand margin were too big, you could put it to the right, and &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; would automatically crop the excess stuff to the right of that line. If both margins are too big, you can put two lines on each side and &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will take care of the rest.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will crop &lt;em&gt;every page&lt;/em&gt; at this point, so find the farthest extremity on any page and use that as your guide. &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; can tell what page you are looking at, so it’ll make things work (note that in the image above, this is one of the middle pages being used as the cropping template). &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; does not crop Top or Bottom Margins, so you will need to manually crop PDFs with wacky top and/or bottom margins.&lt;/p&gt;

&lt;p&gt;Once &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; has cropped the PDF, it will go thru and split each page into two separate pages. Depending on the length of the PDF, this can take a bit (approximately 0.67 seconds per original PDF page). This is all done invisibly tho, so that’s a bonus.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt; In order to ensure that &lt;code&gt;Skimer&lt;/code&gt; splits the PDF properly, regardless of orientation, the script will split the first page and ask you what portion of the page you are seeing (left-hand, right-hand, top-half, or bottom-half). Your choice will ensure that &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; does the splitting properly.&lt;/p&gt;

&lt;p&gt;After it splits all the pages, &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will save a copy of your original PDF and then close it as it opens the new, split PDF. This new PDF will be properly formatted and saved in the same folder as the original PDF. Here’s an example of the PDF above after it was automatically cropped and split:&lt;/p&gt;

&lt;p&gt;&lt;img alt="completed" src="https://www.evernote.com/shard/s41/sh/ac701fb0-3e1b-4ac6-ab6d-04dfdddae2f7/0cfdc3db448db7e430613b018a30f31e/deep/0/skimmer_final.png" /&gt;&lt;/p&gt;

&lt;p&gt;For anyone who deals with lots of scanned PDFs, I can promise you, this is a godsend.&lt;/p&gt;

&lt;h3 id="extract-data-and-search-google-scholar"&gt;Extract Data and Search Google Scholar&lt;/h3&gt;

&lt;p&gt;The second feature will take &lt;a href="http://en.wikipedia.org/wiki/Optical_character_recognition"&gt;OCR’d&lt;/a&gt; PDFs and try to extract relevant search information and then search &lt;a href="http://scholar.google.com/"&gt;Google Scholar&lt;/a&gt; (which will make it easy to then add citation information to your citation manager of choice. Users of &lt;a href="http://fractaledmind/projects/zotquery"&gt;ZotQuery&lt;/a&gt; will immediately see where I’m going with this…). This feature can be activated by a user-assigned Hotkey or by the Keyword &lt;code&gt;extract&lt;/code&gt; when the desired PDF is open in Skim.&lt;/p&gt;

&lt;p&gt;&lt;img alt="extract" src="https://www.evernote.com/shard/s41/sh/5bf09958-9d77-4a54-aaa2-b5fff51ef70a/7edaae34fc339aa9230a700703de218e/deep/0/skimmer_extract.png" /&gt;&lt;/p&gt;

&lt;p&gt;This feature will look for three possible things &lt;em&gt;in the currently viewed page&lt;/em&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a &lt;a href="http://www.doi.org/"&gt;DOI&lt;/a&gt; (Digital Object Identifier)&lt;/li&gt;
  &lt;li&gt;an ISBN (for books)&lt;/li&gt;
  &lt;li&gt;JSTOR title page&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it cannot find any of these things, it will present the user with a list of Capitalized Words from the currently viewed page. You then select whichever words you want to be the Google Scholar query. Once the query is chosen (whether automatically as one of the 3 types above, or user-chosen keywords), &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will automatically launch your default browser to Google Scholar using the query. What you do from there is up to you.&lt;/p&gt;

&lt;h3 id="export-annotations"&gt;Export Annotations&lt;/h3&gt;

&lt;p&gt;In short, this feature allows you to export all of your PDF annotations from your Skim PDF to &lt;a href="https://www.evernote.com/"&gt;Evernote&lt;/a&gt; (or the clipboard) while giving you &lt;strong&gt;live hyperlinks&lt;/strong&gt; back to the exact PDF page for the annotation!! You heard me, your Evernote note will have all of your PDF annotations, and each annotation will have a hyperlink that will open up that PDF to the exact page where that annotation is. Trust me, it’s super cool, amazingly helpful, and downright near magical.&lt;/p&gt;

&lt;p&gt;Compatible annotations include Text notes, Anchor notes, Underlined text, Strike-Thru text, and Highlighted text. &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will take all of your annotations, format them into some pretty HTML and send that to Evernote. I have been working on this code for quite some time, so it is FAST! It can handle and 100+ page book in a jiffy. But, since we all work slightly differently, I’ve also worked hard to make it FLEXIBLE. In order to use this function, simply use the &lt;code&gt;export&lt;/code&gt; keyword. Alternatively, you can assign a keyboard shortcut to the command as well (I use &lt;em&gt;cmd + shift + -&lt;/em&gt; myself).&lt;/p&gt;

&lt;p&gt;Let me outline how you can make Annotation Export work exactly as you’d like.&lt;/p&gt;

&lt;p&gt;First and foremost, I’ve added the ability for you to assign your own custom palette of Highlight Colors. One of the nicer touches to this feature is the ability to translate certain highlight colors into text headers. This can come in quite handy for really breaking down your text and your thoughts about the text into certain groupings. Now, I have a default set of 6 colors and their 6 corresponding text values, but you can change both the colors and the text to fit exactly your needs. But how, you might ask? Well, version 2.0 comes with a new Help PDF. Simply use the &lt;code&gt;sk:help&lt;/code&gt; keyword and select &lt;code&gt;Open PDF&lt;/code&gt; to view this document. On the second page, you will see these annotations:&lt;/p&gt;

&lt;p&gt;&lt;img alt="helper pdf" src="https://www.evernote.com/shard/s41/sh/0e33ffc1-d931-4932-9949-a668c1554a0f/cb6e0abe1897462a15e5708cfffc4043/deep/0/skimmer_config1.pdf-(page-2-of-4).png" /&gt;&lt;/p&gt;

&lt;p&gt;The text of the PDF will lay this all out for you, but basically, you simply change the highlight colors and change the corresponding text to what ever you like. There are an (nearly) infinite number of possibilities. The only things to remember are &lt;strong&gt;don’t mess with the actual highlights, merely change their colors&lt;/strong&gt; and &lt;strong&gt;don’t delete prefixed numbers in the text notes, only the text&lt;/strong&gt;. Otherwise, you can fiddle to your hearts content. Just so you can get a feel for how the process will work, here’s what the Evernote note would look like if you ran the Annotation Export script on the Help PDF (well, this is only the highlights section; run the script to see how text notes are handled):&lt;/p&gt;

&lt;p&gt;&lt;img alt="exported note" src="https://www.evernote.com/shard/s41/sh/4fadbe0b-e763-4d0c-b100-d82048ad378a/6b115224808df230224e325e710abeb0/deep/0/skimmer_config.pdf---Evernote-Premium.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you change the highlight colors and/or the text meanings, you will have to run &lt;code&gt;sk:help&lt;/code&gt; -&amp;gt; &lt;code&gt;Set Highlights&lt;/code&gt; before &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; will apply your changes. So, to change the Highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open the Help PDF (&lt;code&gt;sk:help&lt;/code&gt; -&amp;gt; &lt;code&gt;Open PDF&lt;/code&gt;) and alter the highlights and text on the second page.&lt;/li&gt;
  &lt;li&gt;Run &lt;code&gt;sk:help&lt;/code&gt; -&amp;gt; &lt;code&gt;Set Highlights&lt;/code&gt; to save your changes.&lt;/li&gt;
  &lt;li&gt;Then, you can use &lt;code&gt;export&lt;/code&gt; to actually send your Skim annotations to Evernote.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, the ability to alter your highlights palette goes a long way in making this script personalizable (is that even a word?), but I went a step further. You can also tweak the HTML formatting used to create the Evernote note. Unfortunately, however, this will require opening up some Applescript and doing some code tweaking.&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt; But I’ve tried to make it not so scary. Essentially, each annotation type has a general formatting template used to create the HTML. I’ve abstracted this format and placed each variable element under your control. You can find all of the templates and some basic examples in the Help PDF (page 3), but here is one example, for the Highlight Notes:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;--The alterable variables are wrapped in {curlies}, while the fixed elements are in &amp;lt;carets&amp;gt;.
{pre}{wrap}&amp;lt;title&amp;gt;{/wrap} {wrap}&amp;lt;note text&amp;gt;{/wrap} {wrap}&amp;lt;link&amp;gt;{p.} &amp;lt;#&amp;gt;{/wrap}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;So, you can prefix anything you’d like to the front of a note type: a dash, a tab, a few tabs, a word, etc. You can then wrap the title of the highlight (this is the text given for whatever color that highlighted annotation was) in anything at all: make it bold, italics, wrap it in [brackets], whatever. You can also wrap the actual text highlighted: in “quotes”, make it italics, etc. Finally, you have what you wrap the hyperlink in: it could be (parentheses) or {braces}, etc. And you can specify what page abbreviation you want: p., page, #. Now, the script defaults to settings that I think work pretty well, and you can use those to get a feel for what’s possible. Just remember, &lt;em&gt;it needs to be valid HTML&lt;/em&gt;. All of these properties are near the top of the &lt;code&gt;action_export-notes.scpt&lt;/code&gt; found in the workflow directory (you can use &lt;code&gt;sk:bug&lt;/code&gt; -&amp;gt; &lt;code&gt;Root&lt;/code&gt; to open this folder easily). Feel free to ask me if you have something you’d like to format but can’t quite figure it out.&lt;/p&gt;

&lt;p&gt;Since I’ve added the PDF hyperlinking functionality, I’ve also added the ability to copy a PDF pages custom URL to the clipboard, if you want to hyperlink to that PDF page in any other context. Simply use the &lt;code&gt;sk:copy&lt;/code&gt; keyword. This whole URL hyperlinking works because I have written a custom URL handler which is bundled with the workflow that interprets the custom URLs that I’ve written to open PDFs in Skim to the appropriate page. It’s pretty cool, but &lt;em&gt;the URL uses the path to the PDF, so if you move the PDF the URL will &lt;strong&gt;break&lt;/strong&gt; until you alter all the old URLs to use your new path&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id="search-your-pdfs"&gt;Search your PDFs&lt;/h3&gt;

&lt;p&gt;Finally, you can also search through all of your PDFs and open any one of them right in Skim. Use either the keyword &lt;code&gt;skimmer&lt;/code&gt; or the shorter &lt;code&gt;sk&lt;/code&gt; to begin the query. Then enter your query term. The results will update as you type. You can hit &lt;code&gt;return&lt;/code&gt; to open any item directly in Skim, or you can &lt;code&gt;right-arrow&lt;/code&gt; to enter Alfred’s file browser for that item.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As I hope you can see, if you’re someone who deals with PDFs frequently, this workflow could be of help. Whether it’s splitting PDFs, searching through your PDF library, or exporting annotations, &lt;strong&gt;&lt;code&gt;Skimmer&lt;/code&gt;&lt;/strong&gt; can help you out.&lt;/p&gt;

&lt;p&gt;Plus, it’s fairly simple to add functionality by simply adding more Applescripts, so if you have a great script for working with Skim, let me know in the comments.&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;My original script would have to pop up each individual page for a split second. It was almost stroke inducing. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;Reader DrLulz has given a great example of this by tweaking the workflow to work best for PDFs of outline-based powerpoints. His comment and link can be found &lt;a href="http://www.alfredforum.com/topic/4052-skimmer-pdf-actions-for-skim/?p=27270"&gt;here&lt;/a&gt;. &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Pandoctor</title>
    <link rel="alternate" href="http://blog.url.com/projects/pandoctor/"/>
    <id>http://blog.url.com/projects/pandoctor/</id>
    <published>2015-05-26T20:00:00-04:00</published>
    <updated>2017-05-01T18:52:01-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-105"&gt;Version: 1.0.5&lt;/h4&gt;

&lt;h4 id="download-from-packalhttpwwwpackalorgworkflowpandoctor"&gt;Download from &lt;a href="http://www.packal.org/workflow/pandoctor"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;version 1.0.5: fixes a small bug in the template variables&lt;/li&gt;
  &lt;li&gt;version 1.0.2: fixes bug with user template commands&lt;/li&gt;
  &lt;li&gt;version 1.0.1: adds pdf as output in &lt;code&gt;dr:out&lt;/code&gt; filter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href="https://github.com/jgm/pandoc/releases/tag/1.13.0.1"&gt;Pandoc 1.13.0.1&lt;/a&gt; is now out. This is a major upgrade, which includes the &lt;code&gt;.docx&lt;/code&gt; files as input files. This means you can convert Word files to Markdown files! Anyways, once you update pandoc, you will need to run &lt;code&gt;dr:config&lt;/code&gt; again for &lt;code&gt;Pandoctor&lt;/code&gt; to update its internals for the new version of pandoc. This will then show &lt;code&gt;.docx&lt;/code&gt; in the inputs window, and will properly interface with Pandoc 1.13.&lt;/p&gt;

&lt;p&gt;So, enjoy the newest versions of Pandoc and Pandoctor!&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id="introduction"&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; is a relatively simple, easy-to-use way to bring the high-powered functionality of &lt;a href="http://johnmacfarlane.net/pandoc/"&gt;&lt;code&gt;pandoc&lt;/code&gt;&lt;/a&gt; to you. For those new to &lt;code&gt;pandoc&lt;/code&gt;, &lt;code&gt;pandoc&lt;/code&gt; is “the universal document converter”. It is an amazingly powerful utility that allows you to convert structured text from a ton of possible input formats to an even larger number of output formats.&lt;/p&gt;

&lt;p&gt;A potential downside to &lt;code&gt;pandoc&lt;/code&gt;, however, for many users is that it is entirely a command line utility. This means, on the Mac, you &lt;em&gt;have to&lt;/em&gt; open Terminal to use it. For many Mac/Alfred users, this is at least slightly daunting. Yet I believe that this should not be a deterrent to more people coming to use the power of &lt;code&gt;pandoc&lt;/code&gt;. This is the reason for &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt;. Now, Alfred users can enjoy the comfortability and familiarity of the Alfred interface to manage &lt;code&gt;pandoc&lt;/code&gt;. Here’s how:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; is accessed via &lt;a href="http://support.alfredapp.com/workflows:config:triggers-file-action"&gt;File Actions&lt;/a&gt;. The basic file action is “New Pandoc Conversion”, which will kick off a series of interactive Alfred menus to create your &lt;code&gt;pandoc&lt;/code&gt; conversion. Once you have chosen the file you want to convert and selected the file action, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; works in 4 stages:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;specify the text format of the chosen file&lt;/li&gt;
  &lt;li&gt;chose the output format you want for the converted file&lt;/li&gt;
  &lt;li&gt;chose any options you want for the conversion process&lt;/li&gt;
  &lt;li&gt;run &lt;code&gt;pandoc&lt;/code&gt; to convert the input file using your chosen options&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Luckily, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; is built to move you through these four steps seamlessly and without any interaction on your part aside from selecting and setting the formats and options you want. Let’s walk through the steps.&lt;/p&gt;

&lt;h2 id="configuration"&gt;Configuration&lt;/h2&gt;

&lt;p&gt;When you first download &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt;, you will need to configure a few settings. Luckily, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; takes care of this for you. All you need to do is use the &lt;code&gt;dr:config&lt;/code&gt; keyword to get everything set up. Once you see the completion notification, you can start using &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; for real.&lt;/p&gt;

&lt;h2 id="running-a-new-pandoc-conversion"&gt;Running a new &lt;code&gt;pandoc&lt;/code&gt; Conversion&lt;/h2&gt;

&lt;h3 id="using-the-file-action"&gt;Using the File Action&lt;/h3&gt;

&lt;p&gt;If you’ve configured, you begin &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; by using &lt;a href="http://support.alfredapp.com/features:file-search"&gt;Alfred’s file navigation abilities&lt;/a&gt; to find the file you want &lt;code&gt;pandoc&lt;/code&gt; to convert for you. Once you’ve found the file, enter Alfred’s File Actions pane for that file (by default this is &lt;code&gt;→&lt;/code&gt;). Then find &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt;’s “New Pandoc Conversion” file action:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Conversion File Action" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/file_action_new.png" /&gt;&lt;/p&gt;

&lt;h3 id="selecting-the-input-format"&gt;Selecting the Input Format&lt;/h3&gt;

&lt;p&gt;This tells &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; to begin a new conversion on that file. Once you select “New Pandoc Conversion”, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; will automatically ask you to choose the format of this input file:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`dr:in` Filter" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_in.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; tries to be smart about formatting, so it will pre-fill the search bar with what it believes to be the file’s formatting. However, if you need to, you can simply delete this and start searching yourself. You will see that &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; displays the full name of the input format as well as a short description to help you discern between similar formats (such as the 4 types of &lt;a href="http://daringfireball.net/projects/markdown/"&gt;Markdown&lt;/a&gt; &lt;code&gt;pandoc&lt;/code&gt; accepts).&lt;/p&gt;

&lt;h3 id="selecting-the-output-format"&gt;Selecting the Output Format&lt;/h3&gt;

&lt;p&gt;When you choose the input format, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; will then automatically ask you to select what format you want the outputted, converted file to be:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`dr:out` Filter" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_out.png" /&gt;&lt;/p&gt;

&lt;p&gt;You have access to the full range of possible output formats from this selection. You can use the arrow keys to navigate down, or start searching for your desired output format by name:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`dr:out` Searching" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_out_search.png" /&gt;&lt;/p&gt;

&lt;h3 id="selecting-any-options"&gt;Selecting any Options&lt;/h3&gt;

&lt;p&gt;As soon as you select the output format, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; will ask you what Options you want to add to this &lt;code&gt;pandoc&lt;/code&gt; conversion:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`dr:opt` Filter" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt.png" /&gt;&lt;/p&gt;

&lt;h4 id="pandoctor-ui"&gt;&lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; UI&lt;/h4&gt;

&lt;p&gt;There are a few elements to the UI that require more explanation. First, you see that some items have the inner rectangle filled, and others do not. This is your visual cue to determine which options are active for this conversion (filled) and which are not (empty).&lt;/p&gt;

&lt;h4 id="pandoctor-default-options"&gt;&lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; Default Options&lt;/h4&gt;

&lt;p&gt;When you first come to this “screen” or “window” (not sure what to call individual Alfred windows/pop-ups), you will see that some options are already filled, even though you didn’t select them. These are &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt;’s &lt;code&gt;Default Options&lt;/code&gt;. The file (&lt;code&gt;pandoc_defaults.json&lt;/code&gt;) specifying which options are by default always on (filled) can be found inside the workflow’s folder (if you need to open this folder, you can do so easily using the &lt;code&gt;dr:help&lt;/code&gt; keyword and selecting &lt;code&gt;Root&lt;/code&gt;). This file also has comments for most options, which gives some information about them (Obviously, for detailed information about &lt;code&gt;pandoc&lt;/code&gt;’s options, visit the &lt;a href="http://johnmacfarlane.net/pandoc/README.html"&gt;User Guide&lt;/a&gt;). When installed, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; has 4 default options on:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;parse-raw&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Description: “Parse untranslatable HTML codes and LaTeX environments as raw HTML or LaTeX, instead of ignoring them.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;smart&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Description: “Produce typographically correct output, converting straight quotes to curly quotes, — to em-dashes, – to en-dashes, and … to ellipses.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;normalize&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Description: “Normalize the document after reading: merge adjacent Str or Emph elements, for example, and remove repeated Spaces.”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code&gt;standalone&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;Description: “Produce output with an appropriate header and footer (e.g. a standalone HTML, LaTeX, or RTF file, not a fragment).”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="user-default-options"&gt;User Default Options&lt;/h4&gt;

&lt;p&gt;If you want to set your own default options (overriding these), you can use the &lt;code&gt;dr:defs&lt;/code&gt; keyword. This will provide a “window” similar to the standard Options window, but without anything selected. Here select whatever items you want to be on by default for any new conversion.&lt;/p&gt;

&lt;h3 id="selecting-any-options-pt-2"&gt;Selecting any Options, pt. 2&lt;/h3&gt;

&lt;p&gt;Back to the &lt;code&gt;Options Selection&lt;/code&gt;, though. You will also see that that there are 2 basic types of options:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Boolean&lt;/li&gt;
  &lt;li&gt;Argument&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="selecting-boolean-options"&gt;Selecting Boolean Options&lt;/h4&gt;

&lt;p&gt;If you select a Boolean option, it will simply “turn on” (the rectangle will be filled) and this screen will refresh. For example, here’s this screen right before I choose to “turn on” the &lt;code&gt;strict&lt;/code&gt; option:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`parse` Option off" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_parse_off.png" /&gt;&lt;/p&gt;

&lt;p&gt;and here’s what the screen looks like as soon as it refreshes after I selected that option:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`parse` Option on" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_parse_on.png" /&gt;&lt;/p&gt;

&lt;h4 id="selecting-argument-options"&gt;Selecting Argument Options&lt;/h4&gt;

&lt;p&gt;So, “turning on” Boolean options is simple. Argument options, however, require a bit more work. As the name suggests, this type of option requires more information (an “argument”). (Again, if any of this is confusing, I would highly recommend reading through &lt;code&gt;pandoc&lt;/code&gt;’s &lt;a href="http://johnmacfarlane.net/pandoc/README.html"&gt;User Guide&lt;/a&gt;). This means that you will need to tell &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; what you want the “argument”, the information, to be. So, whenever you select an &lt;code&gt;Argument&lt;/code&gt; option, you are taken to an intermediary “screen” where you can supply the needed information. For example, if I were to select the &lt;code&gt;toc-depth&lt;/code&gt; argument option, I would then see this screen:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Set Option Empty" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_set_pre.png" /&gt;&lt;/p&gt;

&lt;p&gt;I would then fill in the information (I want the Table of Contents in the converted  file to only go 4 levels deep):&lt;/p&gt;

&lt;p&gt;&lt;img alt="Set Option Filled" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_opt_set_filled.png" /&gt;&lt;/p&gt;

&lt;p&gt;Once you fill in the information, press &lt;code&gt;return&lt;/code&gt; (i.e. “Set argument value of chosen option”) and return to the base Options “screen”.&lt;/p&gt;

&lt;h4 id="finalizing-options"&gt;Finalizing Options&lt;/h4&gt;

&lt;p&gt;Now, as soon as you have set all of the options you need, you only need to select the top item on this “screen”: &lt;code&gt;Done setting Options?&lt;/code&gt;. This will close this screen. As I’ve noted before, if you instead select an option, this screen will merely refresh.&lt;/p&gt;

&lt;h4 id="pandoctor-ui-pt-2"&gt;&lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; UI, pt. 2&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;A small UI note&lt;/em&gt;: there is always a “header” for every list that &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; displays. However, there are 2 different kinds of headers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;informational and non-selectable&lt;/li&gt;
  &lt;li&gt;interrogative and selectable&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The purely informational headers have the little &lt;code&gt;i&lt;/code&gt; in the center. These headers are found when selecting input and output formats. They cannot be selected; they simply tell you what that “screen” is. The interrogative headers, however, can be selected. These have the &lt;code&gt;?&lt;/code&gt; in the center. You will use these to “close” the screen you are viewing.&lt;/p&gt;

&lt;h4 id="running-your-pandoc-conversion"&gt;Running your &lt;code&gt;pandoc&lt;/code&gt; Conversion&lt;/h4&gt;

&lt;p&gt;Returning to the flow of the conversion, you have just finished selecting all of the options for your &lt;code&gt;pandoc&lt;/code&gt; conversion. As soon as you hit &lt;code&gt;Done setting Options?&lt;/code&gt;, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; will begin processing the conversion. This process can take a bit of time (particularly when generating PDFs), but when it is complete, you will see a notification in the top right of your screen:&lt;/p&gt;

&lt;p&gt;&lt;img alt="notify" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_notification.png" /&gt;&lt;/p&gt;

&lt;p&gt;That’s all there is to it really. In 4 simple steps, you can convert just about anything. However, for those more inclined toward “power-use”, there are a few other abilities under &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt;’s hood.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id="ignoring-options"&gt;Ignoring Options&lt;/h2&gt;

&lt;p&gt;First off, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; offers the ability to “hide” or “ignore” certain options in the Select Options screen. &lt;code&gt;pandoc&lt;/code&gt; itself offers &lt;em&gt;a lot&lt;/em&gt; of options, and always seeing them all is often unnecessary. If there are any options that you &lt;strong&gt;never&lt;/strong&gt; use, you can simply remove them. To do this, you need to use the &lt;code&gt;dr:ignore&lt;/code&gt; keyword:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`dr:ignore` Filter" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore.png" /&gt;&lt;/p&gt;

&lt;p&gt;This will bring up a “screen” almost identical to the Select Options screen, but here you are choosing what options are hidden from that other screen. Once again, the two icons are informative. If an item is filled in, this means that it is going to be ignored:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`data-dir` Ignored" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore_data_on.png" /&gt;&lt;/p&gt;

&lt;p&gt;Otherwise (not filled in), it will appear in the standard Select Options window:&lt;/p&gt;

&lt;p&gt;&lt;img alt="`data-dir` Not Ignored" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_ignore_data_off.png" /&gt;&lt;/p&gt;

&lt;p&gt;As with the basic window, you can search here or just use the arrow keys. Select all of the options you want to ignore, and when you are done, select &lt;code&gt;Done setting Ignore?&lt;/code&gt; to exit.&lt;/p&gt;

&lt;h2 id="template-commands"&gt;Template Commands&lt;/h2&gt;

&lt;p&gt;For those who use &lt;code&gt;pandoc&lt;/code&gt; frequently, you will likely use the same basic command over and over again. If that’s the case, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; has a “power-user” feature just for you. In addition to the “on-the-fly” conversion available via the “New Pandoc Conversion” file action, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; also hase a “Templated Pandoc Conversion” file action:&lt;/p&gt;

&lt;p&gt;&lt;img alt="template" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/file_action_template.png" /&gt;&lt;/p&gt;

&lt;p&gt;This action grants you access to any and all &lt;code&gt;pandoc&lt;/code&gt; template commands you have set up. Before I detail how to create a new template, let’s briefly discuss the elements of a template. &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; ships with a file in the workflow directory that has some sample templates. This file is titled &lt;code&gt;pandoc_templates.json&lt;/code&gt;. If you open this file in your text editor of choice, it will look just like this:&lt;/p&gt;

&lt;h3 id="sample-templates"&gt;Sample Templates&lt;/h3&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;/*
    PANDOC TEMPLATED COMMANDS

    The ``defaults``, at initiation the `parse-raw`, `smart`, `normalize`, and `standalone`
    options, are found at ``pandoc_defaults.json``.

    HOW TO CREATE TEMPLATE:
        + take your CLI pandoc command
            (e.g. "pandoc -s -S --toc -c pandoc.css -A footer.html README -o example3.html")
        + convert all "short option + space + argument" to "long option + '=' + argument"
            (e.g. "pandoc -s -S --toc --css=pandoc.css --include-after-body=footer.html README --output=example3.html")
        + split all options into list of individual options
            (e.g. [pandoc, -s, -S, --toc, --css=pandoc.css, --include-after-body=footer.html, README, --output=example3.html])
        + remove initial call to `pandoc` and replace input text path with ``{input}`` variable
            (e.g. [-s, -S, --toc, --css=pandoc.css, --include-after-body=footer.html, {input}, --output={input}.html])
        + make sure every option is a JSON string
            (e.g. ["-s", "-S", "--toc", "--css=pandoc.css", "--include-after-body=footer.html", "{input}", "--output={input}.html"])
        + give it a memorable name
        + determine if you want to automatically add your default options to the command or not.

    In order to make your templates more extensible, you can use any of 3 built-in
    variables that relate to the file chosen to convert:
        * {input_file} = The full path to the file, including file extension
        * {input_name} = The full path to the file, without file extension
        * {input_dir} = The full path to the parent directory of the file

    For example, this template would only work if you kept a project directory
    that contained both `biblio.bib` and `chicago-author-date.csl` alongside
    your input file.
        {
            "name": "Biblio Test",
            "use_defaults": false,
            "options": [
                "-s",
                "-S",
                "--biblio={input_dir}/biblio.bib",
                "--csl={input_dir}/chicago-author-date.csl",
                "{input_file}",
                "--output={input_name}.html"
            ]
        }
*/
[
    {
        "name": "XeLaTeX PDF",
        "use_defaults": true,
        "options": [
            "-N",
            "--variable=mainfont:Georgia",
            "--variable=sansfont:Arial",
            "--variable=monofont:\"Andale Mono\"",
            "--variable=fontsize:12pt",
            "{input_file}",
            "--latex-engine=xelatex",
            "--toc",
            "--output={input_name}.pdf"
        ]
    },
    {
        "name": "Pandoc MD -&amp;gt; HTML",
        "use_defaults": true,
        "options": [
            "--toc",
            "--css=pandoc.css",
            "{input_file}",
            "--output={input_name}.html"
        ]
    }
]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h3 id="template-elements"&gt;Template Elements&lt;/h3&gt;

&lt;p&gt;As you can see, it comes with two “default” templates, as well as one commented-out template. These are there to help you see the format of the JSON as well as &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt;’s unique features. As the default templates show, each template must have 3 keys:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;use_defaults&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;options&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The type of value for each of these is fixed. For &lt;code&gt;name&lt;/code&gt;, you must use a string; for &lt;code&gt;use_defaults&lt;/code&gt;, you use a Boolean (either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;); and for &lt;code&gt;options&lt;/code&gt;, you use a list/array of strings. The &lt;code&gt;name&lt;/code&gt; parameter is simple; this is the name of your template (what will be displayed when you are asked to choose which template you want to use). The &lt;code&gt;use_defaults&lt;/code&gt; parameter is fairly self-explanatory as well; do you want to automatically add the default options to this command or not? It is the &lt;code&gt;options&lt;/code&gt; parameter where the magic happens, and this is the one that requires the most precision.&lt;/p&gt;

&lt;p&gt;As the comments in the file will tell you, you need to properly format your &lt;code&gt;pandoc&lt;/code&gt; command for use as a &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; template. This means, each option is its own item in the list and each option is without spaces (unless properly quoted). This will require you to use the “long” version of any option along with the an equals [&lt;code&gt;=&lt;/code&gt;]. The 3 given examples give thorough demonstration of what acceptable templates can look like.&lt;/p&gt;

&lt;h3 id="template-variables"&gt;Template Variables&lt;/h3&gt;

&lt;p&gt;In addition to these formatting requirements, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; also gives you the ability to abstract your template properly. For any template, you have access to 3 variables:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;{input_file}&lt;/code&gt; = The full path to the file, including file extension&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;{input_name}&lt;/code&gt; = The full path to the file, without file extension&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;{input_dir}&lt;/code&gt; = The full path to the parent directory of the file&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These variables will allow you to properly use your template with any conversion. You will see that every template should use &lt;code&gt;{input_file}&lt;/code&gt; and &lt;code&gt;{input_name}&lt;/code&gt; for the input and output options respectively. In addition, if you specify any outside resource files, you can then use &lt;code&gt;{input_dir}&lt;/code&gt; to ensure that the full path is properly constructed (see the “Biblio Test” example in the comments).&lt;/p&gt;

&lt;h3 id="running-a-template-command"&gt;Running a Template Command&lt;/h3&gt;

&lt;p&gt;Once you set up a template, it will make using &lt;code&gt;pandoc&lt;/code&gt; &lt;em&gt;so much easier&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;All you have to do is select the file in Alfred’s file navigator, choose the “Templated Pandoc Conversion” file action, and then choose which template you want to use. That’s it.&lt;/p&gt;

&lt;p&gt;&lt;img alt="**`Pandoctor`** Templates Filter" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/dr_temps.png" /&gt;&lt;/p&gt;

&lt;p&gt;As with the New Conversion, the process takes a variable amount of time. Whenever the conversion does finish, however, you will see a notification in the top right of your screen:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Template Notification" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_notify.png" /&gt;&lt;/p&gt;

&lt;h3 id="creating-a-template"&gt;Creating a Template&lt;/h3&gt;

&lt;p&gt;So, how do you set up template commands? As the Template Elements section describes, each template requires 3 things. So, in order to create a new template, you will need to create each of these 3 elements. Hopefully, however, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; makes this dead-simple to do.&lt;/p&gt;

&lt;p&gt;To begin creating a new template, use the &lt;code&gt;dr:temp:set&lt;/code&gt; keyword:&lt;/p&gt;

&lt;p&gt;&lt;img alt="Keyword to Create New Template" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_kw.png" /&gt;&lt;/p&gt;

&lt;h4 id="setting-template-name"&gt;Setting Template Name&lt;/h4&gt;

&lt;p&gt;Type the keyword and then press &lt;code&gt;return&lt;/code&gt;. This will immediately jump you to assigning a name for your new template. This will be the “screen” that you see:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Template Add Name" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_name_pre.png" /&gt;&lt;/p&gt;

&lt;p&gt;To assign a name, simply type the name of the template. As seen in the screenshot above, this name will be all that you will see in the Script Filter to choose which template you want to run. As an example, I created a new template called “Template Test”:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Template Set Name" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_name.png" /&gt;&lt;/p&gt;

&lt;h4 id="setting-template-defaults"&gt;Setting Template Defaults&lt;/h4&gt;

&lt;p&gt;Once you finish typing your template name, hit &lt;code&gt;return&lt;/code&gt; and &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; will then automatically ask you if you want your Default Options to always be added to the template command:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Template Add Defaults" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_defs.png" /&gt;&lt;/p&gt;

&lt;p&gt;If you select &lt;code&gt;True&lt;/code&gt;, this means that whatever options your template command has, your assigned Default Options will be added to the final &lt;code&gt;pandoc&lt;/code&gt; command. For example, if you have set &lt;code&gt;standalone&lt;/code&gt; to be a Default Option, regardless of whether or not you have that option in your template command, &lt;code&gt;pandoc&lt;/code&gt; will still create a standalong document. If, however, you select &lt;code&gt;False&lt;/code&gt;, only the options you have in the template will be run through &lt;code&gt;pandoc&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id="setting-template-command"&gt;Setting Template Command&lt;/h4&gt;

&lt;p&gt;The final element you need to add to create your new template is, of course, the actual &lt;code&gt;pandoc&lt;/code&gt; command:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Template Add Command" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_cmd_pre.png" /&gt;&lt;/p&gt;

&lt;p&gt;As the section above described, &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; requires your template command options to be in a very specific format. However, must &lt;code&gt;pandoc&lt;/code&gt; users don’t actually type commands into Terminal in this format. In order to make &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; as simple as possible, I have written a script that will convert the standard, short-form &lt;code&gt;pandoc&lt;/code&gt; command into the long-form &lt;strong&gt;&lt;code&gt;Pandoctor&lt;/code&gt;&lt;/strong&gt; compliant format. This means that all you have to do is copy your command from Terminal and paste it into this field:&lt;/p&gt;

&lt;p&gt;&lt;img alt="New Template Set Command" src="https://raw.githubusercontent.com/smargh/alfred_pandoctor/master/src/help/template_set_cmd.png" /&gt;&lt;/p&gt;

&lt;p&gt;As it is currently implemented, there is the possibility of some bugs in the conversion process. This means it is in your best interest to double check the &lt;code&gt;user_templates.json&lt;/code&gt; file in your workflow storage folder (you can open this folder easily using the &lt;code&gt;dr:help&lt;/code&gt; keyword and selecting &lt;code&gt;Storage&lt;/code&gt;). Ensure that the variables are properly used. Also ensure that the all of the short-form options where correctly translated into their long-form version. Remember, you can use the &lt;code&gt;pandoc_templates.json&lt;/code&gt; file as a guide for the template JSON format.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Parsers</title>
    <link rel="alternate" href="http://blog.url.com/projects/parsers/"/>
    <id>http://blog.url.com/projects/parsers/</id>
    <published>2015-05-26T20:00:00-04:00</published>
    <updated>2017-05-01T18:52:04-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-20"&gt;Version: 2.0&lt;/h4&gt;

&lt;h4 id="download-at-packalhttpwwwpackalorgworkflowparsers"&gt;Download at &lt;a href="http://www.packal.org/workflow/parsers"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;h3 id="introduction"&gt;Introduction&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; is a relatively simple workflow for &lt;a href="http://www.alfredapp.com/"&gt;Alfred&lt;/a&gt;. It allows you to quickly and easily look up parsing information for Greek &lt;em&gt;or&lt;/em&gt; Latin words. It gets its parsing information from the powerful &lt;a href="http://www.perseus.tufts.edu/"&gt;Perseus project&lt;/a&gt;, but presents the results in the clean user-interface of Alfred. To use &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt;, simply open Alfred and type the keyword &lt;code&gt;parse&lt;/code&gt;. Follow the keyword with the Latin or Greek word you want to look up:&lt;/p&gt;

&lt;p&gt;&lt;img alt="alfred_parser" src="https://www.evernote.com/shard/s41/sh/2c444d67-b4ca-40b3-b914-c20dc5ebbfb6/9d54f19c489deda365c65f1e6b5232e6/deep/0/alfred_parser.png" /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; will display the results for you as quickly as possible.&lt;/p&gt;

&lt;p&gt;As you can see, &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; displays the parsing information in the main title field for each item. Below that, in the sub-title field, it displays the lemma and a short definition separated by &lt;code&gt;::&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s say you are reading some Greek or Latin, however, and don’t want to have to open Alfred, type &lt;code&gt;parse&lt;/code&gt;, then type the word you’re interested in. Well, &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; has thought of that. From within Alfred’s Preferences, you can set up a keyboard shortcut to pass the currently selected text on your Mac to &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt;. I have mine set up as &lt;code&gt;cmd+fn+-&amp;gt;&lt;/code&gt;. This makes using &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; even easier.&lt;/p&gt;

&lt;p&gt;Once you have found the parsing information that you believe is correct in your reading context, &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; can do 2 things for you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;copy the parsing information to the clipboard in a nicely formatted way (&lt;code&gt;cmd+return&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;copy the dictionary entry for that lemma to the clipboard (&lt;code&gt;shift+return&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If, for instance, you were to choose the Nominative Singular Feminine form of &lt;code&gt;aura&lt;/code&gt; (with &lt;code&gt;cmd+return&lt;/code&gt;), &lt;strong&gt;&lt;code&gt;Parsers&lt;/code&gt;&lt;/strong&gt; would copy this to the clipboard:&lt;/p&gt;

&lt;div class="highlight plaintext"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;Type: noun
Number: sg
Gender: fem
Case: voc

Definition: the air (in motion), a breeze, breath of air, wind, blast:
Lemma:  aura

Lexicon Links:
  + [Lewis &amp;amp; Short](http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3Atext%3A1999.04.0059%3Aentry%3Daura)
  + [Elem. Lewis](http://www.perseus.tufts.edu/hopper/text?doc=Perseus%3Atext%3A1999.04.0060%3Aentry%3Daura)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Alternatively, you can use &lt;code&gt;shift+return&lt;/code&gt; to view a HUD of the lexicon entry for that parsing term, and this lexicon data will also be copied to the clipboard (&lt;em&gt;NOTE&lt;/em&gt;: Parsers will attempt to display the lexicon entry from the most concise lexicon available for the chosen term or allow you to choose out of the available dictionaries).&lt;/p&gt;

&lt;p&gt;All you should need to read your Greek and/or Latin with ease.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>A Complete PDF Annotation Workflow</title>
    <link rel="alternate" href="http://blog.url.com/articles/a-complete-pdf-annotation-workflow/"/>
    <id>http://blog.url.com/articles/a-complete-pdf-annotation-workflow/</id>
    <published>2015-05-26T14:36:00-04:00</published>
    <updated>2017-05-01T18:54:59-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;When I was in graduate school, I was inundated with PDFs. PDFs of all kinds, from all kinds of sources, with all kinds of needs. Suffice to say, over a few years my tinkering spirit and the sheer number of PDFs I needed to handle led to a collection of tools organized into a workflow that I believe works well, and is thus well worth sharing. In this post I want to outline how I (1) &lt;a href="#pdf-preparation"&gt;prepare PDFs&lt;/a&gt;, (2) &lt;a href="#pdf-annotation"&gt;annotate PDFs&lt;/a&gt;, and (3) &lt;a href="#pdf-storage"&gt;store PDFs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;{{read more}}&lt;/p&gt;

&lt;h2 id="pdf-preparation"&gt;PDF Preparation&lt;/h2&gt;

&lt;p&gt;When you recieve a high volume of PDFs, you come to realize the many various states in which PDFs can be created–books scanned on a flatbed, books scanned by an iPhone, articles downloaded from the internet, PDFs generated from other sources. PDFs truly do come in all shapes and sizes. I, however, want all of my PDFs in one consistent format. I want every page of content to correspond to one PDF page (in constrast to book scans, where two content pages are often scanned into one landscape PDF). I also want to OCR every PDF to ensure that the text content is machine readable (and thus selectable in any PDF reader). I finally want to keep a consistent naming scheme for all of my PDFs. So, how does one get from point A to point B?&lt;/p&gt;

&lt;p&gt;Let’s begin with normalizing PDF page layout. For anyone who has ever had to manually split scanned PDFs, you know how mind-numbly boring and tedious such work is. Yet, we do it because we must. If there is anything worse than maunally splitting PDF pages, it dealing with double page PDF scans. Well, I abhor tedium, so I set out to remove this particular tedium from my life. My solution, which I will get to below, however, relies on an application that will come up frequently in this post, so it’s worth discussing here now. I use, almost exclusively, the Mac application &lt;a href="http://skim-app.sourceforge.net/"&gt;Skim&lt;/a&gt; for my PDF-related tasks. This is primarily because Skim is &lt;a href="http://sourceforge.net/p/skim-app/wiki/Features/"&gt;incredibly powerful&lt;/a&gt;, but also because it grants access to much of this functionality via &lt;a href="http://sourceforge.net/p/skim-app/wiki/AppleScript/"&gt;robust AppleScript support&lt;/a&gt;. This allows tinkerers like myself to further extend it functionality. Many of the tools described in this post are uniquely built on top of Skim, so if you want to use the tool, you have to use the app. Luckily, the app is free to download, an open source project, and thoroughly stable. However, I understand if you already have your own preferred PDF application, so I will mark all Skim-dependent tools accordingly.&lt;/p&gt;

&lt;p&gt;Back to automagically splitting PDF pages. Using a handful of Skim’s awesome features, I have written an AppleScript which will split two-page scanned PDFs for you. The script itself is a part of my &lt;a href="http://fractaledmind.com/projects/skimmer/"&gt;Skimmer project&lt;/a&gt;, which is one of my many Alfred Workflows. For those who want the simplest access to this functionality, I would recommend getting &lt;a href="http://www.alfredapp.com/"&gt;Alfred&lt;/a&gt; and downloading the workflow. If, however, you simply want the AppleScript itself, you can find it &lt;a href="https://github.com/smargh/alfred_skimmer/blob/master/source/action_pdf-splitter.applescript"&gt;in the GitHub repo&lt;/a&gt;. In short, it asks you to determine the PDF orientation and then in the background splits the entire PDF. If you deal with many scanned PDFs, this will be a major time-saver.&lt;/p&gt;

&lt;p&gt;When it comes to &lt;a href="http://en.wikipedia.org/wiki/Optical_Character_Recognition"&gt;Optical Character Recognition&lt;/a&gt;, I use the open source &lt;a href="http://en.wikipedia.org/wiki/Tesseract_(software)"&gt;&lt;code&gt;tesseract&lt;/code&gt;&lt;/a&gt; utility. It can be a bit tricky to install, as it requires compilation and has a number of compiled dependencies. Building off of the work of &lt;a href="https://twitter.com/ryanfb"&gt;Ryan Baumann&lt;/a&gt;, I have created &lt;a href="https://gist.github.com/smargh/cd2fc4125bef57bcb3e2"&gt;a Gist&lt;/a&gt; to simplify installing &lt;code&gt;tesseract&lt;/code&gt; on a Mac&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class="c"&gt;# Check for Homebrew,&lt;/span&gt;
&lt;span class="c"&gt;# Install if we don't have it&lt;/span&gt;
&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;test&lt;/span&gt; ! &lt;span class="k"&gt;$(&lt;/span&gt;which brew&lt;span class="k"&gt;)&lt;/span&gt;; &lt;span class="k"&gt;then
  &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing homebrew..."&lt;/span&gt;
  ruby -e &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="k"&gt;fi&lt;/span&gt;
&lt;span class="c"&gt;# Ensure `homebrew` is up-to-date and ready&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Updating homebrew..."&lt;/span&gt;
brew doctor

&lt;span class="c"&gt;# Ensure the Homebrew cache directory exists&lt;/span&gt;
mkdir ~/Library/Caches/Homebrew

&lt;span class="c"&gt;# Install leptonica with TIFF support (and every other format, just in case)&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing leptonica..."&lt;/span&gt;
brew install --with-libtiff --with-openjpeg --with-giflib leptonica

&lt;span class="c"&gt;# Install Ghostscript&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing ghostscript..."&lt;/span&gt;
brew install gs

&lt;span class="c"&gt;# Install ImageMagick with TIFF and Ghostscript support&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing imagemagick..."&lt;/span&gt;
brew install --with-libtiff --with-ghostscript imagemagick

&lt;span class="c"&gt;# Install Tesseract devel with all languages&lt;/span&gt;
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Installing tesseract..."&lt;/span&gt;
brew install --devel --all-languages tesseract
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Once you have &lt;code&gt;tesseract&lt;/code&gt; installed, it can also be a bit complicated to run it from the Terminal. Again, I have &lt;a href="https://gist.github.com/smargh/0581e6199049ea7c51df"&gt;a Gist&lt;/a&gt; to simplify this process. It is a simple function that accepts a path to a PDF. It will convert the PDF to the appropriate format for &lt;code&gt;tesseract&lt;/code&gt;&lt;sup id="fnref:2"&gt;&lt;a href="#fn:2" class="footnote"&gt;2&lt;/a&gt;&lt;/sup&gt;, split the PDF into one file per page, OCR that collection of files, and recombine everything into one OCR’d PDF:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class="c"&gt;# courtesy of : &amp;lt;https://ryanfb.github.io/etc/2014/11/13/command_line_ocr_on_mac_os_x.html&amp;gt;&lt;/span&gt;

ocr&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c"&gt;# get name of input pdf&lt;/span&gt;
  &lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; .pdf&lt;span class="k"&gt;)&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Prefix is: &lt;/span&gt;&lt;span class="nv"&gt;$PREFIX&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;

  &lt;span class="c"&gt;# check for any `tesseract` flags&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; ! -z &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$TESSERACT_FLAGS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;; &lt;span class="k"&gt;then
    &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Picked up TESSERACT_FLAGS: &lt;/span&gt;&lt;span class="nv"&gt;$TESSERACT_FLAGS&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
  &lt;span class="k"&gt;fi&lt;/span&gt;

  &lt;span class="c"&gt;# use `imagemagick` to convert pdf to individual `.tif` files&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Converting to TIFF..."&lt;/span&gt;
  convert -density 300 &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; -type Grayscale -compress lzw -background white +matte -depth 32 &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_page_%05d.tif"&lt;/span&gt;

  &lt;span class="c"&gt;# use `tesseract` to OCR those individual `.tif` files&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Performing OCR..."&lt;/span&gt;
  &lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="nb"&gt;command&lt;/span&gt; -v parallel &amp;gt;/dev/null 2&amp;gt;&amp;amp;1; &lt;span class="k"&gt;then&lt;/span&gt;
    &lt;span class="c"&gt;# if you can, parallelize this process using GNU Parallel&lt;/span&gt;
    parallel --bar &lt;span class="s2"&gt;"tesseract &lt;/span&gt;&lt;span class="nv"&gt;$TESSERACT_FLAGS&lt;/span&gt;&lt;span class="s2"&gt; {} {.} pdf 2&amp;gt;/dev/null"&lt;/span&gt; ::: &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.tif
  &lt;span class="k"&gt;else
    for &lt;/span&gt;i &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.tif; &lt;span class="k"&gt;do
      &lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"OCRing &lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;..."&lt;/span&gt;
      tesseract &lt;span class="nv"&gt;$TESSERACT_FLAGS&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$i&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; .tif&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; pdf 2&amp;gt;/dev/null
    &lt;span class="k"&gt;done
  fi&lt;/span&gt;

  &lt;span class="c"&gt;# combine individual OCR'd pdf pages back into a single OCR'd pdf using `ghostscript`&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Combining output to &lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;-OCR.pdf..."&lt;/span&gt;
  gs -q -dNOPAUSE -dBATCH -sDEVICE&lt;span class="o"&gt;=&lt;/span&gt;pdfwrite -sOutputFile&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;__OCR.pdf"&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.pdf &amp;gt;/dev/null 2&amp;gt;&amp;amp;1

  &lt;span class="c"&gt;# delete all of the individual files (both `.tif` and `.pdf`)&lt;/span&gt;
  &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"Cleaning up..."&lt;/span&gt;
  rm &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.tif &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="k"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;_page_&lt;span class="k"&gt;*&lt;/span&gt;.pdf
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;This script makes OCRing a PDF as simple as &lt;code&gt;$ ocr ~/path/to/my.pdf&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, when it comes to naming conventions, I try to be authoritarian and consistent. The real goal is consistency, and however you decide to name your files, be sure to stick with it. I want make any explicit recommendations, as it truly does depend on your particular situation, but I will recommend a few apps and utilities that will make it easier for your to enforce consistency once you have determined your naming schema. The first is &lt;a href="http://www.noodlesoft.com/hazel.php"&gt;Hazel&lt;/a&gt;, which is a Mac app that will watch certain folders for you, waiting for some criteria to be met and then perform certain actions. For example, you have it watch the folder where you stick all your PDFs, and then rename any PDFs which don’t follow your naming convention. &lt;a href="http://www.documentsnap.com/use-hazel-to-magically-process-downloaded-pdfs/"&gt;DocumentSnap&lt;/a&gt; has a good tutorial on one way you can achieve this functionality. Another app/utility is &lt;a href="http://manytricks.com/namemangler/"&gt;Name Mangler&lt;/a&gt;, which provides a number of features to make batch renaming a breeze. Whatever your choice, having a consistently, universally applied naming schema will greatly help you in the long run.&lt;/p&gt;

&lt;h2 id="pdf-annotation"&gt;PDF Annotation&lt;/h2&gt;

&lt;p&gt;PDF annotation has led me down a long and winding path, but in the end I believe I’ve reached something like my own personal PDF nirvana. Grant me your patience for a bit as I (speedily) recall some major points on this personal journey.&lt;/p&gt;

&lt;p&gt;For me, my fascination with PDF annotation started with two versions of an Applescript to extract PDF annotations from &lt;a href="http://skim-app.sourceforge.net/"&gt;Skim&lt;/a&gt;. The original was by John Sidiropolus over at &lt;a href="http://www.organognosi.com/export-skim-notes-according-to-their-highlight-colors/"&gt;OrganoGnosi.com&lt;/a&gt;, and then &lt;a href="http://drosophiliac.com/2012/09/creating-a-custom-url-scheme-via-applescript-and-python.html"&gt;Walton Jones at drosophiliac.com&lt;/a&gt; worked up his own version of the script. Building on their great work, I wrote a script that would export all of your Skim annotations (not just highlights) and could handle a 300+ page book in seconds (the original scripts really lagged on any PDFs with triple-digit page numbers). In &lt;a href="https://gist.github.com/smargh/63d8c8ff251068a275b8"&gt;my latest version of the script&lt;/a&gt;, I had an Applescript application that would extract all of my Skim annotations, format them into beautiful HTML, and create a new Evernote note where I had hyperlinks that would open the PDF in Skim to the exact page referenced. This script has served me well for months.&lt;/p&gt;

&lt;p&gt;This mini-history skips, however, the &lt;em&gt;coolest&lt;/em&gt; feature of this script. In &lt;a href="http://drosophiliac.com/2012/09/creating-a-custom-url-scheme-via-applescript-and-python.html"&gt;a companion piece&lt;/a&gt; to his post on his own export script, Walton Jones describes how he created a custom URL scheme to allow him to generate hyperlinks for his notes. His method relied on a combination of Applescript and Python, as well as his own rigid PDF naming conventions. This is truly amazing in my book. This allows me to engage in information extraction while retaining the ability to return information to its context. When I annotate an OCR’d PDF, I can extract what I believe to be the essential information&lt;sup id="fnref:xx"&gt;&lt;a href="#fn:xx" class="footnote"&gt;3&lt;/a&gt;&lt;/sup&gt;, then view only that information (in an Evernote note in this instance) or view that information in its original context (the PDF) by clicking a link that opens the PDF to the exact page with that content.&lt;/p&gt;

&lt;p&gt;When I got my iPad, however, I immediately came across an annoyance. One of the best features of &lt;a href="https://evernote.com/"&gt;Evernote&lt;/a&gt; is its cross-platform capabilities. So I could read my annotation summaries on my iPad, but the hyperlinks were totally useless. Since they were custom URLs that required a custom handler on the Mac, iOS doesn’t recognize them. I spent some time thinking about how I could have my hyperlinks work on iOS when I came to discover the Wild West of iOS–url schemes. While there are a crazy number of interesting things one can accomplish with URL schemes on iOS,&lt;sup id="fnref:3"&gt;&lt;a href="#fn:3" class="footnote"&gt;4&lt;/a&gt;&lt;/sup&gt; in their simplest form they function just like internet urls; they let you jump directly to a specific location.&lt;/p&gt;

&lt;p&gt;Each iOS app has to register their own URL scheme (if they do at all), which is one of the main reasons I describe this realm as the Wild West of iOS. There is often very little documentation of an app’s URL scheme (since its really primarily a “power user feature”) and there isn’t really any standardization.&lt;sup id="fnref:4"&gt;&lt;a href="#fn:4" class="footnote"&gt;5&lt;/a&gt;&lt;/sup&gt; Well, I jumped into this jungle searching for a PDF app that had a URL scheme that would allow me to jump to a specific PDF and a specific page. This was 4 months ago. Unfortunately, no such PDF application had a robust enough URL scheme. The top tier applications would allow you to open a specific PDF, but none of them would let you specify a page.&lt;sup id="fnref:5"&gt;&lt;a href="#fn:5" class="footnote"&gt;6&lt;/a&gt;&lt;/sup&gt; So, I put in a number of feature requests and waited.&lt;/p&gt;

&lt;p&gt;Finally, the folks at &lt;a href="http://smilesoftware.com/"&gt;Smile Software&lt;/a&gt; upgraded &lt;a href="https://itunes.apple.com/us/app/pdfpen-for-ipad/id490774625?mt=8"&gt;PDFPen for iPad&lt;/a&gt; as well as &lt;a href="https://itunes.apple.com/us/app/pdfpen-for-iphone/id557705455?mt=8"&gt;PDFPen for iPhone&lt;/a&gt; to include a page specific URL scheme. This has finally opened the door to a cross-platform, wiki-style PDF workflow. In order for this workflow to, well, flow, we need two components: (1) a custom URL handler for the Mac and (2) a script to export PDF annotations with this custom URL embedded in the links. Luckily for you :) I have two such things.&lt;/p&gt;

&lt;h3 id="the-url-handler"&gt;The URL Handler&lt;/h3&gt;

&lt;p&gt;The PDFPen for iPad app handles a URL scheme like this: &lt;code&gt;pdfpen:///filename.pdf?pg=2&lt;/code&gt;. There are a few things to note here. First, PDFPen does not currently have any folder system, so you will never have to deal with any other elements besides filename and page number. Second, the identifier (&lt;code&gt;pdfpen&lt;/code&gt;) is followed by a colon and then &lt;strong&gt;three&lt;/strong&gt; backslashes (&lt;code&gt;///&lt;/code&gt;), not two. In order to have these urls function on the Mac, I needed to write an Applescript URL handler. Luckily, Applescript has built into it the &lt;code&gt;on open location&lt;/code&gt; function. This allows you to script responses to clicks of URL types, essentially letting you register your own custom URL schemes with OS X.&lt;/p&gt;

&lt;p&gt;My URL handler for the PDFPen URL scheme faced one major hurdle. Since the PDFPen URL scheme only has the file name, the URL handler on the Mac needs to determine the file path of a PDF from only its filename. My solution relies on&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;saving my PDFs to a cloud folder, like Dropbox&lt;/li&gt;
  &lt;li&gt;using a shell script to get the file path of every file in that folder&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In short, the URL handler searches my synced folder, where I know the PDF resides and generates a list of all of the files in that folder (including all sub-folders). It then searches that list for the item with the filename, and thus grabs the file path of the PDF on your Mac. This works well for me, but if anyone has another suggestion, drop me a line in the comments.&lt;/p&gt;

&lt;p&gt;If you want to view my URL handler script, visit my GitHub page &lt;a href="https://gist.github.com/smargh/7064788"&gt;here&lt;/a&gt;. If you simply want to download the application, so that the .plist file is correct, and everything &lt;em&gt;just works&lt;/em&gt;, then you can &lt;a href="https://dl.dropboxusercontent.com/u/98731674/PDFPen%20URL%20Handler%20copy.zip"&gt;download it&lt;/a&gt;. Please note, however, that for the application to work “out of the box”, you need to save all of your cross-platform PDFs to your Dropbox folder on the Mac. Otherwise, the handler won’t be able to find the file path of your PDF.&lt;/p&gt;

&lt;h3 id="exporting-skim-annotations-with-the-pdfpen-url-scheme"&gt;Exporting Skim Annotations with the PDFPen URL scheme&lt;/h3&gt;

&lt;p&gt;This is the central script for the workflow. This script extracts and exports all of your Skim annotations directly to Evernote with the proper PDFPen urls embedded in the annotations. This script is all-in-one. It begins by displaying three prompts:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Where you want to save the PDF, you need to ensure that it is saved in the Folder that your url handler scours.&lt;/li&gt;
  &lt;li&gt;Input a number that relates the printed page number of the PDF to the indexed page number.&lt;sup id="fnref:6"&gt;&lt;a href="#fn:6" class="footnote"&gt;7&lt;/a&gt;&lt;/sup&gt; As the prompt directs, all you need to do is subtract the printed page number from the indexed page number. If this means that you have a negative number, simply use a &lt;code&gt;-&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Whether the current PDF is a primary text or a secondary text. Depending on your answer, the script translates your highlight colors differently.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Once you respond to these prompts, the script generally runs in about 3-5 seconds. Whenever the new Evernote note is created, the script displays a &lt;a href="http://growl.info/"&gt;Growl notification&lt;/a&gt; (if you have Growl installed).&lt;/p&gt;

&lt;p&gt;The script will export all of your Skim annotations to an Evernote notebook entitled “PDF Notes”. If such a notebook doesn’t exist, the script will create it. It will also assign two tags to the note: a “notes” tag and a “pdfpen”, both of which, if they don’t exist, will be created. As always, the script generates beautifully formatted html notes in Evernote, with clear section divisions and key information at the top. I use Skim’s text notes only for section headers, so the script will take all text notes and generate a Table of Contents at the top of the note. It also treats all yellow highlights as Summary text, and puts the Text Summary right after the ToC. All of the other annotations are grouped by type in the rest of the note. Here’s an example of an annotation summary note in Evernote:&lt;/p&gt;

&lt;p&gt;Finally, of course, the script automatically embeds the PDFPen urls into the individual annotations. Since we input the relation of the printed page number to the indexed page number, the actual Evernote note displays the printed page number, while the url will take you to the proper indexed page number.&lt;/p&gt;

&lt;p&gt;If you want to grab this script, head over to my &lt;a href="https://gist.github.com/smargh/7065110"&gt;Gist&lt;/a&gt; and save the script as an application, so you can launch it from &lt;a href="http://www.alfredapp.com/"&gt;Alfred&lt;/a&gt;, &lt;a href="http://obdev.at/products/launchbar/index.html"&gt;LaunchBar&lt;/a&gt;, or &lt;a href="http://www.apptivateapp.com/"&gt;Apptivate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For those of you who don’t have an iPad or simply prefer to have your PDFs spread about your file system, I have another version of the script that uses my own custom URL scheme which will encode the full path to the PDF&lt;sup id="fnref:zz"&gt;&lt;a href="#fn:zz" class="footnote"&gt;8&lt;/a&gt;&lt;/sup&gt;. This is actually the script that I use in my Alfred Workflow &lt;a href="http://fractaledmind.com/projects/skimmer"&gt;Skimmer&lt;/a&gt;, which is by far the simplest way to use this functionality.&lt;/p&gt;

&lt;h2 id="pdf-storage"&gt;PDF Storage&lt;/h2&gt;

&lt;p&gt;As some of my previous comments will no doubt suggest, I highly recommend that your have a clear plan for where you will store your (consistently named) PDFs. Chaos in any part of your PDF workflow will breed chaos in other places as well. Moreover, both of the versions of the annotation exporting scripts require the PDFs to be sedentary. Again, I won’t recommend where or how to store your PDFs, but I can make some suggestions on tools.&lt;/p&gt;

&lt;p&gt;Once again, &lt;a href="http://www.noodlesoft.com/hazel.php"&gt;Hazel&lt;/a&gt; will prove adept at this sort of task. You can tell it to watch certain folders (like your &lt;code&gt;/Downloads&lt;/code&gt;, &lt;code&gt;/Documents&lt;/code&gt;, and/or &lt;code&gt;/Desktop&lt;/code&gt;) for PDF files, and then have it move any PDFs put there to another location (maybe even changing the file name as it does so). Alternatively, you could opt for the big guns and use &lt;a href="http://www.devontechnologies.com/products/devonthink/overview.html"&gt;DEVONthink&lt;/a&gt;, which offers an entire app dedicated to file management, with AI, sorting, searcing, indexing, and all sorts of whiz-bang features. It’s not a cheap app, but many people&lt;sup id="fnref:yy"&gt;&lt;a href="#fn:yy" class="footnote"&gt;9&lt;/a&gt;&lt;/sup&gt; swear by its power and capabilities.&lt;/p&gt;

&lt;h2 id="conclusion"&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;PDFs can be a pain in the butt, but they are also vitally important in today’s world. So much information is still transferred via PDF. I hope that some of these tools, some of these ideas at least, can help you handle your PDFs better and with less stress.&lt;/p&gt;

&lt;p&gt;As always, if you have thoughts, questions, or suggestions, drop me a line.&lt;/p&gt;

&lt;p&gt;stephen&lt;/p&gt;

&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;The installation script has been tested on 10.9 and 10.10. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:2"&gt;
      &lt;p&gt;&lt;code&gt;tesseract&lt;/code&gt; prefers files in &lt;code&gt;.tif&lt;/code&gt; format. &lt;a href="#fnref:2" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:xx"&gt;
      &lt;p&gt;This uses highlight colors as a signal for various types of information. &lt;a href="#fnref:xx" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:3"&gt;
      &lt;p&gt;If you’re interested, check out &lt;a href="http://www.macstories.net/tag/url-scheme/"&gt;Frederico Viticci’s work&lt;/a&gt; or &lt;a href="http://www.geekswithjuniors.com/ios-url-schemes/"&gt;Eric Pramona&lt;/a&gt; &lt;a href="#fnref:3" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:4"&gt;
      &lt;p&gt;There is beginning to be some standardization thanks to the work of Greg Pierce and Marco Arment’s &lt;a href="http://x-callback-url.com/"&gt;x-callback-url specificiation&lt;/a&gt;. &lt;a href="#fnref:4" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:5"&gt;
      &lt;p&gt;&lt;a href="http://www.branchfire.com/iannotate/"&gt;iAnnotate&lt;/a&gt; uses the &lt;code&gt;iannotate://open//&lt;/code&gt; scheme. &lt;a href="https://itunes.apple.com/us/app/goodreader-for-ipad/id363448914?mt=8"&gt;GoodReader&lt;/a&gt; uses the &lt;code&gt;gropen://&lt;/code&gt; scheme. &lt;a href="https://itunes.apple.com/us/app/pdf-expert-fill-forms-annotate/id393316844?mt=8"&gt;PDF Expert&lt;/a&gt; uses the &lt;code&gt;pdfefile:///folder1/filename.pdf?cc=1&lt;/code&gt; scheme. &lt;a href="#fnref:5" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:6"&gt;
      &lt;p&gt;John Sidiropolus has a great explanation of the various ways in which printed page numbers can relate to indexed page numbers in &lt;a href="http://www.organognosi.com/latin-page-numbers-arabic-page-numbers-and-the-fifth-skim-note/"&gt;this post&lt;/a&gt;. &lt;a href="#fnref:6" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:zz"&gt;
      &lt;p&gt;Naturally, this still requires you to not move the PDF once you export the annotations. Again, having a consistent naming schema and a consistent storage plan will only help you in the long run. &lt;a href="#fnref:zz" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id="fn:yy"&gt;
      &lt;p&gt;Check out &lt;a href="http://nerdquery.com/search.php?query=devonthink&amp;amp;search=1&amp;amp;category=24&amp;amp;catid=24&amp;amp;type=and&amp;amp;results=50&amp;amp;db=0&amp;amp;prefix=0&amp;amp;media_only=0"&gt;Gabe Weatherhead’s posts&lt;/a&gt; on macdrifter.com as well as his appearance on &lt;a href="http://www.relay.fm/mpu/251"&gt;Mac Power Users&lt;/a&gt; for a clear guide and why and how DEVONthink could work within a larger workflow. &lt;a href="#fnref:yy" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry>
    <title>Spritzr</title>
    <link rel="alternate" href="http://blog.url.com/projects/spritzr/"/>
    <id>http://blog.url.com/projects/spritzr/</id>
    <published>2015-05-22T20:00:00-04:00</published>
    <updated>2017-05-01T18:52:19-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-11"&gt;Version 1.1&lt;/h4&gt;

&lt;h4 id="download-on-packalhttpwwwpackalorgworkflowspritzr"&gt;Download on &lt;a href="http://www.packal.org/workflow/spritzr"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Spritzr is a relatively simple workflow that allows you to speed-read text on your Mac using &lt;a href="http://www.spritzinc.com/the-science/"&gt;Spritz-style&lt;/a&gt; techniques. The simple idea is that one word of your input text is displayed at a time in quick enough succession that you are no longer &lt;a href="http://en.wikipedia.org/wiki/Subvocalization"&gt;Sub-Vocalizing&lt;/a&gt;, which is the largest impediment to reading at a comfortable, yet swift pace. The added layer of nuance, however, is that each word is positioned around the so-called &lt;a href="http://www.spritzinc.com/blog/"&gt;Optimal Reading Position&lt;/a&gt;. To borrow an image from the Spritz website, the difference between most electronic speedreaders and Spritz-style speedreaders is the alignment of the words:&lt;/p&gt;

&lt;p&gt;&lt;img alt="word_positioning_blog3.png" src="http://www.spritzinc.com/wp-content/uploads/2014/02/word_positioning_blog3.png" /&gt;&lt;/p&gt;

&lt;p&gt;This workflow achieves a similar affect, thus making reading simpler and faster.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTICE&lt;/strong&gt;: I wrote all of this software from scratch and have no affiliation with the Spritz company. I was inspired by other open-source projects that attempt to mirror the Spritz functionality: &lt;a href="https://github.com/Miserlou/OpenSpritz"&gt;OpenSpritz&lt;/a&gt; and &lt;a href="https://github.com/littleq0903/spritz-cmd"&gt;spritz-cmd&lt;/a&gt;, but this software has no relation to Spritz aside from appearances.&lt;/p&gt;

&lt;p&gt;Spritzr currently only has one command: &lt;code&gt;spritz&lt;/code&gt;. This takes text input which will be parsed and displayed in the Spritzr window.&lt;/p&gt;

&lt;p&gt;&lt;img alt="spritzr.png" src="https://www.evernote.com/shard/s41/sh/288af1c4-bed2-4dfc-ab5f-391ee6c39b32/606b76b31d8c6fbbb4558f38d505cfe5/deep/0/spritzr.png" /&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can pass text files (&lt;code&gt;.txt&lt;/code&gt;, &lt;code&gt;.md&lt;/code&gt;, &lt;code&gt;.mmd&lt;/code&gt;) into Spritzr using the File Action &lt;code&gt;File Spritzr&lt;/code&gt;. This will parse and display the text content of that file in the Spritzr window.&lt;/p&gt;

&lt;p&gt;&lt;img alt="spritzr_file.png" src="https://www.evernote.com/shard/s41/sh/0da5e015-ca7c-461a-bdb4-675b69ae26ea/15682e931bf8c6daf2fcad14f9b200eb/deep/0/spritzr_file.png" /&gt;&lt;/p&gt;

&lt;p&gt;There are two settings, which can be changed using the &lt;code&gt;spritzr:set&lt;/code&gt; keyword:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Words per Minute&lt;/li&gt;
  &lt;li&gt;Reading Mode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you which to change your wpm, simply invoke &lt;code&gt;spritzr:set&lt;/code&gt; and input an integer (the default is 250). If you which to change the reading mode, invoke &lt;code&gt;spritzr:set&lt;/code&gt; and input either &lt;code&gt;dark&lt;/code&gt; or &lt;code&gt;light&lt;/code&gt; (the default is &lt;code&gt;light&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Dark Mode: &lt;img alt="spritzr_dark.png" src="https://www.evernote.com/shard/s41/sh/a620b423-7a24-49b8-86e1-6a6088304b0b/5605e456e9e00a944a2d52609b360222/deep/0/spritzr_dark.png" /&gt;&lt;/p&gt;

&lt;p&gt;Light Mode: &lt;img alt="spritzr_light.png" src="https://www.evernote.com/shard/s41/sh/95a765b1-b622-4a27-911e-5b7d2e6b5a40/f3b77ee67f52cd3afa44dec5656ee4dc/deep/0/spritzr_light.png" /&gt;&lt;/p&gt;

&lt;p&gt;Other than that, you can just start spritzing!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Reboot</title>
    <link rel="alternate" href="http://blog.url.com/projects/reboot/"/>
    <id>http://blog.url.com/projects/reboot/</id>
    <published>2015-05-22T20:00:00-04:00</published>
    <updated>2017-05-01T18:52:08-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;This is my personal fork of &lt;a href="https://github.com/MatthewMueller/dots"&gt;Matthew Mueller’s &lt;code&gt;dots&lt;/code&gt; repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;

&lt;p&gt;One-liner:&lt;/p&gt;

&lt;div class="highlight shell"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="o"&gt;(&lt;/span&gt;mkdir -p /tmp/dots &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;cd&lt;/span&gt; /tmp/dots &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; curl -L https://github.com/smargh/reboot/archive/master.tar.gz | tar zx --strip 1 &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sh ./install.sh&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h3 id="design"&gt;Design&lt;/h3&gt;

&lt;p&gt;The goal of reboot is to automate the process of getting your operating system from a stock build to a fully functional machine.&lt;/p&gt;

&lt;p&gt;Reboot should be the first thing you download and run to get your computer set up.&lt;/p&gt;

&lt;p&gt;This library tries to be organized like a &lt;code&gt;node&lt;/code&gt; application, while working within the constraints of &lt;code&gt;bash&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id="mac-os-x"&gt;Mac OS X&lt;/h4&gt;

&lt;p&gt;The OS X build does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;install &lt;code&gt;homebrew&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;installs binaries (&lt;code&gt;graphicsmagick&lt;/code&gt;, &lt;code&gt;python&lt;/code&gt;, &lt;code&gt;sshfs&lt;/code&gt;, &lt;code&gt;ack&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, etc.)&lt;/li&gt;
  &lt;li&gt;sets OS X defaults&lt;/li&gt;
  &lt;li&gt;installs applications via &lt;code&gt;homebrew-cask&lt;/code&gt; (one-password, sublime-text, virtualbox, nv-alt, iterm2, etc.)&lt;/li&gt;
  &lt;li&gt;sets up the &lt;code&gt;~/.bash_profile&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;handle custom icons for applications&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id="credits"&gt;Credits&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Original project by &lt;a href="https://github.com/MatthewMueller/"&gt;Matthew Mueller&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>BibQuery</title>
    <link rel="alternate" href="http://blog.url.com/projects/bibquery/"/>
    <id>http://blog.url.com/projects/bibquery/</id>
    <published>2015-05-22T20:00:00-04:00</published>
    <updated>2017-05-01T18:51:17-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h4 id="version-101"&gt;Version: 1.0.1&lt;/h4&gt;

&lt;h4 id="download-from-packalhttpwwwpackalorgworkflowbibquery"&gt;Download from &lt;a href="http://www.packal.org/workflow/bibquery"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;BibQuery is essentially a visual clone of &lt;a href="http://fractaledmind.com/projects/zotquery/"&gt;ZotQuery&lt;/a&gt; for the Mac app &lt;a href="http://bibdesk.sourceforge.net/"&gt;BibDesk&lt;/a&gt;, which is a citation manager for &lt;a href="http://www.bibtex.org/"&gt;BibTeX&lt;/a&gt;. Users of BibDesk can now enjoy the clean search interface found in ZotQuery, with clear icons for publication type and clean presentation of publication data.&lt;/p&gt;

&lt;p&gt;&lt;img alt="bibquery.png" src="https://www.evernote.com/shard/s41/sh/e354f593-a127-47e9-8ec3-212124341231/39f92d48e93282af26881d5cc0e95e97/deep/0/bibquery.png" /&gt;&lt;/p&gt;

&lt;p&gt;Users can also search their &lt;code&gt;.bib&lt;/code&gt; databases with the same variety of queries:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;general (keywords: &lt;code&gt;bib&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;titles (keywords: &lt;code&gt;bib:t&lt;/code&gt; or &lt;code&gt;bt&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;creators (keywords: &lt;code&gt;bib:a&lt;/code&gt; or &lt;code&gt;ba&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;in-keyword (keywords: &lt;code&gt;bib:nk&lt;/code&gt; or &lt;code&gt;bnk&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;in-group (keywords: &lt;code&gt;bib:ng&lt;/code&gt; or &lt;code&gt;bng&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;for keyword (keywords: &lt;code&gt;bib:k&lt;/code&gt; or &lt;code&gt;bk&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;for group (keywords: &lt;code&gt;bib:g&lt;/code&gt; or &lt;code&gt;bg&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also of note, BibQuery works &lt;em&gt;without&lt;/em&gt; BibDesk being open and even functions if you have multiple &lt;code&gt;.bib&lt;/code&gt; databases that BibDesk manages. In short, BibQuery brings all of your citations to you.&lt;/p&gt;

&lt;p&gt;Once you find the item you’re looking for, BibQuery currently has 3 possible actions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;you can open up BibDesk to that item (simply press &lt;code&gt;return&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;you can copy a LaTeX cite command for that item (simply press &lt;code&gt;control+return&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;you can open that item’s PDF attachment, if it has one (simply press &lt;code&gt;shift+return&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Classical Studies Resources</title>
    <link rel="alternate" href="http://blog.url.com/projects/classical-studies-resources/"/>
    <id>http://blog.url.com/projects/classical-studies-resources/</id>
    <published>2015-05-22T20:00:00-04:00</published>
    <updated>2016-12-17T23:13:04-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;This is a work-in-progress collection of structured data and scripts for Classical Studies/Classics.&lt;/p&gt;

&lt;p&gt;The data has been compiled and organized from various online resources including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the &lt;a href="http://www.perseus.tufts.edu/"&gt;Perseus Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://dcc.dickinson.edu/"&gt;Dickenson College Commentaries&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://dge.cchs.csic.es/index.en"&gt;The Diccionario Griego-Español Project&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://www.annee-philologique.com/"&gt;L’Année philologique&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a work-in-progress collection of structured data and scripts for Classical Studies/Classics. The data has been compiled and organized from various online resources including the Perseus Project, Dickenson College Commentaries, The Diccionario Griego-Español Project, and L’Année philologique.&lt;/p&gt;

&lt;p&gt;Currently, these are the JSON structured files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DCC Greek Core Vocabulary&lt;/li&gt;
  &lt;li&gt;DCC Latin Core Vocabulary&lt;/li&gt;
  &lt;li&gt;Greek Authors&lt;/li&gt;
  &lt;li&gt;Greek Texts&lt;/li&gt;
  &lt;li&gt;Latin Texts&lt;/li&gt;
  &lt;li&gt;L’Année philologique Journal Abbreviations (in two forms)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are also plain text files:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DGE Authors and Works&lt;/li&gt;
  &lt;li&gt;DGE Dictionary Abbreviations&lt;/li&gt;
  &lt;li&gt;Index to Smyth’s Greek Grammar&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, there is a random collection of scripts (mostly compiled Applescripts) that I have made at various points for various uses. This section requires much cleaning up, refactoring, and organization at this stage. But I am putting them here for now nonetheless.&lt;/p&gt;

&lt;p&gt;Hopefully, these will find some use for others.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>LibGen</title>
    <link rel="alternate" href="http://blog.url.com/projects/libgen/"/>
    <id>http://blog.url.com/projects/libgen/</id>
    <published>2015-05-22T20:00:00-04:00</published>
    <updated>2017-05-01T18:51:40-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;Seach the &lt;a href="http://libgen.in/"&gt;Library Genesis&lt;/a&gt; project's catalogue of books and download right from your keyboard, without ever launching a browser.&lt;/p&gt;

&lt;h4 id="version-11"&gt;Version 1.1&lt;/h4&gt;

&lt;h4 id="download-from-packalhttpwwwpackalorgworkflowlibgen"&gt;Download from &lt;a href="http://www.packal.org/workflow/libgen"&gt;Packal&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This is a relatively simple workflow that allows users to search the &lt;a href="http://gen.lib.rus.ec/"&gt;Library Genesis PDF repository&lt;/a&gt;. For those who do not know, the Library Genesis project is:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;based in Russia, this is the largest currently openly available collection. They have several initiatives: i. +1 million files of mainly non-fiction ebooks, ii. +900k of mainly fiction ebooks, iii. +20 million papers from journals of science, history, art etc., iv. comics, magazines and paintings; totally amounting to at least 30 TB – easily the Library of Congress of the digital world. The Libgen movement mainly focusses on downloading whole collections that have already been posted in fora or as torrents, although a significant portion is also due to individual efforts. (per &lt;a href="https://sites.google.com/site/themetalibrary/library-genesis"&gt;Google Sites&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This workflow has only one keyword and one action. Use the keyword &lt;code&gt;libgen&lt;/code&gt; to begin a search. Select an item and press &lt;code&gt;Return&lt;/code&gt; to begin a download of the file in your browser of choice. The only real oddity of this workflow is that it requires the user to type a period (&lt;code&gt;.&lt;/code&gt;) after the query in order to initiate the search. This helps with performance.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Metadata</title>
    <link rel="alternate" href="http://blog.url.com/projects/metadata/"/>
    <id>http://blog.url.com/projects/metadata/</id>
    <published>2015-05-22T20:00:00-04:00</published>
    <updated>2017-05-01T18:51:50-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;Python wrapper for OS X &lt;code&gt;mdfind&lt;/code&gt; and &lt;code&gt;mdls&lt;/code&gt;&lt;/p&gt;

&lt;h3 id="installation"&gt;Installation&lt;/h3&gt;

&lt;p&gt;Download the &lt;code&gt;.zip&lt;/code&gt; file from GitHub.&lt;/p&gt;

&lt;p&gt;I’m working on getting the library on &lt;a href="https://pypi.python.org/pypi"&gt;PyPi&lt;/a&gt; soon.&lt;/p&gt;

&lt;h3 id="file-metadata-query-expression-syntax"&gt;File Metadata Query Expression Syntax&lt;/h3&gt;

&lt;p&gt;I have modeled the Python syntax on &lt;a href="https://developer.apple.com/library/mac/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html"&gt;Apple’s original Spotlight query syntax&lt;/a&gt;. File metadata queries are constructed using a simple query language that takes advantage of Python’s flexible class construction. The syntax is relatively straightforward, including comparisons, language agnostic options, and time and date variables.&lt;/p&gt;

&lt;h4 id="comparison-syntax"&gt;Comparison Syntax&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;metadata&lt;/code&gt; library implements 3 custom classes (&lt;code&gt;MDAttribute&lt;/code&gt;, &lt;code&gt;MDComparison&lt;/code&gt;, and &lt;code&gt;MDExpression&lt;/code&gt;) to represent the various units of &lt;code&gt;mdfind&lt;/code&gt;’s &lt;a href="https://developer.apple.com/library/mac/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html"&gt;Query Expression Syntax&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Query comparisons have the following basic format:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[attribute] [operator] [value]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The following sub-sections will describe these 3 elements more fully, but any such comparison will generate a &lt;code&gt;MDComparison&lt;/code&gt; object. If you ever want to see what a particular &lt;code&gt;MDComparison&lt;/code&gt; object will look like as an query string, you can coerce it into a unicode string using the &lt;code&gt;unicode()&lt;/code&gt; operation (or into a string using the &lt;code&gt;str()&lt;/code&gt; operation).&lt;/p&gt;

&lt;h4 id="attribute"&gt;Attribute&lt;/h4&gt;

&lt;p&gt;The first element of a query comparison is the &lt;em&gt;attribute&lt;/em&gt;, which is a &lt;code&gt;MDAttribute&lt;/code&gt; object in &lt;code&gt;metadata&lt;/code&gt;. &lt;code&gt;metadata&lt;/code&gt; automatically generates &lt;code&gt;MDAttribute&lt;/code&gt; objects for every Spotlight attribute on your system. You can view the names of all of these objects via &lt;code&gt;metadata.attributes&lt;/code&gt; variable. Attributes have a Pythonic naming scheme, so &lt;code&gt;kMDItemFSName&lt;/code&gt; becomes &lt;code&gt;metadata.name&lt;/code&gt; and &lt;code&gt;kMDItemContentType&lt;/code&gt; becomes &lt;code&gt;metadata.content_type&lt;/code&gt;. The &lt;code&gt;MDAttribute&lt;/code&gt; class is built on top of the metadata information retrieved from &lt;code&gt;mdimport -A&lt;/code&gt;. If you wish to see all of the information for a metadata attributes, you can use the &lt;code&gt;metadata.[attribute].info()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;As with all of the custom classes, you can coerce a &lt;code&gt;MDAttribute&lt;/code&gt; object into a unicode string using the &lt;code&gt;unicode()&lt;/code&gt; operation (i.e. &lt;code&gt;unicode(metadata.name)&lt;/code&gt; returns &lt;code&gt;u'kMDItemFSName'&lt;/code&gt;).&lt;/p&gt;

&lt;h4 id="operator"&gt;Operator&lt;/h4&gt;

&lt;p&gt;The &lt;em&gt;operator&lt;/em&gt; can be any one of the following:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;Operator&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;equal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;not equal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;less than (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;greater than (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;less than or equal (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;greater than or equal (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;in_range(attribute, min_value, max_value)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;numeric values within the range of min_value through max_value in the specified attribute&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt; operators allow for modification. These modifiers specify how the comparison is made.&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Modifier&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;metadata.[object].ignore_case&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The comparison is case insensitive.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;metadata.[object].ignore_diacritics&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;The comparison is insensitive to diacritical marks.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Both modifiers are on by default. In order to turn one off, you need to set the property to &lt;code&gt;False&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;metadata&lt;/span&gt;

&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ignore_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;comparison&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'com.adobe.pdf'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h4 id="value"&gt;Value&lt;/h4&gt;

&lt;p&gt;The &lt;em&gt;value&lt;/em&gt; element of a query comparison can be a string or integer. Strings can use wildcard characters (&lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;) to make the search fuzzy. The &lt;code&gt;*&lt;/code&gt; character matches multiple characters whereas the &lt;code&gt;?&lt;/code&gt; wildcard character matches a single character (&lt;em&gt;Note&lt;/em&gt;: Even in the Terminal, I cannot get wildcard searches with &lt;code&gt;?&lt;/code&gt; to function properly. I would recommend using &lt;code&gt;*&lt;/code&gt; as your ony wildcard character). Here are some examples demonstrating how the wildcards function:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Matches attribute values that begin with “paris”. For example, matches “paris”, but not “comparison”.&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_content&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"paris*"&lt;/span&gt;

&lt;span class="c"&gt;# Matches attribute values that end with “paris”.&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_content&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"*paris"&lt;/span&gt;

&lt;span class="c"&gt;# Matches attributes that contain "paris" anywhere within the value. For example, matches “paris” and “comparison”.&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_content&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"*paris*"&lt;/span&gt;

&lt;span class="c"&gt;# Matches attribute values that are exactly equal to “paris”.&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_content&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"paris"&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;In order to use any of the greater-than or less-than operators, your value needs either to be an integer (or float) or a date object. In order to make the API as intuitive as possible, &lt;code&gt;metadata&lt;/code&gt; allows for human-readable date statements. That is, you do not need to pass &lt;code&gt;datetime&lt;/code&gt; objects as the &lt;em&gt;value&lt;/em&gt; of a comparison with a date attribute (like &lt;code&gt;metadata.creation_date&lt;/code&gt;). &lt;code&gt;metadata&lt;/code&gt; uses the &lt;code&gt;parsedatetime&lt;/code&gt; library to convert human-readable dates into &lt;code&gt;datetime&lt;/code&gt; objects. The following are all acceptable date comparisons:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Created before today&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;creation_date&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;'today'&lt;/span&gt;

&lt;span class="c"&gt;# Created after last month&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;creation_date&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;'one month ago'&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;If &lt;code&gt;metadata&lt;/code&gt; cannot parse your datetime string, it will raise an &lt;code&gt;Exception&lt;/code&gt;. The parsing engine is good, but not perfect and can seem capricious. For example, &lt;code&gt;one month ago&lt;/code&gt; is parsable, but &lt;code&gt;a month ago&lt;/code&gt; is not. Datetime strings that are parsed are converted into an ISO-8601-STR compliant string.&lt;/p&gt;

&lt;h3 id="expression-syntax"&gt;Expression syntax&lt;/h3&gt;

&lt;p&gt;You can combine &lt;code&gt;MDComparison&lt;/code&gt; objects to create a more complex expression, represented by the &lt;code&gt;MDExpression&lt;/code&gt; class. Comparison objects can be combined in one of two ways: using a conjuction (&lt;code&gt;&amp;amp;&lt;/code&gt;) or using a disjuction (&lt;code&gt;|&lt;/code&gt;). Not only can &lt;code&gt;MDComparison&lt;/code&gt; objects be combined, but you can nest and combine any combination of &lt;code&gt;MDComparison&lt;/code&gt; objects and &lt;code&gt;MDExpression&lt;/code&gt; objects. For example:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
10
11
12
13&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="c"&gt;# query for audio files authored by “stephen” (ignoring case)&lt;/span&gt;
&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"stephen"&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.audio"&lt;/span&gt;

&lt;span class="c"&gt;# query for audio files authored by “stephen” or “daniel”&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"daniel"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"stephen"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.audio"&lt;/span&gt;

&lt;span class="c"&gt;# query for audio or video files authored by “stephen” or “daniel”&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"daniel"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"stephen"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.audio"&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.video"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# you could also break the last expression into chunks&lt;/span&gt;
&lt;span class="n"&gt;author_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"daniel"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"stephen"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;type_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.audio"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.video"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;final_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author_exp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;type_exp&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;p&gt;Here’s a complex expression to find only audio or video files that have been changed in the last week authored by someone named either “Stephen” or “Daniel” (ignoring case and diacritics, so it would match a file authored by “danièl”):&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;author_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"daniel"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"stephen"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;type_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.audio"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.video"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time_comp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_change_date&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'one week ago'&lt;/span&gt;
&lt;span class="n"&gt;query_expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author_exp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;type_exp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;time_comp&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: parentheses are needed for the first two expressions. Without them, you would get a &lt;code&gt;TypeError&lt;/code&gt; as Python thinks you are trying to combine the string &lt;code&gt;"daniel"&lt;/code&gt; with the &lt;code&gt;MDAttribute&lt;/code&gt; object &lt;code&gt;authors&lt;/code&gt;, which is an obviously unsupported expression.&lt;/p&gt;

&lt;p&gt;Once you have created your query expression (or even a simple comarison), you will pass this to &lt;code&gt;metadata.find()&lt;/code&gt; in order to execute the file searching.&lt;/p&gt;

&lt;h2 id="functions"&gt;Functions&lt;/h2&gt;

&lt;h3 id="find"&gt;&lt;code&gt;find&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The main function is &lt;code&gt;metadata.find()&lt;/code&gt;. It takes one required argument, &lt;code&gt;query_expression&lt;/code&gt;, which can be either an &lt;code&gt;MDExpression&lt;/code&gt; object or an &lt;code&gt;MDComparison&lt;/code&gt; object. In addition to this one required argument, &lt;code&gt;metadata.find()&lt;/code&gt; also has the optional argument &lt;code&gt;only_in&lt;/code&gt; for you to focus the scope of your search to a particular directory tree. This simply needs to be a full (non-relative) path passed as a Unicode string. Other than that, there’s nothing else to it. Build you query expression, pass it to &lt;code&gt;find()&lt;/code&gt; and get your results as a Python list. Here’s an example of building the sample expression above and passing it to &lt;code&gt;metadata.find()&lt;/code&gt;:&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;metadata&lt;/span&gt;

&lt;span class="n"&gt;author_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"daniel"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"stephen"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;type_exp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.audio"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_type&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"public.video"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;time_comp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content_change_date&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'one week ago'&lt;/span&gt;
&lt;span class="n"&gt;query_expression&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author_exp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;type_exp&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;time_comp&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query_expression&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h3 id="list"&gt;&lt;code&gt;list&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;In addition to &lt;code&gt;find()&lt;/code&gt;, the &lt;code&gt;metadata&lt;/code&gt; module has the &lt;code&gt;list&lt;/code&gt; function, which is a wrapper around the &lt;code&gt;mdls&lt;/code&gt; command. You simply pass it a file path and it returns a dictionary of metadata attributes and values. Once again, the attribute names (the dictionary keys) are simplified using the algorithm used to convert Spotlight attributes to Pythonic names.&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;metadata&lt;/span&gt;

&lt;span class="n"&gt;file_metadata&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_path&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file_metadata&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;h3 id="write"&gt;&lt;code&gt;write&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Finally, there is an alpha version of a &lt;code&gt;write()&lt;/code&gt; function, which allows you to write metadata to a file. Right now, I have it defaulted to writing to the &lt;code&gt;kMDItemUserTags&lt;/code&gt; attribute, but a few others have worked. I need to test it more to make it more general.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Pandoc Templates</title>
    <link rel="alternate" href="http://blog.url.com/projects/pandoc-templates/"/>
    <id>http://blog.url.com/projects/pandoc-templates/</id>
    <published>2015-05-20T20:00:00-04:00</published>
    <updated>2016-12-02T22:18:33-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;h2 id="description"&gt;Description&lt;/h2&gt;

&lt;p&gt;A collection of support files for use with &lt;a href="http://johnmacfarlane.net/pandoc/"&gt;Pandoc&lt;/a&gt;, and specifically for helping to turn pandoc markdown files
into nice HTML, LaTeX, PDF, and Microsoft Word Document output. These files go in your &lt;code&gt;~/.pandoc/&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2 id="installation"&gt;Installation&lt;/h2&gt;

&lt;p&gt;To install, simply run this command from your Terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;python
git clone https://github.com/smargh/pandoc-templates.git ~/.pandoc
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will clone this repositorty into the appropriate Pandoc templates directory.&lt;/p&gt;

&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;

&lt;p&gt;What’s included?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Under &lt;code&gt;templates&lt;/code&gt;, some &lt;a href="http://johnmacfarlane.net/pandoc/"&gt;Pandoc&lt;/a&gt; templates for an article in PDF (via LaTeX) or HTML. These can be be pointed to directly with the &lt;code&gt;--template=&lt;/code&gt; switch as appropriate. The &lt;code&gt;html.template&lt;/code&gt;, &lt;code&gt;latex.template&lt;/code&gt;, and &lt;code&gt;xelatex.template&lt;/code&gt; files are all forked from KJ Healy’s &lt;a href="https://github.com/kjhealy/pandoc-templates"&gt;&lt;code&gt;pandoc-templates repo&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;reference.docx&lt;/code&gt; file, however, is of my own creation. It can be used via the &lt;code&gt;--reference-docx&lt;/code&gt; pandoc option. The &lt;code&gt;.docx&lt;/code&gt; template uses &lt;a href="http://www.typography.com/fonts/hoefler-text/overview/"&gt;Hoefler Text&lt;/a&gt; as its font. It is double spaced, with small caps headers and 1” indented, single-line block quotes. It works well for academic papers. The &lt;code&gt;latex.template&lt;/code&gt; and &lt;code&gt;xelatex.template&lt;/code&gt; depend on the style files in &lt;a href="http://kjhealy.github.com/latex-custom-kjh/"&gt;latex-custom-kjh&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Under &lt;code&gt;marked&lt;/code&gt;, a single CSS file for generating HTML previews of Markdown documents using &lt;a href="http://marked2app.com/"&gt;Marked&lt;/a&gt;, a very handy HTML live previewer for markdown files. The &lt;code&gt;css&lt;/code&gt; file in the &lt;code&gt;marked/&lt;/code&gt; folder is meant to be used together with pandoc and &lt;a href="http://markedapp.com/"&gt;Marked&lt;/a&gt;. To have &lt;a href="http://marked2app.com/"&gt;Marked&lt;/a&gt; work with &lt;a href="http://johnmacfarlane.net/pandoc/"&gt;Pandoc&lt;/a&gt;, simply go to Marked &amp;gt; Preferences &amp;gt; Advanced. Then specify the filepath to Pandoc like this (e.g.): &lt;code&gt;/usr/bin/pandoc&lt;/code&gt; and the various switches and arguments to pandoc in the ‘Args’ field below it, like this:
  &lt;code&gt;shell
  -r markdown -w html -s -S --bibliography=biblio.bib
 &lt;/code&gt;
Then check the box telling Marked to use this by default. The &lt;code&gt;pandoc&lt;/code&gt; CSS file can be added in Marked &amp;gt; Style &amp;gt; Custom CSS. Marked can then use it to format the HTML output such that it looks like the final &lt;code&gt;.docx&lt;/code&gt; file will.&lt;/li&gt;
  &lt;li&gt;The CSL files in the &lt;code&gt;csl/&lt;/code&gt; folder format the bibliography generated by pandoc and citeproc. (For simplicity we avoid dealing with biblatex directly at all.) The &lt;code&gt;chicago-syllabus.csl&lt;/code&gt; file makes a tiny change to a standard Chicago Notes CSL file so you can use it to output citation information in the body text of a document. This makes it useful for lists of references in CVs and course syllabuses. The other files are the APA, MLA, and Chicago standard files from the main &lt;a href="https://github.com/citation-style-language/styles"&gt;CSL styles repository&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Under &lt;code&gt;defaults&lt;/code&gt;, you will find all of Pandoc’s standard templates for the many of its output formats. These can be helpful in creating your own templates.&lt;/li&gt;
  &lt;li&gt;Finally, under &lt;code&gt;examples&lt;/code&gt;, you will find one plain text Markdown file, one BibTeX &lt;code&gt;.bib&lt;/code&gt; file and a &lt;code&gt;.docx&lt;/code&gt; file. These demonstrate how these templates can be used to generate a beautiful Microsoft Word file from Pandoc. To generate the files for youself, use this pandoc command:
  &lt;code&gt;shell
  -r markdown -w docx -s -S --bibliography=Thesis.bib --csl=/Users/smargheim/Documents/GitHub/pandoc-templates/csl/chicago-author-date.csl --reference-docx=/Users/smargheim/Documents/GitHub/pandoc-templates/templates/reference.docx academic_test.txt --output=academic_test.docx
 &lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title>Plato’s Fractal Line</title>
    <link rel="alternate" href="http://blog.url.com/essays/platos-fractal-line/"/>
    <id>http://blog.url.com/essays/platos-fractal-line/</id>
    <published>2014-10-13T20:00:00-04:00</published>
    <updated>2017-05-03T00:16:31-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Aristotle on Secondary Substance</title>
    <link rel="alternate" href="http://blog.url.com/essays/aristotle-on-secondary-substances/"/>
    <id>http://blog.url.com/essays/aristotle-on-secondary-substances/</id>
    <published>2014-07-02T20:00:00-04:00</published>
    <updated>2017-05-03T00:15:46-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Aemulatio and Epicurean Semiosis at *Georgics* 1.415-23</title>
    <link rel="alternate" href="http://blog.url.com/essays/aemulatio-and-epicurian-semiosis-at-georgics-1-415-23/"/>
    <id>http://blog.url.com/essays/aemulatio-and-epicurian-semiosis-at-georgics-1-415-23/</id>
    <published>2013-05-06T20:00:00-04:00</published>
    <updated>2017-05-03T00:15:32-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>*Airs, Waters, Places* in Context</title>
    <link rel="alternate" href="http://blog.url.com/essays/theory-and-the-language-of-proof-in-awp/"/>
    <id>http://blog.url.com/essays/theory-and-the-language-of-proof-in-awp/</id>
    <published>2013-04-30T20:00:00-04:00</published>
    <updated>2017-05-03T00:16:41-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>What Epicurean Friendship is Not</title>
    <link rel="alternate" href="http://blog.url.com/essays/what-epicurean-friendship-is-not/"/>
    <id>http://blog.url.com/essays/what-epicurean-friendship-is-not/</id>
    <published>2013-04-25T20:00:00-04:00</published>
    <updated>2017-05-03T00:16:44-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Banking on Friendship</title>
    <link rel="alternate" href="http://blog.url.com/essays/banking-on-friendship/"/>
    <id>http://blog.url.com/essays/banking-on-friendship/</id>
    <published>2013-01-03T19:00:00-05:00</published>
    <updated>2017-05-03T00:15:52-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Saussurean Delimitation and Plato’s *Cratylus*</title>
    <link rel="alternate" href="http://blog.url.com/essays/saussurean-delimitation-and-platos-cratylus/"/>
    <id>http://blog.url.com/essays/saussurean-delimitation-and-platos-cratylus/</id>
    <published>2012-10-07T20:00:00-04:00</published>
    <updated>2017-05-03T00:17:28-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Barfield Contra Lewis on Truth and Imagination</title>
    <link rel="alternate" href="http://blog.url.com/essays/barfield-contra-lewis-on-truth-and-imagination/"/>
    <id>http://blog.url.com/essays/barfield-contra-lewis-on-truth-and-imagination/</id>
    <published>2012-09-06T20:00:00-04:00</published>
    <updated>2017-05-03T00:17:25-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>Socrates and Reader</title>
    <link rel="alternate" href="http://blog.url.com/essays/socrates-and-reader/"/>
    <id>http://blog.url.com/essays/socrates-and-reader/</id>
    <published>2012-09-06T20:00:00-04:00</published>
    <updated>2017-05-03T00:16:38-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html"></content>
  </entry>
  <entry>
    <title>I have come to fret the night, the simple silence that it offers.</title>
    <link rel="alternate" href="http://blog.url.com/jots/201602142233/"/>
    <id>http://blog.url.com/jots/201602142233/</id>
    <published>2012-02-14T17:33:00-05:00</published>
    <updated>2016-12-17T22:44:21-05:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">
</content>
  </entry>
  <entry>
    <title>Example *Article*</title>
    <link rel="alternate" href="http://blog.url.com/articles/example-article/"/>
    <id>http://blog.url.com/articles/example-article/</id>
    <published>2011-12-31T19:00:00-05:00</published>
    <updated>2017-05-01T20:08:42-04:00</updated>
    <author>
      <name>Stephen Margheim</name>
    </author>
    <content type="html">&lt;p&gt;This is an example article. It contains a wide range of various content to demonstrate how this blog styles such content. For example, this is some text with a footnote.&lt;sup id="fnref:1"&gt;&lt;a href="#fn:1" class="footnote"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;{{read more}}&lt;/p&gt;

&lt;p&gt;This is a way to determine the number of characters per line in the various layouts:&lt;/p&gt;

&lt;p&gt;0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789&lt;/p&gt;

&lt;script type="math/tex; mode=display"&gt;\sum_{n=1}^{\infty} \frac{1}{n}&lt;/script&gt;

&lt;p&gt;This text is &lt;em&gt;italic&lt;/em&gt;, while this is &lt;strong&gt;bold&lt;/strong&gt;, and this is a &lt;a href="smargh.github.io"&gt;link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For code, you have two types:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;inline code&lt;/code&gt;&lt;/p&gt;

&lt;div class="highlight python"&gt;&lt;table style="border-spacing: 0"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="gutter gl" style="text-align: right"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5&lt;/pre&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;list_comp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is an example block quote. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo. Quisque sit amet est et sapien ullamcorper pharetra. Vestibulum erat wisi, condimentum sed, commodo vitae, ornare sit amet, wisi. Aenean fermentum, elit eget tincidunt condimentum, eros ipsum rutrum orci, sagittis tempus lacus enim ac dui. Donec non enim in turpis pulvinar facilisis. Ut felis. Praesent dapibus, neque id cursus faucibus, tortor neque egestas augue, eu vulputate magna eros eu erat. Aliquam erat volutpat. Nam dui mi, tincidunt quis, accumsan porttitor, facilisis luctus, metus&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id="h1"&gt;H1&lt;/h1&gt;

&lt;h2 id="h2"&gt;H2&lt;/h2&gt;

&lt;h3 id="h3"&gt;H3&lt;/h3&gt;

&lt;h4 id="h4"&gt;H4&lt;/h4&gt;

&lt;h5 id="h5"&gt;H5&lt;/h5&gt;

&lt;p&gt;&lt;img alt="fractal" src="images/fractal.svg" /&gt;&lt;/p&gt;

&lt;p&gt;For example, a list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Item number one&lt;/li&gt;
  &lt;li&gt;Item number two
    &lt;ul&gt;
      &lt;li&gt;A nested item&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;A final item&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or with numbers!&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Remember to buy some milk&lt;/li&gt;
  &lt;li&gt;Drink the milk&lt;/li&gt;
  &lt;li&gt;Tweet that I remembered to buy the milk, and drank it&lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;p&gt;This is a sample table:&lt;/p&gt;

&lt;table class="tables"&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style="text-align: center"&gt;Operator&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;==&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;equal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;!=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;not equal&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;less than (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;greater than (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;less than or equal (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;greater than or equal (available for numeric values and dates only)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style="text-align: center"&gt;&lt;code&gt;in_range(attribute, min_value, max_value)&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;numeric values within the range of min_value through max_value in the specified attribute&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;fin.&lt;/p&gt;
&lt;div class="footnotes"&gt;
  &lt;ol&gt;
    &lt;li id="fn:1"&gt;
      &lt;p&gt;This is a footnote for my &lt;code&gt;Example Article&lt;/code&gt;. &lt;a href="#fnref:1" class="reversefootnote"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>
